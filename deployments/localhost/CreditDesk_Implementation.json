{
  "address": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditLine",
          "type": "address"
        }
      ],
      "name": "CreditLineCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditLine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "drawdownAmount",
          "type": "uint256"
        }
      ],
      "name": "DrawdownMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underwriter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "GovernanceUpdatedUnderwriterLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditLine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditLine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLOCKS_PER_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditLineAddress",
          "type": "address"
        }
      ],
      "name": "assessCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paymentPeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_termInDays",
          "type": "uint256"
        }
      ],
      "name": "createCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creditLineAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressToSendTo",
          "type": "address"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        }
      ],
      "name": "getBorrowerCreditLines",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underwriterAddress",
          "type": "address"
        }
      ],
      "name": "getUnderwriterCreditLines",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract GoldfinchConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditLineAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underwriterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "setUnderwriterGovernanceLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLoansOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWritedowns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "underwriters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "governanceLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x606f3d533e085d8a4378d27e94f6e0b5171ca8c5dcc09c30144a1825e354c52a",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
    "transactionIndex": 0,
    "gasUsed": "3562171",
    "logsBloom": "0x
    "blockHash": "0x980f9972596f243ad6a517ab4b2f0cc1b084c0853e453f442e557d9e50b86d85",
    "transactionHash": "0x606f3d533e085d8a4378d27e94f6e0b5171ca8c5dcc09c30144a1825e354c52a",
    "logs": [],
    "blockNumber": 28,
    "cumulativeGasUsed": "3562171",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f035dfdd6f284f8e92c5122fe6dc3e4d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditLine\",\"type\":\"address\"}],\"name\":\"CreditLineCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditLine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drawdownAmount\",\"type\":\"uint256\"}],\"name\":\"DrawdownMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"GovernanceUpdatedUnderwriterLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditLine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditLine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditLineAddress\",\"type\":\"address\"}],\"name\":\"assessCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termInDays\",\"type\":\"uint256\"}],\"name\":\"createCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditLineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressToSendTo\",\"type\":\"address\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"}],\"name\":\"getBorrowerCreditLines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underwriterAddress\",\"type\":\"address\"}],\"name\":\"getUnderwriterCreditLines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditLineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underwriterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setUnderwriterGovernanceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoansOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWritedowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underwriters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"governanceLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Goldfinch\",\"methods\":{\"assessCreditLine(address)\":{\"params\":{\"creditLineAddress\":\"The creditline that should be assessed.\"}},\"createCreditLine(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_borrower\":\"The borrower for whom the CreditLine will be created\",\"_interestApr\":\"The interest amount, on an annualized basis (APR, so non-compounding), expressed as an integer. We assume 8 digits of precision. For example, to submit 15.34%, you would pass up 15340000, and 5.34% would be 5340000\",\"_limit\":\"The maximum amount a borrower can drawdown from this CreditLine\",\"_paymentPeriodInDays\":\"How many days in each payment period. ie. the frequency with which they need to make payments.\",\"_termInDays\":\"Number of days in the credit term. It is used to set the `termEndBlock` upon first drawdown. ie. The credit line should be fully paid off {_termIndays} days after the first drawdown.   * Requirements:   * - the caller must be an underwriter with enough limit (see `setUnderwriterGovernanceLimit`)\"}},\"drawdown(uint256,address,address)\":{\"params\":{\"addressToSendTo\":\"The address where they would like the funds sent. If the zero address is passed, it will be defaulted to the borrower's address (msg.sender). This is a convenience feature for when they would like the funds sent to an exchange or alternate wallet, different from the authentication address   * Requirements:   * - the caller must be the borrower on the creditLine\",\"amount\":\"The amount, in USDC atomic units, that a borrower wishes to drawdown\",\"creditLineAddress\":\"The creditline from which they would like to drawdown\"}},\"getBorrowerCreditLines(address)\":{\"params\":{\"borrowerAddress\":\"The borrower address you would like to see the credit lines of.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getUnderwriterCreditLines(address)\":{\"params\":{\"underwriterAddress\":\"The underwriter address you would like to see the credit lines of.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"_config\":\"The address of the GoldfinchConfig contract\",\"owner\":\"The address of who should have the \\\"OWNER_ROLE\\\" of this contract\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause   * See {Pausable-_pause}.   * Requirements:   * - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay(address,uint256)\":{\"params\":{\"amount\":\"The amount, in USDC atomic units, that a borrower wishes to pay\",\"creditLineAddress\":\"The credit line to be paid back\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"setUnderwriterGovernanceLimit(address,uint256)\":{\"params\":{\"limit\":\"What the new limit will be set to Requirements:   * - the caller must have the `OWNER_ROLE`.\",\"underwriterAddress\":\"The address of the underwriter for whom the limit shall change\"}},\"unpause()\":{\"details\":\"Unpauses the contract   * See {Pausable-_unpause}.   * Requirements:   * - the caller must have the Pauser role\"}},\"title\":\"Goldfinch's CreditDesk contract\"},\"userdoc\":{\"methods\":{\"assessCreditLine(address)\":{\"notice\":\"Assesses a particular creditLine. This will apply payments, which will update accounting and distribute gains or losses back to the pool accordingly. This function is idempotent, and anyone is allowed to call it.\"},\"createCreditLine(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Allows an underwriter to create a new CreditLine for a single borrower\"},\"drawdown(uint256,address,address)\":{\"notice\":\"Allows a borrower to drawdown on their creditline. `amount` USDC is sent to the borrower, and the credit line accounting is updated.\"},\"getBorrowerCreditLines(address)\":{\"notice\":\"Simple getter for the creditlines of a given borrower\"},\"getUnderwriterCreditLines(address)\":{\"notice\":\"Simple getter for the creditlines of a given underwriter\"},\"initialize(address,address)\":{\"notice\":\"Run only once, on initialization\"},\"pay(address,uint256)\":{\"notice\":\"Allows a borrower to repay their loan. Payment is *collected* immediately (by sending it to the individual CreditLine), but it is not *applied* unless it is after the nextDueBlock, or until we assess the credit line (ie. payment period end). Any amounts over the minimum payment will be applied to outstanding principal (reducing the effective interest rate). If there is still any left over, it will remain in the USDC Balance of the CreditLine, which is held distinct from the Pool amounts, and can not be withdrawn by LP's.\"},\"setUnderwriterGovernanceLimit(address,uint256)\":{\"notice\":\"Sets a particular underwriter's limit of how much credit the DAO will allow them to \\\"create\\\"\"}},\"notice\":\"Main entry point for borrowers and underwriters. Handles key logic for creating CreditLine's, borrowing money, repayment, etc.\"}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/CreditDesk.sol\":\"CreditDesk\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x50280546205978ca6573541955e15453b4c07a19e6c8ec4f6785a5ae0d7343fb\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"contracts/external/FixedPoint.sol\":{\"content\":\"// Imported from https://github.com/UMAprotocol/protocol/blob/4d1c8cc47a4df5e79f978cb05647a7432e111a3d/packages/core/contracts/common/implementation/FixedPoint.sol\\npragma solidity ^0.6.8;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5**18`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5**18`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\",\"keccak256\":\"0xfc0fc9bd698ab1a9b1e9e4474edd195e46bfe6203d37f8c199912ce55f6ee389\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function createCreditLine(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays\\n  ) external virtual;\\n\\n  function drawdown(\\n    uint256 amount,\\n    address creditLineAddress,\\n    address addressToSendTo\\n  ) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n}\\n\",\"keccak256\":\"0x438340986bfedb9a11e939b506ee591d3ad46772d7d2944eb7717539300624b0\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xc49490b8d90d7e115e945b12fdcfa61c72703c1a207b546cacafda0524e597d9\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xabf76656e1540e8a0248d6b6c630f7932303fe71b2c9fafc73acd9daf8d135c6\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 amount) external virtual;\\n\\n  function collectInterestRepayment(address from, uint256 amount) external virtual;\\n\\n  function collectPrincipalRepayment(address from, uint256 amount) external virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n}\\n\",\"keccak256\":\"0x869107a33bfa4a8215a30f7d768fe85a76eebcc35a863472f972730de699e633\",\"license\":\"MIT\"},\"contracts/protocol/Accountant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./CreditLine.sol\\\";\\nimport \\\"../external/FixedPoint.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title The Accountant\\n * @notice Library for handling key financial calculations, such as interest and principal accrual.\\n * @author Goldfinch\\n */\\n\\nlibrary Accountant {\\n  using SafeMath for uint256;\\n  using FixedPoint for FixedPoint.Signed;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FixedPoint for int256;\\n  using FixedPoint for uint256;\\n\\n  // Scaling factor used by FixedPoint.sol. We need this to convert the fixed point raw values back to unscaled\\n  uint256 public constant FP_SCALING_FACTOR = 10**18;\\n  uint256 public constant INTEREST_DECIMALS = 1e8;\\n  uint256 public constant BLOCKS_PER_DAY = 5760;\\n  uint256 public constant BLOCKS_PER_YEAR = (BLOCKS_PER_DAY * 365);\\n\\n  struct PaymentAllocation {\\n    uint256 interestPayment;\\n    uint256 principalPayment;\\n    uint256 additionalBalancePayment;\\n  }\\n\\n  function calculateInterestAndPrincipalAccrued(CreditLine cl, uint256 blockNumber)\\n    public\\n    view\\n    returns (uint256, uint256)\\n  {\\n    uint256 interestAccrued = calculateInterestAccrued(cl, blockNumber);\\n    uint256 principalAccrued = calculatePrincipalAccrued(cl, blockNumber);\\n    return (interestAccrued, principalAccrued);\\n  }\\n\\n  function calculatePrincipalAccrued(CreditLine cl, uint256 blockNumber) public view returns (uint256) {\\n    if (blockNumber >= cl.termEndBlock()) {\\n      return cl.balance();\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function calculateWritedownFor(\\n    CreditLine cl,\\n    uint256 blockNumber,\\n    uint256 gracePeriod,\\n    uint256 maxLatePeriods\\n  ) public view returns (uint256, uint256) {\\n    uint256 amountOwedLastPeriod = calculateAmountOwedForOnePeriod(cl);\\n\\n    if (amountOwedLastPeriod == 0) {\\n      return (0, 0);\\n    }\\n\\n    FixedPoint.Unsigned memory fpGracePeriod = FixedPoint.fromUnscaledUint(gracePeriod);\\n    FixedPoint.Unsigned memory periodsLate;\\n\\n    // Excel math: =min(1,max(0,periods_late_in_days-graceperiod_in_days)/MAX_ALLOWED_DAYS_LATE) grace_period = 30,\\n    // Before the term end block, we use the interestOwed to calculate the periods late. However, after the loan term\\n    // has ended, since the interest is a much smaller fraction of the principal, we cannot reliably use interest to\\n    // calculate the periods later.\\n    if (blockNumber < cl.termEndBlock()) {\\n      uint256 totalOwed = cl.interestOwed().add(cl.principalOwed());\\n      periodsLate = FixedPoint.fromUnscaledUint(totalOwed).div(amountOwedLastPeriod);\\n    } else {\\n      uint256 blocksLate = blockNumber.sub(cl.termEndBlock());\\n      uint256 paymentPeriodInBlocks = cl.paymentPeriodInDays() * BLOCKS_PER_DAY;\\n      periodsLate = FixedPoint.fromUnscaledUint(blocksLate).div(paymentPeriodInBlocks);\\n    }\\n\\n    FixedPoint.Unsigned memory maxLate = FixedPoint.fromUnscaledUint(maxLatePeriods);\\n    FixedPoint.Unsigned memory writedownPercent;\\n\\n    if (periodsLate.isLessThanOrEqual(fpGracePeriod)) {\\n      // Within the grace period, we don't have to write down, so assume 0%\\n      writedownPercent = FixedPoint.fromUnscaledUint(0);\\n    } else {\\n      writedownPercent = FixedPoint.min(FixedPoint.fromUnscaledUint(1), (periodsLate.sub(fpGracePeriod)).div(maxLate));\\n    }\\n\\n    FixedPoint.Unsigned memory writedownAmount = writedownPercent.mul(cl.balance()).div(FP_SCALING_FACTOR);\\n    // This will return a number between 0-100 representing the write down percent with no decimals\\n    uint256 unscaledWritedownPercent = writedownPercent.mul(100).div(FP_SCALING_FACTOR).rawValue;\\n    return (unscaledWritedownPercent, writedownAmount.rawValue);\\n  }\\n\\n  function calculateAmountOwedForOnePeriod(CreditLine cl) public view returns (uint256) {\\n    // Determine theoretical interestOwed for one full period\\n    uint256 paymentPeriodInBlocks = cl.paymentPeriodInDays() * BLOCKS_PER_DAY;\\n    uint256 totalInterestPerYear = cl.balance().mul(cl.interestApr()).div(INTEREST_DECIMALS);\\n    uint256 interestOwed = totalInterestPerYear.mul(paymentPeriodInBlocks).div(BLOCKS_PER_YEAR);\\n\\n    return interestOwed;\\n  }\\n\\n  function calculateInterestAccrued(CreditLine cl, uint256 blockNumber) public view returns (uint256) {\\n    // We use Math.min here to prevent integer overflow (ie. go negative) when calculating\\n    // numBlocksElapsed. Typically this shouldn't be possible, because\\n    // the lastUpdatedBlock couldn't be *after* the current blockNumber. However, when assessing\\n    // we allow this function to be called with a past block number, which raises the possibility\\n    // of overflow.\\n    // This use of min should not generate incorrect interest calculations, since\\n    // this functions purpose is just to normalize balances, and  will be called any time\\n    // a balance affecting action takes place (eg. drawdown, repayment, assessment)\\n    uint256 lastUpdatedBlock = Math.min(blockNumber, cl.lastUpdatedBlock());\\n\\n    uint256 numBlocksElapsed = blockNumber.sub(lastUpdatedBlock);\\n    uint256 totalInterestPerYear = cl.balance().mul(cl.interestApr()).div(INTEREST_DECIMALS);\\n    return totalInterestPerYear.mul(numBlocksElapsed).div(BLOCKS_PER_YEAR);\\n  }\\n\\n  function allocatePayment(\\n    uint256 paymentAmount,\\n    uint256 balance,\\n    uint256 interestOwed,\\n    uint256 principalOwed\\n  ) public pure returns (PaymentAllocation memory) {\\n    uint256 paymentRemaining = paymentAmount;\\n    uint256 interestPayment = Math.min(interestOwed, paymentRemaining);\\n    paymentRemaining = paymentRemaining.sub(interestPayment);\\n\\n    uint256 principalPayment = Math.min(principalOwed, paymentRemaining);\\n    paymentRemaining = paymentRemaining.sub(principalPayment);\\n\\n    uint256 balanceRemaining = balance.sub(principalPayment);\\n    uint256 additionalBalancePayment = Math.min(paymentRemaining, balanceRemaining);\\n\\n    return\\n      PaymentAllocation({\\n        interestPayment: interestPayment,\\n        principalPayment: principalPayment,\\n        additionalBalancePayment: additionalBalancePayment\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0xb2b1962098a909ad173fba503af33cfa2ca0589f6c951c2ba9cd83c8b63d83a6\",\"license\":\"MIT\"},\"contracts/protocol/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like ugpradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x65066c522d928c91f5c0dd9e91a32b7f6c31e9eccefe610666721b3d1774ceb0\",\"license\":\"MIT\"},\"contracts/protocol/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/IFidu.sol\\\";\\nimport \\\"../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../interfaces/IERC20withDec.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(GoldfinchConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(config.getAddress(uint256(ConfigOptions.Addresses.USDC)));\\n  }\\n\\n  function getCreditDesk(GoldfinchConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function poolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function creditDeskAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriod(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriod));\\n  }\\n\\n  function getLatenessMaxPeriod(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxPeriod));\\n  }\\n}\\n\",\"keccak256\":\"0x00cacab6e09adb60c93ec3bea9f3d63a8741a5acbd9667e120ef1ed5e5c907ab\",\"license\":\"MIT\"},\"contracts/protocol/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriod,\\n    LatenessMaxPeriod\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    CreditLineFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin\\n  }\\n\\n  function getNumberName(uint256 number) public pure returns (string memory) {\\n    Numbers numberName = Numbers(number);\\n    if (Numbers.TransactionLimit == numberName) {\\n      return \\\"TransactionLimit\\\";\\n    }\\n    if (Numbers.TotalFundsLimit == numberName) {\\n      return \\\"TotalFundsLimit\\\";\\n    }\\n    if (Numbers.MaxUnderwriterLimit == numberName) {\\n      return \\\"MaxUnderwriterLimit\\\";\\n    }\\n    if (Numbers.ReserveDenominator == numberName) {\\n      return \\\"ReserveDenominator\\\";\\n    }\\n    if (Numbers.WithdrawFeeDenominator == numberName) {\\n      return \\\"WithdrawFeeDenominator\\\";\\n    }\\n    if (Numbers.LatenessGracePeriod == numberName) {\\n      return \\\"LatenessGracePeriod\\\";\\n    }\\n    if (Numbers.LatenessMaxPeriod == numberName) {\\n      return \\\"LatenessMaxPeriod\\\";\\n    }\\n    revert(\\\"Unknown value passed to getNumberName\\\");\\n  }\\n\\n  function getAddressName(uint256 addressKey) public pure returns (string memory) {\\n    Addresses addressName = Addresses(addressKey);\\n    if (Addresses.Pool == addressName) {\\n      return \\\"Pool\\\";\\n    }\\n    if (Addresses.CreditLineImplementation == addressName) {\\n      return \\\"CreditLineImplementation\\\";\\n    }\\n    if (Addresses.CreditLineFactory == addressName) {\\n      return \\\"CreditLineFactory\\\";\\n    }\\n    if (Addresses.CreditDesk == addressName) {\\n      return \\\"CreditDesk\\\";\\n    }\\n    if (Addresses.Fidu == addressName) {\\n      return \\\"Fidu\\\";\\n    }\\n    if (Addresses.USDC == addressName) {\\n      return \\\"USDC\\\";\\n    }\\n    if (Addresses.TreasuryReserve == addressName) {\\n      return \\\"TreasuryReserve\\\";\\n    }\\n    if (Addresses.ProtocolAdmin == addressName) {\\n      return \\\"ProtocolAdmin\\\";\\n    }\\n    revert(\\\"Unknown value passed to getAddressName\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x28b60fc6aacc32f58d7de8683ac71c5a86780ddc4490a01eab0dc562845c75e2\",\"license\":\"MIT\"},\"contracts/protocol/CreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./ConfigHelper.sol\\\";\\nimport \\\"./Accountant.sol\\\";\\nimport \\\"./CreditLine.sol\\\";\\nimport \\\"./CreditLineFactory.sol\\\";\\n\\n/**\\n * @title Goldfinch's CreditDesk contract\\n * @notice Main entry point for borrowers and underwriters.\\n *  Handles key logic for creating CreditLine's, borrowing money, repayment, etc.\\n * @author Goldfinch\\n */\\n\\ncontract CreditDesk is BaseUpgradeablePausable, ICreditDesk {\\n  // Approximate number of blocks per day\\n  uint256 public constant BLOCKS_PER_DAY = 5760;\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  struct Underwriter {\\n    uint256 governanceLimit;\\n    address[] creditLines;\\n  }\\n\\n  struct Borrower {\\n    address[] creditLines;\\n  }\\n\\n  event PaymentApplied(\\n    address indexed payer,\\n    address indexed creditLine,\\n    uint256 interestAmount,\\n    uint256 principalAmount,\\n    uint256 remainingAmount\\n  );\\n  event PaymentCollected(address indexed payer, address indexed creditLine, uint256 paymentAmount);\\n  event DrawdownMade(address indexed borrower, address indexed creditLine, uint256 drawdownAmount);\\n  event CreditLineCreated(address indexed borrower, address indexed creditLine);\\n  event GovernanceUpdatedUnderwriterLimit(address indexed underwriter, uint256 newLimit);\\n\\n  mapping(address => Underwriter) public underwriters;\\n  mapping(address => Borrower) private borrowers;\\n  mapping(address => address) private creditLines;\\n\\n  /**\\n   * @notice Run only once, on initialization\\n   * @param owner The address of who should have the \\\"OWNER_ROLE\\\" of this contract\\n   * @param _config The address of the GoldfinchConfig contract\\n   */\\n  function initialize(address owner, GoldfinchConfig _config) public initializer {\\n    __BaseUpgradeablePausable__init(owner);\\n    config = _config;\\n  }\\n\\n  /**\\n   * @notice Sets a particular underwriter's limit of how much credit the DAO will allow them to \\\"create\\\"\\n   * @param underwriterAddress The address of the underwriter for whom the limit shall change\\n   * @param limit What the new limit will be set to\\n   * Requirements:\\n   *\\n   * - the caller must have the `OWNER_ROLE`.\\n   */\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit)\\n    external\\n    override\\n    onlyAdmin\\n    whenNotPaused\\n  {\\n    Underwriter storage underwriter = underwriters[underwriterAddress];\\n    require(withinMaxUnderwriterLimit(limit), \\\"This limit is greater than the max allowed by the protocol\\\");\\n    underwriter.governanceLimit = limit;\\n    emit GovernanceUpdatedUnderwriterLimit(underwriterAddress, limit);\\n  }\\n\\n  /**\\n   * @notice Allows an underwriter to create a new CreditLine for a single borrower\\n   * @param _borrower The borrower for whom the CreditLine will be created\\n   * @param _limit The maximum amount a borrower can drawdown from this CreditLine\\n   * @param _interestApr The interest amount, on an annualized basis (APR, so non-compounding), expressed as an integer.\\n   *  We assume 8 digits of precision. For example, to submit 15.34%, you would pass up 15340000,\\n   *  and 5.34% would be 5340000\\n   * @param _paymentPeriodInDays How many days in each payment period.\\n   *  ie. the frequency with which they need to make payments.\\n   * @param _termInDays Number of days in the credit term. It is used to set the `termEndBlock` upon first drawdown.\\n   *  ie. The credit line should be fully paid off {_termIndays} days after the first drawdown.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be an underwriter with enough limit (see `setUnderwriterGovernanceLimit`)\\n   */\\n  function createCreditLine(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays\\n  ) external override whenNotPaused {\\n    Underwriter storage underwriter = underwriters[msg.sender];\\n    Borrower storage borrower = borrowers[_borrower];\\n    require(underwriterCanCreateThisCreditLine(_limit, underwriter), \\\"The underwriter cannot create this credit line\\\");\\n\\n    bytes memory arguments = abi.encodeWithSignature(\\n      \\\"initialize(address,address,address,uint256,uint256,uint256,uint256)\\\",\\n      address(this),\\n      _borrower,\\n      msg.sender,\\n      _limit,\\n      _interestApr,\\n      _paymentPeriodInDays,\\n      _termInDays\\n    );\\n\\n    address clAddress = getCreditLineFactory().createCreditLine(arguments);\\n    CreditLine cl = CreditLine(clAddress);\\n\\n    underwriter.creditLines.push(address(cl));\\n    borrower.creditLines.push(address(cl));\\n    creditLines[address(cl)] = address(cl);\\n    emit CreditLineCreated(_borrower, address(cl));\\n\\n    cl.grantRole(keccak256(\\\"OWNER_ROLE\\\"), config.protocolAdminAddress());\\n    cl.authorizePool(address(config));\\n  }\\n\\n  /**\\n   * @notice Allows a borrower to drawdown on their creditline.\\n   *  `amount` USDC is sent to the borrower, and the credit line accounting is updated.\\n   * @param amount The amount, in USDC atomic units, that a borrower wishes to drawdown\\n   * @param creditLineAddress The creditline from which they would like to drawdown\\n   * @param addressToSendTo The address where they would like the funds sent. If the zero address is passed,\\n   *  it will be defaulted to the borrower's address (msg.sender). This is a convenience feature for when they would\\n   *  like the funds sent to an exchange or alternate wallet, different from the authentication address\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be the borrower on the creditLine\\n   */\\n  function drawdown(\\n    uint256 amount,\\n    address creditLineAddress,\\n    address addressToSendTo\\n  ) external override whenNotPaused {\\n    CreditLine cl = CreditLine(creditLineAddress);\\n    Borrower storage borrower = borrowers[msg.sender];\\n    require(borrower.creditLines.length > 0, \\\"No credit lines exist for this borrower\\\");\\n    require(creditLines[creditLineAddress] != address(0), \\\"Unknown credit line\\\");\\n    require(amount > 0, \\\"Must drawdown more than zero\\\");\\n    require(cl.borrower() == msg.sender, \\\"You do not belong to this credit line\\\");\\n    require(withinTransactionLimit(amount), \\\"Amount is over the per-transaction limit\\\");\\n    require(withinCreditLimit(amount, cl), \\\"The borrower does not have enough credit limit for this drawdown\\\");\\n    require(!isLate(cl), \\\"Cannot drawdown when payments are past due\\\");\\n\\n    if (addressToSendTo == address(0)) {\\n      addressToSendTo = msg.sender;\\n    }\\n\\n    if (cl.balance() == 0) {\\n      cl.setLastUpdatedBlock(block.number);\\n    }\\n    // Must get the interest and principal accrued prior to adding to the balance.\\n    (uint256 interestOwed, uint256 principalOwed) = getInterestAndPrincipalOwedAsOf(cl, block.number);\\n    uint256 balance = cl.balance().add(amount);\\n\\n    updateCreditLineAccounting(cl, balance, interestOwed, principalOwed);\\n\\n    emit DrawdownMade(msg.sender, address(cl), amount);\\n\\n    bool success = config.getPool().transferFrom(config.poolAddress(), addressToSendTo, amount);\\n    require(success, \\\"Failed to drawdown\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a borrower to repay their loan. Payment is *collected* immediately (by sending it to\\n   *  the individual CreditLine), but it is not *applied* unless it is after the nextDueBlock, or until we assess\\n   *  the credit line (ie. payment period end).\\n   *  Any amounts over the minimum payment will be applied to outstanding principal (reducing the effective\\n   *  interest rate). If there is still any left over, it will remain in the USDC Balance\\n   *  of the CreditLine, which is held distinct from the Pool amounts, and can not be withdrawn by LP's.\\n   * @param creditLineAddress The credit line to be paid back\\n   * @param amount The amount, in USDC atomic units, that a borrower wishes to pay\\n   */\\n  function pay(address creditLineAddress, uint256 amount) external override whenNotPaused {\\n    require(creditLines[creditLineAddress] != address(0), \\\"Unknown credit line\\\");\\n    require(amount > 0, \\\"Must pay more than zero\\\");\\n    CreditLine cl = CreditLine(creditLineAddress);\\n\\n    collectPayment(cl, amount);\\n\\n    if (block.number < cl.nextDueBlock()) {\\n      return;\\n    }\\n    applyPayment(cl, getUSDCBalance(address(cl)), block.number);\\n  }\\n\\n  /**\\n   * @notice Assesses a particular creditLine. This will apply payments, which will update accounting and\\n   *  distribute gains or losses back to the pool accordingly. This function is idempotent, and anyone\\n   *  is allowed to call it.\\n   * @param creditLineAddress The creditline that should be assessed.\\n   */\\n  function assessCreditLine(address creditLineAddress) external override whenNotPaused {\\n    require(creditLines[creditLineAddress] != address(0), \\\"Unknown credit line\\\");\\n    CreditLine cl = CreditLine(creditLineAddress);\\n    // Do not assess until a full period has elapsed\\n    if (block.number < cl.nextDueBlock()) {\\n      return;\\n    }\\n    applyPayment(cl, getUSDCBalance(address(cl)), cl.nextDueBlock());\\n  }\\n\\n  // Public View Functions (Getters)\\n\\n  /**\\n   * @notice Simple getter for the creditlines of a given underwriter\\n   * @param underwriterAddress The underwriter address you would like to see the credit lines of.\\n   */\\n  function getUnderwriterCreditLines(address underwriterAddress) public view whenNotPaused returns (address[] memory) {\\n    return underwriters[underwriterAddress].creditLines;\\n  }\\n\\n  /**\\n   * @notice Simple getter for the creditlines of a given borrower\\n   * @param borrowerAddress The borrower address you would like to see the credit lines of.\\n   */\\n  function getBorrowerCreditLines(address borrowerAddress) public view whenNotPaused returns (address[] memory) {\\n    return borrowers[borrowerAddress].creditLines;\\n  }\\n\\n  /*\\n   * Internal Functions\\n   */\\n\\n  /**\\n   * @notice Collects `amount` of payment for a given credit line. This sends money from the payer to the credit line.\\n   *  Note that payment is not *applied* when calling this function. Only collected (ie. held) for later application.\\n   * @param cl The CreditLine the payment will be collected for.\\n   * @param amount The amount, in USDC atomic units, to be collected\\n   */\\n  function collectPayment(CreditLine cl, uint256 amount) internal {\\n    require(withinTransactionLimit(amount), \\\"Amount is over the per-transaction limit\\\");\\n    require(config.getUSDC().balanceOf(msg.sender) >= amount, \\\"You have insufficent balance for this payment\\\");\\n\\n    emit PaymentCollected(msg.sender, address(cl), amount);\\n\\n    bool success = config.getPool().transferFrom(msg.sender, address(cl), amount);\\n    require(success, \\\"Failed to collect payment\\\");\\n  }\\n\\n  /**\\n   * @notice Applies `amount` of payment for a given credit line. This moves already collected money into the Pool.\\n   *  It also updates all the accounting variables. Note that interest is always paid back first, then principal.\\n   *  Any extra after paying the minimum will go towards existing principal (reducing the\\n   *  effective interest rate). Any extra after the full loan has been paid off will remain in the\\n   *  USDC Balance of the creditLine, where it will be automatically used for the next drawdown.\\n   * @param cl The CreditLine the payment will be collected for.\\n   * @param amount The amount, in USDC atomic units, to be applied\\n   * @param blockNumber The blockNumber on which accrual calculations should be based. This allows us\\n   *  to be precise when we assess a Credit Line\\n   */\\n  function applyPayment(\\n    CreditLine cl,\\n    uint256 amount,\\n    uint256 blockNumber\\n  ) internal {\\n    (uint256 paymentRemaining, uint256 interestPayment, uint256 principalPayment) = handlePayment(\\n      cl,\\n      amount,\\n      blockNumber\\n    );\\n\\n    updateWritedownAmounts(cl);\\n\\n    bool paymentApplied = false;\\n    if (interestPayment > 0) {\\n      paymentApplied = true;\\n      config.getPool().collectInterestRepayment(address(cl), interestPayment);\\n    }\\n    if (principalPayment > 0) {\\n      paymentApplied = true;\\n      config.getPool().collectPrincipalRepayment(address(cl), principalPayment);\\n    }\\n\\n    if (paymentApplied) {\\n      emit PaymentApplied(cl.borrower(), address(cl), interestPayment, principalPayment, paymentRemaining);\\n    }\\n  }\\n\\n  function handlePayment(\\n    CreditLine cl,\\n    uint256 paymentAmount,\\n    uint256 asOfBlock\\n  )\\n    internal\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    (uint256 interestOwed, uint256 principalOwed) = getInterestAndPrincipalOwedAsOf(cl, asOfBlock);\\n    Accountant.PaymentAllocation memory pa = Accountant.allocatePayment(\\n      paymentAmount,\\n      cl.balance(),\\n      interestOwed,\\n      principalOwed\\n    );\\n\\n    uint256 newBalance = cl.balance().sub(pa.principalPayment);\\n    // Apply any additional payment towards the balance\\n    newBalance = newBalance.sub(pa.additionalBalancePayment);\\n\\n    uint256 totalPrincipalPayment = cl.balance().sub(newBalance);\\n    uint256 paymentRemaining = paymentAmount.sub(pa.interestPayment).sub(totalPrincipalPayment);\\n\\n    updateCreditLineAccounting(\\n      cl,\\n      newBalance,\\n      interestOwed.sub(pa.interestPayment),\\n      principalOwed.sub(pa.principalPayment)\\n    );\\n\\n    assert(paymentRemaining.add(pa.interestPayment).add(totalPrincipalPayment) == paymentAmount);\\n\\n    return (paymentRemaining, pa.interestPayment, totalPrincipalPayment);\\n  }\\n\\n  function updateWritedownAmounts(CreditLine cl) internal {\\n    (uint256 writedownPercent, uint256 writedownAmount) = Accountant.calculateWritedownFor(\\n      cl,\\n      block.number,\\n      config.getLatenessGracePeriod(),\\n      config.getLatenessMaxPeriod()\\n    );\\n\\n    if (writedownPercent == 0 && cl.writedownAmount() == 0) {\\n      return;\\n    }\\n    int256 writedownDelta = int256(cl.writedownAmount()) - int256(writedownAmount);\\n    cl.setWritedownAmount(writedownAmount);\\n    config.getPool().distributeLosses(address(cl), writedownDelta);\\n  }\\n\\n  function isLate(CreditLine cl) internal view returns (bool) {\\n    // Calculate the writedown percent without any grace period to determine if we're late\\n    (uint256 writedownPercent, uint256 _) = Accountant.calculateWritedownFor(\\n      cl,\\n      block.number,\\n      0,\\n      config.getLatenessMaxPeriod()\\n    );\\n    return writedownPercent > 0;\\n  }\\n\\n  function getCreditLineFactory() internal view returns (CreditLineFactory) {\\n    return CreditLineFactory(config.getAddress(uint256(ConfigOptions.Addresses.CreditLineFactory)));\\n  }\\n\\n  function subtractClFromTotalLoansOutstanding(CreditLine cl) internal {\\n    totalLoansOutstanding = totalLoansOutstanding.sub(cl.balance());\\n  }\\n\\n  function addCLToTotalLoansOutstanding(CreditLine cl) internal {\\n    totalLoansOutstanding = totalLoansOutstanding.add(cl.balance());\\n  }\\n\\n  function getInterestAndPrincipalOwedAsOf(CreditLine cl, uint256 blockNumber)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    (uint256 interestAccrued, uint256 principalAccrued) = Accountant.calculateInterestAndPrincipalAccrued(\\n      cl,\\n      blockNumber\\n    );\\n    return (cl.interestOwed().add(interestAccrued), cl.principalOwed().add(principalAccrued));\\n  }\\n\\n  function withinCreditLimit(uint256 amount, CreditLine cl) internal view returns (bool) {\\n    return cl.balance().add(amount) <= cl.limit();\\n  }\\n\\n  function withinTransactionLimit(uint256 amount) internal view returns (bool) {\\n    return amount <= config.getNumber(uint256(ConfigOptions.Numbers.TransactionLimit));\\n  }\\n\\n  function calculateNewTermEndBlock(CreditLine cl) internal view returns (uint256) {\\n    // If there's no balance, there's no loan, so there's no term end block\\n    if (cl.balance() <= 0) {\\n      return 0;\\n    }\\n    // Don't allow any weird bugs where we add to your current end block. This\\n    // function should only be used on new credit lines, when we are setting them up\\n    if (cl.termEndBlock() != 0) {\\n      return cl.termEndBlock();\\n    }\\n    return block.number.add(BLOCKS_PER_DAY.mul(cl.termInDays()));\\n  }\\n\\n  function calculateNextDueBlock(CreditLine cl) internal view returns (uint256) {\\n    uint256 blocksPerPeriod = cl.paymentPeriodInDays().mul(BLOCKS_PER_DAY);\\n\\n    // Your paid off, or have not taken out a loan yet, so no next due block.\\n    if (cl.balance() <= 0 && cl.nextDueBlock() != 0) {\\n      return 0;\\n    }\\n    // You must have just done your first drawdown\\n    if (cl.nextDueBlock() == 0 && cl.balance() > 0) {\\n      return block.number.add(blocksPerPeriod);\\n    }\\n    // Active loan that has entered a new period, so return the *next* nextDueBlock\\n    if (cl.balance() > 0 && block.number >= cl.nextDueBlock()) {\\n      return cl.nextDueBlock().add(blocksPerPeriod);\\n    }\\n    // Active loan in current period, where we've already set the nextDueBlock correctly, so should not change.\\n    if (cl.balance() > 0 && block.number < cl.nextDueBlock()) {\\n      return cl.nextDueBlock();\\n    }\\n  }\\n\\n  function underwriterCanCreateThisCreditLine(uint256 newAmount, Underwriter storage underwriter)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    uint256 creditCurrentlyExtended = getCreditCurrentlyExtended(underwriter);\\n    uint256 totalToBeExtended = creditCurrentlyExtended.add(newAmount);\\n    return totalToBeExtended <= underwriter.governanceLimit;\\n  }\\n\\n  function withinMaxUnderwriterLimit(uint256 amount) internal view returns (bool) {\\n    return amount <= config.getNumber(uint256(ConfigOptions.Numbers.MaxUnderwriterLimit));\\n  }\\n\\n  function getCreditCurrentlyExtended(Underwriter storage underwriter) internal view returns (uint256) {\\n    uint256 creditExtended = 0;\\n    for (uint256 i = 0; i < underwriter.creditLines.length; i++) {\\n      CreditLine cl = CreditLine(underwriter.creditLines[i]);\\n      creditExtended = creditExtended.add(cl.limit());\\n    }\\n    return creditExtended;\\n  }\\n\\n  function updateCreditLineAccounting(\\n    CreditLine cl,\\n    uint256 balance,\\n    uint256 interestOwed,\\n    uint256 principalOwed\\n  ) internal nonReentrant {\\n    subtractClFromTotalLoansOutstanding(cl);\\n\\n    cl.setBalance(balance);\\n    cl.setInterestOwed(interestOwed);\\n    cl.setPrincipalOwed(principalOwed);\\n    cl.setLastUpdatedBlock(block.number);\\n\\n    addCLToTotalLoansOutstanding(cl);\\n\\n    cl.setTermEndBlock(calculateNewTermEndBlock(cl));\\n    cl.setNextDueBlock(calculateNextDueBlock(cl));\\n  }\\n\\n  function getUSDCBalance(address _address) internal returns (uint256) {\\n    return config.getUSDC().balanceOf(_address);\\n  }\\n}\\n\",\"keccak256\":\"0x206a6200269a408652e4f37c7d628f3a3cf924fc1130c0914bf6785897eb53ea\",\"license\":\"MIT\"},\"contracts/protocol/CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../interfaces/IERC20withDec.sol\\\";\\n\\n/**\\n * @title CreditLine\\n * @notice A \\\"dumb\\\" state container that represents the agreement between an Underwriter and\\n *  the borrower. Includes the terms of the loan, as well as the current accounting state, such as interest owed.\\n *  This contract purposefully has essentially no business logic. Really just setters and getters.\\n * @author Goldfinch\\n */\\n\\n// solhint-disable-next-line max-states-count\\ncontract CreditLine is BaseUpgradeablePausable {\\n  // Credit line terms\\n  address public borrower;\\n  address public underwriter;\\n  uint256 public limit;\\n  uint256 public interestApr;\\n  uint256 public paymentPeriodInDays;\\n  uint256 public termInDays;\\n\\n  // Accounting variables\\n  uint256 public balance;\\n  uint256 public interestOwed;\\n  uint256 public principalOwed;\\n  uint256 public termEndBlock;\\n  uint256 public nextDueBlock;\\n  uint256 public lastUpdatedBlock;\\n  uint256 public writedownAmount;\\n\\n  function initialize(\\n    address owner,\\n    address _borrower,\\n    address _underwriter,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays\\n  ) public initializer {\\n    require(owner != address(0) && _borrower != address(0) && _underwriter != address(0), \\\"Zero address passed in\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    borrower = _borrower;\\n    underwriter = _underwriter;\\n    limit = _limit;\\n    interestApr = _interestApr;\\n    paymentPeriodInDays = _paymentPeriodInDays;\\n    termInDays = _termInDays;\\n    lastUpdatedBlock = block.number;\\n  }\\n\\n  function setTermEndBlock(uint256 newTermEndBlock) external onlyAdmin {\\n    termEndBlock = newTermEndBlock;\\n  }\\n\\n  function setNextDueBlock(uint256 newNextDueBlock) external onlyAdmin {\\n    nextDueBlock = newNextDueBlock;\\n  }\\n\\n  function setBalance(uint256 newBalance) external onlyAdmin {\\n    balance = newBalance;\\n  }\\n\\n  function setInterestOwed(uint256 newInterestOwed) external onlyAdmin {\\n    interestOwed = newInterestOwed;\\n  }\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external onlyAdmin {\\n    principalOwed = newPrincipalOwed;\\n  }\\n\\n  function setLastUpdatedBlock(uint256 newLastUpdatedBlock) external onlyAdmin {\\n    lastUpdatedBlock = newLastUpdatedBlock;\\n  }\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external onlyAdmin {\\n    writedownAmount = newWritedownAmount;\\n  }\\n\\n  function setLimit(uint256 newAmount) external onlyAdminOrUnderwriter {\\n    limit = newAmount;\\n  }\\n\\n  function authorizePool(address configAddress) external onlyAdmin {\\n    GoldfinchConfig config = GoldfinchConfig(configAddress);\\n    address poolAddress = config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n    address usdcAddress = config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n    // Approve the pool for an infinite amount\\n    bool success = IERC20withDec(usdcAddress).approve(poolAddress, uint256(-1));\\n    require(success, \\\"Failed to approve USDC\\\");\\n  }\\n\\n  modifier onlyAdminOrUnderwriter() {\\n    require(isAdmin() || _msgSender() == underwriter, \\\"Restricted to owner or underwriter\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xee7f7bbd0f17fb1d232ca8759ddde791910bc1c085e187057b166cf7229d72c5\",\"license\":\"MIT\"},\"contracts/protocol/CreditLineFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./GoldfinchConfig.sol\\\";\\n\\n/**\\n * @title CreditLineFactory\\n * @notice Contract that allows us to follow the minimal proxy pattern for creating CreditLines.\\n *  This saves us gas, and lets us easily swap out the CreditLine implementaton.\\n * @author Goldfinch\\n */\\n\\ncontract CreditLineFactory is BaseUpgradeablePausable {\\n  GoldfinchConfig public config;\\n\\n  function initialize(address owner, GoldfinchConfig _config) public initializer {\\n    __BaseUpgradeablePausable__init(owner);\\n    config = _config;\\n  }\\n\\n  function createCreditLine(bytes memory _data) public returns (address) {\\n    address creditLineImplAddress = config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n    address creditLineProxy = deployMinimal(creditLineImplAddress, _data);\\n    return creditLineProxy;\\n  }\\n\\n  function deployMinimal(address _logic, bytes memory _data) internal returns (address proxy) {\\n    /* solhint-disable */\\n    // From https://github.com/OpenZeppelin/openzeppelin-sdk/blob/v2.8.0/packages/lib/contracts/upgradeability/ProxyFactory.sol#L18-L35\\n    // Because of compiler version mismatch\\n    bytes20 targetBytes = bytes20(_logic);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n\\n    // Only this line was changed (commented out)\\n    // emit ProxyCreated(address(proxy));\\n\\n    if (_data.length > 0) {\\n      (bool success, ) = proxy.call(_data);\\n      require(success);\\n    }\\n    /* solhint-enable */\\n  }\\n}\\n\",\"keccak256\":\"0x1ef121bfcc559c362fa57a1918e48f2913fae96ba55c8255db6bd5d4a6cb7963\",\"license\":\"MIT\"},\"contracts/protocol/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable {\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n\\n  event AddressUpdated(address owner, string name, address oldValue, address newValue);\\n  event NumberUpdated(address owner, string name, uint256 oldValue, uint256 newValue);\\n\\n  function initialize(address owner) public initializer {\\n    __BaseUpgradeablePausable__init(owner);\\n  }\\n\\n  function setAddress(uint256 addressKey, address newAddress) public onlyAdmin {\\n    require(addresses[addressKey] == address(0), \\\"Address has already been initialized\\\");\\n\\n    string memory name = ConfigOptions.getAddressName(addressKey);\\n    emit AddressUpdated(msg.sender, name, addresses[addressKey], newAddress);\\n    addresses[addressKey] = newAddress;\\n  }\\n\\n  function setNumber(uint256 number, uint256 newNumber) public onlyAdmin {\\n    string memory name = ConfigOptions.getNumberName(number);\\n    emit NumberUpdated(msg.sender, name, numbers[number], newNumber);\\n    numbers[number] = newNumber;\\n  }\\n\\n  function setCreditLineImplementation(address newCreditLine) public onlyAdmin {\\n    uint256 addressKey = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    string memory name = ConfigOptions.getAddressName(addressKey);\\n    emit AddressUpdated(msg.sender, name, addresses[addressKey], newCreditLine);\\n    addresses[addressKey] = newCreditLine;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 addressKey = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    string memory name = ConfigOptions.getAddressName(addressKey);\\n    emit AddressUpdated(msg.sender, name, addresses[addressKey], newTreasuryReserve);\\n    addresses[addressKey] = newTreasuryReserve;\\n  }\\n\\n  /*\\n    Using custom getters incase we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 addressKey) public view returns (address) {\\n    // Cheap way to see if it's an invalid number\\n    ConfigOptions.Addresses(addressKey);\\n    return addresses[addressKey];\\n  }\\n\\n  function getNumber(uint256 number) public view returns (uint256) {\\n    // Cheap way to see if it's an invalid number\\n    ConfigOptions.Numbers(number);\\n    return numbers[uint256(number)];\\n  }\\n}\\n\",\"keccak256\":\"0x402c902928f770020d4faacb706cce60f19ae1bffa9eb3180ff0bd391055a5b0\",\"license\":\"MIT\"},\"contracts/protocol/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to pause\\\");\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to unpause\\\");\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0xfff607f8bb9d2c7775685f51a33c9ad67b8d992162ba9ca8c2d0f6b61c5b83e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613f7c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638456cb5911610104578063c4076876116100a2578063e63ab1e911610071578063e63ab1e914610380578063e6a0452314610388578063ed80c8501461039b578063f5c7e0e2146103a3576101cf565b8063c40768761461033f578063ca15c87314610352578063d547741f14610365578063e58378bb14610378576101cf565b8063a217fddf116100de578063a217fddf14610314578063a6f4487e1461031c578063b6db75a014610324578063c26ff9361461032c576101cf565b80638456cb59146102e65780639010d07c146102ee57806391d1485414610301576101cf565b806351d33a57116101715780636bb987fe1161014b5780636bb987fe1461029657806379502c551461029e5780637d533642146102b3578063844a28c3146102c6576101cf565b806351d33a5714610266578063526d81f6146102795780635c975abb14610281576101cf565b80632f2ff15d116101ad5780632f2ff15d1461022557806336568abe146102385780633f4ba83a1461024b578063485cc95514610253576101cf565b8063097616a3146101d45780630e4645ef146101e9578063248a9ca3146101fc575b600080fd5b6101e76101e2366004613434565b6103b6565b005b6101e76101f73660046134a4565b6104ec565b61020f61020a366004613532565b6105bc565b60405161021c91906137c4565b60405180910390f35b6101e761023336600461354a565b6105d4565b6101e761024636600461354a565b610618565b6101e761065a565b6101e761026136600461346c565b61069f565b6101e76102743660046135fe565b610749565b6101e7610baf565b610289610c3a565b60405161021c91906137b9565b61020f610c43565b6102a6610c49565b60405161021c91906136da565b61020f6102c1366004613434565b610c59565b6102d96102d4366004613434565b610c6c565b60405161021c919061376c565b6101e7610d0a565b6102a66102fc36600461356e565b610d3d565b61028961030f36600461354a565b610d64565b61020f610d82565b61020f610d87565b610289610d8e565b6102d961033a366004613434565b610da4565b6101e761034d3660046134a4565b610e3d565b61020f610360366004613532565b610f54565b6101e761037336600461354a565b610f6b565b61020f610fa5565b61020f610fbc565b6101e76103963660046134cf565b610fc8565b61020f611299565b6101e76103b1366004613434565b6112a0565b600054610100900460ff16806103cf57506103cf611401565b806103dd575060005460ff16155b6104025760405162461bcd60e51b81526004016103f990613c4c565b60405180910390fd5b600054610100900460ff1615801561042d576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166104535760405162461bcd60e51b81526004016103f990613b64565b61045b611407565b610463611488565b61046b611514565b61048860405161047a906136c4565b60405180910390208361060e565b61049760405161047a906136ad565b6104c76040516104a6906136ad565b60405180910390206040516104ba906136c4565b60405180910390206115a3565b6104d66040516104a6906136c4565b80156104e8576000805461ff00191690555b5050565b6104f4610d8e565b6105105760405162461bcd60e51b81526004016103f990613e66565b60975460ff16156105335760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b03821660009081526101c660205260409020610555826115b8565b6105715760405162461bcd60e51b81526004016103f990613cd1565b8181556040516001600160a01b038416907f7be5403eca163f383a39c2d1f65a8fee2c9e41e7e6b150f4abfe16eaaf1d9076906105af9085906137c4565b60405180910390a2505050565b6000818152606560205260409020600201545b919050565b6000828152606560205260409020600201546105f29061030f611645565b61060e5760405162461bcd60e51b81526004016103f99061385f565b6104e88282611649565b610620611645565b6001600160a01b0316816001600160a01b0316146106505760405162461bcd60e51b81526004016103f990613eb1565b6104e882826116b8565b610679604051610669906136ad565b604051809103902061030f611645565b6106955760405162461bcd60e51b81526004016103f990613dfa565b61069d611727565b565b600054610100900460ff16806106b857506106b8611401565b806106c6575060005460ff16155b6106e25760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff1615801561070d576000805460ff1961ff0019909116610100171660011790555b610716836103b6565b6101c580546001600160a01b0319166001600160a01b0384161790558015610744576000805461ff00191690555b505050565b60975460ff161561076c5760405162461bcd60e51b81526004016103f990613af2565b3360009081526101c760205260409020805483919061079d5760405162461bcd60e51b81526004016103f990613a24565b6001600160a01b0384811660009081526101c86020526040902054166107d55760405162461bcd60e51b81526004016103f990613b99565b600085116107f55760405162461bcd60e51b81526004016103f990613d2e565b336001600160a01b0316826001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190613450565b6001600160a01b0316146108965760405162461bcd60e51b81526004016103f990613bc6565b61089f85611793565b6108bb5760405162461bcd60e51b81526004016103f990613b1c565b6108c585836117ae565b6108e15760405162461bcd60e51b81526004016103f990613d65565b6108ea82611867565b156109075760405162461bcd60e51b81526004016103f9906138dc565b6001600160a01b038316610919573392505b816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a91906135e6565b6109ed576040516327e7b26360e01b81526001600160a01b038316906327e7b263906109ba9043906004016137c4565b600060405180830381600087803b1580156109d457600080fd5b505af11580156109e8573d6000803e3d6000fd5b505050505b6000806109fa844361192b565b915091506000610a8188866001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3d57600080fd5b505afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7591906135e6565b9063ffffffff611a4416565b9050610a8f85828585611a69565b846001600160a01b0316336001600160a01b03167f7ec4669c579321a5cf5a6b525637eb0924a93e2e11eab9d14be8b44de1116b1b8a604051610ad291906137c4565b60405180910390a36101c554600090610af3906001600160a01b0316611cfe565b6101c5546001600160a01b03918216916323b872dd91610b139116611d05565b898c6040518463ffffffff1660e01b8152600401610b33939291906136ee565b602060405180830381600087803b158015610b4d57600080fd5b505af1158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b859190613512565b905080610ba45760405162461bcd60e51b81526004016103f9906139aa565b505050505050505050565b600054610100900460ff1680610bc85750610bc8611401565b80610bd6575060005460ff16155b610bf25760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff16158015610c1d576000805460ff1961ff0019909116610100171660011790555b610c25611488565b8015610c37576000805461ff00191690555b50565b60975460ff1690565b61168081565b6101c5546001600160a01b031681565b6101c66020526000908152604090205481565b60975460609060ff1615610c925760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b03821660009081526101c6602090815260409182902060010180548351818402810184019094528084529091830182828015610cfe57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ce0575b50505050509050919050565b610d19604051610669906136ad565b610d355760405162461bcd60e51b81526004016103f990613abb565b61069d611d84565b6000828152606560205260408120610d5b908363ffffffff611ddd16565b90505b92915050565b6000828152606560205260408120610d5b908363ffffffff611de916565b600081565b6101c35481565b6000610d9f604051610669906136c4565b905090565b60975460609060ff1615610dca5760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b03821660009081526101c7602090815260409182902080548351818402810184019094528084529091830182828015610cfe576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610ce05750505050509050919050565b60975460ff1615610e605760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b0382811660009081526101c8602052604090205416610e985760405162461bcd60e51b81526004016103f990613b99565b60008111610eb85760405162461bcd60e51b81526004016103f990613dc3565b81610ec38183611dfe565b806001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610efc57600080fd5b505afa158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3491906135e6565b431015610f4157506104e8565b61074481610f4e83611fd8565b4361206c565b6000818152606560205260408120610d5e9061225c565b600082815260656020526040902060020154610f899061030f611645565b6106505760405162461bcd60e51b81526004016103f990613a6b565b604051610fb1906136c4565b604051809103902081565b604051610fb1906136ad565b60975460ff1615610feb5760405162461bcd60e51b81526004016103f990613af2565b3360009081526101c6602090815260408083206001600160a01b03891684526101c790925290912061101d8683612267565b6110395760405162461bcd60e51b81526004016103f9906139d6565b6060308833898989896040516024016110589796959493929190613712565b60408051601f198184030181529190526020810180516001600160e01b0316630568cad960e31b1790529050600061108e612295565b6001600160a01b0316639390bce0836040518263ffffffff1660e01b81526004016110b991906137e4565b602060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190613450565b6001808601805480830182556000918252602080832090910180546001600160a01b038087166001600160a01b0319928316811790935589549586018a5589855283852090950180548216831790558184526101c89092526040808420805490931682179092559051939450849390928d16917fc1d7685016f2246662e70fe17df916e959813e9ab93d50c4f039c0c069c5f37191a3806001600160a01b0316632f2ff15d6040516111bc906136c4565b6040519081900390206101c5546111db906001600160a01b0316612318565b6040518363ffffffff1660e01b81526004016111f89291906137cd565b600060405180830381600087803b15801561121257600080fd5b505af1158015611226573d6000803e3d6000fd5b50506101c55460405163182cdbe360e11b81526001600160a01b038086169450633059b7c6935061125b9216906004016136da565b600060405180830381600087803b15801561127557600080fd5b505af1158015611289573d6000803e3d6000fd5b5050505050505050505050505050565b6101c45481565b60975460ff16156112c35760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b0381811660009081526101c86020526040902054166112fb5760405162461bcd60e51b81526004016103f990613b99565b6000819050806001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137191906135e6565b43101561137e5750610c37565b6104e88161138b83611fd8565b836001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c457600080fd5b505afa1580156113d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fc91906135e6565b61206c565b303b1590565b600054610100900460ff16806114205750611420611401565b8061142e575060005460ff16155b61144a5760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff16158015610c25576000805460ff1961ff0019909116610100171660011790558015610c37576000805461ff001916905550565b600054610100900460ff16806114a157506114a1611401565b806114af575060005460ff16155b6114cb5760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff161580156114f6576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610c37576000805461ff001916905550565b600054610100900460ff168061152d575061152d611401565b8061153b575060005460ff16155b6115575760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff16158015611582576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610c37576000805461ff001916905550565b60009182526065602052604090912060020155565b6101c5546000906001600160a01b031663fc56365860025b6040518263ffffffff1660e01b81526004016115ec91906137c4565b60206040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163c91906135e6565b90911115919050565b3390565b6000828152606560205260409020611667908263ffffffff61233016565b156104e857611674611645565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206116d6908263ffffffff61234516565b156104e8576116e3611645565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff166117495760405162461bcd60e51b81526004016103f9906138ae565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61177c611645565b60405161178991906136da565b60405180910390a1565b6101c5546000906001600160a01b031663fc563658826115d0565b6000816001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182191906135e6565b61185e84846001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3d57600080fd5b11159392505050565b600080600073959922bE3CAee4b8Cd9a407cc3ac1C251C2007B163ca573568854360006118b26101c560009054906101000a90046001600160a01b03166001600160a01b031661235a565b6040518563ffffffff1660e01b81526004016118d194939291906137f7565b604080518083038186803b1580156118e857600080fd5b505af41580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611920919061363f565b501515949350505050565b60008060008073959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1634678497187876040518363ffffffff1660e01b815260040161196a929190613753565b604080518083038186803b15801561198157600080fd5b505af4158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b9919061363f565b915091506119fa82876001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3d57600080fd5b611a3782886001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3d57600080fd5b9350935050509250929050565b600082820183811015610d5b5760405162461bcd60e51b81526004016103f990613973565b60c95460ff16611a8b5760405162461bcd60e51b81526004016103f990613e2f565b60c9805460ff19169055611a9e8461238a565b604051637d8b34e560e11b81526001600160a01b0385169063fb1669ca90611aca9086906004016137c4565b600060405180830381600087803b158015611ae457600080fd5b505af1158015611af8573d6000803e3d6000fd5b50506040516396c8df3760e01b81526001600160a01b03871692506396c8df379150611b289085906004016137c4565b600060405180830381600087803b158015611b4257600080fd5b505af1158015611b56573d6000803e3d6000fd5b505060405163b3b8a9c760e01b81526001600160a01b038716925063b3b8a9c79150611b869084906004016137c4565b600060405180830381600087803b158015611ba057600080fd5b505af1158015611bb4573d6000803e3d6000fd5b50506040516327e7b26360e01b81526001600160a01b03871692506327e7b2639150611be49043906004016137c4565b600060405180830381600087803b158015611bfe57600080fd5b505af1158015611c12573d6000803e3d6000fd5b50505050611c1f84612415565b836001600160a01b031663fb9eb990611c3786612499565b6040518263ffffffff1660e01b8152600401611c5391906137c4565b600060405180830381600087803b158015611c6d57600080fd5b505af1158015611c81573d6000803e3d6000fd5b50505050836001600160a01b0316637957dda3611c9d8661269b565b6040518263ffffffff1660e01b8152600401611cb991906137c4565b600060405180830381600087803b158015611cd357600080fd5b505af1158015611ce7573d6000803e3d6000fd5b505060c9805460ff19166001179055505050505050565b6000610d5e825b60006001600160a01b03821663b93f9b0a825b6040518263ffffffff1660e01b8152600401611d3491906137c4565b60206040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e9190613450565b60975460ff1615611da75760405162461bcd60e51b81526004016103f990613af2565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861177c611645565b6000610d5b8383612bca565b6000610d5b836001600160a01b038416612c0f565b611e0781611793565b611e235760405162461bcd60e51b81526004016103f990613b1c565b6101c5548190611e3b906001600160a01b0316612c27565b6001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401611e6691906136da565b60206040518083038186803b158015611e7e57600080fd5b505afa158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb691906135e6565b1015611ed45760405162461bcd60e51b81526004016103f990613926565b816001600160a01b0316336001600160a01b03167fc4036209c61f1d5aad789d2b8fa9ca23bf8b1516748d2e0be7227bf3fce67d2d83604051611f1791906137c4565b60405180910390a36101c554600090611f38906001600160a01b0316611cfe565b6001600160a01b03166323b872dd3385856040518463ffffffff1660e01b8152600401611f67939291906136ee565b602060405180830381600087803b158015611f8157600080fd5b505af1158015611f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb99190613512565b9050806107445760405162461bcd60e51b81526004016103f990613c9a565b6101c554600090611ff1906001600160a01b0316612c27565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161201c91906136da565b60206040518083038186803b15801561203457600080fd5b505afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e91906135e6565b600080600061207c868686612c3f565b92509250925061208b86612ecc565b6000821561210d57506101c5546001906120ad906001600160a01b0316611cfe565b6001600160a01b03166364de8a0788856040518363ffffffff1660e01b81526004016120da929190613753565b600060405180830381600087803b1580156120f457600080fd5b505af1158015612108573d6000803e3d6000fd5b505050505b811561218d57506101c55460019061212d906001600160a01b0316611cfe565b6001600160a01b031663bcfa41ba88846040518363ffffffff1660e01b815260040161215a929190613753565b600060405180830381600087803b15801561217457600080fd5b505af1158015612188573d6000803e3d6000fd5b505050505b801561225357866001600160a01b0316876001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d657600080fd5b505afa1580156121ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220e9190613450565b6001600160a01b03167f724fe786cff62c97ff230e98a332f95c5a11990e44123a00c2b8e76b0566e41185858860405161224a93929190613f00565b60405180910390a35b50505050505050565b6000610d5e8261316a565b6000806122738361316e565b90506000612287828663ffffffff611a4416565b845410159250505092915050565b6101c554604051635c9fcd8560e11b81526000916001600160a01b03169063b93f9b0a906122c8906002906004016137c4565b60206040518083038186803b1580156122e057600080fd5b505afa1580156122f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f9190613450565b60006001600160a01b03821663b93f9b0a6007611d18565b6000610d5b836001600160a01b038416613243565b6000610d5b836001600160a01b03841661328d565b60006001600160a01b03821663fc56365860065b6040518263ffffffff1660e01b815260040161201c91906137c4565b61240e816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156123c657600080fd5b505afa1580156123da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fe91906135e6565b6101c4549063ffffffff61335316565b6101c45550565b61240e816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561245157600080fd5b505afa158015612465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248991906135e6565b6101c4549063ffffffff611a4416565b600080826001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156124d557600080fd5b505afa1580156124e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250d91906135e6565b1161251a575060006105cf565b816001600160a01b0316631790ebd56040518163ffffffff1660e01b815260040160206040518083038186803b15801561255357600080fd5b505afa158015612567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258b91906135e6565b1561260857816001600160a01b0316631790ebd56040518163ffffffff1660e01b815260040160206040518083038186803b1580156125c957600080fd5b505afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260191906135e6565b90506105cf565b610d5e61268e836001600160a01b03166348e6f2966040518163ffffffff1660e01b815260040160206040518083038186803b15801561264757600080fd5b505afa15801561265b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267f91906135e6565b6116809063ffffffff61339516565b439063ffffffff611a4416565b600080612721611680846001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156126dd57600080fd5b505afa1580156126f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271591906135e6565b9063ffffffff61339516565b90506000836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561275e57600080fd5b505afa158015612772573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279691906135e6565b111580156128135750826001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127d857600080fd5b505afa1580156127ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281091906135e6565b15155b156128225760009150506105cf565b826001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561285b57600080fd5b505afa15801561286f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289391906135e6565b15801561291057506000836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156128d657600080fd5b505afa1580156128ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290e91906135e6565b115b1561292d57612925438263ffffffff611a4416565b9150506105cf565b6000836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561296857600080fd5b505afa15801561297c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a091906135e6565b118015612a1d5750826001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1991906135e6565b4310155b15612a5f5761292581846001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3d57600080fd5b6000836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9a57600080fd5b505afa158015612aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad291906135e6565b118015612b4e5750826001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1357600080fd5b505afa158015612b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4b91906135e6565b43105b15612bc457826001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b8c57600080fd5b505afa158015612ba0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292591906135e6565b50919050565b81546000908210612bed5760405162461bcd60e51b81526004016103f99061381d565b826000018281548110612bfc57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60006001600160a01b03821663b93f9b0a6005611d18565b6000806000806000612c51888761192b565b91509150612c5d613413565b73959922bE3CAee4b8Cd9a407cc3ac1C251C2007B163d7cc2a03898b6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612cb157600080fd5b505afa158015612cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce991906135e6565b86866040518563ffffffff1660e01b8152600401612d0a9493929190613f16565b60606040518083038186803b158015612d2257600080fd5b505af4158015612d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5a919061358f565b90506000612de382602001518b6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9f57600080fd5b505afa158015612db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd791906135e6565b9063ffffffff61335316565b9050612dfc82604001518261335390919063ffffffff16565b90506000612e3d828c6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9f57600080fd5b90506000612e5c82612dd786600001518e61335390919063ffffffff16565b9050612e958c84612e7a87600001518a61335390919063ffffffff16565b6020880151612e90908a9063ffffffff61335316565b611a69565b8a612eb183610a75876000015185611a4490919063ffffffff16565b14612eb857fe5b9251929b929a509850909650505050505050565b6101c554600090819073959922bE3CAee4b8Cd9a407cc3ac1C251C2007B19063ca5735689085904390612f07906001600160a01b03166133cf565b6101c554612f1d906001600160a01b031661235a565b6040518563ffffffff1660e01b8152600401612f3c94939291906137f7565b604080518083038186803b158015612f5357600080fd5b505af4158015612f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8b919061363f565b9150915081600014801561300d5750826001600160a01b031663cc862de56040518163ffffffff1660e01b815260040160206040518083038186803b158015612fd357600080fd5b505afa158015612fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300b91906135e6565b155b15613019575050610c37565b600081846001600160a01b031663cc862de56040518163ffffffff1660e01b815260040160206040518083038186803b15801561305557600080fd5b505afa158015613069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308d91906135e6565b039050836001600160a01b0316632771eca8836040518263ffffffff1660e01b81526004016130bc91906137c4565b600060405180830381600087803b1580156130d657600080fd5b505af11580156130ea573d6000803e3d6000fd5b50506101c55461310592506001600160a01b03169050611cfe565b6001600160a01b031663338744bc85836040518363ffffffff1660e01b8152600401613132929190613753565b600060405180830381600087803b15801561314c57600080fd5b505af1158015613160573d6000803e3d6000fd5b5050505050505050565b5490565b600080805b600184015481101561323c57600084600101828154811061319057fe5b9060005260206000200160009054906101000a90046001600160a01b03169050613231816001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ec57600080fd5b505afa158015613200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322491906135e6565b849063ffffffff611a4416565b925050600101613173565b5092915050565b600061324f8383612c0f565b61328557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d5e565b506000610d5e565b6000818152600183016020526040812054801561334957835460001980830191908101906000908790839081106132c057fe5b90600052602060002001549050808760000184815481106132dd57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061330d57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610d5e565b6000915050610d5e565b6000610d5b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506133e7565b6000826133a457506000610d5e565b828202828482816133b157fe5b0414610d5b5760405162461bcd60e51b81526004016103f990613c0b565b60006001600160a01b03821663fc563658600561236e565b6000818484111561340b5760405162461bcd60e51b81526004016103f991906137e4565b505050900390565b60405180606001604052806000815260200160008152602001600081525090565b600060208284031215613445578081fd5b8135610d5b81613f31565b600060208284031215613461578081fd5b8151610d5b81613f31565b6000806040838503121561347e578081fd5b823561348981613f31565b9150602083013561349981613f31565b809150509250929050565b600080604083850312156134b6578182fd5b82356134c181613f31565b946020939093013593505050565b600080600080600060a086880312156134e6578081fd5b85356134f181613f31565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215613523578081fd5b81518015158114610d5b578182fd5b600060208284031215613543578081fd5b5035919050565b6000806040838503121561355c578182fd5b82359150602083013561349981613f31565b60008060408385031215613580578182fd5b50508035926020909101359150565b6000606082840312156135a0578081fd5b6040516060810181811067ffffffffffffffff821117156135bf578283fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000602082840312156135f7578081fd5b5051919050565b600080600060608486031215613612578283fd5b83359250602084013561362481613f31565b9150604084013561363481613f31565b809150509250925092565b60008060408385031215613651578182fd5b505080516020909101519092909150565b60008151808452815b818110156136875760208185018101518683018201520161366b565b818111156136985782602083870101525b50601f01601f19169290920160200192915050565b6a5041555345525f524f4c4560a81b8152600b0190565b694f574e45525f524f4c4560b01b8152600a0190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03978816815295871660208701529390951660408501526060840191909152608083015260a082019290925260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156137ad5783516001600160a01b031683529284019291840191600101613788565b50909695505050505050565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b600060208252610d5b6020830184613662565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602a908201527f43616e6e6f742064726177646f776e207768656e207061796d656e74732061726040820152696520706173742064756560b01b606082015260800190565b6020808252602d908201527f596f75206861766520696e737566666963656e742062616c616e636520666f7260408201526c081d1a1a5cc81c185e5b595b9d609a1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601290820152712330b4b632b2103a3790323930bbb237bbb760711b604082015260600190565b6020808252602e908201527f54686520756e6465727772697465722063616e6e6f742063726561746520746860408201526d697320637265646974206c696e6560901b606082015260800190565b60208082526027908201527f4e6f20637265646974206c696e657320657869737420666f722074686973206260408201526637b93937bbb2b960c91b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b6020808252601e908201527f4d75737420686176652070617573657220726f6c6520746f2070617573650000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526028908201527f416d6f756e74206973206f76657220746865207065722d7472616e73616374696040820152671bdb881b1a5b5a5d60c21b606082015260800190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b602080825260139082015272556e6b6e6f776e20637265646974206c696e6560681b604082015260600190565b60208082526025908201527f596f7520646f206e6f742062656c6f6e6720746f207468697320637265646974604082015264206c696e6560d81b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f4661696c656420746f20636f6c6c656374207061796d656e7400000000000000604082015260600190565b6020808252603a908201527f54686973206c696d69742069732067726561746572207468616e20746865206d60408201527f617820616c6c6f776564206279207468652070726f746f636f6c000000000000606082015260800190565b6020808252601c908201527f4d7573742064726177646f776e206d6f7265207468616e207a65726f00000000604082015260600190565b602080825260409082018190527f54686520626f72726f77657220646f6573206e6f74206861766520656e6f7567908201527f6820637265646974206c696d697420666f7220746869732064726177646f776e606082015260800190565b60208082526017908201527f4d75737420706179206d6f7265207468616e207a65726f000000000000000000604082015260600190565b6020808252818101527f4d75737420686176652070617573657220726f6c6520746f20756e7061757365604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6001600160a01b0381168114610c3757600080fdfea2646970667358221220cda1bb7d275ef1277ed7772c416950ffad96dd50a8c563cf11534ef263ba7c4b64736f6c63430006080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638456cb5911610104578063c4076876116100a2578063e63ab1e911610071578063e63ab1e914610380578063e6a0452314610388578063ed80c8501461039b578063f5c7e0e2146103a3576101cf565b8063c40768761461033f578063ca15c87314610352578063d547741f14610365578063e58378bb14610378576101cf565b8063a217fddf116100de578063a217fddf14610314578063a6f4487e1461031c578063b6db75a014610324578063c26ff9361461032c576101cf565b80638456cb59146102e65780639010d07c146102ee57806391d1485414610301576101cf565b806351d33a57116101715780636bb987fe1161014b5780636bb987fe1461029657806379502c551461029e5780637d533642146102b3578063844a28c3146102c6576101cf565b806351d33a5714610266578063526d81f6146102795780635c975abb14610281576101cf565b80632f2ff15d116101ad5780632f2ff15d1461022557806336568abe146102385780633f4ba83a1461024b578063485cc95514610253576101cf565b8063097616a3146101d45780630e4645ef146101e9578063248a9ca3146101fc575b600080fd5b6101e76101e2366004613434565b6103b6565b005b6101e76101f73660046134a4565b6104ec565b61020f61020a366004613532565b6105bc565b60405161021c91906137c4565b60405180910390f35b6101e761023336600461354a565b6105d4565b6101e761024636600461354a565b610618565b6101e761065a565b6101e761026136600461346c565b61069f565b6101e76102743660046135fe565b610749565b6101e7610baf565b610289610c3a565b60405161021c91906137b9565b61020f610c43565b6102a6610c49565b60405161021c91906136da565b61020f6102c1366004613434565b610c59565b6102d96102d4366004613434565b610c6c565b60405161021c919061376c565b6101e7610d0a565b6102a66102fc36600461356e565b610d3d565b61028961030f36600461354a565b610d64565b61020f610d82565b61020f610d87565b610289610d8e565b6102d961033a366004613434565b610da4565b6101e761034d3660046134a4565b610e3d565b61020f610360366004613532565b610f54565b6101e761037336600461354a565b610f6b565b61020f610fa5565b61020f610fbc565b6101e76103963660046134cf565b610fc8565b61020f611299565b6101e76103b1366004613434565b6112a0565b600054610100900460ff16806103cf57506103cf611401565b806103dd575060005460ff16155b6104025760405162461bcd60e51b81526004016103f990613c4c565b60405180910390fd5b600054610100900460ff1615801561042d576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166104535760405162461bcd60e51b81526004016103f990613b64565b61045b611407565b610463611488565b61046b611514565b61048860405161047a906136c4565b60405180910390208361060e565b61049760405161047a906136ad565b6104c76040516104a6906136ad565b60405180910390206040516104ba906136c4565b60405180910390206115a3565b6104d66040516104a6906136c4565b80156104e8576000805461ff00191690555b5050565b6104f4610d8e565b6105105760405162461bcd60e51b81526004016103f990613e66565b60975460ff16156105335760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b03821660009081526101c660205260409020610555826115b8565b6105715760405162461bcd60e51b81526004016103f990613cd1565b8181556040516001600160a01b038416907f7be5403eca163f383a39c2d1f65a8fee2c9e41e7e6b150f4abfe16eaaf1d9076906105af9085906137c4565b60405180910390a2505050565b6000818152606560205260409020600201545b919050565b6000828152606560205260409020600201546105f29061030f611645565b61060e5760405162461bcd60e51b81526004016103f99061385f565b6104e88282611649565b610620611645565b6001600160a01b0316816001600160a01b0316146106505760405162461bcd60e51b81526004016103f990613eb1565b6104e882826116b8565b610679604051610669906136ad565b604051809103902061030f611645565b6106955760405162461bcd60e51b81526004016103f990613dfa565b61069d611727565b565b600054610100900460ff16806106b857506106b8611401565b806106c6575060005460ff16155b6106e25760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff1615801561070d576000805460ff1961ff0019909116610100171660011790555b610716836103b6565b6101c580546001600160a01b0319166001600160a01b0384161790558015610744576000805461ff00191690555b505050565b60975460ff161561076c5760405162461bcd60e51b81526004016103f990613af2565b3360009081526101c760205260409020805483919061079d5760405162461bcd60e51b81526004016103f990613a24565b6001600160a01b0384811660009081526101c86020526040902054166107d55760405162461bcd60e51b81526004016103f990613b99565b600085116107f55760405162461bcd60e51b81526004016103f990613d2e565b336001600160a01b0316826001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561083857600080fd5b505afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190613450565b6001600160a01b0316146108965760405162461bcd60e51b81526004016103f990613bc6565b61089f85611793565b6108bb5760405162461bcd60e51b81526004016103f990613b1c565b6108c585836117ae565b6108e15760405162461bcd60e51b81526004016103f990613d65565b6108ea82611867565b156109075760405162461bcd60e51b81526004016103f9906138dc565b6001600160a01b038316610919573392505b816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a91906135e6565b6109ed576040516327e7b26360e01b81526001600160a01b038316906327e7b263906109ba9043906004016137c4565b600060405180830381600087803b1580156109d457600080fd5b505af11580156109e8573d6000803e3d6000fd5b505050505b6000806109fa844361192b565b915091506000610a8188866001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3d57600080fd5b505afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7591906135e6565b9063ffffffff611a4416565b9050610a8f85828585611a69565b846001600160a01b0316336001600160a01b03167f7ec4669c579321a5cf5a6b525637eb0924a93e2e11eab9d14be8b44de1116b1b8a604051610ad291906137c4565b60405180910390a36101c554600090610af3906001600160a01b0316611cfe565b6101c5546001600160a01b03918216916323b872dd91610b139116611d05565b898c6040518463ffffffff1660e01b8152600401610b33939291906136ee565b602060405180830381600087803b158015610b4d57600080fd5b505af1158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b859190613512565b905080610ba45760405162461bcd60e51b81526004016103f9906139aa565b505050505050505050565b600054610100900460ff1680610bc85750610bc8611401565b80610bd6575060005460ff16155b610bf25760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff16158015610c1d576000805460ff1961ff0019909116610100171660011790555b610c25611488565b8015610c37576000805461ff00191690555b50565b60975460ff1690565b61168081565b6101c5546001600160a01b031681565b6101c66020526000908152604090205481565b60975460609060ff1615610c925760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b03821660009081526101c6602090815260409182902060010180548351818402810184019094528084529091830182828015610cfe57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ce0575b50505050509050919050565b610d19604051610669906136ad565b610d355760405162461bcd60e51b81526004016103f990613abb565b61069d611d84565b6000828152606560205260408120610d5b908363ffffffff611ddd16565b90505b92915050565b6000828152606560205260408120610d5b908363ffffffff611de916565b600081565b6101c35481565b6000610d9f604051610669906136c4565b905090565b60975460609060ff1615610dca5760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b03821660009081526101c7602090815260409182902080548351818402810184019094528084529091830182828015610cfe576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610ce05750505050509050919050565b60975460ff1615610e605760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b0382811660009081526101c8602052604090205416610e985760405162461bcd60e51b81526004016103f990613b99565b60008111610eb85760405162461bcd60e51b81526004016103f990613dc3565b81610ec38183611dfe565b806001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610efc57600080fd5b505afa158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3491906135e6565b431015610f4157506104e8565b61074481610f4e83611fd8565b4361206c565b6000818152606560205260408120610d5e9061225c565b600082815260656020526040902060020154610f899061030f611645565b6106505760405162461bcd60e51b81526004016103f990613a6b565b604051610fb1906136c4565b604051809103902081565b604051610fb1906136ad565b60975460ff1615610feb5760405162461bcd60e51b81526004016103f990613af2565b3360009081526101c6602090815260408083206001600160a01b03891684526101c790925290912061101d8683612267565b6110395760405162461bcd60e51b81526004016103f9906139d6565b6060308833898989896040516024016110589796959493929190613712565b60408051601f198184030181529190526020810180516001600160e01b0316630568cad960e31b1790529050600061108e612295565b6001600160a01b0316639390bce0836040518263ffffffff1660e01b81526004016110b991906137e4565b602060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190613450565b6001808601805480830182556000918252602080832090910180546001600160a01b038087166001600160a01b0319928316811790935589549586018a5589855283852090950180548216831790558184526101c89092526040808420805490931682179092559051939450849390928d16917fc1d7685016f2246662e70fe17df916e959813e9ab93d50c4f039c0c069c5f37191a3806001600160a01b0316632f2ff15d6040516111bc906136c4565b6040519081900390206101c5546111db906001600160a01b0316612318565b6040518363ffffffff1660e01b81526004016111f89291906137cd565b600060405180830381600087803b15801561121257600080fd5b505af1158015611226573d6000803e3d6000fd5b50506101c55460405163182cdbe360e11b81526001600160a01b038086169450633059b7c6935061125b9216906004016136da565b600060405180830381600087803b15801561127557600080fd5b505af1158015611289573d6000803e3d6000fd5b5050505050505050505050505050565b6101c45481565b60975460ff16156112c35760405162461bcd60e51b81526004016103f990613af2565b6001600160a01b0381811660009081526101c86020526040902054166112fb5760405162461bcd60e51b81526004016103f990613b99565b6000819050806001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137191906135e6565b43101561137e5750610c37565b6104e88161138b83611fd8565b836001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c457600080fd5b505afa1580156113d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fc91906135e6565b61206c565b303b1590565b600054610100900460ff16806114205750611420611401565b8061142e575060005460ff16155b61144a5760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff16158015610c25576000805460ff1961ff0019909116610100171660011790558015610c37576000805461ff001916905550565b600054610100900460ff16806114a157506114a1611401565b806114af575060005460ff16155b6114cb5760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff161580156114f6576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610c37576000805461ff001916905550565b600054610100900460ff168061152d575061152d611401565b8061153b575060005460ff16155b6115575760405162461bcd60e51b81526004016103f990613c4c565b600054610100900460ff16158015611582576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610c37576000805461ff001916905550565b60009182526065602052604090912060020155565b6101c5546000906001600160a01b031663fc56365860025b6040518263ffffffff1660e01b81526004016115ec91906137c4565b60206040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163c91906135e6565b90911115919050565b3390565b6000828152606560205260409020611667908263ffffffff61233016565b156104e857611674611645565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206116d6908263ffffffff61234516565b156104e8576116e3611645565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff166117495760405162461bcd60e51b81526004016103f9906138ae565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61177c611645565b60405161178991906136da565b60405180910390a1565b6101c5546000906001600160a01b031663fc563658826115d0565b6000816001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182191906135e6565b61185e84846001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3d57600080fd5b11159392505050565b600080600073__$44894cb0e228c8872d7664995d3f4ce933$__63ca573568854360006118b26101c560009054906101000a90046001600160a01b03166001600160a01b031661235a565b6040518563ffffffff1660e01b81526004016118d194939291906137f7565b604080518083038186803b1580156118e857600080fd5b505af41580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611920919061363f565b501515949350505050565b60008060008073__$44894cb0e228c8872d7664995d3f4ce933$$44894cb0e228c8872d7664995d3f4ce933$__63d7cc2a03898b6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612cb157600080fd5b505afa158015612cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce991906135e6565b86866040518563ffffffff1660e01b8152600401612d0a9493929190613f16565b60606040518083038186803b158015612d2257600080fd5b505af4158015612d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5a919061358f565b90506000612de382602001518b6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9f57600080fd5b505afa158015612db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd791906135e6565b9063ffffffff61335316565b9050612dfc82604001518261335390919063ffffffff16565b90506000612e3d828c6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9f57600080fd5b90506000612e5c82612dd786600001518e61335390919063ffffffff16565b9050612e958c84612e7a87600001518a61335390919063ffffffff16565b6020880151612e90908a9063ffffffff61335316565b611a69565b8a612eb183610a75876000015185611a4490919063ffffffff16565b14612eb857fe5b9251929b929a509850909650505050505050565b6101c554600090819073__$44894cb0e228c8872d7664995d3f4ce933$",
  "libraries": {
    "Accountant": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1"
  },
  "devdoc": {
    "author": "Goldfinch",
    "methods": {
      "assessCreditLine(address)": {
        "params": {
          "creditLineAddress": "The creditline that should be assessed."
        }
      },
      "createCreditLine(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_borrower": "The borrower for whom the CreditLine will be created",
          "_interestApr": "The interest amount, on an annualized basis (APR, so non-compounding), expressed as an integer. We assume 8 digits of precision. For example, to submit 15.34%, you would pass up 15340000, and 5.34% would be 5340000",
          "_limit": "The maximum amount a borrower can drawdown from this CreditLine",
          "_paymentPeriodInDays": "How many days in each payment period. ie. the frequency with which they need to make payments.",
          "_termInDays": "Number of days in the credit term. It is used to set the `termEndBlock` upon first drawdown. ie. The credit line should be fully paid off {_termIndays} days after the first drawdown.   * Requirements:   * - the caller must be an underwriter with enough limit (see `setUnderwriterGovernanceLimit`)"
        }
      },
      "drawdown(uint256,address,address)": {
        "params": {
          "addressToSendTo": "The address where they would like the funds sent. If the zero address is passed, it will be defaulted to the borrower's address (msg.sender). This is a convenience feature for when they would like the funds sent to an exchange or alternate wallet, different from the authentication address   * Requirements:   * - the caller must be the borrower on the creditLine",
          "amount": "The amount, in USDC atomic units, that a borrower wishes to drawdown",
          "creditLineAddress": "The creditline from which they would like to drawdown"
        }
      },
      "getBorrowerCreditLines(address)": {
        "params": {
          "borrowerAddress": "The borrower address you would like to see the credit lines of."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getUnderwriterCreditLines(address)": {
        "params": {
          "underwriterAddress": "The underwriter address you would like to see the credit lines of."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address)": {
        "params": {
          "_config": "The address of the GoldfinchConfig contract",
          "owner": "The address of who should have the \"OWNER_ROLE\" of this contract"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause   * See {Pausable-_pause}.   * Requirements:   * - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay(address,uint256)": {
        "params": {
          "amount": "The amount, in USDC atomic units, that a borrower wishes to pay",
          "creditLineAddress": "The credit line to be paid back"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "setUnderwriterGovernanceLimit(address,uint256)": {
        "params": {
          "limit": "What the new limit will be set to Requirements:   * - the caller must have the `OWNER_ROLE`.",
          "underwriterAddress": "The address of the underwriter for whom the limit shall change"
        }
      },
      "unpause()": {
        "details": "Unpauses the contract   * See {Pausable-_unpause}.   * Requirements:   * - the caller must have the Pauser role"
      }
    },
    "title": "Goldfinch's CreditDesk contract"
  },
  "userdoc": {
    "methods": {
      "assessCreditLine(address)": {
        "notice": "Assesses a particular creditLine. This will apply payments, which will update accounting and distribute gains or losses back to the pool accordingly. This function is idempotent, and anyone is allowed to call it."
      },
      "createCreditLine(address,uint256,uint256,uint256,uint256)": {
        "notice": "Allows an underwriter to create a new CreditLine for a single borrower"
      },
      "drawdown(uint256,address,address)": {
        "notice": "Allows a borrower to drawdown on their creditline. `amount` USDC is sent to the borrower, and the credit line accounting is updated."
      },
      "getBorrowerCreditLines(address)": {
        "notice": "Simple getter for the creditlines of a given borrower"
      },
      "getUnderwriterCreditLines(address)": {
        "notice": "Simple getter for the creditlines of a given underwriter"
      },
      "initialize(address,address)": {
        "notice": "Run only once, on initialization"
      },
      "pay(address,uint256)": {
        "notice": "Allows a borrower to repay their loan. Payment is *collected* immediately (by sending it to the individual CreditLine), but it is not *applied* unless it is after the nextDueBlock, or until we assess the credit line (ie. payment period end). Any amounts over the minimum payment will be applied to outstanding principal (reducing the effective interest rate). If there is still any left over, it will remain in the USDC Balance of the CreditLine, which is held distinct from the Pool amounts, and can not be withdrawn by LP's."
      },
      "setUnderwriterGovernanceLimit(address,uint256)": {
        "notice": "Sets a particular underwriter's limit of how much credit the DAO will allow them to \"create\""
      }
    },
    "notice": "Main entry point for borrowers and underwriters. Handles key logic for creating CreditLine's, borrowing money, repayment, etc."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 49,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 51,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 116,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 43,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 161,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)157_storage)"
      },
      {
        "astId": 406,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2282,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2371,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2380,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 2421,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4524,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4528,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4532,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4536,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3932,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "totalWritedowns",
        "offset": 0,
        "slot": "451",
        "type": "t_uint256"
      },
      {
        "astId": 3934,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "totalLoansOutstanding",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 5035,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "config",
        "offset": 0,
        "slot": "453",
        "type": "t_contract(GoldfinchConfig)7304"
      },
      {
        "astId": 5092,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "underwriters",
        "offset": 0,
        "slot": "454",
        "type": "t_mapping(t_address,t_struct(Underwriter)5044_storage)"
      },
      {
        "astId": 5096,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "borrowers",
        "offset": 0,
        "slot": "455",
        "type": "t_mapping(t_address,t_struct(Borrower)5048_storage)"
      },
      {
        "astId": 5100,
        "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
        "label": "creditLines",
        "offset": 0,
        "slot": "456",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GoldfinchConfig)7304": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Borrower)5048_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CreditDesk.Borrower)",
        "numberOfBytes": "32",
        "value": "t_struct(Borrower)5048_storage"
      },
      "t_mapping(t_address,t_struct(Underwriter)5044_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CreditDesk.Underwriter)",
        "numberOfBytes": "32",
        "value": "t_struct(Underwriter)5044_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)157_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)157_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2057_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2056,
            "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1877_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Borrower)5048_storage": {
        "encoding": "inplace",
        "label": "struct CreditDesk.Borrower",
        "members": [
          {
            "astId": 5047,
            "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
            "label": "creditLines",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)157_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 154,
            "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2057_storage"
          },
          {
            "astId": 156,
            "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1877_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1872,
            "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1876,
            "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Underwriter)5044_storage": {
        "encoding": "inplace",
        "label": "struct CreditDesk.Underwriter",
        "members": [
          {
            "astId": 5040,
            "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
            "label": "governanceLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5043,
            "contract": "contracts/protocol/CreditDesk.sol:CreditDesk",
            "label": "creditLines",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}