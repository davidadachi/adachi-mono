{
  "address": "0x513150abaDE673a21b4b3e3d5213f6888cdFbE88",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "BorrowerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "createBorrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createCreditLine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract GoldfinchConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateGoldfinchConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7b2d7a98f05492159c7b6695fbdc8235c873c0623f79d2e69d0319504d27c60",
  "receipt": {
    "to": null,
    "from": "0xf3c9B38c155410456b5A98fD8bBf5E35B87F6d96",
    "contractAddress": "0x513150abaDE673a21b4b3e3d5213f6888cdFbE88",
    "transactionIndex": 9,
    "gasUsed": "4751314",
    "logsBloom": "0x
    "blockHash": "0xbfd84c1e5bd5ad5535144adc615bd365067c58ec9d83eaf87df0ab6375cf2c6b",
    "transactionHash": "0xb7b2d7a98f05492159c7b6695fbdc8235c873c0623f79d2e69d0319504d27c60",
    "logs": [],
    "blockNumber": 9093977,
    "cumulativeGasUsed": "5356035",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e2e6a7937b09ef08f199f5a8536ea2f5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BorrowerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createBorrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createCreditLine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateGoldfinchConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Goldfinch\",\"kind\":\"dev\",\"methods\":{\"createBorrower(address)\":{\"params\":{\"owner\":\"The address that will own the new Borrower instance\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"}},\"title\":\"CreditLineFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBorrower(address)\":{\"notice\":\"Allows anyone to create a Borrower contract instance\"}},\"notice\":\"Contract that allows us to create other contracts, such as CreditLines and BorrowerContracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/CreditLineFactory.sol\":\"CreditLineFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/gsn/contracts/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n// solhint-disable no-inline-assembly\\npragma solidity ^0.6.2;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address payable ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal override virtual view returns (bytes memory ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // we copy the msg.data , except the last 20 bytes (and update the total length)\\n            assembly {\\n                let ptr := mload(0x40)\\n                // copy only size-20 bytes\\n                let size := sub(calldatasize(),20)\\n                // structure RLP data as <offset> <length> <bytes>\\n                mstore(ptr, 0x20)\\n                mstore(add(ptr,32), size)\\n                calldatacopy(add(ptr,64), 0, size)\\n                return(ptr, add(size,64))\\n            }\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaef2a61eaaf6cbcf4fc96e23416fc3503b61c7d9b6544c0baf8a366bde49c156\",\"license\":\"MIT\"},\"@opengsn/gsn/contracts/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.6.2;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0xbb9d970a466d0155113acc87f0ea403df413e070e0a1ddce66439f2f82ac6d01\",\"license\":\"MIT\"},\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x2d4c59d3eef3b7e9f58ee1a5b54c907e181ff912bfc441e1769baaf2bc1d17cb\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function createCreditLine(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public virtual returns (address);\\n\\n  function drawdown(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n\\n  function applyPayment(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOfBLock) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc61b4b8b7f1f345de36ebc066a3983ddbaddb73c85e7227db1ecf0010decd772\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7b5fb02e023b6006a5199992f242caf23f64240c91e625f1390d6ca421b59531\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xafc7c4d5c4ec31e980c47b67e39dd175d68f4e9b89d82e8271f20ca45b256313\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 usdcAmount) external virtual;\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual;\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) public virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function drawdown(address to, uint256 amount) public virtual returns (bool);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n\\n  function assets() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x214055f77958813b40f46070ff6640bc824216e95970e0b6544dc478b2cd584e\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like ugpradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x75912e247a681928fc8b9a0d1dbf1fedd838b6b236b6d4a1fe932837a40c8fd7\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IFidu.sol\\\";\\nimport \\\"../../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/ICUSDCContract.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(GoldfinchConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getCreditDesk(GoldfinchConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getCUSDCContract(GoldfinchConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function oneInchAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function trustedForwarderAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function creditDeskAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function cusdcContractAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n}\\n\",\"keccak256\":\"0x6228b6ca315a910354d73b31cb641111193761877f54d36440a35fe7bb31616d\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    CreditLineFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder,\\n    CUSDCContract,\\n    GoldfinchConfig\\n  }\\n\\n  function getNumberName(uint256 number) public pure returns (string memory) {\\n    Numbers numberName = Numbers(number);\\n    if (Numbers.TransactionLimit == numberName) {\\n      return \\\"TransactionLimit\\\";\\n    }\\n    if (Numbers.TotalFundsLimit == numberName) {\\n      return \\\"TotalFundsLimit\\\";\\n    }\\n    if (Numbers.MaxUnderwriterLimit == numberName) {\\n      return \\\"MaxUnderwriterLimit\\\";\\n    }\\n    if (Numbers.ReserveDenominator == numberName) {\\n      return \\\"ReserveDenominator\\\";\\n    }\\n    if (Numbers.WithdrawFeeDenominator == numberName) {\\n      return \\\"WithdrawFeeDenominator\\\";\\n    }\\n    if (Numbers.LatenessGracePeriodInDays == numberName) {\\n      return \\\"LatenessGracePeriodInDays\\\";\\n    }\\n    if (Numbers.LatenessMaxDays == numberName) {\\n      return \\\"LatenessMaxDays\\\";\\n    }\\n    revert(\\\"Unknown value passed to getNumberName\\\");\\n  }\\n\\n  function getAddressName(uint256 addressKey) public pure returns (string memory) {\\n    Addresses addressName = Addresses(addressKey);\\n    if (Addresses.Pool == addressName) {\\n      return \\\"Pool\\\";\\n    }\\n    if (Addresses.CreditLineImplementation == addressName) {\\n      return \\\"CreditLineImplementation\\\";\\n    }\\n    if (Addresses.CreditLineFactory == addressName) {\\n      return \\\"CreditLineFactory\\\";\\n    }\\n    if (Addresses.CreditDesk == addressName) {\\n      return \\\"CreditDesk\\\";\\n    }\\n    if (Addresses.Fidu == addressName) {\\n      return \\\"Fidu\\\";\\n    }\\n    if (Addresses.USDC == addressName) {\\n      return \\\"USDC\\\";\\n    }\\n    if (Addresses.TreasuryReserve == addressName) {\\n      return \\\"TreasuryReserve\\\";\\n    }\\n    if (Addresses.ProtocolAdmin == addressName) {\\n      return \\\"ProtocolAdmin\\\";\\n    }\\n    if (Addresses.OneInch == addressName) {\\n      return \\\"OneInch\\\";\\n    }\\n    if (Addresses.TrustedForwarder == addressName) {\\n      return \\\"TrustedForwarder\\\";\\n    }\\n    if (Addresses.CUSDCContract == addressName) {\\n      return \\\"CUSDCContract\\\";\\n    }\\n    revert(\\\"Unknown value passed to getAddressName\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x3a7885d7028da7d37ade754226120767eb76bfcd474960cabf3046721f7ba190\",\"license\":\"MIT\"},\"contracts/protocol/core/CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\n\\n/**\\n * @title CreditLine\\n * @notice A \\\"dumb\\\" state container that represents the agreement between an Underwriter and\\n *  the borrower. Includes the terms of the loan, as well as the current accounting state, such as interest owed.\\n *  This contract purposefully has essentially no business logic. Really just setters and getters.\\n * @author Goldfinch\\n */\\n\\n// solhint-disable-next-line max-states-count\\ncontract CreditLine is BaseUpgradeablePausable {\\n  // Credit line terms\\n  address public borrower;\\n  address public underwriter;\\n  uint256 public limit;\\n  uint256 public interestApr;\\n  uint256 public paymentPeriodInDays;\\n  uint256 public termInDays;\\n  uint256 public lateFeeApr;\\n\\n  // Accounting variables\\n  uint256 public balance;\\n  uint256 public interestOwed;\\n  uint256 public principalOwed;\\n  uint256 public termEndBlock;\\n  uint256 public nextDueBlock;\\n  uint256 public interestAccruedAsOfBlock;\\n  uint256 public writedownAmount;\\n  uint256 public lastFullPaymentBlock;\\n\\n  function initialize(\\n    address owner,\\n    address _borrower,\\n    address _underwriter,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public initializer {\\n    require(owner != address(0) && _borrower != address(0) && _underwriter != address(0), \\\"Zero address passed in\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    borrower = _borrower;\\n    underwriter = _underwriter;\\n    limit = _limit;\\n    interestApr = _interestApr;\\n    paymentPeriodInDays = _paymentPeriodInDays;\\n    termInDays = _termInDays;\\n    lateFeeApr = _lateFeeApr;\\n    interestAccruedAsOfBlock = block.number;\\n  }\\n\\n  function setTermEndBlock(uint256 newTermEndBlock) external onlyAdmin {\\n    termEndBlock = newTermEndBlock;\\n  }\\n\\n  function setNextDueBlock(uint256 newNextDueBlock) external onlyAdmin {\\n    nextDueBlock = newNextDueBlock;\\n  }\\n\\n  function setBalance(uint256 newBalance) external onlyAdmin {\\n    balance = newBalance;\\n  }\\n\\n  function setInterestOwed(uint256 newInterestOwed) external onlyAdmin {\\n    interestOwed = newInterestOwed;\\n  }\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external onlyAdmin {\\n    principalOwed = newPrincipalOwed;\\n  }\\n\\n  function setInterestAccruedAsOfBlock(uint256 newInterestAccruedAsOfBlock) external onlyAdmin {\\n    interestAccruedAsOfBlock = newInterestAccruedAsOfBlock;\\n  }\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external onlyAdmin {\\n    writedownAmount = newWritedownAmount;\\n  }\\n\\n  function setLastFullPaymentBlock(uint256 newLastFullPaymentBlock) external onlyAdmin {\\n    lastFullPaymentBlock = newLastFullPaymentBlock;\\n  }\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external onlyAdmin {\\n    lateFeeApr = newLateFeeApr;\\n  }\\n\\n  function setLimit(uint256 newAmount) external onlyAdminOrUnderwriter {\\n    limit = newAmount;\\n  }\\n\\n  function authorizePool(address configAddress) external onlyAdmin {\\n    GoldfinchConfig config = GoldfinchConfig(configAddress);\\n    address poolAddress = config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n    address usdcAddress = config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n    // Approve the pool for an infinite amount\\n    bool success = IERC20withDec(usdcAddress).approve(poolAddress, uint256(-1));\\n    require(success, \\\"Failed to approve USDC\\\");\\n  }\\n\\n  modifier onlyAdminOrUnderwriter() {\\n    require(isAdmin() || _msgSender() == underwriter, \\\"Restricted to owner or underwriter\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5e5f0557055d9b87a6e3881228baf403713d2850beedf48045324214a5da6bf0\",\"license\":\"MIT\"},\"contracts/protocol/core/CreditLineFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../periphery/Borrower.sol\\\";\\nimport \\\"./CreditLine.sol\\\";\\nimport \\\"./ConfigHelper.sol\\\";\\n\\n/**\\n * @title CreditLineFactory\\n * @notice Contract that allows us to create other contracts, such as CreditLines and BorrowerContracts\\n * @author Goldfinch\\n */\\n\\ncontract CreditLineFactory is BaseUpgradeablePausable {\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  event BorrowerCreated(address indexed borrower, address indexed owner);\\n\\n  function initialize(address owner, GoldfinchConfig _config) public initializer {\\n    __BaseUpgradeablePausable__init(owner);\\n    config = _config;\\n  }\\n\\n  function createCreditLine() external returns (address) {\\n    CreditLine newCreditLine = new CreditLine();\\n    return address(newCreditLine);\\n  }\\n\\n  /**\\n   * @notice Allows anyone to create a Borrower contract instance\\n   * @param owner The address that will own the new Borrower instance\\n   */\\n  function createBorrower(address owner) external returns (address) {\\n    Borrower borrower = new Borrower();\\n    borrower.initialize(owner, config);\\n    emit BorrowerCreated(address(borrower), owner);\\n    return address(borrower);\\n  }\\n\\n  function updateGoldfinchConfig() external onlyAdmin {\\n    config = GoldfinchConfig(config.configAddress());\\n  }\\n}\\n\",\"keccak256\":\"0x5629df0bbad02a2c9393f0fc1b8089b6a9d7abc5c80f538faf38d1301cd98b12\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable {\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  function initialize(address owner) public initializer {\\n    __BaseUpgradeablePausable__init(owner);\\n  }\\n\\n  function setAddress(uint256 addressIndex, address newAddress) public onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  function setNumber(uint256 index, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  /*\\n    Using custom getters incase we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 addressKey) public view returns (address) {\\n    return addresses[addressKey];\\n  }\\n\\n  function getNumber(uint256 number) public view returns (uint256) {\\n    return numbers[number];\\n  }\\n}\\n\",\"keccak256\":\"0xa9e1b1b8f175fe246733a8ff55d8138a28840f128d77237f90c60a93cdef3196\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x07995096f020b640e9a5f6cd0ca4c688ae5ab12a64a2c010d2b0960eea436e8e\",\"license\":\"MIT\"},\"contracts/protocol/periphery/Borrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../core/BaseUpgradeablePausable.sol\\\";\\nimport \\\"../core/ConfigHelper.sol\\\";\\nimport \\\"../core/CreditLine.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"@opengsn/gsn/contracts/BaseRelayRecipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Goldfinch's Borrower contract\\n * @notice These contracts represent the a convenient way for a borrower to interact with Goldfinch\\n *  They are 100% optional. However, they let us add many sophisticated and convient features for borrowers\\n *  while still keeping our core protocol small and secure. We therefore expect most borrowers will use them.\\n *  This contract is the \\\"official\\\" borrower contract that will be maintained by Goldfinch governance. However,\\n *  in theory, anyone can fork or create their own version, or not use any contract at all. The core functionality\\n *  is completely agnostic to whether it is interacting with a contract or an externally owned account (EOA).\\n * @author Goldfinch\\n */\\n\\ncontract Borrower is BaseUpgradeablePausable, BaseRelayRecipient {\\n  using SafeMath for uint256;\\n\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  address private constant USDT_ADDRESS = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n  address private constant BUSD_ADDRESS = address(0x4Fabb145d64652a948d72533023f6E7A623C7C53);\\n\\n  function initialize(address owner, GoldfinchConfig _config) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be empty\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    config = _config;\\n\\n    trustedForwarder = config.trustedForwarderAddress();\\n\\n    // Handle default approvals. Pool, and OneInch for maximum amounts\\n    address oneInch = config.oneInchAddress();\\n    IERC20withDec usdc = config.getUSDC();\\n    usdc.approve(config.poolAddress(), uint256(-1));\\n    usdc.approve(oneInch, uint256(-1));\\n    bytes memory data = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", oneInch, uint256(-1));\\n    invoke(USDT_ADDRESS, data);\\n    invoke(BUSD_ADDRESS, data);\\n  }\\n\\n  /**\\n   * @notice Allows a borrower to drawdown on their creditline through the CreditDesk.\\n   * @param creditLineAddress The creditline from which they would like to drawdown\\n   * @param amount The amount, in USDC atomic units, that a borrower wishes to drawdown\\n   * @param addressToSendTo The address where they would like the funds sent. If the zero address is passed,\\n   *  it will be defaulted to the contracts address (msg.sender). This is a convenience feature for when they would\\n   *  like the funds sent to an exchange or alternate wallet, different from the authentication address\\n   */\\n  function drawdown(\\n    address creditLineAddress,\\n    uint256 amount,\\n    address addressToSendTo\\n  ) external onlyAdmin {\\n    config.getCreditDesk().drawdown(creditLineAddress, amount);\\n\\n    if (addressToSendTo == address(0) || addressToSendTo == address(this)) {\\n      addressToSendTo = _msgSender();\\n    }\\n\\n    transferERC20(config.usdcAddress(), addressToSendTo, amount);\\n  }\\n\\n  function drawdownWithSwapOnOneInch(\\n    address creditLineAddress,\\n    uint256 amount,\\n    address addressToSendTo,\\n    address toToken,\\n    uint256 minTargetAmount,\\n    uint256[] calldata exchangeDistribution\\n  ) public onlyAdmin {\\n    // Drawdown to the Borrower contract\\n    config.getCreditDesk().drawdown(creditLineAddress, amount);\\n\\n    // Do the swap\\n    swapOnOneInch(config.usdcAddress(), toToken, amount, minTargetAmount, exchangeDistribution);\\n\\n    // Default to sending to the owner, and don't let funds stay in this contract\\n    if (addressToSendTo == address(0) || addressToSendTo == address(this)) {\\n      addressToSendTo = _msgSender();\\n    }\\n\\n    // Fulfill the send to\\n    bytes memory _data = abi.encodeWithSignature(\\\"balanceOf(address)\\\", address(this));\\n    uint256 receivedAmount = toUint256(invoke(toToken, _data));\\n    transferERC20(toToken, addressToSendTo, receivedAmount);\\n  }\\n\\n  function transferERC20(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) public onlyAdmin {\\n    bytes memory _data = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount);\\n    invoke(token, _data);\\n  }\\n\\n  /**\\n   * @notice Allows a borrower to payback loans by calling the `pay` function directly on the CreditDesk\\n   * @param creditLineAddress The credit line to be paid back\\n   * @param amount The amount, in USDC atomic units, that the borrower wishes to pay\\n   */\\n  function pay(address creditLineAddress, uint256 amount) external onlyAdmin {\\n    bool success = config.getUSDC().transferFrom(_msgSender(), address(this), amount);\\n    require(success, \\\"Failed to transfer USDC\\\");\\n    config.getCreditDesk().pay(creditLineAddress, amount);\\n  }\\n\\n  function payMultiple(address[] calldata creditLines, uint256[] calldata amounts) external onlyAdmin {\\n    require(creditLines.length == amounts.length, \\\"Creditlines and amounts must be the same length\\\");\\n\\n    uint256 totalAmount;\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      totalAmount = totalAmount.add(amounts[i]);\\n    }\\n\\n    // Do a single transfer, which is cheaper\\n    bool success = config.getUSDC().transferFrom(_msgSender(), address(this), totalAmount);\\n    require(success, \\\"Failed to transfer USDC\\\");\\n\\n    ICreditDesk creditDesk = config.getCreditDesk();\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      creditDesk.pay(creditLines[i], amounts[i]);\\n    }\\n  }\\n\\n  function payInFull(address creditLineAddress, uint256 amount) external onlyAdmin {\\n    bool success = config.getUSDC().transferFrom(_msgSender(), creditLineAddress, amount);\\n    require(success, \\\"Failed to transfer USDC\\\");\\n\\n    config.getCreditDesk().applyPayment(creditLineAddress, amount);\\n    require(CreditLine(creditLineAddress).balance() == 0, \\\"Failed to fully pay off creditline\\\");\\n  }\\n\\n  function payWithSwapOnOneInch(\\n    address creditLineAddress,\\n    uint256 originAmount,\\n    address fromToken,\\n    uint256 minTargetAmount,\\n    uint256[] memory exchangeDistribution\\n  ) external onlyAdmin {\\n    transferFrom(fromToken, _msgSender(), address(this), originAmount);\\n    IERC20withDec usdc = config.getUSDC();\\n    swapOnOneInch(fromToken, address(usdc), originAmount, minTargetAmount, exchangeDistribution);\\n    uint256 usdcBalance = usdc.balanceOf(address(this));\\n    config.getCreditDesk().pay(creditLineAddress, usdcBalance);\\n  }\\n\\n  function payMultipleWithSwapOnOneInch(\\n    address[] memory creditLines,\\n    uint256[] memory minAmounts,\\n    uint256 originAmount,\\n    address fromToken,\\n    uint256[] memory exchangeDistribution\\n  ) external onlyAdmin {\\n    require(creditLines.length == minAmounts.length, \\\"Creditlines and amounts must be the same length\\\");\\n\\n    uint256 totalMinAmount = 0;\\n    for (uint256 i = 0; i < minAmounts.length; i++) {\\n      totalMinAmount = totalMinAmount.add(minAmounts[i]);\\n    }\\n\\n    transferFrom(fromToken, _msgSender(), address(this), originAmount);\\n\\n    IERC20withDec usdc = config.getUSDC();\\n    swapOnOneInch(fromToken, address(usdc), originAmount, totalMinAmount, exchangeDistribution);\\n\\n    ICreditDesk creditDesk = config.getCreditDesk();\\n    for (uint256 i = 0; i < minAmounts.length; i++) {\\n      creditDesk.pay(creditLines[i], minAmounts[i]);\\n    }\\n\\n    uint256 remainingUSDC = usdc.balanceOf(address(this));\\n    if (remainingUSDC > 0) {\\n      bool success = usdc.transfer(creditLines[0], remainingUSDC);\\n      require(success, \\\"Failed to transfer USDC\\\");\\n    }\\n  }\\n\\n  function transferFrom(\\n    address erc20,\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal {\\n    bytes memory _data;\\n    // Do a low-level invoke on this transfer, since Tether fails if we use the normal IERC20 interface\\n    _data = abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", sender, recipient, amount);\\n    invoke(address(erc20), _data);\\n  }\\n\\n  function swapOnOneInch(\\n    address fromToken,\\n    address toToken,\\n    uint256 originAmount,\\n    uint256 minTargetAmount,\\n    uint256[] memory exchangeDistribution\\n  ) internal {\\n    bytes memory _data = abi.encodeWithSignature(\\n      \\\"swap(address,address,uint256,uint256,uint256[],uint256)\\\",\\n      fromToken,\\n      toToken,\\n      originAmount,\\n      minTargetAmount,\\n      exchangeDistribution,\\n      0\\n    );\\n    invoke(config.oneInchAddress(), _data);\\n  }\\n\\n  /**\\n   * @notice Performs a generic transaction.\\n   * @param _target The address for the transaction.\\n   * @param _data The data of the transaction.\\n   * Mostly copied from Argent:\\n   * https://github.com/argentlabs/argent-contracts/blob/develop/contracts/wallet/BaseWallet.sol#L111\\n   */\\n  function invoke(address _target, bytes memory _data) internal returns (bytes memory) {\\n    // External contracts can be compiled with different Solidity versions\\n    // which can cause \\\"revert without reason\\\" when called through,\\n    // for example, a standard IERC20 ABI compiled on the latest version.\\n    // This low-level call avoids that issue.\\n\\n    bool success;\\n    bytes memory _res;\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (success, _res) = _target.call(_data);\\n    if (!success && _res.length > 0) {\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    } else if (!success) {\\n      revert(\\\"VM: wallet invoke reverted\\\");\\n    }\\n    return _res;\\n  }\\n\\n  function toUint256(bytes memory _bytes) internal pure returns (uint256 value) {\\n    assembly {\\n      value := mload(add(_bytes, 0x20))\\n    }\\n  }\\n\\n  // OpenZeppelin contracts come with support for GSN _msgSender() (which just defaults to msg.sender)\\n  // Since there are two different versions of the function in the hierarchy, we need to instruct solidity to\\n  // use the relay recipient version which can actually pull the real sender from the parameters.\\n  // https://www.notion.so/My-contract-is-using-OpenZeppelin-How-do-I-add-GSN-support-2bee7e9d5f774a0cbb60d3a8de03e9fb\\n  function _msgSender() internal view override(ContextUpgradeSafe, BaseRelayRecipient) returns (address payable) {\\n    return BaseRelayRecipient._msgSender();\\n  }\\n\\n  function _msgData() internal view override(ContextUpgradeSafe, BaseRelayRecipient) returns (bytes memory ret) {\\n    return BaseRelayRecipient._msgData();\\n  }\\n\\n  function versionRecipient() external view override returns (string memory) {\\n    return \\\"2.0.0\\\";\\n  }\\n}\\n\",\"keccak256\":\"0xf422bfed92b3a0d00fde18b3eaf429a4d849b42340a17f1150216081a4e671e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506154ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806379502c55116100b8578063a217fddf1161007c578063a217fddf146102f6578063b6db75a0146102fe578063ca15c87314610306578063d547741f14610323578063e58378bb1461034f578063e63ab1e91461035757610137565b806379502c55146102715780638456cb59146102795780638a0a61d8146102815780639010d07c146102a757806391d14854146102ca57610137565b80633f4ba83a116100ff5780633f4ba83a1461020f578063485cc955146102175780634f92a72814610245578063526d81f61461024d5780635c975abb1461025557610137565b806301b215511461013c578063097616a314610160578063248a9ca3146101885780632f2ff15d146101b757806336568abe146101e3575b600080fd5b61014461035f565b604080516001600160a01b039092168252519081900360200190f35b6101866004803603602081101561017657600080fd5b50356001600160a01b0316610391565b005b6101a56004803603602081101561019e57600080fd5b5035610515565b60408051918252519081900360200190f35b610186600480360360408110156101cd57600080fd5b50803590602001356001600160a01b031661052a565b610186600480360360408110156101f957600080fd5b50803590602001356001600160a01b0316610592565b6101866105f3565b6101866004803603604081101561022d57600080fd5b506001600160a01b0381358116916020013516610652565b61018661071b565b610186610797565b61025d610841565b604080519115158252519081900360200190f35b61014461084a565b61018661085a565b6101446004803603602081101561029757600080fd5b50356001600160a01b03166108b7565b610144600480360360408110156102bd57600080fd5b5080359060200135610993565b61025d600480360360408110156102e057600080fd5b50803590602001356001600160a01b03166109b4565b6101a56109cc565b61025d6109d1565b6101a56004803603602081101561031c57600080fd5b50356109f2565b6101866004803603604081101561033957600080fd5b50803590602001356001600160a01b0316610a09565b6101a5610a62565b6101a5610a74565b60008060405161036e906110ee565b604051809103906000f08015801561038a573d6000803e3d6000fd5b5091505090565b600054610100900460ff16806103aa57506103aa610a86565b806103b8575060005460ff16155b6103f35760405162461bcd60e51b815260040180806020018281038252602e815260200180615442602e913960400191505060405180910390fd5b600054610100900460ff1615801561041e576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038216610479576040805162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604482015290519081900360640190fd5b610481610a8c565b610489610b2c565b610491610bd7565b6104a96000805160206153d283398151915283610588565b6104c160008051602061542283398151915283610588565b6104e76000805160206154228339815191526000805160206153d2833981519152610c85565b6104ff6000805160206153d283398151915280610c85565b8015610511576000805461ff00191690555b5050565b60009081526065602052604090206002015490565b60008281526065602052604090206002015461054d90610548610c9a565b6109b4565b6105885760405162461bcd60e51b815260040180806020018281038252602f815260200180615377602f913960400191505060405180910390fd5b6105118282610c9e565b61059a610c9a565b6001600160a01b0316816001600160a01b0316146105e95760405162461bcd60e51b815260040180806020018281038252602f81526020018061549b602f913960400191505060405180910390fd5b6105118282610d07565b61060d600080516020615422833981519152610548610c9a565b6106485760405162461bcd60e51b815260040180806020018281038252602c8152602001806153a6602c913960400191505060405180910390fd5b610650610d70565b565b600054610100900460ff168061066b575061066b610a86565b80610679575060005460ff16155b6106b45760405162461bcd60e51b815260040180806020018281038252602e815260200180615442602e913960400191505060405180910390fd5b600054610100900460ff161580156106df576000805460ff1961ff0019909116610100171660011790555b6106e883610391565b6101c380546001600160a01b0319166001600160a01b0384161790558015610716576000805461ff00191690555b505050565b6107236109d1565b61075e5760405162461bcd60e51b815260040180806020018281038252602b815260200180615470602b913960400191505060405180910390fd5b6101c354610774906001600160a01b0316610e0e565b6101c380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16806107b057506107b0610a86565b806107be575060005460ff16155b6107f95760405162461bcd60e51b815260040180806020018281038252602e815260200180615442602e913960400191505060405180910390fd5b600054610100900460ff16158015610824576000805460ff1961ff0019909116610100171660011790555b61082c610b2c565b801561083e576000805461ff00191690555b50565b60975460ff1690565b6101c3546001600160a01b031681565b610874600080516020615422833981519152610548610c9a565b6108af5760405162461bcd60e51b815260040180806020018281038252602c8152602001806153a6602c913960400191505060405180910390fd5b610650610e87565b6000806040516108c6906110fb565b604051809103906000f0801580156108e2573d6000803e3d6000fd5b506101c3546040805163485cc95560e01b81526001600160a01b038781166004830152928316602482015290519293509083169163485cc9559160448082019260009290919082900301818387803b15801561093d57600080fd5b505af1158015610951573d6000803e3d6000fd5b50506040516001600160a01b038087169350841691507f884b374b5b12a7314728c27eb7563a516e71377a34acbff07a9a9d751d32b4e990600090a392915050565b60008281526065602052604081206109ab9083610f08565b90505b92915050565b60008281526065602052604081206109ab9083610f14565b600081565b60006109ed6000805160206153d2833981519152610548610c9a565b905090565b60008181526065602052604081206109ae90610f29565b600082815260656020526040902060020154610a2790610548610c9a565b6105e95760405162461bcd60e51b81526004018080602001828103825260308152602001806153f26030913960400191505060405180910390fd5b6000805160206153d283398151915281565b60008051602061542283398151915281565b303b1590565b600054610100900460ff1680610aa55750610aa5610a86565b80610ab3575060005460ff16155b610aee5760405162461bcd60e51b815260040180806020018281038252602e815260200180615442602e913960400191505060405180910390fd5b600054610100900460ff1615801561082c576000805460ff1961ff001990911661010017166001179055801561083e576000805461ff001916905550565b600054610100900460ff1680610b455750610b45610a86565b80610b53575060005460ff16155b610b8e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615442602e913960400191505060405180910390fd5b600054610100900460ff16158015610bb9576000805460ff1961ff0019909116610100171660011790555b6097805460ff19169055801561083e576000805461ff001916905550565b600054610100900460ff1680610bf05750610bf0610a86565b80610bfe575060005460ff16155b610c395760405162461bcd60e51b815260040180806020018281038252602e815260200180615442602e913960400191505060405180910390fd5b600054610100900460ff16158015610c64576000805460ff1961ff0019909116610100171660011790555b60c9805460ff19166001179055801561083e576000805461ff001916905550565b60009182526065602052604090912060020155565b3390565b6000828152606560205260409020610cb69082610f34565b1561051157610cc3610c9a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152606560205260409020610d1f9082610f49565b1561051157610d2c610c9a565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff16610dbe576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610df1610c9a565b604080516001600160a01b039092168252519081900360200190a1565b60006001600160a01b03821663b93f9b0a600b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610e5557600080fd5b505afa158015610e69573d6000803e3d6000fd5b505050506040513d6020811015610e7f57600080fd5b505192915050565b60975460ff1615610ed2576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610df1610c9a565b60006109ab8383610f5e565b60006109ab836001600160a01b038416610fc2565b60006109ae82610fda565b60006109ab836001600160a01b038416610fde565b60006109ab836001600160a01b038416611028565b81546000908210610fa05760405162461bcd60e51b81526004018080602001828103825260228152602001806153556022913960400191505060405180910390fd5b826000018281548110610faf57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000610fea8383610fc2565b611020575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109ae565b5060006109ae565b600081815260018301602052604081205480156110e4578354600019808301919081019060009087908390811061105b57fe5b906000526020600020015490508087600001848154811061107857fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806110a857fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506109ae565b60009150506109ae565b6118628061110983390190565b6129ea8061296b8339019056fe608060405234801561001057600080fd5b50611842806100206000396000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80639010d07c11610151578063ca15c873116100c3578063e58378bb11610087578063e58378bb1461048e578063e63ab1e914610496578063f00db2601461049e578063f0b25bde146104a6578063fb1669ca146104ae578063fb9eb990146104c157610269565b8063ca15c8731461043a578063cc862de51461044d578063cf1787e614610455578063d547741f14610468578063df8fa4301461047b57610269565b8063a4d66daf11610115578063a4d66daf146103ff578063b396999214610407578063b3b8a9c71461040f578063b69ef8a814610422578063b6db75a01461042a578063bfe976a91461043257610269565b80639010d07c146103b657806391d14854146103c957806396c8df37146103dc57806399dd8df3146103ef578063a217fddf146103f757610269565b80633f4ba83a116101ea578063526d81f6116101ae578063526d81f61461035657806352ee365e1461035e5780635c975abb146103715780637957dda3146103865780637df1f1b9146103995780638456cb59146103ae57610269565b80633f4ba83a14610323578063408862d91461032b57806348e6f29614610333578063500b245e1461033b57806351bc49531461034357610269565b80632771eca8116102315780632771eca8146102c457806327ea6f2b146102d75780632f2ff15d146102ea5780633059b7c6146102fd57806336568abe1461031057610269565b8063097616a31461026e5780631790ebd51461028357806319350114146102a157806321856b36146102a9578063248a9ca3146102b1575b600080fd5b61028161027c3660046112f5565b6104d4565b005b61028b61060d565b604051610298919061146a565b60405180910390f35b61028b610614565b61028b61061b565b61028b6102bf3660046113ca565b610622565b6102816102d23660046113ca565b610637565b6102816102e53660046113ca565b610661565b6102816102f83660046113e2565b6106b1565b61028161030b3660046112f5565b6106f5565b61028161031e3660046113e2565b6108c5565b610281610907565b61028b610947565b61028b61094e565b61028b610955565b6102816103513660046113ca565b61095c565b610281610986565b61028161036c3660046113ca565b610a11565b610379610a3b565b604051610298919061145f565b6102816103943660046113ca565b610a44565b6103a1610a6e565b6040516102989190611432565b610281610a7e565b6103a16103c4366004611411565b610abc565b6103796103d73660046113e2565b610add565b6102816103ea3660046113ca565b610af5565b61028b610b1f565b61028b610b26565b61028b610b2b565b61028b610b32565b61028161041d3660046113ca565b610b39565b61028b610b63565b610379610b6a565b61028b610b8b565b61028b6104483660046113ca565b610b92565b61028b610ba9565b6102816104633660046113ca565b610bb0565b6102816104763660046113e2565b610bda565b610281610489366004611334565b610c14565b61028b610d4d565b61028b610d5f565b6103a1610d71565b61028b610d81565b6102816104bc3660046113ca565b610d88565b6102816104cf3660046113ca565b610db2565b600054610100900460ff16806104ed57506104ed610ddc565b806104fb575060005460ff16155b6105205760405162461bcd60e51b81526004016105179061165d565b60405180910390fd5b600054610100900460ff1615801561054b576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166105715760405162461bcd60e51b815260040161051790611628565b610579610de2565b610581610e63565b610589610eef565b6105a16000805160206117cd833981519152836106eb565b6105b96000805160206117ed833981519152836106eb565b6105df6000805160206117ed8339815191526000805160206117cd833981519152610f7e565b6105f76000805160206117cd83398151915280610f7e565b8015610609576000805461ff00191690555b5050565b6101cd5481565b6101cc5481565b6101cb5481565b60009081526065602052604090206002015490565b61063f610b6a565b61065b5760405162461bcd60e51b81526004016105179061171d565b6101d055565b610669610b6a565b8061068f57506101c4546001600160a01b0316610684610f93565b6001600160a01b0316145b6106ab5760405162461bcd60e51b8152600401610517906116ab565b6101c555565b6000828152606560205260409020600201546106cf906103d7610f93565b6106eb5760405162461bcd60e51b8152600401610517906114b5565b6106098282610f97565b6106fd610b6a565b6107195760405162461bcd60e51b81526004016105179061171d565b8060006001600160a01b03821663b93f9b0a826040518263ffffffff1660e01b8152600401610748919061146a565b60206040518083038186803b15801561076057600080fd5b505afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190611318565b905060006001600160a01b03831663b93f9b0a60056040518263ffffffff1660e01b81526004016107c9919061146a565b60206040518083038186803b1580156107e157600080fd5b505afa1580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108199190611318565b90506000816001600160a01b031663095ea7b3846000196040518363ffffffff1660e01b815260040161084d929190611446565b602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f91906113aa565b9050806108be5760405162461bcd60e51b815260040161051790611532565b5050505050565b6108cd610f93565b6001600160a01b0316816001600160a01b0316146108fd5760405162461bcd60e51b815260040161051790611768565b6106098282611000565b6109216000805160206117ed8339815191526103d7610f93565b61093d5760405162461bcd60e51b815260040161051790611562565b610945611069565b565b6101cf5481565b6101c85481565b6101ce5481565b610964610b6a565b6109805760405162461bcd60e51b81526004016105179061171d565b6101d155565b600054610100900460ff168061099f575061099f610ddc565b806109ad575060005460ff16155b6109c95760405162461bcd60e51b81526004016105179061165d565b600054610100900460ff161580156109f4576000805460ff1961ff0019909116610100171660011790555b6109fc610e63565b8015610a0e576000805461ff00191690555b50565b610a19610b6a565b610a355760405162461bcd60e51b81526004016105179061171d565b6101cf55565b60975460ff1690565b610a4c610b6a565b610a685760405162461bcd60e51b81526004016105179061171d565b6101ce55565b6101c3546001600160a01b031681565b610a986000805160206117ed8339815191526103d7610f93565b610ab45760405162461bcd60e51b815260040161051790611562565b6109456110d5565b6000828152606560205260408120610ad4908361112e565b90505b92915050565b6000828152606560205260408120610ad4908361113a565b610afd610b6a565b610b195760405162461bcd60e51b81526004016105179061171d565b6101cb55565b6101c75481565b600081565b6101c55481565b6101c65481565b610b41610b6a565b610b5d5760405162461bcd60e51b81526004016105179061171d565b6101cc55565b6101ca5481565b6000610b866000805160206117cd8339815191526103d7610f93565b905090565b6101d15481565b6000818152606560205260408120610ad79061114f565b6101d05481565b610bb8610b6a565b610bd45760405162461bcd60e51b81526004016105179061171d565b6101c955565b600082815260656020526040902060020154610bf8906103d7610f93565b6108fd5760405162461bcd60e51b8152600401610517906115ae565b600054610100900460ff1680610c2d5750610c2d610ddc565b80610c3b575060005460ff16155b610c575760405162461bcd60e51b81526004016105179061165d565b600054610100900460ff16158015610c82576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03891615801590610ca257506001600160a01b03881615155b8015610cb657506001600160a01b03871615155b610cd25760405162461bcd60e51b8152600401610517906116ed565b610cdb896104d4565b6101c380546001600160a01b03808b166001600160a01b0319928316179092556101c48054928a16929091169190911790556101c58690556101c68590556101c78490556101c88390556101c9829055436101cf558015610d42576000805461ff00191690555b505050505050505050565b6000805160206117cd83398151915281565b6000805160206117ed83398151915281565b6101c4546001600160a01b031681565b6101c95481565b610d90610b6a565b610dac5760405162461bcd60e51b81526004016105179061171d565b6101ca55565b610dba610b6a565b610dd65760405162461bcd60e51b81526004016105179061171d565b6101cd55565b303b1590565b600054610100900460ff1680610dfb5750610dfb610ddc565b80610e09575060005460ff16155b610e255760405162461bcd60e51b81526004016105179061165d565b600054610100900460ff161580156109fc576000805460ff1961ff0019909116610100171660011790558015610a0e576000805461ff001916905550565b600054610100900460ff1680610e7c5750610e7c610ddc565b80610e8a575060005460ff16155b610ea65760405162461bcd60e51b81526004016105179061165d565b600054610100900460ff16158015610ed1576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610a0e576000805461ff001916905550565b600054610100900460ff1680610f085750610f08610ddc565b80610f16575060005460ff16155b610f325760405162461bcd60e51b81526004016105179061165d565b600054610100900460ff16158015610f5d576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610a0e576000805461ff001916905550565b60009182526065602052604090912060020155565b3390565b6000828152606560205260409020610faf908261115a565b1561060957610fbc610f93565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152606560205260409020611018908261116f565b1561060957611025610f93565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff1661108b5760405162461bcd60e51b815260040161051790611504565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6110be610f93565b6040516110cb9190611432565b60405180910390a1565b60975460ff16156110f85760405162461bcd60e51b8152600401610517906115fe565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110be610f93565b6000610ad48383611184565b6000610ad4836001600160a01b0384166111c9565b6000610ad7826111e1565b6000610ad4836001600160a01b0384166111e5565b6000610ad4836001600160a01b03841661122f565b815460009082106111a75760405162461bcd60e51b815260040161051790611473565b8260000182815481106111b657fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60006111f183836111c9565b61122757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ad7565b506000610ad7565b600081815260018301602052604081205480156112eb578354600019808301919081019060009087908390811061126257fe5b906000526020600020015490508087600001848154811061127f57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806112af57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ad7565b6000915050610ad7565b600060208284031215611306578081fd5b8135611311816117b7565b9392505050565b600060208284031215611329578081fd5b8151611311816117b7565b600080600080600080600080610100898b031215611350578384fd5b883561135b816117b7565b9750602089013561136b816117b7565b9650604089013561137b816117b7565b979a96995096976060810135975060808101359660a0820135965060c0820135955060e0909101359350915050565b6000602082840312156113bb578081fd5b81518015158114611311578182fd5b6000602082840312156113db578081fd5b5035919050565b600080604083850312156113f4578182fd5b823591506020830135611406816117b7565b809150509250929050565b60008060408385031215611423578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601690820152754661696c656420746f20617070726f7665205553444360501b604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526022908201527f5265737472696374656420746f206f776e6572206f7220756e6465727772697460408201526132b960f11b606082015260800190565b6020808252601690820152752d32b9379030b2323932b9b9903830b9b9b2b21034b760511b604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6001600160a01b0381168114610a0e57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220efcd4c7ec14e8f47f97795290a5115a80f89141f5030ee4636c4496adc74262564736f6c634300060c0033608060405234801561001057600080fd5b506129ca806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806379502c5511610104578063a217fddf116100a2578063ca15c87311610071578063ca15c8731461038b578063d547741f1461039e578063e58378bb146103b1578063e63ab1e9146103b9576101cf565b8063a217fddf14610355578063b6db75a01461035d578063c407687614610365578063c8bc38ae14610378576101cf565b80638b032c64116100de5780638b032c64146103095780639010d07c1461031c57806391d148541461032f5780639db5dbe414610342576101cf565b806379502c55146102e45780637da0a877146102f95780638456cb5914610301576101cf565b8063486ff0cd11610171578063572b6c051161014b578063572b6c05146102965780635c975abb146102b65780635e3e9fad146102be5780636cbbbbc2146102d1576101cf565b8063486ff0cd14610266578063526d81f61461027b57806356b7b73a14610283576101cf565b806336568abe116101ad57806336568abe146102255780633f17474a146102385780633f4ba83a1461024b578063485cc95514610253576101cf565b8063097616a3146101d4578063248a9ca3146101e95780632f2ff15d14610212575b600080fd5b6101e76101e2366004611f80565b6103c1565b005b6101fc6101f736600461231a565b6104fa565b6040516102099190612485565b60405180910390f35b6101e7610220366004612332565b61050f565b6101e7610233366004612332565b610553565b6101e761024636600461209c565b610595565b6101e761071d565b6101e7610261366004611ff8565b61075d565b61026e610a24565b604051610209919061248e565b6101e7610a44565b6101e7610291366004612129565b610acf565b6102a96102a4366004611f80565b610c2e565b604051610209919061247a565b6102a9610c43565b6101e76102cc36600461205b565b610c4c565b6101e76102df366004612206565b610d34565b6102ec610fed565b60405161020991906123ab565b6102ec610ffd565b6101e761100d565b6101e7610317366004612030565b61104b565b6102ec61032a366004612356565b611232565b6102a961033d366004612332565b611253565b6101e7610350366004611fb8565b61126b565b6101fc6112e1565b6102a96112e6565b6101e7610373366004612030565b611307565b6101e761038636600461219d565b611465565b6101fc61039936600461231a565b611672565b6101e76103ac366004612332565b611689565b6101fc6116c3565b6101fc6116d5565b600054610100900460ff16806103da57506103da6116e7565b806103e8575060005460ff16155b61040d5760405162461bcd60e51b8152600401610404906127a9565b60405180910390fd5b600054610100900460ff16158015610438576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03821661045e5760405162461bcd60e51b815260040161040490612703565b6104666116ed565b61046e61176e565b6104766117fa565b61048e60008051602061295583398151915283610549565b6104a660008051602061297583398151915283610549565b6104cc600080516020612975833981519152600080516020612955833981519152611889565b6104e460008051602061295583398151915280611889565b80156104f6576000805461ff00191690555b5050565b60009081526065602052604090206002015490565b60008281526065602052604090206002015461052d9061033d61189e565b6105495760405162461bcd60e51b815260040161040490612503565b6104f682826118a8565b61055b61189e565b6001600160a01b0316816001600160a01b03161461058b5760405162461bcd60e51b815260040161040490612879565b6104f68282611911565b61059d6112e6565b6105b95760405162461bcd60e51b81526004016104049061282e565b6101c4546105cf906001600160a01b031661197a565b6001600160a01b0316636acab9da88886040518363ffffffff1660e01b81526004016105fc929190612461565b600060405180830381600087803b15801561061657600080fd5b505af115801561062a573d6000803e3d6000fd5b50506101c454610684925061064891506001600160a01b0316611985565b858886868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611a0592505050565b6001600160a01b03851615806106a257506001600160a01b03851630145b156106b2576106af61189e565b94505b6060306040516024016106c591906123ab565b60408051601f198184030181529190526020810180516001600160e01b03166370a0823160e01b179052905060006107056107008784611a6c565b611b15565b905061071286888361126b565b505050505050505050565b61073760008051602061297583398151915261033d61189e565b6107535760405162461bcd60e51b815260040161040490612580565b61075b611b1c565b565b600054610100900460ff168061077657506107766116e7565b80610784575060005460ff16155b6107a05760405162461bcd60e51b8152600401610404906127a9565b600054610100900460ff161580156107cb576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383166107f15760405162461bcd60e51b815260040161040490612738565b6107fa836103c1565b6101c480546001600160a01b0319166001600160a01b0384811691909117918290556108269116611b88565b6101c380546001600160a01b0319166001600160a01b039283161790556101c4546000916108549116611ba0565b6101c454909150600090610870906001600160a01b0316611bb8565b6101c4549091506001600160a01b038083169163095ea7b3916108939116611bc3565b6000196040518363ffffffff1660e01b81526004016108b3929190612461565b602060405180830381600087803b1580156108cd57600080fd5b505af11580156108e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090591906122fa565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b39061093690859060001990600401612461565b602060405180830381600087803b15801561095057600080fd5b505af1158015610964573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098891906122fa565b506060826000196040516024016109a0929190612461565b60408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b17905290506109ea73dac17f958d2ee523a2206206994597c13d831ec782611a6c565b50610a09734fabb145d64652a948d72533023f6e7a623c7c5382611a6c565b505050508015610a1f576000805461ff00191690555b505050565b6040805180820190915260058152640322e302e360dc1b60208201525b90565b600054610100900460ff1680610a5d5750610a5d6116e7565b80610a6b575060005460ff16155b610a875760405162461bcd60e51b8152600401610404906127a9565b600054610100900460ff16158015610ab2576000805460ff1961ff0019909116610100171660011790555b610aba61176e565b8015610acc576000805461ff00191690555b50565b610ad76112e6565b610af35760405162461bcd60e51b81526004016104049061282e565b610b0683610aff61189e565b3087611bda565b6101c454600090610b1f906001600160a01b0316611bb8565b9050610b2e8482878686611a05565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610b5d9030906004016123ab565b60206040518083038186803b158015610b7557600080fd5b505afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190612377565b6101c454909150610bc6906001600160a01b031661197a565b6001600160a01b031663c407687688836040518363ffffffff1660e01b8152600401610bf3929190612461565b600060405180830381600087803b158015610c0d57600080fd5b505af1158015610c21573d6000803e3d6000fd5b5050505050505050505050565b6101c3546001600160a01b0390811691161490565b60975460ff1690565b610c546112e6565b610c705760405162461bcd60e51b81526004016104049061282e565b6101c454610c86906001600160a01b031661197a565b6001600160a01b0316636acab9da84846040518363ffffffff1660e01b8152600401610cb3929190612461565b600060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b505050506001600160a01b0381161580610d0357506001600160a01b03811630145b15610d1357610d1061189e565b90505b6101c454610a1f90610d2d906001600160a01b0316611985565b828461126b565b610d3c6112e6565b610d585760405162461bcd60e51b81526004016104049061282e565b8351855114610d795760405162461bcd60e51b815260040161040490612603565b6000805b8551811015610db657610dac868281518110610d9557fe5b602002602001015183611c2f90919063ffffffff16565b9150600101610d7d565b50610dc383610aff61189e565b6101c454600090610ddc906001600160a01b0316611bb8565b9050610deb8482878587611a05565b6101c454600090610e04906001600160a01b031661197a565b905060005b8751811015610ea457816001600160a01b031663c40768768a8381518110610e2d57fe5b60200260200101518a8481518110610e4157fe5b60200260200101516040518363ffffffff1660e01b8152600401610e66929190612461565b600060405180830381600087803b158015610e8057600080fd5b505af1158015610e94573d6000803e3d6000fd5b505060019092019150610e099050565b506040516370a0823160e01b81526000906001600160a01b038416906370a0823190610ed49030906004016123ab565b60206040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f249190612377565b90508015610712576000836001600160a01b031663a9059cbb8b600081518110610f4a57fe5b6020026020010151846040518363ffffffff1660e01b8152600401610f70929190612461565b602060405180830381600087803b158015610f8a57600080fd5b505af1158015610f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc291906122fa565b905080610fe15760405162461bcd60e51b8152600401610404906127f7565b50505050505050505050565b6101c4546001600160a01b031681565b6101c3546001600160a01b031681565b61102760008051602061297583398151915261033d61189e565b6110435760405162461bcd60e51b815260040161040490612580565b61075b611c54565b6110536112e6565b61106f5760405162461bcd60e51b81526004016104049061282e565b6101c454600090611088906001600160a01b0316611bb8565b6001600160a01b03166323b872dd61109e61189e565b85856040518463ffffffff1660e01b81526004016110be939291906123bf565b602060405180830381600087803b1580156110d857600080fd5b505af11580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111091906122fa565b90508061112f5760405162461bcd60e51b8152600401610404906127f7565b6101c454611145906001600160a01b031661197a565b6001600160a01b0316632e0c6cfe84846040518363ffffffff1660e01b8152600401611172929190612461565b600060405180830381600087803b15801561118c57600080fd5b505af11580156111a0573d6000803e3d6000fd5b50505050826001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190612377565b15610a1f5760405162461bcd60e51b815260040161040490612767565b600082815260656020526040812061124a9083611cad565b90505b92915050565b600082815260656020526040812061124a9083611cb9565b6112736112e6565b61128f5760405162461bcd60e51b81526004016104049061282e565b606082826040516024016112a4929190612461565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b17905290506112da8482611a6c565b5050505050565b600081565b600061130260008051602061295583398151915261033d61189e565b905090565b61130f6112e6565b61132b5760405162461bcd60e51b81526004016104049061282e565b6101c454600090611344906001600160a01b0316611bb8565b6001600160a01b03166323b872dd61135a61189e565b30856040518463ffffffff1660e01b815260040161137a939291906123bf565b602060405180830381600087803b15801561139457600080fd5b505af11580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc91906122fa565b9050806113eb5760405162461bcd60e51b8152600401610404906127f7565b6101c454611401906001600160a01b031661197a565b6001600160a01b031663c407687684846040518363ffffffff1660e01b815260040161142e929190612461565b600060405180830381600087803b15801561144857600080fd5b505af115801561145c573d6000803e3d6000fd5b50505050505050565b61146d6112e6565b6114895760405162461bcd60e51b81526004016104049061282e565b8281146114a85760405162461bcd60e51b815260040161040490612603565b6000805b828110156114e3576114d98484838181106114c357fe5b9050602002013583611c2f90919063ffffffff16565b91506001016114ac565b506101c4546000906114fd906001600160a01b0316611bb8565b6001600160a01b03166323b872dd61151361189e565b30856040518463ffffffff1660e01b8152600401611533939291906123bf565b602060405180830381600087803b15801561154d57600080fd5b505af1158015611561573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158591906122fa565b9050806115a45760405162461bcd60e51b8152600401610404906127f7565b6101c4546000906115bd906001600160a01b031661197a565b905060005b8481101561166857816001600160a01b031663c40768768989848181106115e557fe5b90506020020160208101906115fa9190611f80565b88888581811061160657fe5b905060200201356040518363ffffffff1660e01b815260040161162a929190612461565b600060405180830381600087803b15801561164457600080fd5b505af1158015611658573d6000803e3d6000fd5b5050600190920191506115c29050565b5050505050505050565b600081815260656020526040812061124d90611cce565b6000828152606560205260409020600201546116a79061033d61189e565b61058b5760405162461bcd60e51b815260040161040490612689565b60008051602061295583398151915281565b60008051602061297583398151915281565b303b1590565b600054610100900460ff168061170657506117066116e7565b80611714575060005460ff16155b6117305760405162461bcd60e51b8152600401610404906127a9565b600054610100900460ff16158015610aba576000805460ff1961ff0019909116610100171660011790558015610acc576000805461ff001916905550565b600054610100900460ff168061178757506117876116e7565b80611795575060005460ff16155b6117b15760405162461bcd60e51b8152600401610404906127a9565b600054610100900460ff161580156117dc576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610acc576000805461ff001916905550565b600054610100900460ff168061181357506118136116e7565b80611821575060005460ff16155b61183d5760405162461bcd60e51b8152600401610404906127a9565b600054610100900460ff16158015611868576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610acc576000805461ff001916905550565b60009182526065602052604090912060020155565b6000611302611cd9565b60008281526065602052604090206118c09082611d0b565b156104f6576118cd61189e565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206119299082611d20565b156104f65761193661189e565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061124d82611d35565b60006001600160a01b03821663b93f9b0a60055b6040518263ffffffff1660e01b81526004016119b59190612485565b60206040518083038186803b1580156119cd57600080fd5b505afa1580156119e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190611f9c565b606085858585856000604051602401611a23969594939291906123e3565b60408051601f198184030181529190526020810180516001600160e01b0316637153a8af60e11b1790526101c45490915061145c90611a6a906001600160a01b0316611ba0565b825b606060006060846001600160a01b031684604051611a8a919061238f565b6000604051808303816000865af19150503d8060008114611ac7576040519150601f19603f3d011682016040523d82523d6000602084013e611acc565b606091505b50909250905081158015611ae1575060008151115b15611af0573d6000803e3d6000fd5b81611b0d5760405162461bcd60e51b815260040161040490612652565b949350505050565b6020015190565b60975460ff16611b3e5760405162461bcd60e51b815260040161040490612552565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611b7161189e565b604051611b7e91906123ab565b60405180910390a1565b60006001600160a01b03821663b93f9b0a6009611999565b60006001600160a01b03821663b93f9b0a6008611999565b600061124d82611985565b60006001600160a01b03821663b93f9b0a82611999565b6060838383604051602401611bf1939291906123bf565b60408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790529050611c278582611a6c565b505050505050565b60008282018381101561124a5760405162461bcd60e51b8152600401610404906125cc565b60975460ff1615611c775760405162461bcd60e51b8152600401610404906126d9565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b7161189e565b600061124a8383611d4d565b600061124a836001600160a01b038416611d92565b600061124d82611daa565b600060183610801590611cf05750611cf033610c2e565b15611d04575060131936013560601c610a41565b5033610a41565b600061124a836001600160a01b038416611dae565b600061124a836001600160a01b038416611df8565b60006001600160a01b03821663b93f9b0a6003611999565b81546000908210611d705760405162461bcd60e51b8152600401610404906124c1565b826000018281548110611d7f57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000611dba8383611d92565b611df05750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561124d565b50600061124d565b60008181526001830160205260408120548015611eb45783546000198083019190810190600090879083908110611e2b57fe5b9060005260206000200154905080876000018481548110611e4857fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611e7857fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061124d565b600091505061124d565b803561124d8161293f565b60008083601f840112611eda578182fd5b50813567ffffffffffffffff811115611ef1578182fd5b6020830191508360208083028501011115611f0b57600080fd5b9250929050565b600082601f830112611f22578081fd5b8135611f35611f30826128ef565b6128c8565b818152915060208083019084810181840286018201871015611f5657600080fd5b60005b84811015611f7557813584529282019290820190600101611f59565b505050505092915050565b600060208284031215611f91578081fd5b813561124a8161293f565b600060208284031215611fad578081fd5b815161124a8161293f565b600080600060608486031215611fcc578182fd5b8335611fd78161293f565b92506020840135611fe78161293f565b929592945050506040919091013590565b6000806040838503121561200a578182fd5b82356120158161293f565b915060208301356120258161293f565b809150509250929050565b60008060408385031215612042578182fd5b823561204d8161293f565b946020939093013593505050565b60008060006060848603121561206f578283fd5b833561207a8161293f565b92506020840135915060408401356120918161293f565b809150509250925092565b600080600080600080600060c0888a0312156120b6578283fd5b87356120c18161293f565b96506020880135955060408801356120d88161293f565b945060608801356120e88161293f565b93506080880135925060a088013567ffffffffffffffff81111561210a578283fd5b6121168a828b01611ec9565b989b979a50959850939692959293505050565b600080600080600060a08688031215612140578081fd5b853561214b8161293f565b94506020860135935060408601356121628161293f565b925060608601359150608086013567ffffffffffffffff811115612184578182fd5b61219088828901611f12565b9150509295509295909350565b600080600080604085870312156121b2578384fd5b843567ffffffffffffffff808211156121c9578586fd5b6121d588838901611ec9565b909650945060208701359150808211156121ed578384fd5b506121fa87828801611ec9565b95989497509550505050565b600080600080600060a0868803121561221d578283fd5b853567ffffffffffffffff80821115612234578485fd5b818801915088601f830112612247578485fd5b8135612255611f30826128ef565b80828252602080830192508086018d82838702890101111561227557898afd5b8996505b8487101561229f5761228b8e82611ebe565b845260019690960195928101928101612279565b509099508a013593505050808211156122b6578485fd5b6122c289838a01611f12565b9550604088013594506122d88960608a01611ebe565b935060808801359150808211156122ed578283fd5b5061219088828901611f12565b60006020828403121561230b578081fd5b8151801515811461124a578182fd5b60006020828403121561232b578081fd5b5035919050565b60008060408385031215612344578182fd5b8235915060208301356120258161293f565b60008060408385031215612368578182fd5b50508035926020909101359150565b600060208284031215612388578081fd5b5051919050565b600082516123a181846020870161290f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0387811682528616602080830191909152604082018690526060820185905260c06080830181905284519083018190526000918581019160e085019190845b8181101561244557845184529382019392820192600101612429565b505050809250505060ff831660a0830152979650505050505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b60006020825282518060208401526124ad81604085016020870161290f565b601f01601f19169190910160400192915050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602f908201527f4372656469746c696e657320616e6420616d6f756e7473206d7573742062652060408201526e0e8d0ca40e6c2daca40d8cadccee8d608b1b606082015260800190565b6020808252601a908201527f564d3a2077616c6c657420696e766f6b65207265766572746564000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b6020808252601590820152744f776e65722063616e6e6f7420626520656d70747960581b604082015260600190565b60208082526022908201527f4661696c656420746f2066756c6c7920706179206f6666206372656469746c696040820152616e6560f01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526017908201527f4661696c656420746f207472616e736665722055534443000000000000000000604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60405181810167ffffffffffffffff811182821017156128e757600080fd5b604052919050565b600067ffffffffffffffff821115612905578081fd5b5060209081020190565b60005b8381101561292a578181015183820152602001612912565b83811115612939576000848401525b50505050565b6001600160a01b0381168114610acc57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa264697066735822122089d425cc3f11864e9755ea9a5b456a5a7330c9e704a89cc1038a1c1b0c6e981d64736f6c634300060c0033456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744d75737420686176652070617573657220726f6c6520746f20706572666f726d207468697320616374696f6eb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b6565d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65644d75737420686176652061646d696e20726f6c6520746f20706572666f726d207468697320616374696f6e416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212208e0d2fee37d720881d124528d7ec8936fb3f7f91abbae62846ce18fd156c30e664736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Goldfinch",
    "kind": "dev",
    "methods": {
      "createBorrower(address)": {
        "params": {
          "owner": "The address that will own the new Borrower instance"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      }
    },
    "title": "CreditLineFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBorrower(address)": {
        "notice": "Allows anyone to create a Borrower contract instance"
      }
    },
    "notice": "Contract that allows us to create other contracts, such as CreditLines and BorrowerContracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 264,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)"
      },
      {
        "astId": 509,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2385,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2474,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2483,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 2524,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4836,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4840,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4844,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4848,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7579,
        "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
        "label": "config",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(GoldfinchConfig)8182"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GoldfinchConfig)8182": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)260_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2160_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2159,
            "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1980_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)260_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2160_storage"
          },
          {
            "astId": 259,
            "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1980_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1975,
            "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1979,
            "contract": "contracts/protocol/core/CreditLineFactory.sol:CreditLineFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}