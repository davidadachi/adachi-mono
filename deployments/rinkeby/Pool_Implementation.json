{
  "address": "0x67c4BC912B84D4D15e930c0BC1d74d9Ce3630971",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "capitalProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        }
      ],
      "name": "InterestCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrincipalCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditline",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "PrincipalWrittendown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveFundsCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "capitalProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        }
      ],
      "name": "collectInterestAndPrincipal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditlineAddress",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "writedownDelta",
          "type": "int256"
        }
      ],
      "name": "distributeLosses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract GoldfinchConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e86a3438f2b2bad417cf0ef8b35ae57fe6ed57aa7f4b3ba0dde17e773f1fb06",
  "receipt": {
    "to": null,
    "from": "0xE7f9ED35DA54b2e4A1857487dBf42A32C4DBD4a0",
    "contractAddress": "0x67c4BC912B84D4D15e930c0BC1d74d9Ce3630971",
    "transactionIndex": 12,
    "gasUsed": "2507690",
    "logsBloom": "0x
    "blockHash": "0xfc7ad42260583284b8257e4d4e769292f3bb792edd02d1039c1ffa4a2e2f676d",
    "transactionHash": "0x1e86a3438f2b2bad417cf0ef8b35ae57fe6ed57aa7f4b3ba0dde17e773f1fb06",
    "logs": [],
    "blockNumber": 7971088,
    "cumulativeGasUsed": "4371267",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "182208430cce5986c995897f9af03e7f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capitalProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"name\":\"InterestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrincipalCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"PrincipalWrittendown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveFundsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capitalProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"collectInterestAndPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditlineAddress\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"writedownDelta\",\"type\":\"int256\"}],\"name\":\"distributeLosses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Goldfinch\",\"kind\":\"dev\",\"methods\":{\"collectInterestAndPrincipal(address,uint256,uint256)\":{\"params\":{\"from\":\"The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.\",\"interest\":\"the interest amount of USDC to move to the Pool\",\"principal\":\"the principal amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"The amount of USDC to deposit\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"_config\":\"The address of the GoldfinchConfig contract\",\"owner\":\"The address of who should have the \\\"OWNER_ROLE\\\" of this contract\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.\",\"from\":\"The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.\",\"to\":\"The address that the USDC should be moved to\"}},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"The amount of USDC to withdraw\"}}},\"title\":\"Goldfinch's Pool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectInterestAndPrincipal(address,uint256,uint256)\":{\"notice\":\"Collects `interest` USDC in interest and `principal` in principal from `from` and sends it to the Pool.  This also increases the share price accordingly. A portion is sent to the Goldfinch Reserve address\"},\"deposit(uint256)\":{\"notice\":\"Deposits `amount` USDC from msg.sender into the Pool, and returns you the equivalent value of FIDU tokens\"},\"initialize(address,address)\":{\"notice\":\"Run only once, on initialization\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Moves `amount` USDC from `from`, to `to`.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws `amount` USDC from the Pool to msg.sender, and burns the equivalent value of FIDU tokens\"}},\"notice\":\"Main entry point for LP's (a.k.a. capital providers)  Handles key logic for depositing and withdrawing funds from the Pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/Pool.sol\":\"Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function createCreditLine(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public virtual returns (address);\\n\\n  function drawdown(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n\\n  function applyPayment(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOfBLock) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc61b4b8b7f1f345de36ebc066a3983ddbaddb73c85e7227db1ecf0010decd772\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7b5fb02e023b6006a5199992f242caf23f64240c91e625f1390d6ca421b59531\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xafc7c4d5c4ec31e980c47b67e39dd175d68f4e9b89d82e8271f20ca45b256313\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 amount) external virtual;\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) external virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n\\n  function assets() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x2658ac7d631873e80c0da7dac9b9092cb1b86a67b24926236c0f2f02bdb2118a\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like ugpradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x75912e247a681928fc8b9a0d1dbf1fedd838b6b236b6d4a1fe932837a40c8fd7\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IFidu.sol\\\";\\nimport \\\"../../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(GoldfinchConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getCreditDesk(GoldfinchConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function oneInchAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function trustedForwarderAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function poolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function creditDeskAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function usdcAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n}\\n\",\"keccak256\":\"0x0afb2854427711af6a05c7d7af26b920a3ebabc27e3ac6e2181f5790daf0a57a\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    CreditLineFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder\\n  }\\n\\n  function getNumberName(uint256 number) public pure returns (string memory) {\\n    Numbers numberName = Numbers(number);\\n    if (Numbers.TransactionLimit == numberName) {\\n      return \\\"TransactionLimit\\\";\\n    }\\n    if (Numbers.TotalFundsLimit == numberName) {\\n      return \\\"TotalFundsLimit\\\";\\n    }\\n    if (Numbers.MaxUnderwriterLimit == numberName) {\\n      return \\\"MaxUnderwriterLimit\\\";\\n    }\\n    if (Numbers.ReserveDenominator == numberName) {\\n      return \\\"ReserveDenominator\\\";\\n    }\\n    if (Numbers.WithdrawFeeDenominator == numberName) {\\n      return \\\"WithdrawFeeDenominator\\\";\\n    }\\n    if (Numbers.LatenessGracePeriodInDays == numberName) {\\n      return \\\"LatenessGracePeriodInDays\\\";\\n    }\\n    if (Numbers.LatenessMaxDays == numberName) {\\n      return \\\"LatenessMaxDays\\\";\\n    }\\n    revert(\\\"Unknown value passed to getNumberName\\\");\\n  }\\n\\n  function getAddressName(uint256 addressKey) public pure returns (string memory) {\\n    Addresses addressName = Addresses(addressKey);\\n    if (Addresses.Pool == addressName) {\\n      return \\\"Pool\\\";\\n    }\\n    if (Addresses.CreditLineImplementation == addressName) {\\n      return \\\"CreditLineImplementation\\\";\\n    }\\n    if (Addresses.CreditLineFactory == addressName) {\\n      return \\\"CreditLineFactory\\\";\\n    }\\n    if (Addresses.CreditDesk == addressName) {\\n      return \\\"CreditDesk\\\";\\n    }\\n    if (Addresses.Fidu == addressName) {\\n      return \\\"Fidu\\\";\\n    }\\n    if (Addresses.USDC == addressName) {\\n      return \\\"USDC\\\";\\n    }\\n    if (Addresses.TreasuryReserve == addressName) {\\n      return \\\"TreasuryReserve\\\";\\n    }\\n    if (Addresses.ProtocolAdmin == addressName) {\\n      return \\\"ProtocolAdmin\\\";\\n    }\\n    if (Addresses.OneInch == addressName) {\\n      return \\\"OneInch\\\";\\n    }\\n    if (Addresses.TrustedForwarder == addressName) {\\n      return \\\"TrustedForwarder\\\";\\n    }\\n    revert(\\\"Unknown value passed to getAddressName\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x2a30470fb6dd39cf178555cb79b6841fea214924b39ab6361d688910dd189435\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable {\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n\\n  event AddressUpdated(address owner, string name, address oldValue, address newValue);\\n  event NumberUpdated(address owner, string name, uint256 oldValue, uint256 newValue);\\n\\n  function initialize(address owner) public initializer {\\n    __BaseUpgradeablePausable__init(owner);\\n  }\\n\\n  function setAddress(uint256 addressKey, address newAddress) public onlyAdmin {\\n    require(addresses[addressKey] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, ConfigOptions.getAddressName(addressKey), addresses[addressKey], newAddress);\\n    addresses[addressKey] = newAddress;\\n  }\\n\\n  function setNumber(uint256 number, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, ConfigOptions.getNumberName(number), numbers[number], newNumber);\\n    numbers[number] = newNumber;\\n  }\\n\\n  function setCreditLineImplementation(address newCreditLine) public onlyAdmin {\\n    uint256 addressKey = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, ConfigOptions.getAddressName(addressKey), addresses[addressKey], newCreditLine);\\n    addresses[addressKey] = newCreditLine;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, ConfigOptions.getAddressName(key), addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  /*\\n    Using custom getters incase we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 addressKey) public view returns (address) {\\n    return addresses[addressKey];\\n  }\\n\\n  function getNumber(uint256 number) public view returns (uint256) {\\n    return numbers[number];\\n  }\\n}\\n\",\"keccak256\":\"0xc833900482b0cc62b33e2561c07dffa7fd05e149aff35b8308ba93c06a1f9bf3\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x07995096f020b640e9a5f6cd0ca4c688ae5ab12a64a2c010d2b0960eea436e8e\",\"license\":\"MIT\"},\"contracts/protocol/core/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./ConfigHelper.sol\\\";\\n\\n/**\\n * @title Goldfinch's Pool contract\\n * @notice Main entry point for LP's (a.k.a. capital providers)\\n *  Handles key logic for depositing and withdrawing funds from the Pool\\n * @author Goldfinch\\n */\\n\\ncontract Pool is BaseUpgradeablePausable, IPool {\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  // $1 threshold to handle potential rounding errors, from differing decimals on Fidu and USDC;\\n  uint256 private constant ASSET_LIABILITY_MATCH_THRESHOLD = 1e6;\\n\\n  event DepositMade(address indexed capitalProvider, uint256 amount, uint256 shares);\\n  event WithdrawalMade(address indexed capitalProvider, uint256 userAmount, uint256 reserveAmount);\\n  event TransferMade(address indexed from, address indexed to, uint256 amount);\\n  event InterestCollected(address indexed payer, uint256 poolAmount, uint256 reserveAmount);\\n  event PrincipalCollected(address indexed payer, uint256 amount);\\n  event ReserveFundsCollected(address indexed user, uint256 amount);\\n  event PrincipalWrittendown(address indexed creditline, int256 amount);\\n\\n  /**\\n   * @notice Run only once, on initialization\\n   * @param owner The address of who should have the \\\"OWNER_ROLE\\\" of this contract\\n   * @param _config The address of the GoldfinchConfig contract\\n   */\\n  function initialize(address owner, GoldfinchConfig _config) public initializer {\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    config = _config;\\n    sharePrice = fiduMantissa();\\n    IERC20withDec usdc = config.getUSDC();\\n    // Sanity check the address\\n    usdc.totalSupply();\\n\\n    // Unlock self for infinite amount\\n    bool success = usdc.approve(address(this), uint256(-1));\\n    require(success, \\\"Failed to approve USDC\\\");\\n  }\\n\\n  /**\\n   * @notice Deposits `amount` USDC from msg.sender into the Pool, and returns you the equivalent value of FIDU tokens\\n   * @param amount The amount of USDC to deposit\\n   */\\n  function deposit(uint256 amount) external override whenNotPaused withinTransactionLimit(amount) nonReentrant {\\n    require(amount > 0, \\\"Must deposit more than zero\\\");\\n    // Check if the amount of new shares to be added is within limits\\n    uint256 depositShares = getNumShares(amount);\\n    uint256 potentialNewTotalShares = totalShares().add(depositShares);\\n    require(poolWithinLimit(potentialNewTotalShares), \\\"Deposit would put the Pool over the total limit.\\\");\\n    emit DepositMade(msg.sender, amount, depositShares);\\n    bool success = doUSDCTransfer(msg.sender, address(this), amount);\\n    require(success, \\\"Failed to transfer for deposit\\\");\\n    config.getFidu().mintTo(msg.sender, depositShares);\\n  }\\n\\n  /**\\n   * @notice Withdraws `amount` USDC from the Pool to msg.sender, and burns the equivalent value of FIDU tokens\\n   * @param amount The amount of USDC to withdraw\\n   */\\n  function withdraw(uint256 amount) external override whenNotPaused withinTransactionLimit(amount) nonReentrant {\\n    require(amount > 0, \\\"Must withdraw more than zero\\\");\\n    IFidu fidu = config.getFidu();\\n    // Determine current shares the address has and the shares requested to withdraw\\n    uint256 currentShares = fidu.balanceOf(msg.sender);\\n    uint256 withdrawShares = getNumShares(amount);\\n    // Ensure the address has enough value in the pool\\n    require(withdrawShares <= currentShares, \\\"Amount requested is greater than what this address owns\\\");\\n\\n    uint256 reserveAmount = amount.div(config.getWithdrawFeeDenominator());\\n    uint256 userAmount = amount.sub(reserveAmount);\\n\\n    emit WithdrawalMade(msg.sender, userAmount, reserveAmount);\\n    // Send the amounts\\n    bool success = doUSDCTransfer(address(this), msg.sender, userAmount);\\n    require(success, \\\"Failed to transfer for withdraw\\\");\\n    sendToReserve(address(this), reserveAmount, msg.sender);\\n\\n    // Burn the shares\\n    fidu.burnFrom(msg.sender, withdrawShares);\\n  }\\n\\n  /**\\n   * @notice Collects `interest` USDC in interest and `principal` in principal from `from` and sends it to the Pool.\\n   *  This also increases the share price accordingly. A portion is sent to the Goldfinch Reserve address\\n   * @param from The address to take the USDC from. Implicitly, the Pool\\n   *  must be authorized to move USDC on behalf of `from`.\\n   * @param interest the interest amount of USDC to move to the Pool\\n   * @param principal the principal amount of USDC to move to the Pool\\n   *\\n   * Requirements:\\n   *  - The caller must be the Credit Desk. Not even the owner can call this function.\\n   */\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) external override onlyCreditDesk whenNotPaused {\\n    uint256 reserveAmount = interest.div(config.getReserveDenominator());\\n    uint256 poolAmount = interest.sub(reserveAmount);\\n    uint256 increment = usdcToSharePrice(poolAmount);\\n    sharePrice = sharePrice.add(increment);\\n\\n    if (poolAmount > 0) {\\n      emit InterestCollected(from, poolAmount, reserveAmount);\\n    }\\n    if (principal > 0) {\\n      emit PrincipalCollected(from, principal);\\n    }\\n\\n    sendToReserve(from, reserveAmount, from);\\n    bool success = doUSDCTransfer(from, address(this), principal.add(poolAmount));\\n    require(success, \\\"Failed to principal repayment\\\");\\n  }\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta)\\n    external\\n    override\\n    onlyCreditDesk\\n    whenNotPaused\\n  {\\n    if (writedownDelta > 0) {\\n      uint256 delta = usdcToSharePrice(uint256(writedownDelta));\\n      sharePrice = sharePrice.add(delta);\\n    } else {\\n      // If delta is negative, convert to positive uint, and sub from sharePrice\\n      uint256 delta = usdcToSharePrice(uint256(writedownDelta * -1));\\n      sharePrice = sharePrice.sub(delta);\\n    }\\n    emit PrincipalWrittendown(creditlineAddress, writedownDelta);\\n  }\\n\\n  /**\\n   * @notice Moves `amount` USDC from `from`, to `to`.\\n   * @param from The address to take the USDC from. Implicitly, the Pool\\n   *  must be authorized to move USDC on behalf of `from`.\\n   * @param to The address that the USDC should be moved to\\n   * @param amount the amount of USDC to move to the Pool\\n   *\\n   * Requirements:\\n   *  - The caller must be the Credit Desk. Not even the owner can call this function.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public override onlyCreditDesk whenNotPaused returns (bool) {\\n    bool result = doUSDCTransfer(from, to, amount);\\n    emit TransferMade(from, to, amount);\\n    return result;\\n  }\\n\\n  function assets() public view override returns (uint256) {\\n    return\\n      config.getUSDC().balanceOf(config.poolAddress()).add(config.getCreditDesk().totalLoansOutstanding()).sub(\\n        config.getCreditDesk().totalWritedowns()\\n      );\\n  }\\n\\n  /* Internal Functions */\\n\\n  function fiduMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(18);\\n  }\\n\\n  function usdcMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(6);\\n  }\\n\\n  function usdcToFidu(uint256 amount) internal view returns (uint256) {\\n    return amount.mul(fiduMantissa()).div(usdcMantissa());\\n  }\\n\\n  function totalShares() internal view returns (uint256) {\\n    return config.getFidu().totalSupply();\\n  }\\n\\n  function usdcToSharePrice(uint256 usdcAmount) internal view returns (uint256) {\\n    return usdcToFidu(usdcAmount).mul(fiduMantissa()).div(totalShares());\\n  }\\n\\n  function poolWithinLimit(uint256 _totalShares) internal view returns (bool) {\\n    return\\n      _totalShares.mul(sharePrice).div(fiduMantissa()) <=\\n      usdcToFidu(config.getNumber(uint256(ConfigOptions.Numbers.TotalFundsLimit)));\\n  }\\n\\n  function transactionWithinLimit(uint256 amount) internal view returns (bool) {\\n    return amount <= config.getNumber(uint256(ConfigOptions.Numbers.TransactionLimit));\\n  }\\n\\n  function getNumShares(uint256 amount) internal view returns (uint256) {\\n    return usdcToFidu(amount).mul(fiduMantissa()).div(sharePrice);\\n  }\\n\\n  function fiduToUSDC(uint256 amount) internal view returns (uint256) {\\n    return amount.div(fiduMantissa().div(usdcMantissa()));\\n  }\\n\\n  function sendToReserve(\\n    address from,\\n    uint256 amount,\\n    address userForEvent\\n  ) internal {\\n    emit ReserveFundsCollected(userForEvent, amount);\\n    bool success = doUSDCTransfer(from, config.reserveAddress(), amount);\\n    require(success, \\\"Reserve transfer was not successful\\\");\\n  }\\n\\n  function doUSDCTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal returns (bool) {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    IERC20withDec usdc = config.getUSDC();\\n    return usdc.transferFrom(from, to, amount);\\n  }\\n\\n  modifier withinTransactionLimit(uint256 amount) {\\n    require(transactionWithinLimit(amount), \\\"Amount is over the per-transaction limit\\\");\\n    _;\\n  }\\n\\n  modifier onlyCreditDesk() {\\n    require(msg.sender == config.creditDeskAddress(), \\\"Only the credit desk is allowed to call this function\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x4a08d219f756d57ebc0f545c0ebd01eb51d9ce9d235ef452bb2a39033d667fa8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c7c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806371bb0bab116100ee578063a217fddf11610097578063ca15c87311610071578063ca15c87314610306578063d547741f14610319578063e58378bb1461032c578063e63ab1e914610334576101a3565b8063a217fddf146102e3578063b6b55f25146102eb578063b6db75a0146102fe576101a3565b806387269729116100c857806387269729146102b55780639010d07c146102bd57806391d14854146102d0576101a3565b806371bb0bab1461028557806379502c55146102985780638456cb59146102ad576101a3565b806336568abe11610150578063526d81f61161012a578063526d81f61461026d5780635c975abb1461027557806371a973051461027d576101a3565b806336568abe1461023f5780633f4ba83a14610252578063485cc9551461025a576101a3565b80632e1a7d4d116101815780632e1a7d4d146102065780632f2ff15d14610219578063338744bc1461022c576101a3565b8063097616a3146101a857806323b872dd146101bd578063248a9ca3146101e6575b600080fd5b6101bb6101b6366004612287565b61033c565b005b6101d06101cb3660046122bf565b6104dc565b6040516101dd91906124a3565b60405180910390f35b6101f96101f43660046123b6565b6105eb565b6040516101dd91906124ae565b6101bb6102143660046123b6565b610600565b6101bb6102273660046123ce565b6108d9565b6101bb61023a366004612337565b61091d565b6101bb61024d3660046123ce565b610a72565b6101bb610ace565b6101bb6102683660046122ff565b610b20565b6101bb610d8c565b6101d0610e17565b6101f9610e20565b6101bb610293366004612362565b611038565b6102a061121e565b6040516101dd919061242b565b6101bb61123b565b6101f961128b565b6102a06102cb3660046123f2565b611292565b6101d06102de3660046123ce565b6112b3565b6101f96112cb565b6101bb6102f93660046123b6565b6112d0565b6101d06114c3565b6101f96103143660046123b6565b6114f1565b6101bb6103273660046123ce565b611508565b6101f9611542565b6101f9611566565b600054610100900460ff1680610355575061035561158a565b80610363575060005460ff16155b6103885760405162461bcd60e51b815260040161037f90612a80565b60405180910390fd5b600054610100900460ff161580156103b3576000805460ff1961ff0019909116610100171660011790555b73ffffffffffffffffffffffffffffffffffffffff82166103e65760405162461bcd60e51b815260040161037f90612991565b6103ee611590565b6103f6611611565b6103fe61169d565b6104287fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e83610913565b6104527f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a83610913565b61049c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61172c565b6104c67fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8061172c565b80156104d8576000805461ff00191690555b5050565b6101c4546000906105029073ffffffffffffffffffffffffffffffffffffffff16611741565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461054c5760405162461bcd60e51b815260040161037f906129c6565b60975460ff161561056f5760405162461bcd60e51b815260040161037f906128fd565b600061057c8585856117ce565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f422971e1d1a7c8b68372f65fe1426aef054f0c6290124a929c843c5c019521d6856040516105db91906124ae565b60405180910390a3949350505050565b60009081526065602052604090206002015490565b60975460ff16156106235760405162461bcd60e51b815260040161037f906128fd565b8061062d816118dd565b6106495760405162461bcd60e51b815260040161037f90612934565b60c95460ff1661066b5760405162461bcd60e51b815260040161037f90612b14565b60c9805460ff19169055816106925760405162461bcd60e51b815260040161037f90612add565b6101c4546000906106b89073ffffffffffffffffffffffffffffffffffffffff1661198e565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106f5919061242b565b60206040518083038186803b15801561070d57600080fd5b505afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190612413565b9050600061075285611999565b9050818111156107745760405162461bcd60e51b815260040161037f90612687565b6101c4546000906107a59061079e9073ffffffffffffffffffffffffffffffffffffffff166119c2565b8790611a4f565b905060006107b38783611a91565b90503373ffffffffffffffffffffffffffffffffffffffff167f2d4d49c3e017b8235c908cbaa83a2431a08f3b950712696ece2088964fd399f082846040516107fd929190612c16565b60405180910390a260006108123033846117ce565b9050806108315760405162461bcd60e51b815260040161037f9061280c565b61083c308433611ad3565b6040517f79cc679000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716906379cc679090610890903390889060040161244c565b600060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505060c9805460ff1916600117905550505050505050505050565b6000828152606560205260409020600201546108f7906102de611b78565b6109135760405162461bcd60e51b815260040161037f906125bc565b6104d88282611b7c565b6101c4546109409073ffffffffffffffffffffffffffffffffffffffff16611741565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098a5760405162461bcd60e51b815260040161037f906129c6565b60975460ff16156109ad5760405162461bcd60e51b815260040161037f906128fd565b60008113156109dc5760006109c182611bff565b6101c3549091506109d29082611c17565b6101c35550610a20565b6000610a09827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02611bff565b6101c354909150610a1a9082611a91565b6101c355505b8173ffffffffffffffffffffffffffffffffffffffff167f8c23a9a70a8448cfed7aae767d71bd68857b79de2d189ee6a770619ada8b857a82604051610a6691906124ae565b60405180910390a25050565b610a7a611b78565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ac45760405162461bcd60e51b815260040161037f90612b82565b6104d88282611c3c565b610afa7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6102de611b78565b610b165760405162461bcd60e51b815260040161037f9061271b565b610b1e611cbf565b565b600054610100900460ff1680610b395750610b3961158a565b80610b47575060005460ff16155b610b635760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff16158015610b8e576000805460ff1961ff0019909116610100171660011790555b610b978361033c565b6101c480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055610be0611d2b565b6101c3556101c454600090610c0a9073ffffffffffffffffffffffffffffffffffffffff16611d37565b90508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5257600080fd5b505afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190612413565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff83169063095ea7b390610d029030907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060040161244c565b602060405180830381600087803b158015610d1c57600080fd5b505af1158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190612396565b905080610d735760405162461bcd60e51b815260040161037f90612650565b50508015610d87576000805461ff00191690555b505050565b600054610100900460ff1680610da55750610da561158a565b80610db3575060005460ff16155b610dcf5760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff16158015610dfa576000805460ff1961ff0019909116610100171660011790555b610e02611611565b8015610e14576000805461ff00191690555b50565b60975460ff1690565b6101c45460009061103390610e4a9073ffffffffffffffffffffffffffffffffffffffff16611d42565b73ffffffffffffffffffffffffffffffffffffffff1663a6f4487e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8f57600080fd5b505afa158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190612413565b6101c45461102d90610eee9073ffffffffffffffffffffffffffffffffffffffff16611d42565b73ffffffffffffffffffffffffffffffffffffffff1663ed80c8506040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190612413565b6101c454610f8e9073ffffffffffffffffffffffffffffffffffffffff16611d37565b6101c45473ffffffffffffffffffffffffffffffffffffffff918216916370a0823191610fbb9116611d4d565b6040518263ffffffff1660e01b8152600401610fd7919061242b565b60206040518083038186803b158015610fef57600080fd5b505afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190612413565b90611c17565b90611a91565b905090565b6101c45461105b9073ffffffffffffffffffffffffffffffffffffffff16611741565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110a55760405162461bcd60e51b815260040161037f906129c6565b60975460ff16156110c85760405162461bcd60e51b815260040161037f906128fd565b6101c4546000906110f9906110f29073ffffffffffffffffffffffffffffffffffffffff16611d71565b8490611a4f565b905060006111078483611a91565b9050600061111482611bff565b6101c3549091506111259082611c17565b6101c3558115611180578573ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e21618385604051611177929190612c16565b60405180910390a25b83156111d5578573ffffffffffffffffffffffffffffffffffffffff167f8295ad220549851bab232c2a7ae2e3c53a63d2294602bc85f8d8af108778a37e856040516111cc91906124ae565b60405180910390a25b6111e0868488611ad3565b60006111f687306111f18887611c17565b6117ce565b9050806112155760405162461bcd60e51b815260040161037f90612b4b565b50505050505050565b6101c45473ffffffffffffffffffffffffffffffffffffffff1681565b6112677f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6102de611b78565b6112835760405162461bcd60e51b815260040161037f9061271b565b610b1e611d96565b6101c35481565b60008281526065602052604081206112aa9083611def565b90505b92915050565b60008281526065602052604081206112aa9083611dfb565b600081565b60975460ff16156112f35760405162461bcd60e51b815260040161037f906128fd565b806112fd816118dd565b6113195760405162461bcd60e51b815260040161037f90612934565b60c95460ff1661133b5760405162461bcd60e51b815260040161037f90612b14565b60c9805460ff19169055816113625760405162461bcd60e51b815260040161037f90612bdf565b600061136d83611999565b9050600061137d82611027611e1d565b905061138881611ec0565b6113a45760405162461bcd60e51b815260040161037f906127af565b3373ffffffffffffffffffffffffffffffffffffffff167f0b05f0d1cd0819f155b8a61f60baf7767c1ee49d04aeaab701df236140eb93f985846040516113ec929190612c16565b60405180910390a260006114013330876117ce565b9050806114205760405162461bcd60e51b815260040161037f90612585565b6101c4546114439073ffffffffffffffffffffffffffffffffffffffff1661198e565b73ffffffffffffffffffffffffffffffffffffffff1663449a52f833856040518363ffffffff1660e01b815260040161147d92919061244c565b600060405180830381600087803b15801561149757600080fd5b505af11580156114ab573d6000803e3d6000fd5b505060c9805460ff1916600117905550505050505050565b60006110337fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6102de611b78565b60008181526065602052604081206112ad90611f7b565b600082815260656020526040902060020154611526906102de611b78565b610ac45760405162461bcd60e51b815260040161037f906128a0565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b303b1590565b600054610100900460ff16806115a957506115a961158a565b806115b7575060005460ff16155b6115d35760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff16158015610e02576000805460ff1961ff0019909116610100171660011790558015610e14576000805461ff001916905550565b600054610100900460ff168061162a575061162a61158a565b80611638575060005460ff16155b6116545760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff1615801561167f576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610e14576000805461ff001916905550565b600054610100900460ff16806116b657506116b661158a565b806116c4575060005460ff16155b6116e05760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff1615801561170b576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610e14576000805461ff001916905550565b60009182526065602052604090912060020155565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a60035b6040518263ffffffff1660e01b815260040161177e91906124ae565b60206040518083038186803b15801561179657600080fd5b505afa1580156117aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad91906122a3565b600073ffffffffffffffffffffffffffffffffffffffff83166118035760405162461bcd60e51b815260040161037f906126e4565b6101c4546000906118299073ffffffffffffffffffffffffffffffffffffffff16611d37565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd9061188290889088908890600401612472565b602060405180830381600087803b15801561189c57600080fd5b505af11580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d49190612396565b95945050505050565b6101c4546040517ffc56365800000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063fc563658906119359084906004016124ae565b60206040518083038186803b15801561194d57600080fd5b505afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190612413565b90911115919050565b60006112ad82611f86565b60006112ad6101c3546119bc6119ad611d2b565b6119b686611fab565b90611fc6565b90611a4f565b600073ffffffffffffffffffffffffffffffffffffffff821663fc56365860045b6040518263ffffffff1660e01b81526004016119ff91906124ae565b60206040518083038186803b158015611a1757600080fd5b505afa158015611a2b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190612413565b60006112aa83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612000565b60006112aa83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612037565b8073ffffffffffffffffffffffffffffffffffffffff167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb83604051611b1991906124ae565b60405180910390a26101c454600090611b53908590611b4d9073ffffffffffffffffffffffffffffffffffffffff16612063565b856117ce565b905080611b725760405162461bcd60e51b815260040161037f90612843565b50505050565b3390565b6000828152606560205260409020611b949082612088565b156104d857611ba1611b78565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006112ad611c0c611e1d565b6119bc6119ad611d2b565b6000828201838110156112aa5760405162461bcd60e51b815260040161037f90612778565b6000828152606560205260409020611c5490826120aa565b156104d857611c61611b78565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff16611ce15760405162461bcd60e51b815260040161037f90612619565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d14611b78565b604051611d21919061242b565b60405180910390a1565b670de0b6b3a764000090565b60006112ad826120cc565b60006112ad82611741565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a82611762565b600073ffffffffffffffffffffffffffffffffffffffff821663fc56365860036119e3565b60975460ff1615611db95760405162461bcd60e51b815260040161037f906128fd565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d14611b78565b60006112aa83836120f1565b60006112aa8373ffffffffffffffffffffffffffffffffffffffff8416612136565b6101c454600090611e439073ffffffffffffffffffffffffffffffffffffffff1661198e565b73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8857600080fd5b505afa158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110339190612413565b6101c454600090611f599073ffffffffffffffffffffffffffffffffffffffff1663fc56365860016040518263ffffffff1660e01b8152600401611f0491906124ae565b60206040518083038186803b158015611f1c57600080fd5b505afa158015611f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f549190612413565b611fab565b611f73611f64611d2b565b6101c3546119bc908690611fc6565b111592915050565b60006112ad8261214e565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a6004611762565b60006112ad611fb8612152565b6119bc611fc3611d2b565b85905b600082611fd5575060006112ad565b82820282848281611fe257fe5b04146112aa5760405162461bcd60e51b815260040161037f90612a23565b600081836120215760405162461bcd60e51b815260040161037f91906124b7565b50600083858161202d57fe5b0495945050505050565b6000818484111561205b5760405162461bcd60e51b815260040161037f91906124b7565b505050900390565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a6006611762565b60006112aa8373ffffffffffffffffffffffffffffffffffffffff8416612159565b60006112aa8373ffffffffffffffffffffffffffffffffffffffff84166121a3565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a6005611762565b815460009082106121145760405162461bcd60e51b815260040161037f90612528565b82600001828154811061212357fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b620f424090565b60006121658383612136565b61219b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556112ad565b5060006112ad565b6000818152600183016020526040812054801561227d5783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830191908101906000908790839081106121f457fe5b906000526020600020015490508087600001848154811061221157fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061224157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506112ad565b60009150506112ad565b600060208284031215612298578081fd5b81356112aa81612c24565b6000602082840312156122b4578081fd5b81516112aa81612c24565b6000806000606084860312156122d3578182fd5b83356122de81612c24565b925060208401356122ee81612c24565b929592945050506040919091013590565b60008060408385031215612311578182fd5b823561231c81612c24565b9150602083013561232c81612c24565b809150509250929050565b60008060408385031215612349578182fd5b823561235481612c24565b946020939093013593505050565b600080600060608486031215612376578283fd5b833561238181612c24565b95602085013595506040909401359392505050565b6000602082840312156123a7578081fd5b815180151581146112aa578182fd5b6000602082840312156123c7578081fd5b5035919050565b600080604083850312156123e0578182fd5b82359150602083013561232c81612c24565b60008060408385031215612404578182fd5b50508035926020909101359150565b600060208284031215612424578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b818110156124e3578581018301518582016040015282016124c7565b818111156124f45783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f4661696c656420746f207472616e7366657220666f72206465706f7369740000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526016908201527f4661696c656420746f20617070726f7665205553444300000000000000000000604082015260600190565b60208082526037908201527f416d6f756e74207265717565737465642069732067726561746572207468616e60408201527f207768617420746869732061646472657373206f776e73000000000000000000606082015260800190565b6020808252601a908201527f43616e27742073656e6420746f207a65726f2061646472657373000000000000604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201527f207468697320616374696f6e0000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526030908201527f4465706f73697420776f756c64207075742074686520506f6f6c206f7665722060408201527f74686520746f74616c206c696d69742e00000000000000000000000000000000606082015260800190565b6020808252601f908201527f4661696c656420746f207472616e7366657220666f7220776974686472617700604082015260600190565b60208082526023908201527f52657365727665207472616e7366657220776173206e6f74207375636365737360408201527f66756c0000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526028908201527f416d6f756e74206973206f76657220746865207065722d7472616e736163746960408201527f6f6e206c696d6974000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b60208082526035908201527f4f6e6c792074686520637265646974206465736b20697320616c6c6f7765642060408201527f746f2063616c6c20746869732066756e6374696f6e0000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201527f656e20696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f4d757374207769746864726177206d6f7265207468616e207a65726f00000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601d908201527f4661696c656420746f207072696e636970616c2072657061796d656e74000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4d757374206465706f736974206d6f7265207468616e207a65726f0000000000604082015260600190565b918252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff81168114610e1457600080fdfea2646970667358221220a0d1986a13b0b86e9e2d27b3f8117799f79ad756a438cdbef2ab5dec145085d364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c806371bb0bab116100ee578063a217fddf11610097578063ca15c87311610071578063ca15c87314610306578063d547741f14610319578063e58378bb1461032c578063e63ab1e914610334576101a3565b8063a217fddf146102e3578063b6b55f25146102eb578063b6db75a0146102fe576101a3565b806387269729116100c857806387269729146102b55780639010d07c146102bd57806391d14854146102d0576101a3565b806371bb0bab1461028557806379502c55146102985780638456cb59146102ad576101a3565b806336568abe11610150578063526d81f61161012a578063526d81f61461026d5780635c975abb1461027557806371a973051461027d576101a3565b806336568abe1461023f5780633f4ba83a14610252578063485cc9551461025a576101a3565b80632e1a7d4d116101815780632e1a7d4d146102065780632f2ff15d14610219578063338744bc1461022c576101a3565b8063097616a3146101a857806323b872dd146101bd578063248a9ca3146101e6575b600080fd5b6101bb6101b6366004612287565b61033c565b005b6101d06101cb3660046122bf565b6104dc565b6040516101dd91906124a3565b60405180910390f35b6101f96101f43660046123b6565b6105eb565b6040516101dd91906124ae565b6101bb6102143660046123b6565b610600565b6101bb6102273660046123ce565b6108d9565b6101bb61023a366004612337565b61091d565b6101bb61024d3660046123ce565b610a72565b6101bb610ace565b6101bb6102683660046122ff565b610b20565b6101bb610d8c565b6101d0610e17565b6101f9610e20565b6101bb610293366004612362565b611038565b6102a061121e565b6040516101dd919061242b565b6101bb61123b565b6101f961128b565b6102a06102cb3660046123f2565b611292565b6101d06102de3660046123ce565b6112b3565b6101f96112cb565b6101bb6102f93660046123b6565b6112d0565b6101d06114c3565b6101f96103143660046123b6565b6114f1565b6101bb6103273660046123ce565b611508565b6101f9611542565b6101f9611566565b600054610100900460ff1680610355575061035561158a565b80610363575060005460ff16155b6103885760405162461bcd60e51b815260040161037f90612a80565b60405180910390fd5b600054610100900460ff161580156103b3576000805460ff1961ff0019909116610100171660011790555b73ffffffffffffffffffffffffffffffffffffffff82166103e65760405162461bcd60e51b815260040161037f90612991565b6103ee611590565b6103f6611611565b6103fe61169d565b6104287fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e83610913565b6104527f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a83610913565b61049c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61172c565b6104c67fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8061172c565b80156104d8576000805461ff00191690555b5050565b6101c4546000906105029073ffffffffffffffffffffffffffffffffffffffff16611741565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461054c5760405162461bcd60e51b815260040161037f906129c6565b60975460ff161561056f5760405162461bcd60e51b815260040161037f906128fd565b600061057c8585856117ce565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f422971e1d1a7c8b68372f65fe1426aef054f0c6290124a929c843c5c019521d6856040516105db91906124ae565b60405180910390a3949350505050565b60009081526065602052604090206002015490565b60975460ff16156106235760405162461bcd60e51b815260040161037f906128fd565b8061062d816118dd565b6106495760405162461bcd60e51b815260040161037f90612934565b60c95460ff1661066b5760405162461bcd60e51b815260040161037f90612b14565b60c9805460ff19169055816106925760405162461bcd60e51b815260040161037f90612add565b6101c4546000906106b89073ffffffffffffffffffffffffffffffffffffffff1661198e565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106f5919061242b565b60206040518083038186803b15801561070d57600080fd5b505afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190612413565b9050600061075285611999565b9050818111156107745760405162461bcd60e51b815260040161037f90612687565b6101c4546000906107a59061079e9073ffffffffffffffffffffffffffffffffffffffff166119c2565b8790611a4f565b905060006107b38783611a91565b90503373ffffffffffffffffffffffffffffffffffffffff167f2d4d49c3e017b8235c908cbaa83a2431a08f3b950712696ece2088964fd399f082846040516107fd929190612c16565b60405180910390a260006108123033846117ce565b9050806108315760405162461bcd60e51b815260040161037f9061280c565b61083c308433611ad3565b6040517f79cc679000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716906379cc679090610890903390889060040161244c565b600060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505060c9805460ff1916600117905550505050505050505050565b6000828152606560205260409020600201546108f7906102de611b78565b6109135760405162461bcd60e51b815260040161037f906125bc565b6104d88282611b7c565b6101c4546109409073ffffffffffffffffffffffffffffffffffffffff16611741565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098a5760405162461bcd60e51b815260040161037f906129c6565b60975460ff16156109ad5760405162461bcd60e51b815260040161037f906128fd565b60008113156109dc5760006109c182611bff565b6101c3549091506109d29082611c17565b6101c35550610a20565b6000610a09827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02611bff565b6101c354909150610a1a9082611a91565b6101c355505b8173ffffffffffffffffffffffffffffffffffffffff167f8c23a9a70a8448cfed7aae767d71bd68857b79de2d189ee6a770619ada8b857a82604051610a6691906124ae565b60405180910390a25050565b610a7a611b78565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ac45760405162461bcd60e51b815260040161037f90612b82565b6104d88282611c3c565b610afa7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6102de611b78565b610b165760405162461bcd60e51b815260040161037f9061271b565b610b1e611cbf565b565b600054610100900460ff1680610b395750610b3961158a565b80610b47575060005460ff16155b610b635760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff16158015610b8e576000805460ff1961ff0019909116610100171660011790555b610b978361033c565b6101c480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055610be0611d2b565b6101c3556101c454600090610c0a9073ffffffffffffffffffffffffffffffffffffffff16611d37565b90508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5257600080fd5b505afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190612413565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff83169063095ea7b390610d029030907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060040161244c565b602060405180830381600087803b158015610d1c57600080fd5b505af1158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190612396565b905080610d735760405162461bcd60e51b815260040161037f90612650565b50508015610d87576000805461ff00191690555b505050565b600054610100900460ff1680610da55750610da561158a565b80610db3575060005460ff16155b610dcf5760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff16158015610dfa576000805460ff1961ff0019909116610100171660011790555b610e02611611565b8015610e14576000805461ff00191690555b50565b60975460ff1690565b6101c45460009061103390610e4a9073ffffffffffffffffffffffffffffffffffffffff16611d42565b73ffffffffffffffffffffffffffffffffffffffff1663a6f4487e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8f57600080fd5b505afa158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190612413565b6101c45461102d90610eee9073ffffffffffffffffffffffffffffffffffffffff16611d42565b73ffffffffffffffffffffffffffffffffffffffff1663ed80c8506040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190612413565b6101c454610f8e9073ffffffffffffffffffffffffffffffffffffffff16611d37565b6101c45473ffffffffffffffffffffffffffffffffffffffff918216916370a0823191610fbb9116611d4d565b6040518263ffffffff1660e01b8152600401610fd7919061242b565b60206040518083038186803b158015610fef57600080fd5b505afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190612413565b90611c17565b90611a91565b905090565b6101c45461105b9073ffffffffffffffffffffffffffffffffffffffff16611741565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110a55760405162461bcd60e51b815260040161037f906129c6565b60975460ff16156110c85760405162461bcd60e51b815260040161037f906128fd565b6101c4546000906110f9906110f29073ffffffffffffffffffffffffffffffffffffffff16611d71565b8490611a4f565b905060006111078483611a91565b9050600061111482611bff565b6101c3549091506111259082611c17565b6101c3558115611180578573ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e21618385604051611177929190612c16565b60405180910390a25b83156111d5578573ffffffffffffffffffffffffffffffffffffffff167f8295ad220549851bab232c2a7ae2e3c53a63d2294602bc85f8d8af108778a37e856040516111cc91906124ae565b60405180910390a25b6111e0868488611ad3565b60006111f687306111f18887611c17565b6117ce565b9050806112155760405162461bcd60e51b815260040161037f90612b4b565b50505050505050565b6101c45473ffffffffffffffffffffffffffffffffffffffff1681565b6112677f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6102de611b78565b6112835760405162461bcd60e51b815260040161037f9061271b565b610b1e611d96565b6101c35481565b60008281526065602052604081206112aa9083611def565b90505b92915050565b60008281526065602052604081206112aa9083611dfb565b600081565b60975460ff16156112f35760405162461bcd60e51b815260040161037f906128fd565b806112fd816118dd565b6113195760405162461bcd60e51b815260040161037f90612934565b60c95460ff1661133b5760405162461bcd60e51b815260040161037f90612b14565b60c9805460ff19169055816113625760405162461bcd60e51b815260040161037f90612bdf565b600061136d83611999565b9050600061137d82611027611e1d565b905061138881611ec0565b6113a45760405162461bcd60e51b815260040161037f906127af565b3373ffffffffffffffffffffffffffffffffffffffff167f0b05f0d1cd0819f155b8a61f60baf7767c1ee49d04aeaab701df236140eb93f985846040516113ec929190612c16565b60405180910390a260006114013330876117ce565b9050806114205760405162461bcd60e51b815260040161037f90612585565b6101c4546114439073ffffffffffffffffffffffffffffffffffffffff1661198e565b73ffffffffffffffffffffffffffffffffffffffff1663449a52f833856040518363ffffffff1660e01b815260040161147d92919061244c565b600060405180830381600087803b15801561149757600080fd5b505af11580156114ab573d6000803e3d6000fd5b505060c9805460ff1916600117905550505050505050565b60006110337fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6102de611b78565b60008181526065602052604081206112ad90611f7b565b600082815260656020526040902060020154611526906102de611b78565b610ac45760405162461bcd60e51b815260040161037f906128a0565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b303b1590565b600054610100900460ff16806115a957506115a961158a565b806115b7575060005460ff16155b6115d35760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff16158015610e02576000805460ff1961ff0019909116610100171660011790558015610e14576000805461ff001916905550565b600054610100900460ff168061162a575061162a61158a565b80611638575060005460ff16155b6116545760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff1615801561167f576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610e14576000805461ff001916905550565b600054610100900460ff16806116b657506116b661158a565b806116c4575060005460ff16155b6116e05760405162461bcd60e51b815260040161037f90612a80565b600054610100900460ff1615801561170b576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610e14576000805461ff001916905550565b60009182526065602052604090912060020155565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a60035b6040518263ffffffff1660e01b815260040161177e91906124ae565b60206040518083038186803b15801561179657600080fd5b505afa1580156117aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad91906122a3565b600073ffffffffffffffffffffffffffffffffffffffff83166118035760405162461bcd60e51b815260040161037f906126e4565b6101c4546000906118299073ffffffffffffffffffffffffffffffffffffffff16611d37565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd9061188290889088908890600401612472565b602060405180830381600087803b15801561189c57600080fd5b505af11580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d49190612396565b95945050505050565b6101c4546040517ffc56365800000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063fc563658906119359084906004016124ae565b60206040518083038186803b15801561194d57600080fd5b505afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190612413565b90911115919050565b60006112ad82611f86565b60006112ad6101c3546119bc6119ad611d2b565b6119b686611fab565b90611fc6565b90611a4f565b600073ffffffffffffffffffffffffffffffffffffffff821663fc56365860045b6040518263ffffffff1660e01b81526004016119ff91906124ae565b60206040518083038186803b158015611a1757600080fd5b505afa158015611a2b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190612413565b60006112aa83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612000565b60006112aa83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612037565b8073ffffffffffffffffffffffffffffffffffffffff167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb83604051611b1991906124ae565b60405180910390a26101c454600090611b53908590611b4d9073ffffffffffffffffffffffffffffffffffffffff16612063565b856117ce565b905080611b725760405162461bcd60e51b815260040161037f90612843565b50505050565b3390565b6000828152606560205260409020611b949082612088565b156104d857611ba1611b78565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006112ad611c0c611e1d565b6119bc6119ad611d2b565b6000828201838110156112aa5760405162461bcd60e51b815260040161037f90612778565b6000828152606560205260409020611c5490826120aa565b156104d857611c61611b78565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff16611ce15760405162461bcd60e51b815260040161037f90612619565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d14611b78565b604051611d21919061242b565b60405180910390a1565b670de0b6b3a764000090565b60006112ad826120cc565b60006112ad82611741565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a82611762565b600073ffffffffffffffffffffffffffffffffffffffff821663fc56365860036119e3565b60975460ff1615611db95760405162461bcd60e51b815260040161037f906128fd565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d14611b78565b60006112aa83836120f1565b60006112aa8373ffffffffffffffffffffffffffffffffffffffff8416612136565b6101c454600090611e439073ffffffffffffffffffffffffffffffffffffffff1661198e565b73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8857600080fd5b505afa158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110339190612413565b6101c454600090611f599073ffffffffffffffffffffffffffffffffffffffff1663fc56365860016040518263ffffffff1660e01b8152600401611f0491906124ae565b60206040518083038186803b158015611f1c57600080fd5b505afa158015611f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f549190612413565b611fab565b611f73611f64611d2b565b6101c3546119bc908690611fc6565b111592915050565b60006112ad8261214e565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a6004611762565b60006112ad611fb8612152565b6119bc611fc3611d2b565b85905b600082611fd5575060006112ad565b82820282848281611fe257fe5b04146112aa5760405162461bcd60e51b815260040161037f90612a23565b600081836120215760405162461bcd60e51b815260040161037f91906124b7565b50600083858161202d57fe5b0495945050505050565b6000818484111561205b5760405162461bcd60e51b815260040161037f91906124b7565b505050900390565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a6006611762565b60006112aa8373ffffffffffffffffffffffffffffffffffffffff8416612159565b60006112aa8373ffffffffffffffffffffffffffffffffffffffff84166121a3565b600073ffffffffffffffffffffffffffffffffffffffff821663b93f9b0a6005611762565b815460009082106121145760405162461bcd60e51b815260040161037f90612528565b82600001828154811061212357fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b620f424090565b60006121658383612136565b61219b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556112ad565b5060006112ad565b6000818152600183016020526040812054801561227d5783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830191908101906000908790839081106121f457fe5b906000526020600020015490508087600001848154811061221157fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061224157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506112ad565b60009150506112ad565b600060208284031215612298578081fd5b81356112aa81612c24565b6000602082840312156122b4578081fd5b81516112aa81612c24565b6000806000606084860312156122d3578182fd5b83356122de81612c24565b925060208401356122ee81612c24565b929592945050506040919091013590565b60008060408385031215612311578182fd5b823561231c81612c24565b9150602083013561232c81612c24565b809150509250929050565b60008060408385031215612349578182fd5b823561235481612c24565b946020939093013593505050565b600080600060608486031215612376578283fd5b833561238181612c24565b95602085013595506040909401359392505050565b6000602082840312156123a7578081fd5b815180151581146112aa578182fd5b6000602082840312156123c7578081fd5b5035919050565b600080604083850312156123e0578182fd5b82359150602083013561232c81612c24565b60008060408385031215612404578182fd5b50508035926020909101359150565b600060208284031215612424578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b818110156124e3578581018301518582016040015282016124c7565b818111156124f45783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f4661696c656420746f207472616e7366657220666f72206465706f7369740000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526016908201527f4661696c656420746f20617070726f7665205553444300000000000000000000604082015260600190565b60208082526037908201527f416d6f756e74207265717565737465642069732067726561746572207468616e60408201527f207768617420746869732061646472657373206f776e73000000000000000000606082015260800190565b6020808252601a908201527f43616e27742073656e6420746f207a65726f2061646472657373000000000000604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201527f207468697320616374696f6e0000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526030908201527f4465706f73697420776f756c64207075742074686520506f6f6c206f7665722060408201527f74686520746f74616c206c696d69742e00000000000000000000000000000000606082015260800190565b6020808252601f908201527f4661696c656420746f207472616e7366657220666f7220776974686472617700604082015260600190565b60208082526023908201527f52657365727665207472616e7366657220776173206e6f74207375636365737360408201527f66756c0000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526028908201527f416d6f756e74206973206f76657220746865207065722d7472616e736163746960408201527f6f6e206c696d6974000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b60208082526035908201527f4f6e6c792074686520637265646974206465736b20697320616c6c6f7765642060408201527f746f2063616c6c20746869732066756e6374696f6e0000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201527f656e20696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f4d757374207769746864726177206d6f7265207468616e207a65726f00000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601d908201527f4661696c656420746f207072696e636970616c2072657061796d656e74000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4d757374206465706f736974206d6f7265207468616e207a65726f0000000000604082015260600190565b918252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff81168114610e1457600080fdfea2646970667358221220a0d1986a13b0b86e9e2d27b3f8117799f79ad756a438cdbef2ab5dec145085d364736f6c634300060c0033",
  "devdoc": {
    "author": "Goldfinch",
    "kind": "dev",
    "methods": {
      "collectInterestAndPrincipal(address,uint256,uint256)": {
        "params": {
          "from": "The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.",
          "interest": "the interest amount of USDC to move to the Pool",
          "principal": "the principal amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function."
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "The amount of USDC to deposit"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address)": {
        "params": {
          "_config": "The address of the GoldfinchConfig contract",
          "owner": "The address of who should have the \"OWNER_ROLE\" of this contract"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.",
          "from": "The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.",
          "to": "The address that the USDC should be moved to"
        }
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "The amount of USDC to withdraw"
        }
      }
    },
    "title": "Goldfinch's Pool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectInterestAndPrincipal(address,uint256,uint256)": {
        "notice": "Collects `interest` USDC in interest and `principal` in principal from `from` and sends it to the Pool.  This also increases the share price accordingly. A portion is sent to the Goldfinch Reserve address"
      },
      "deposit(uint256)": {
        "notice": "Deposits `amount` USDC from msg.sender into the Pool, and returns you the equivalent value of FIDU tokens"
      },
      "initialize(address,address)": {
        "notice": "Run only once, on initialization"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Moves `amount` USDC from `from`, to `to`."
      },
      "withdraw(uint256)": {
        "notice": "Withdraws `amount` USDC from the Pool to msg.sender, and burns the equivalent value of FIDU tokens"
      }
    },
    "notice": "Main entry point for LP's (a.k.a. capital providers)  Handles key logic for depositing and withdrawing funds from the Pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 264,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)"
      },
      {
        "astId": 509,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2385,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2474,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2483,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 2524,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4742,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4746,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4750,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4754,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4135,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "sharePrice",
        "offset": 0,
        "slot": "451",
        "type": "t_uint256"
      },
      {
        "astId": 8113,
        "contract": "contracts/protocol/core/Pool.sol:Pool",
        "label": "config",
        "offset": 0,
        "slot": "452",
        "type": "t_contract(GoldfinchConfig)8044"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GoldfinchConfig)8044": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)260_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2160_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2159,
            "contract": "contracts/protocol/core/Pool.sol:Pool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1980_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)260_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/protocol/core/Pool.sol:Pool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2160_storage"
          },
          {
            "astId": 259,
            "contract": "contracts/protocol/core/Pool.sol:Pool",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1980_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1975,
            "contract": "contracts/protocol/core/Pool.sol:Pool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1979,
            "contract": "contracts/protocol/core/Pool.sol:Pool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}