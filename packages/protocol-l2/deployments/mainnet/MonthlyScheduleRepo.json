{
  "address": "0xb7BEE8985cf7c1dbb35425c804199a51A5aBE9c5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "periodsInTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodsPerPrincipalPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodsPerInterestPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gracePrincipalPeriods",
          "type": "uint256"
        }
      ],
      "name": "createSchedule",
      "outputs": [
        {
          "internalType": "contract ISchedule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "periodsInTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodsPerPrincipalPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodsPerInterestPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gracePrincipalPeriods",
          "type": "uint256"
        }
      ],
      "name": "getSchedule",
      "outputs": [
        {
          "internalType": "contract ISchedule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodMapper",
      "outputs": [
        {
          "internalType": "contract IPeriodMapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf119aadf896b229f1a915d4e392b3d993ac1dd96d94fd2df4ccd246b8ab776f2",
  "receipt": {
    "to": null,
    "from": "0xE1599F49Bc20dD0F0071a5A9f36cb755124A3dA6",
    "contractAddress": "0xb7BEE8985cf7c1dbb35425c804199a51A5aBE9c5",
    "transactionIndex": 54,
    "gasUsed": "1303784",
    "logsBloom": "0x
    "blockHash": "0x5ef5cec2996b977574bfeb43489f5d4b54f987a8ff41f4e5ebf9a86da070ce81",
    "transactionHash": "0xf119aadf896b229f1a915d4e392b3d993ac1dd96d94fd2df4ccd246b8ab776f2",
    "logs": [],
    "blockNumber": 16891950,
    "cumulativeGasUsed": "6022181",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "037931358a02360a4927a740cc7df37a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodsInTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsPerPrincipalPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsPerInterestPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePrincipalPeriods\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[{\"internalType\":\"contract ISchedule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodsInTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsPerPrincipalPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsPerInterestPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePrincipalPeriods\",\"type\":\"uint256\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"contract ISchedule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodMapper\",\"outputs\":[{\"internalType\":\"contract IPeriodMapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createSchedule(uint256,uint256,uint256,uint256)\":{\"returns\":{\"_0\":\"schedule the schedule\"}},\"getSchedule(uint256,uint256,uint256,uint256)\":{\"returns\":{\"_0\":\"schedule the schedule\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createSchedule(uint256,uint256,uint256,uint256)\":{\"notice\":\"Add a schedule with the provided params to the repo\"},\"getSchedule(uint256,uint256,uint256,uint256)\":{\"notice\":\"Get the schedule with the requested params. Reverts if the schedule is not in the repo - see _createSchedule_\"}},\"notice\":\"Repository for re-usable schedules that function on calendar month periods. In general periods can be any length, but Warbler maintains a repository of schedules with monthly periods because that's the most common type of schedule used on the Goldfinch protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/schedule/MonthlyScheduleRepo.sol\":\"MonthlyScheduleRepo\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x50280546205978ca6573541955e15453b4c07a19e6c8ec4f6785a5ae0d7343fb\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"BokkyPooBahsDateTimeLibrary/contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xd8dd2fb707fdd435f8335add9d1891eb2c9d7f501672ff4ee82b2f152cdfeeeb\",\"license\":\"MIT\"},\"contracts/interfaces/IMonthlyScheduleRepo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {IPeriodMapper} from \\\"./IPeriodMapper.sol\\\";\\n\\ninterface IMonthlyScheduleRepo {\\n  function periodMapper() external view returns (IPeriodMapper);\\n\\n  function getSchedule(\\n    uint256 periodsInTerm,\\n    uint256 periodsPerPrincipalPeriod,\\n    uint256 periodsPerInterestPeriod,\\n    uint256 gracePrincipalPeriods\\n  ) external view returns (ISchedule);\\n\\n  /// @notice Add a schedule with the provided params to the repo\\n  /// @return schedule the schedule\\n  function createSchedule(\\n    uint256 periodsInTerm,\\n    uint256 periodsPerPrincipalPeriod,\\n    uint256 periodsPerInterestPeriod,\\n    uint256 gracePrincipalPeriods\\n  ) external returns (ISchedule);\\n}\\n\",\"keccak256\":\"0x0ac6efe2130e538fb5ef85c82d3902869bfe101072c25d85c79cde91fe0ef670\",\"license\":\"MIT\"},\"contracts/interfaces/IPeriodMapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n/// @title IPeriodMapper\\n/// @notice A mapping of timestamps to \\\"periods\\\"\\ninterface IPeriodMapper {\\n  /// @notice Returns the period that a timestamp resides in\\n  function periodOf(uint256 timestamp) external pure returns (uint256 period);\\n\\n  /// @notice Returns the starting timestamp of a given period\\n  function startOf(uint256 period) external pure returns (uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xc731c89773c0ff06b2025ceb8119be4dcef7cbf92691105059539c61ba875b0b\",\"license\":\"MIT\"},\"contracts/interfaces/ISchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ISchedule {\\n  function periodsPerPrincipalPeriod() external view returns (uint256);\\n\\n  function periodsInTerm() external view returns (uint256);\\n\\n  function periodsPerInterestPeriod() external view returns (uint256);\\n\\n  function gracePrincipalPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the period that timestamp resides in\\n   */\\n  function periodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the principal period that timestamp resides in\\n   */\\n  function principalPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the interest period that timestamp resides in\\n   */\\n  function interestPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns true if the given timestamp resides in a principal grace period\\n   */\\n  function withinPrincipalGracePeriodAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (bool);\\n\\n  /**\\n   * Returns the next timestamp where either principal or interest will come due following `timestamp`\\n   */\\n  function nextDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where either principal or timestamp came due\\n   */\\n  function previousDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where new interest came due\\n   */\\n  function previousInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where new principal came due\\n   */\\n  function previousPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total number of principal periods\\n   */\\n  function totalPrincipalPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total number of interest periods\\n   */\\n  function totalInterestPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp that the term will end\\n   */\\n  function termEndTime(uint256 startTime) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp that the term began\\n   */\\n  function termStartTime(uint256 startTime) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next time principal will come due, or the termEndTime if there are no more due times\\n   */\\n  function nextPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next time interest will come due, or the termEndTime if there are no more due times\\n   */\\n  function nextInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the end time of the given period.\\n   */\\n  function periodEndTime(uint256 startTime, uint256 period) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd12234c42aeb8a91fb435196e0aa5f45568b9f16b44ce29ea70118393ae952b1\",\"license\":\"MIT\"},\"contracts/library/SafeMath.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\n// NOTE: this file exists only to remove the extremely long error messages in safe math.\\n\\nimport {SafeMath as OzSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return OzSafeMath.sub(a, b, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    return OzSafeMath.sub(a, b, errorMessage);\\n  }\\n\\n  /// @notice Do a - b. If that would result in overflow then return 0\\n  function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return b > a ? 0 : a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return OzSafeMath.div(a, b, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    return OzSafeMath.div(a, b, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return OzSafeMath.mod(a, b, \\\"\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    return OzSafeMath.mod(a, b, errorMessage);\\n  }\\n}\\n\",\"keccak256\":\"0x492f16ba6645f576d55d73cb648a4f7268bf84dae52768826d7e37693ffa7148\"},\"contracts/protocol/core/schedule/MonthlyPeriodMapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// solhint-disable-next-line\\nimport {BokkyPooBahsDateTimeLibrary as DateTimeLib} from \\\"BokkyPooBahsDateTimeLibrary/contracts/BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport {IPeriodMapper} from \\\"../../../interfaces/IPeriodMapper.sol\\\";\\n\\n/// @title Monthly schedule\\n/// @author Warbler Labs Engineering\\n/// @notice A schedule mapping timestamps to periods. Each period begins on the first second\\n///         of each month\\ncontract MonthlyPeriodMapper is IPeriodMapper {\\n  // @inheritdoc IPeriodMapper\\n  function periodOf(uint256 timestamp) external pure override returns (uint256) {\\n    return DateTimeLib.diffMonths(0, timestamp);\\n  }\\n\\n  /// @inheritdoc IPeriodMapper\\n  function startOf(uint256 period) external pure override returns (uint256) {\\n    return DateTimeLib.addMonths(0, period);\\n  }\\n}\\n\",\"keccak256\":\"0x72adea13d35cb4d26ff646262d413b44afd24e417183d1dd1bcaea24f83da5bf\",\"license\":\"MIT\"},\"contracts/protocol/core/schedule/MonthlyScheduleRepo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISchedule} from \\\"../../../interfaces/ISchedule.sol\\\";\\nimport {IMonthlyScheduleRepo} from \\\"../../../interfaces/IMonthlyScheduleRepo.sol\\\";\\nimport {IPeriodMapper} from \\\"../../../interfaces/IPeriodMapper.sol\\\";\\n\\nimport {MonthlyPeriodMapper} from \\\"./MonthlyPeriodMapper.sol\\\";\\nimport {Schedule} from \\\"./Schedule.sol\\\";\\n\\n/**\\n * @notice Repository for re-usable schedules that function on calendar month periods.\\n * In general periods can be any length, but Warbler maintains a repository of schedules\\n * with monthly periods because that's the most common type of schedule used on the\\n * Goldfinch protocol.\\n */\\ncontract MonthlyScheduleRepo is IMonthlyScheduleRepo {\\n  IPeriodMapper public immutable override periodMapper;\\n\\n  mapping(bytes32 => address) private schedules;\\n\\n  constructor() public {\\n    periodMapper = new MonthlyPeriodMapper();\\n  }\\n\\n  /// @notice Get the schedule with the requested params. Reverts if the\\n  /// schedule is not in the repo - see _createSchedule_\\n  /// @return schedule the schedule\\n  function getSchedule(\\n    uint256 periodsInTerm,\\n    uint256 periodsPerPrincipalPeriod,\\n    uint256 periodsPerInterestPeriod,\\n    uint256 gracePrincipalPeriods\\n  ) external view override returns (ISchedule) {\\n    bytes32 scheduleId = getScheduleId(\\n      periodsInTerm,\\n      periodsPerPrincipalPeriod,\\n      periodsPerInterestPeriod,\\n      gracePrincipalPeriods\\n    );\\n    address schedule = schedules[scheduleId];\\n    require(schedule != address(0), \\\"Schedule doesn't exist\\\");\\n    return ISchedule(schedule);\\n  }\\n\\n  /// @notice Add a schedule with the provided params to the repo\\n  /// @return schedule the schedule\\n  function createSchedule(\\n    uint256 periodsInTerm,\\n    uint256 periodsPerPrincipalPeriod,\\n    uint256 periodsPerInterestPeriod,\\n    uint256 gracePrincipalPeriods\\n  ) external override returns (ISchedule) {\\n    bytes32 scheduleId = getScheduleId(\\n      periodsInTerm,\\n      periodsPerPrincipalPeriod,\\n      periodsPerInterestPeriod,\\n      gracePrincipalPeriods\\n    );\\n\\n    address schedule = schedules[scheduleId];\\n\\n    // No need to create it again if it already exists\\n    if (schedule != address(0)) {\\n      return ISchedule(schedule);\\n    }\\n\\n    Schedule newSchedule = new Schedule(\\n      periodMapper,\\n      periodsInTerm,\\n      periodsPerPrincipalPeriod,\\n      periodsPerInterestPeriod,\\n      gracePrincipalPeriods\\n    );\\n    schedules[scheduleId] = address(newSchedule);\\n    return newSchedule;\\n  }\\n\\n  function getScheduleId(\\n    uint256 periodsInTerm,\\n    uint256 periodsPerPrincipalPeriod,\\n    uint256 periodsPerInterestPeriod,\\n    uint256 gracePrincipalPeriods\\n  ) private pure returns (bytes32) {\\n    // Right pad with 0 params so we have the option to add new parameters in the future\\n    // Use encode instead of encodePacked because non-padded concatenation can lead to\\n    // non-unique ids\\n    bytes memory concattedParams = abi.encode(\\n      periodsInTerm,\\n      periodsPerPrincipalPeriod,\\n      periodsPerInterestPeriod,\\n      gracePrincipalPeriods\\n    );\\n    return keccak256(concattedParams);\\n  }\\n}\\n\",\"keccak256\":\"0xe168f3b9d408e07fe1250a11bfa7669d4c2a90e679bf1f5c4b14ed6994599b7d\",\"license\":\"MIT\"},\"contracts/protocol/core/schedule/Schedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IPeriodMapper} from \\\"../../../interfaces/IPeriodMapper.sol\\\";\\nimport {ISchedule} from \\\"../../../interfaces/ISchedule.sol\\\";\\nimport {SafeMath} from \\\"../../../library/SafeMath.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\n\\n/**\\n * @title Schedule\\n * @author Warbler Labs Engineering\\n * @notice A contract meant to be re-used between tranched pools to determine when payments are due\\n *         using some period mapper contract that maps timestamps to real world concepts of time (months).\\n *         This contract allows a user to specify how often interest payments and principal payments should come\\n *         due by allowing the creator to specify the length of of interest periods and principal periods. Additionally\\n *         the creator can specify how many of the principal periods are considered \\\"grace periods\\\"\\n *\\n * Example:\\n * Here's a visualization of a schedule with the following parameters\\n * periodMapper = monthly periods\\n * periodsInTerm = 12 (1 year)\\n * periodsPerInterestPeriod = 3 (quarterly)\\n * periodsPerPrincipalPeriod = 6 (halfly)\\n * gracePrincipalPeriods = 1\\n *\\n *                       +- Stub Period     +- Principal Grace Period\\n *  grace periods        v                  v\\n *                     +---+-----------------------+-----------------------+\\n *  principal periods  |///|=======================|           0           |\\n *                     |///+-----------+-----------+-----------+-----------+ E\\n *  interest periods   |///|     0     |     1     |     2     |     4     | N\\n *                     +---+---+---+---+---+---+---+---+---+---+---+---+---+ D\\n *  periods            |FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|JAN|FEB|\\n *                     |   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10| 11|\\n *                  ---+---+---+---+---+---+---+---+---+---+---+---+---+---+---\\n *  absolute        ...| 25| 26| 27| 28| 29| 30| 31| 32| 33| 34| 35| 36| 37|...\\n *  periods            |   |   |   |   |   |   |   |   |   |   |   |   |   |\\n *                  ---+---+---+---+---+---+---+---+---+---+---+---+---+---+---\\n *                      ^\\n *                      +- start time\\n * When a borrower draws down, a \\\"stub period\\\" is created. This period is the remainder of the\\n * period they drew down in, but at the end of this period no payment of any kind should be due.\\n * We treat this stub period as an extension to period 0.\\n *\\n * At the end of each interest or principal period a payment is expected. For example\\n * imagine today is Oct 10th. Your next interest payment will be the beginning of December\\n * because the current interest period, period 2, ends in december. Your next principal payment\\n * will be due at the end of February because the current principal period, period 0, ends in\\n * February. This is also the end of the loan, and so all interest and principal should be due\\n * at this time.\\n *\\n * @dev Because this contract is meant to be re-used between contracts, the \\\"start time\\\" is not stored on this contract\\n *      Instead, it's passed in to each function call.\\n */\\ncontract Schedule is ISchedule {\\n  using Math for uint256;\\n  using SafeMath for uint256;\\n\\n  /// @notice the payment date schedule\\n  IPeriodMapper public immutable periodMapper;\\n\\n  /// @notice the number of periods in the term of the loan\\n  uint256 public immutable override periodsInTerm;\\n\\n  /// @notice the number of payment periods that need to pass before interest\\n  ///         comes due\\n  uint256 public immutable override periodsPerInterestPeriod;\\n\\n  /// @notice the number of payment periods that need to pass before principal\\n  ///         comes due\\n  uint256 public immutable override periodsPerPrincipalPeriod;\\n\\n  /// @notice the number of principal periods where no principal will be due\\n  uint256 public immutable override gracePrincipalPeriods;\\n\\n  //===============================================================================\\n  // external functions\\n  //===============================================================================\\n\\n  /// @param _periodMapper contract that maps timestamps to periods\\n  /// @param _periodsInTerm the number of periods in the term of the loan\\n  /// @param _periodsPerPrincipalPeriod the number of payment periods that need to pass before principal\\n  ///         comes due\\n  /// @param _periodsPerInterestPeriod the number of payment periods that need to pass before interest\\n  ///         comes due.\\n  /// @param _gracePrincipalPeriods principal periods where principal will not be due\\n  constructor(\\n    IPeriodMapper _periodMapper,\\n    uint256 _periodsInTerm,\\n    uint256 _periodsPerPrincipalPeriod,\\n    uint256 _periodsPerInterestPeriod,\\n    uint256 _gracePrincipalPeriods\\n  ) public {\\n    require(address(_periodMapper) != address(0), \\\"Z\\\");\\n\\n    require(_periodsInTerm > 0, \\\"Z\\\");\\n    require(_periodsPerPrincipalPeriod > 0, \\\"Z\\\");\\n    require(_periodsPerInterestPeriod > 0, \\\"Z\\\");\\n\\n    require(_periodsInTerm % _periodsPerPrincipalPeriod == 0, \\\"PPPP\\\");\\n    require(_periodsInTerm % _periodsPerInterestPeriod == 0, \\\"PPIP\\\");\\n\\n    uint256 nPrincipalPeriods = _periodsInTerm / _periodsPerPrincipalPeriod;\\n    require(_gracePrincipalPeriods < nPrincipalPeriods, \\\"GPP\\\");\\n\\n    periodMapper = _periodMapper;\\n    periodsInTerm = _periodsInTerm;\\n    periodsPerPrincipalPeriod = _periodsPerPrincipalPeriod;\\n    periodsPerInterestPeriod = _periodsPerInterestPeriod;\\n    gracePrincipalPeriods = _gracePrincipalPeriods;\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function interestPeriodAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) public view override returns (uint256) {\\n    return\\n      Math.min(_periodToInterestPeriod(periodAt(startTime, timestamp)), totalInterestPeriods());\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function periodAt(uint256 startTime, uint256 timestamp) public view override returns (uint256) {\\n    uint256 currentAbsPeriod = periodMapper.periodOf(timestamp);\\n    uint256 startPeriod = _termStartAbsolutePeriod(startTime);\\n\\n    return Math.min(currentAbsPeriod.saturatingSub(startPeriod), periodsInTerm);\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function principalPeriodAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) public view override returns (uint256) {\\n    return\\n      Math.min(_periodToPrincipalPeriod(periodAt(startTime, timestamp)), totalPrincipalPeriods());\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function withinPrincipalGracePeriodAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) public view override returns (bool) {\\n    return\\n      timestamp < startTime ||\\n      (timestamp >= startTime &&\\n        periodAt(startTime, timestamp).div(periodsPerPrincipalPeriod) < gracePrincipalPeriods);\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function nextDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view override returns (uint256) {\\n    return\\n      Math.min(\\n        nextPrincipalDueTimeAt(startTime, timestamp),\\n        nextInterestDueTimeAt(startTime, timestamp)\\n      );\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function previousDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view override returns (uint256) {\\n    return\\n      Math.max(\\n        previousInterestDueTimeAt(startTime, timestamp),\\n        previousPrincipalDueTimeAt(startTime, timestamp)\\n      );\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function totalPrincipalPeriods() public view override returns (uint256) {\\n    // To make amortization math easy, we want to exclude grace periods from this\\n    return periodsInTerm.div(periodsPerPrincipalPeriod).sub(gracePrincipalPeriods);\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function totalInterestPeriods() public view override returns (uint256) {\\n    return periodsInTerm.div(periodsPerInterestPeriod);\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function termEndTime(uint256 startTime) external view override returns (uint256) {\\n    uint256 endPeriod = _termEndAbsolutePeriod(startTime);\\n    return periodMapper.startOf(endPeriod);\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function termStartTime(uint256 startTime) external view override returns (uint256) {\\n    uint256 startPeriod = _termStartAbsolutePeriod(startTime);\\n    return periodMapper.startOf(startPeriod);\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function previousInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) public view override returns (uint256) {\\n    uint interestPeriod = interestPeriodAt(startTime, timestamp);\\n    return interestPeriod > 0 ? _startOfInterestPeriod(startTime, interestPeriod) : 0;\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function previousPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) public view override returns (uint256) {\\n    uint principalPeriod = principalPeriodAt(startTime, timestamp);\\n    return principalPeriod > 0 ? _startOfPrincipalPeriod(startTime, principalPeriod) : 0;\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function nextPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) public view override returns (uint256) {\\n    uint256 nextPrincipalPeriod = Math.min(\\n      totalPrincipalPeriods(),\\n      principalPeriodAt(startTime, timestamp).add(1)\\n    );\\n    return _startOfPrincipalPeriod(startTime, nextPrincipalPeriod);\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function nextInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) public view override returns (uint256) {\\n    uint256 nextInterestPeriod = Math.min(\\n      totalInterestPeriods(),\\n      interestPeriodAt(startTime, timestamp).add(1)\\n    );\\n    return _startOfInterestPeriod(startTime, nextInterestPeriod);\\n  }\\n\\n  /// @inheritdoc ISchedule\\n  function periodEndTime(uint256 startTime, uint256 period) public view override returns (uint256) {\\n    uint256 absPeriod = _periodToAbsolutePeriod(startTime, period);\\n    return periodMapper.startOf(absPeriod + 1);\\n  }\\n\\n  //===============================================================================\\n  // Internal functions\\n  //===============================================================================\\n\\n  /// @notice Returns the absolute period that the terms will end in, accounting\\n  ///           for the stub period\\n  function _termEndAbsolutePeriod(uint256 startTime) internal view returns (uint256) {\\n    return _termStartAbsolutePeriod(startTime).add(periodsInTerm);\\n  }\\n\\n  /// @notice Returns the absolute period that the terms started in, accounting\\n  ///           for the stub period\\n  function _termStartAbsolutePeriod(uint256 startTime) internal view returns (uint256) {\\n    // We add one here so that a \\\"stub period\\\" is created. Example: Imagine\\n    // a the borrower draws down in the 15th of Jan. It would be incorrect for them\\n    // to make a payment on Feb 1, as it would not be a full payment period. Instead\\n    // we count the first 15 days as an extension on the first period, or a \\\"stub period\\\"\\n    return periodMapper.periodOf(startTime).add(1);\\n  }\\n\\n  /// @notice Convert a period to a principal period\\n  function _periodToPrincipalPeriod(uint256 p) internal view returns (uint256) {\\n    // To make amortization math easy, we want to make it so that the \\\"0th\\\" principal\\n    // period is the first non-grace principal period.\\n    return p.div(periodsPerPrincipalPeriod).saturatingSub(gracePrincipalPeriods);\\n  }\\n\\n  /// @notice Convert a period to an interest period\\n  function _periodToInterestPeriod(uint256 p) internal view returns (uint256) {\\n    return p.div(periodsPerInterestPeriod);\\n  }\\n\\n  /// @notice Convert an interest period to a normal period\\n  function _interestPeriodToPeriod(uint256 p) internal view returns (uint256) {\\n    return p.mul(periodsPerInterestPeriod);\\n  }\\n\\n  /// @notice Convert a principal period to a normal period\\n  function _principalPeriodToPeriod(uint256 p) internal view returns (uint256) {\\n    return p.mul(periodsPerPrincipalPeriod);\\n  }\\n\\n  /// @notice Convert a period to an absolute period. An absolute period is relative to\\n  ///   the beginning of time rather than being relative to the start time\\n  function _periodToAbsolutePeriod(uint256 startTime, uint256 p) internal view returns (uint256) {\\n    return _termStartAbsolutePeriod(startTime).add(p);\\n  }\\n\\n  /// @notice Returns the starting timestamp of a principal period\\n  function _startOfPrincipalPeriod(\\n    uint256 startTime,\\n    uint256 principalPeriod\\n  ) internal view returns (uint256) {\\n    uint256 period = _principalPeriodToPeriod(principalPeriod.add(gracePrincipalPeriods));\\n    uint256 absPeriod = _periodToAbsolutePeriod(startTime, period);\\n    return periodMapper.startOf(absPeriod);\\n  }\\n\\n  /// @notice Returns the starting timestamp of an interest period\\n  function _startOfInterestPeriod(\\n    uint256 startTime,\\n    uint256 interestPeriod\\n  ) internal view returns (uint256) {\\n    uint256 period = _interestPeriodToPeriod(interestPeriod);\\n    uint256 absPeriod = _periodToAbsolutePeriod(startTime, period);\\n    return periodMapper.startOf(absPeriod);\\n  }\\n}\\n\",\"keccak256\":\"0x576d75a23575a4a7ae1fe059ad8d68bdf91f04aec9cac10520427337cef831f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630b5d0e42146100465780632e2aa6471461006f578063e30fb4d914610077575b600080fd5b61005961005436600461021f565b61008a565b6040516100669190610250565b60405180910390f35b610059610157565b61005961008536600461021f565b61017b565b600080610099868686866101d5565b6000818152602081905260409020549091506001600160a01b031680156100c357915061014f9050565b60007f0000000000000000000000000000000000000000000000000000000000000000888888886040516100f690610212565b610104959493929190610264565b604051809103906000f080158015610120573d6000803e3d6000fd5b5060009384526020849052604090932080546001600160a01b0319166001600160a01b03851617905550909150505b949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061018a868686866101d5565b6000818152602081905260409020549091506001600160a01b0316806101cb5760405162461bcd60e51b81526004016101c290610292565b60405180910390fd5b9695505050505050565b60006060858585856040516020016101f094939291906102c2565b60408051808303601f1901815291905280516020909101209695505050505050565b610fba806102de83390190565b60008060008060808587031215610234578384fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0391909116815260200190565b6001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b60208082526016908201527514d8da19591d5b1948191bd95cdb89dd08195e1a5cdd60521b604082015260600190565b9384526020840192909252604083015260608201526080019056fe6101206040523480156200001257600080fd5b5060405162000fba38038062000fba833981016040819052620000359162000181565b6001600160a01b038516620000675760405162461bcd60e51b81526004016200005e90620001f4565b60405180910390fd5b600084116200008a5760405162461bcd60e51b81526004016200005e90620001f4565b60008311620000ad5760405162461bcd60e51b81526004016200005e90620001f4565b60008211620000d05760405162461bcd60e51b81526004016200005e90620001f4565b828481620000da57fe5b0615620000fb5760405162461bcd60e51b81526004016200005e906200020f565b8184816200010557fe5b0615620001265760405162461bcd60e51b81526004016200005e90620001d6565b60008385816200013257fe5b049050808210620001575760405162461bcd60e51b81526004016200005e906200022d565b5060609490941b6001600160601b03191660805260a09290925260e05260c052610100526200024a565b600080600080600060a0868803121562000199578081fd5b85516001600160a01b0381168114620001b0578182fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b6020808252600490820152630505049560e41b604082015260600190565b6020808252600190820152602d60f91b604082015260600190565b6020808252600490820152630505050560e41b604082015260600190565b60208082526003908201526204750560ec1b604082015260600190565b60805160601c60a05160c05160e05161010051610cc9620002f16000398061056352806105de528061076e528061094452806109bb52508061058752806107b352806107df52806109695280610b50525080610432528061060252806108c25280610ae45250806104115280610626528061072e528061079252806109035250806102ef528061033752806104c3528061067652806108355280610a0c5250610cc96000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80639245dad6116100ad578063b82d6ce611610071578063b82d6ce614610247578063d47a6e821461025a578063df3dc0911461026d578063e08cf88314610280578063f755f000146102885761012c565b80639245dad6146101fc578063a2af04ff1461021c578063a5196b6d1461022f578063ac08641314610237578063b35e0d461461023f5761012c565b806356bd0119116100f457806356bd0119146101a857806367f90425146101bb578063875476f3146101c35780638ba6bcb0146101d65780638dfdc695146101e95761012c565b806308194cc8146101315780630d0e71fb1461015a5780632e2aa6471461016d57806334a88f431461018257806347487c0114610195575b600080fd5b61014461013f366004610bf7565b610290565b6040516101519190610c8a565b60405180910390f35b610144610168366004610bf7565b6102c2565b6101756102ed565b6040516101519190610c23565b610144610190366004610bc7565b610311565b6101446101a3366004610bf7565b6103bc565b6101446101b6366004610bf7565b6103eb565b61014461040a565b6101446101d1366004610bf7565b61045b565b6101446101e4366004610bf7565b610483565b6101446101f7366004610bf7565b61049c565b61020f61020a366004610bf7565b61054b565b6040516101519190610c18565b61014461022a366004610bf7565b6105be565b6101446105dc565b610144610600565b610144610624565b610144610255366004610bf7565b610648565b610144610268366004610bf7565b610671565b61014461027b366004610bc7565b61075b565b610144610767565b6101446107dd565b60008061029d84846102c2565b9050600081116102ae5760006102b8565b6102b88482610801565b9150505b92915050565b60006102e66102d96102d48585610671565b6108ba565b6102e161040a565b6108e6565b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061031d836108fc565b60405163b41e7f4760e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b41e7f479061036c908490600401610c8a565b60206040518083038186803b15801561038457600080fd5b505afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610bdf565b6000806103df6103ca61040a565b6102e160016103d988886102c2565b9061092b565b90506102b88482610801565b60006102e66104026103fd8585610671565b61093d565b6102e1610767565b60006104567f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610993565b905090565b60008061046884846103eb565b9050600081116104795760006102b8565b6102b884826109af565b60006102e66104928484610648565b6102e185856103bc565b6000806104a984846109e4565b60405163b41e7f4760e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b41e7f47906104fb906001850190600401610c8a565b60206040518083038186803b15801561051357600080fd5b505afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b89190610bdf565b6000828210806102e657508282101580156102e657507f00000000000000000000000000000000000000000000000000000000000000006105b67f00000000000000000000000000000000000000000000000000000000000000006105b08686610671565b90610993565b109392505050565b60006102e66105cd8484610290565b6105d7858561045b565b6109f3565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610665610656610767565b6102e160016103d988886103eb565b90506102b884826109af565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f8549af9846040518263ffffffff1660e01b81526004016106c09190610c8a565b60206040518083038186803b1580156106d857600080fd5b505afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107109190610bdf565b9050600061071d85610a03565b905061075261072c8383610aa6565b7f00000000000000000000000000000000000000000000000000000000000000006108e6565b95945050505050565b60008061031d83610a03565b60006104567f00000000000000000000000000000000000000000000000000000000000000006107d77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610993565b90610ac0565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061080d83610adc565b9050600061081b85836109e4565b60405163b41e7f4760e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b41e7f479061086a908490600401610c8a565b60206040518083038186803b15801561088257600080fd5b505afa158015610896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190610bdf565b60006102bc827f0000000000000000000000000000000000000000000000000000000000000000610993565b60008183106108f557816102e6565b5090919050565b60006102bc7f00000000000000000000000000000000000000000000000000000000000000006103d984610a03565b6000828201838110156102e657600080fd5b60006102bc7f000000000000000000000000000000000000000000000000000000000000000061098d847f0000000000000000000000000000000000000000000000000000000000000000610993565b90610aa6565b60006102e6838360405180602001604052806000815250610b08565b60008061080d6109df847f000000000000000000000000000000000000000000000000000000000000000061092b565b610b48565b60006102e6826103d985610a03565b6000818310156108f557816102e6565b60006102bc60017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f8549af9856040518263ffffffff1660e01b8152600401610a569190610c8a565b60206040518083038186803b158015610a6e57600080fd5b505afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d99190610bdf565b6000828211610ab7578183036102e6565b50600092915050565b60006102e6838360405180602001604052806000815250610b74565b60006102bc827f0000000000000000000000000000000000000000000000000000000000000000610ba0565b60008183610b325760405162461bcd60e51b8152600401610b299190610c37565b60405180910390fd5b506000838581610b3e57fe5b0495945050505050565b60006102bc827f0000000000000000000000000000000000000000000000000000000000000000610ba0565b60008184841115610b985760405162461bcd60e51b8152600401610b299190610c37565b505050900390565b600082610baf575060006102bc565b82820282848281610bbc57fe5b04146102e657600080fd5b600060208284031215610bd8578081fd5b5035919050565b600060208284031215610bf0578081fd5b5051919050565b60008060408385031215610c09578081fd5b50508035926020909101359150565b901515815260200190565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b81811015610c6357858101830151858201604001528201610c47565b81811115610c745783604083870101525b50601f01601f1916929092016040019392505050565b9081526020019056fea26469706673582212202ef8780db98fd5d6952e35963fad4e957eb60bd4f679714dfb26513afa1ad1c864736f6c634300060c0033a2646970667358221220a74770adadb92e78f806cbd4d3a1b2e54f611f075336b80de0742151847e6b6e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createSchedule(uint256,uint256,uint256,uint256)": {
        "returns": {
          "_0": "schedule the schedule"
        }
      },
      "getSchedule(uint256,uint256,uint256,uint256)": {
        "returns": {
          "_0": "schedule the schedule"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createSchedule(uint256,uint256,uint256,uint256)": {
        "notice": "Add a schedule with the provided params to the repo"
      },
      "getSchedule(uint256,uint256,uint256,uint256)": {
        "notice": "Get the schedule with the requested params. Reverts if the schedule is not in the repo - see _createSchedule_"
      }
    },
    "notice": "Repository for re-usable schedules that function on calendar month periods. In general periods can be any length, but Warbler maintains a repository of schedules with monthly periods because that's the most common type of schedule used on the Goldfinch protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30119,
        "contract": "contracts/protocol/core/schedule/MonthlyScheduleRepo.sol:MonthlyScheduleRepo",
        "label": "schedules",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}