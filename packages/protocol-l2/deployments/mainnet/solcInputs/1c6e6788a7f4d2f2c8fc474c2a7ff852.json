{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721ReceiverUpgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/cake/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IAccessControl.sol\";\n\n/// @title Cake access control\n/// @author landakram\n/// @notice This contact centralizes contract-to-contract access control using a simple\n/// access-control list. There are two types of actors: operators and admins. Operators\n/// are callers involved in a regular end-user tx. This would likely be another Goldfinch\n/// contract for which the current contract is a dependency. Admins are callers allowed\n/// for specific admin actions (like changing parameters, topping up funds, etc.).\ncontract AccessControl is Initializable, IAccessControl {\n  /// @dev Mapping from contract address to contract admin;\n  mapping(address => address) public admins;\n\n  function initialize(address admin) public initializer {\n    admins[address(this)] = admin;\n    emit AdminSet(address(this), admin);\n  }\n\n  /// @inheritdoc IAccessControl\n  function setAdmin(address resource, address admin) external {\n    requireSuperAdmin(msg.sender);\n    admins[resource] = admin;\n    emit AdminSet(resource, admin);\n  }\n\n  /// @inheritdoc IAccessControl\n  function requireAdmin(address resource, address accessor) public view {\n    if (accessor == address(0)) revert ZeroAddress();\n    bool isAdmin = admins[resource] == accessor;\n    if (!isAdmin) revert RequiresAdmin(resource, accessor);\n  }\n\n  /// @inheritdoc IAccessControl\n  function requireSuperAdmin(address accessor) public view {\n    // The super admin is the admin of this AccessControl contract\n    requireAdmin({resource: address(this), accessor: accessor});\n  }\n}\n"
    },
    "contracts/cake/Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport {Context} from \"./Context.sol\";\nimport \"./Routing.sol\" as Routing;\n\nusing Routing.Context for Context;\n\n/// @title Base contract for application-layer\n/// @author landakram\n/// @notice This base contract is what all application-layer contracts should inherit from.\n///  It provides `Context`, as well as some convenience functions for working with it and\n///  using access control. All public methods on the inheriting contract should likely\n///  use one of the modifiers to assert valid callers.\nabstract contract Base {\n  error RequiresOperator(address resource, address accessor);\n  error ZeroAddress();\n\n  /// @dev this is safe for proxies as immutable causes the context to be written to\n  ///  bytecode on deployment. The proxy then treats this as a constant.\n  Context immutable context;\n\n  constructor(Context _context) {\n    context = _context;\n  }\n\n  modifier onlyOperator(bytes4 operatorId) {\n    requireOperator(operatorId, msg.sender);\n    _;\n  }\n\n  modifier onlyOperators(bytes4[2] memory operatorIds) {\n    requireAnyOperator(operatorIds, msg.sender);\n    _;\n  }\n\n  modifier onlyAdmin() {\n    context.accessControl().requireAdmin(address(this), msg.sender);\n    _;\n  }\n\n  function requireAnyOperator(bytes4[2] memory operatorIds, address accessor) private view {\n    if (accessor == address(0)) revert ZeroAddress();\n\n    bool validOperator = isOperator(operatorIds[0], accessor) ||\n      isOperator(operatorIds[1], accessor);\n\n    if (!validOperator) revert RequiresOperator(address(this), accessor);\n  }\n\n  function requireOperator(bytes4 operatorId, address accessor) private view {\n    if (accessor == address(0)) revert ZeroAddress();\n    if (!isOperator(operatorId, accessor)) revert RequiresOperator(address(this), accessor);\n  }\n\n  function isOperator(bytes4 operatorId, address accessor) private view returns (bool) {\n    return context.router().contracts(operatorId) == accessor;\n  }\n}\n"
    },
    "contracts/cake/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport {AccessControl} from \"./AccessControl.sol\";\nimport {Router} from \"./Router.sol\";\nimport \"./Routing.sol\" as Routing;\n\nusing Routing.Context for Context;\n\n/// @title Entry-point for all application-layer contracts.\n/// @author landakram\n/// @notice This contract provides an interface for retrieving other contract addresses and doing access\n///  control.\ncontract Context {\n  /// @notice Used for retrieving other contract addresses.\n  /// @dev This variable is immutable. This is done to save gas, as it is expected to be referenced\n  /// in every end-user call with a call-chain length > 0. Note that it is written into the contract\n  /// bytecode at contract creation time, so if the contract is deployed as the implementation for proxies,\n  /// every proxy will share the same Router address.\n  Router public immutable router;\n\n  constructor(Router _router) {\n    router = _router;\n  }\n}\n"
    },
    "contracts/cake/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n// solhint-disable-next-line max-line-length\nimport {PausableUpgradeable as OZPausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport {Base} from \"./Base.sol\";\nimport \"./Routing.sol\" as Routing;\n\nabstract contract PausableUpgradeable is Base, OZPausableUpgradeable {\n  function pause() external onlyOperators([Routing.Keys.PauserAdmin, Routing.Keys.ProtocolAdmin]) {\n    _pause();\n  }\n\n  function unpause()\n    external\n    onlyOperators([Routing.Keys.PauserAdmin, Routing.Keys.ProtocolAdmin])\n  {\n    _unpause();\n  }\n}\n"
    },
    "contracts/cake/Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {AccessControl} from \"./AccessControl.sol\";\nimport {IRouter} from \"../interfaces/IRouter.sol\";\n\nimport \"./Routing.sol\" as Routing;\n\n/// @title Router\n/// @author landakram\n/// @notice This contract provides service discovery for contracts using the cake framework.\n///   It can be used in conjunction with the convenience methods defined in the `Routing.Context`\n///   and `Routing.Keys` libraries.\ncontract Router is Initializable, IRouter {\n  /// @notice Mapping of keys to contract addresses. Keys are the first 4 bytes of the keccak of\n  ///   the contract's name. See Routing.sol for all options.\n  mapping(bytes4 => address) public contracts;\n\n  function initialize(AccessControl accessControl) public initializer {\n    contracts[Routing.Keys.AccessControl] = address(accessControl);\n  }\n\n  /// @notice Associate a routing key to a contract address\n  /// @dev This function is only callable by the Router admin\n  /// @param key A routing key (defined in the `Routing.Keys` libary)\n  /// @param addr A contract address\n  function setContract(bytes4 key, address addr) public {\n    AccessControl accessControl = AccessControl(contracts[Routing.Keys.AccessControl]);\n    accessControl.requireAdmin(address(this), msg.sender);\n    contracts[key] = addr;\n    emit SetContract(key, addr);\n  }\n}\n"
    },
    "contracts/cake/Routing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable const-name-snakecase\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n\nimport {IMembershipVault} from \"../interfaces/IMembershipVault.sol\";\nimport {IGFILedger} from \"../interfaces/IGFILedger.sol\";\nimport {ICapitalLedger} from \"../interfaces/ICapitalLedger.sol\";\nimport {IMembershipDirector} from \"../interfaces/IMembershipDirector.sol\";\nimport {IMembershipOrchestrator} from \"../interfaces/IMembershipOrchestrator.sol\";\nimport {IMembershipLedger} from \"../interfaces/IMembershipLedger.sol\";\nimport {IMembershipCollector} from \"../interfaces/IMembershipCollector.sol\";\nimport {IBackerRewards} from \"../interfaces/IBackerRewards.sol\";\n\nimport {ISeniorPool} from \"../interfaces/ISeniorPool.sol\";\nimport {IPoolTokens} from \"../interfaces/IPoolTokens.sol\";\nimport {IStakingRewards} from \"../interfaces/IStakingRewards.sol\";\nimport {IGo} from \"../interfaces/IGo.sol\";\n\nimport {IERC20Splitter} from \"../interfaces/IERC20Splitter.sol\";\nimport {Context as ContextContract} from \"./Context.sol\";\nimport {IAccessControl} from \"../interfaces/IAccessControl.sol\";\n\n/// @title Routing.Keys\n/// @notice This library is used to define routing keys used by `Router`.\n/// @dev We use uints instead of enums for several reasons. First, keys can be re-ordered\n///   or removed. This is useful when routing keys are deprecated; they can be moved to a\n///   different section of the file. Second, other libraries or contracts can define their\n///   own routing keys independent of this global mapping. This is useful for test contracts.\nlibrary Keys {\n  // Membership\n  bytes4 internal constant MembershipOrchestrator = bytes4(keccak256(\"MembershipOrchestrator\"));\n  bytes4 internal constant MembershipDirector = bytes4(keccak256(\"MembershipDirector\"));\n  bytes4 internal constant GFILedger = bytes4(keccak256(\"GFILedger\"));\n  bytes4 internal constant CapitalLedger = bytes4(keccak256(\"CapitalLedger\"));\n  bytes4 internal constant MembershipCollector = bytes4(keccak256(\"MembershipCollector\"));\n  bytes4 internal constant MembershipLedger = bytes4(keccak256(\"MembershipLedger\"));\n  bytes4 internal constant MembershipVault = bytes4(keccak256(\"MembershipVault\"));\n\n  // Tokens\n  bytes4 internal constant GFI = bytes4(keccak256(\"GFI\"));\n  bytes4 internal constant FIDU = bytes4(keccak256(\"FIDU\"));\n  bytes4 internal constant USDC = bytes4(keccak256(\"USDC\"));\n\n  // Cake\n  bytes4 internal constant AccessControl = bytes4(keccak256(\"AccessControl\"));\n  bytes4 internal constant Router = bytes4(keccak256(\"Router\"));\n\n  // Core\n  bytes4 internal constant ReserveSplitter = bytes4(keccak256(\"ReserveSplitter\"));\n  bytes4 internal constant PoolTokens = bytes4(keccak256(\"PoolTokens\"));\n  bytes4 internal constant SeniorPool = bytes4(keccak256(\"SeniorPool\"));\n  bytes4 internal constant StakingRewards = bytes4(keccak256(\"StakingRewards\"));\n  bytes4 internal constant ProtocolAdmin = bytes4(keccak256(\"ProtocolAdmin\"));\n  bytes4 internal constant PauserAdmin = bytes4(keccak256(\"PauserAdmin\"));\n  bytes4 internal constant BackerRewards = bytes4(keccak256(\"BackerRewards\"));\n  bytes4 internal constant Go = bytes4(keccak256(\"Go\"));\n}\n\n/// @title Routing.Context\n/// @notice This library provides convenience functions for getting contracts from `Router`.\nlibrary Context {\n  function accessControl(ContextContract context) internal view returns (IAccessControl) {\n    return IAccessControl(context.router().contracts(Keys.AccessControl));\n  }\n\n  function membershipVault(ContextContract context) internal view returns (IMembershipVault) {\n    return IMembershipVault(context.router().contracts(Keys.MembershipVault));\n  }\n\n  function capitalLedger(ContextContract context) internal view returns (ICapitalLedger) {\n    return ICapitalLedger(context.router().contracts(Keys.CapitalLedger));\n  }\n\n  function gfiLedger(ContextContract context) internal view returns (IGFILedger) {\n    return IGFILedger(context.router().contracts(Keys.GFILedger));\n  }\n\n  function gfi(ContextContract context) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(context.router().contracts(Keys.GFI));\n  }\n\n  function membershipDirector(ContextContract context) internal view returns (IMembershipDirector) {\n    return IMembershipDirector(context.router().contracts(Keys.MembershipDirector));\n  }\n\n  function membershipOrchestrator(\n    ContextContract context\n  ) internal view returns (IMembershipOrchestrator) {\n    return IMembershipOrchestrator(context.router().contracts(Keys.MembershipOrchestrator));\n  }\n\n  function stakingRewards(ContextContract context) internal view returns (IStakingRewards) {\n    return IStakingRewards(context.router().contracts(Keys.StakingRewards));\n  }\n\n  function poolTokens(ContextContract context) internal view returns (IPoolTokens) {\n    return IPoolTokens(context.router().contracts(Keys.PoolTokens));\n  }\n\n  function seniorPool(ContextContract context) internal view returns (ISeniorPool) {\n    return ISeniorPool(context.router().contracts(Keys.SeniorPool));\n  }\n\n  function fidu(ContextContract context) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(context.router().contracts(Keys.FIDU));\n  }\n\n  function usdc(ContextContract context) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(context.router().contracts(Keys.USDC));\n  }\n\n  function reserveSplitter(ContextContract context) internal view returns (IERC20Splitter) {\n    return IERC20Splitter(context.router().contracts(Keys.ReserveSplitter));\n  }\n\n  function membershipLedger(ContextContract context) internal view returns (IMembershipLedger) {\n    return IMembershipLedger(context.router().contracts(Keys.MembershipLedger));\n  }\n\n  function membershipCollector(\n    ContextContract context\n  ) internal view returns (IMembershipCollector) {\n    return IMembershipCollector(context.router().contracts(Keys.MembershipCollector));\n  }\n\n  function protocolAdmin(ContextContract context) internal view returns (address) {\n    return context.router().contracts(Keys.ProtocolAdmin);\n  }\n\n  function pauserAdmin(ContextContract context) internal view returns (address) {\n    return context.router().contracts(Keys.PauserAdmin);\n  }\n\n  function backerRewards(ContextContract context) internal view returns (IBackerRewards) {\n    return IBackerRewards(context.router().contracts(Keys.BackerRewards));\n  }\n\n  function go(ContextContract context) internal view returns (IGo) {\n    return IGo(context.router().contracts(Keys.Go));\n  }\n}\n"
    },
    "contracts/interfaces/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/// @title Cake access control\n/// @author landakram\n/// @notice This contact centralizes contract-to-contract access control using a simple\n/// access-control list. There are two types of actors: operators and admins. Operators\n/// are callers involved in a regular end-user tx. This would likely be another Goldfinch\n/// contract for which the current contract is a dependency. Admins are callers allowed\n/// for specific admin actions (like changing parameters, topping up funds, etc.).\ninterface IAccessControl {\n  error RequiresAdmin(address resource, address accessor);\n  error ZeroAddress();\n\n  event AdminSet(address indexed resource, address indexed admin);\n\n  /// @notice Set an admin for a given resource\n  /// @param resource An address which with `admin` should be allowed to administer\n  /// @param admin An address which should be allowed to administer `resource`\n  /// @dev This method is only callable by the super-admin (the admin of this AccessControl\n  ///   contract)\n  function setAdmin(address resource, address admin) external;\n\n  /// @notice Require a valid admin for a given resource\n  /// @param resource An address that `accessor` is attempting to access\n  /// @param accessor An address on which to assert access control checks\n  /// @dev This method reverts when `accessor` is not a valid admin\n  function requireAdmin(address resource, address accessor) external view;\n\n  /// @notice Require a super-admin. A super-admin is an admin of this AccessControl contract.\n  /// @param accessor An address on which to assert access control checks\n  /// @dev This method reverts when `accessor` is not a valid super-admin\n  function requireSuperAdmin(address accessor) external view;\n}\n"
    },
    "contracts/interfaces/IBackerRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\npragma experimental ABIEncoderV2;\n\nimport {ITranchedPool} from \"./ITranchedPool.sol\";\n\ninterface IBackerRewards {\n  struct BackerRewardsTokenInfo {\n    uint256 rewardsClaimed; // gfi claimed\n    uint256 accRewardsPerPrincipalDollarAtMint; // Pool's accRewardsPerPrincipalDollar at PoolToken mint()\n  }\n\n  struct BackerRewardsInfo {\n    uint256 accRewardsPerPrincipalDollar; // accumulator gfi per interest dollar\n  }\n\n  /// @notice Staking rewards parameters relevant to a TranchedPool\n  struct StakingRewardsPoolInfo {\n    // @notice the value `StakingRewards.accumulatedRewardsPerToken()` at the last checkpoint\n    uint256 accumulatedRewardsPerTokenAtLastCheckpoint;\n    // @notice last time the rewards info was updated\n    //\n    // we need this in order to know how much to pro rate rewards after the term is over.\n    uint256 lastUpdateTime;\n    // @notice staking rewards parameters for each slice of the tranched pool\n    StakingRewardsSliceInfo[] slicesInfo;\n  }\n\n  /// @notice Staking rewards paramters relevant to a TranchedPool slice\n  struct StakingRewardsSliceInfo {\n    // @notice fidu share price when the slice is first drawn down\n    //\n    // we need to save this to calculate what an equivalent position in\n    // the senior pool would be at the time the slice is downdown\n    uint256 fiduSharePriceAtDrawdown;\n    // @notice the amount of principal deployed at the last checkpoint\n    //\n    // we use this to calculate the amount of principal that should\n    // acctually accrue rewards during between the last checkpoint and\n    // and subsequent updates\n    uint256 principalDeployedAtLastCheckpoint;\n    // @notice the value of StakingRewards.accumulatedRewardsPerToken() at time of drawdown\n    //\n    // we need to keep track of this to use this as a base value to accumulate rewards\n    // for tokens. If the token has never claimed staking rewards, we use this value\n    // and the current staking rewards accumulator\n    uint256 accumulatedRewardsPerTokenAtDrawdown;\n    // @notice amount of rewards per token accumulated over the lifetime of the slice that a backer\n    //          can claim\n    uint256 accumulatedRewardsPerTokenAtLastCheckpoint;\n    // @notice the amount of rewards per token accumulated over the lifetime of the slice\n    //\n    // this value is \"unrealized\" because backers will be unable to claim against this value.\n    // we keep this value so that we can always accumulate rewards for the amount of capital\n    // deployed at any point in time, but not allow backers to withdraw them until a payment\n    // is made. For example: we want to accumulate rewards when a backer does a drawdown. but\n    // a backer shouldn't be allowed to claim rewards until a payment is made.\n    //\n    // this value is scaled depending on the current proportion of capital currently deployed\n    // in the slice. For example, if the staking rewards contract accrued 10 rewards per token\n    // between the current checkpoint and a new update, and only 20% of the capital was deployed\n    // during that period, we would accumulate 2 (10 * 20%) rewards.\n    uint256 unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint;\n  }\n\n  /// @notice Staking rewards parameters relevant to a PoolToken\n  struct StakingRewardsTokenInfo {\n    // @notice the amount of rewards accumulated the last time a token's rewards were withdrawn\n    uint256 accumulatedRewardsPerTokenAtLastWithdraw;\n  }\n\n  /// @notice total amount of GFI rewards available, times 1e18\n  function totalRewards() external view returns (uint256);\n\n  /// @notice interest $ eligible for gfi rewards, times 1e18\n  function maxInterestDollarsEligible() external view returns (uint256);\n\n  /// @notice counter of total interest repayments, times 1e6\n  function totalInterestReceived() external view returns (uint256);\n\n  /// @notice totalRewards/totalGFISupply * 100, times 1e18\n  function totalRewardPercentOfTotalGFI() external view returns (uint256);\n\n  /// @notice Get backer rewards metadata for a pool token\n  function getTokenInfo(uint256 poolTokenId) external view returns (BackerRewardsTokenInfo memory);\n\n  /// @notice Get backer staking rewards metadata for a pool token\n  function getStakingRewardsTokenInfo(\n    uint256 poolTokenId\n  ) external view returns (StakingRewardsTokenInfo memory);\n\n  /// @notice Get backer staking rewards for a pool\n  function getBackerStakingRewardsPoolInfo(\n    ITranchedPool pool\n  ) external view returns (StakingRewardsPoolInfo memory);\n\n  /// @notice Calculates the accRewardsPerPrincipalDollar for a given pool,\n  ///   when a interest payment is received by the protocol\n  /// @param _interestPaymentAmount Atomic usdc amount of the interest payment\n  function allocateRewards(uint256 _interestPaymentAmount) external;\n\n  /// @notice callback for TranchedPools when they drawdown\n  /// @param sliceIndex index of the tranched pool slice\n  /// @dev initializes rewards info for the calling TranchedPool if it's the first\n  ///  drawdown for the given slice\n  function onTranchedPoolDrawdown(uint256 sliceIndex) external;\n\n  /// @notice When a pool token is minted for multiple drawdowns,\n  ///   set accRewardsPerPrincipalDollarAtMint to the current accRewardsPerPrincipalDollar price\n  /// @param poolAddress Address of the pool associated with the pool token\n  /// @param tokenId Pool token id\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(\n    address poolAddress,\n    uint256 tokenId\n  ) external;\n\n  /// @notice PoolToken request to withdraw all allocated rewards\n  /// @param tokenId Pool token id\n  /// @return amount of rewards withdrawn\n  function withdraw(uint256 tokenId) external returns (uint256);\n\n  /**\n   * @notice Set BackerRewards and BackerStakingRewards metadata for tokens created by a pool token split.\n   * @param originalBackerRewardsTokenInfo backer rewards info for the pool token that was split\n   * @param originalStakingRewardsTokenInfo backer staking rewards info for the pool token that was split\n   * @param newTokenId id of one of the tokens in the split\n   * @param newRewardsClaimed rewardsClaimed value for the new token.\n   */\n  function setBackerAndStakingRewardsTokenInfoOnSplit(\n    BackerRewardsTokenInfo memory originalBackerRewardsTokenInfo,\n    StakingRewardsTokenInfo memory originalStakingRewardsTokenInfo,\n    uint256 newTokenId,\n    uint256 newRewardsClaimed\n  ) external;\n\n  /**\n   * @notice Calculate the gross available gfi rewards for a PoolToken\n   * @param tokenId Pool token id\n   * @return The amount of GFI claimable\n   */\n  function poolTokenClaimableRewards(uint256 tokenId) external view returns (uint256);\n\n  /// @notice Clear all BackerRewards and StakingRewards associated data for `tokenId`\n  function clearTokenInfo(uint256 tokenId) external;\n}\n"
    },
    "contracts/interfaces/ICallableLoan.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {ILoan} from \"./ILoan.sol\";\nimport {ISchedule} from \"./ISchedule.sol\";\nimport {IGoldfinchConfig} from \"./IGoldfinchConfig.sol\";\n\n/// A LoanPhase represents a period of time during which certain callable loan actions are prohibited.\n/// @param Prefunding Starts when a loan is created and ends at fundableAt.\n/// In Prefunding, all actions are prohibited or ineffectual.\n/// @param Funding Starts at the fundableAt timestamp and ends at the first borrower drawdown.\n/// In Funding, lenders can deposit principal to mint a pool token and they can withdraw their deposited principal.\n/// @param DrawdownPeriod Starts when the first borrower drawdown occurs and\n/// ends after ConfigHelper.DrawdownPeriodInSeconds elapses.\n/// In DrawdownPeriod, the borrower can drawdown principal as many times as they want.\n/// Lenders cannot withdraw their principal, deposit new principal, or submit call requests.\n/// @param InProgress Starts after ConfigHelper.DrawdownPeriodInSeconds elapses and never ends.\n/// In InProgress, all post-funding & drawdown actions are allowed (not withdraw, deposit, or drawdown).\n/// When a loan is fully paid back, we do not update the loan state, but most of these actions will\n/// be prohibited or ineffectual.\nenum LoanPhase {\n  Prefunding,\n  Funding,\n  DrawdownPeriod,\n  InProgress\n}\n\n/// @dev A CallableLoan is a loan which allows the lender to call the borrower's principal.\n///     The lender can call the borrower's principal at any time, and the borrower must pay back the principal\n///     by the end of the call request period.\n/// @dev The ICallableLoanErrors interface contains all errors due to Solidity version compatibility with custom errors.\ninterface ICallableLoan is ILoan {\n  /*================================================================================\n  Structs\n  ================================================================================*/\n  /// @param principalDeposited The amount of principal deposited towards this call request period.\n  /// @param principalPaid The amount of principal which has already been paid back towards this call request period.\n  ///                      There are 3 ways principal paid can enter a CallRequestPeriod.\n  ///                      1. Converted from principalReserved after a call request period becomes due.\n  ///                      2. Moved from uncalled tranche as the result of a call request.\n  ///                      3. Paid directly when a CallRequestPeriod is past due and has a remaining balance.\n  /// @param principalReserved The amount of principal reserved for this call request period.\n  ///                          Payments to a not-yet-due CallRequestPeriod are applied to principalReserved.\n  /// @param interestPaid The amount of interest paid towards this call request period.\n  struct CallRequestPeriod {\n    uint256 principalDeposited;\n    uint256 principalPaid;\n    uint256 principalReserved;\n    uint256 interestPaid;\n  }\n\n  /// @param principalDeposited The amount of uncalled, deposited principal.\n  /// @param principalPaid The amount of principal which has already been paid back.\n  ///                      There are two ways uncalled principal can be paid.\n  ///                      1. Remainder after drawdowns.\n  ///                      2. Conversion from principalReserved after a call request period becomes due.\n  ///                         All call requested principal outstanding must already be paid\n  ///                         (or have principal reserved) before uncalled principal can be paid.\n  ///                      3. Paid directly after term end time.\n  /// @param principalReserved The amount of principal reserved for uncalled tranche.\n  ///                          principalReserved is greedily moved to call request periods (as much as can fill)\n  ///                          when a call request is submitted.\n  /// @param interestPaid The amount of interest paid towards uncalled capital.\n  struct UncalledCapitalInfo {\n    uint256 principalDeposited;\n    uint256 principalPaid;\n    uint256 principalReserved;\n    uint256 interestPaid;\n  }\n\n  /*================================================================================\n  Functions\n  ================================================================================*/\n  /// @notice Initialize the pool. Can only be called once, and should be called in the same transaction as\n  ///   contract creation to avoid initialization front-running\n  /// @param _config address of GoldfinchConfig\n  /// @param _borrower address of borrower, a non-transferrable role for performing privileged actions like\n  ///   drawdown\n  /// @param _numLockupPeriods the number of periods at the tail end of a principal period during which call requests\n  ///   are not allowed\n  /// @param _interestApr interest rate for the loan\n  /// @param _lateFeeApr late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a\n  ///   payment becomes late\n  /// @param _fundableAt earliest time at which the first slice can be funded\n  function initialize(\n    IGoldfinchConfig _config,\n    address _borrower,\n    uint256 _limit,\n    uint256 _interestApr,\n    uint256 _numLockupPeriods,\n    ISchedule _schedule,\n    uint256 _lateFeeApr,\n    uint256 _fundableAt,\n    uint256[] calldata _allowedUIDTypes\n  ) external;\n\n  /// @notice Submits a call request for the specified pool token and amount\n  ///         Mints a new, called pool token of the called amount.\n  ///         Splits off any uncalled amount as a new uncalled pool token.\n  /// @param amountToCall The amount of the pool token that should be called.\n  /// @param poolTokenId The id of the pool token that should be called.\n  /// @return callRequestedTokenId  Token id of the call requested token.\n  /// @return remainingTokenId Token id of the remaining token.\n  function submitCall(\n    uint256 amountToCall,\n    uint256 poolTokenId\n  ) external returns (uint256, uint256);\n\n  function schedule() external view returns (ISchedule);\n\n  function nextDueTimeAt(uint256 timestamp) external view returns (uint256);\n\n  function nextPrincipalDueTime() external view returns (uint256);\n\n  function numLockupPeriods() external view returns (uint256);\n\n  function inLockupPeriod() external view returns (bool);\n\n  function getUncalledCapitalInfo() external view returns (UncalledCapitalInfo memory);\n\n  function getCallRequestPeriod(\n    uint256 callRequestPeriodIndex\n  ) external view returns (CallRequestPeriod memory);\n\n  function uncalledCapitalTrancheIndex() external view returns (uint256);\n\n  function availableToCall(uint256 tokenId) external view returns (uint256);\n\n  /// @notice Returns the current phase of the loan.\n  ///         See documentation on LoanPhase enum.\n  function loanPhase() external view returns (LoanPhase);\n\n  /// @notice Returns the current balance of the loan which will be used for\n  ///         interest calculations.\n  ///         Settles any principal reserved if a call request period has\n  ///         ended since the last checkpoint\n  ///         Excludes principal reserved for future call request periods\n  function interestBearingBalance() external view returns (uint256);\n\n  /// @notice Returns a naive estimate of the interest owed at the timestamp.\n  ///         Omits any late fees, and assumes no future payments.\n  function estimateOwedInterestAt(uint256 timestamp) external view returns (uint256);\n\n  /// @notice Returns a naive estimate of the interest owed at the timestamp.\n  ///         Omits any late fees, and assumes no future payments.\n  function estimateOwedInterestAt(\n    uint256 balance,\n    uint256 timestamp\n  ) external view returns (uint256);\n\n  /*================================================================================\n  Events\n  ================================================================================*/\n  event CallRequestSubmitted(\n    uint256 indexed originalTokenId,\n    uint256 indexed callRequestedTokenId,\n    uint256 indexed remainingTokenId,\n    uint256 callAmount\n  );\n  event DepositsLocked(address indexed loan);\n}\n"
    },
    "contracts/interfaces/ICapitalLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\nenum CapitalAssetType {\n  INVALID,\n  ERC721\n}\n\ninterface ICapitalLedger {\n  /**\n   * @notice Emitted when a new capital erc721 deposit has been made\n   * @param owner address owning the deposit\n   * @param assetAddress address of the deposited ERC721\n   * @param positionId id for the deposit\n   * @param assetTokenId id of the token from the ERC721 `assetAddress`\n   * @param usdcEquivalent usdc equivalent value at the time of deposit\n   */\n  event CapitalERC721Deposit(\n    address indexed owner,\n    address indexed assetAddress,\n    uint256 positionId,\n    uint256 assetTokenId,\n    uint256 usdcEquivalent\n  );\n\n  /**\n   * @notice Emitted when a new ERC721 capital withdrawal has been made\n   * @param owner address owning the deposit\n   * @param positionId id for the capital position\n   * @param assetAddress address of the underlying ERC721\n   * @param depositTimestamp block.timestamp of the original deposit\n   */\n  event CapitalERC721Withdrawal(\n    address indexed owner,\n    uint256 positionId,\n    address assetAddress,\n    uint256 depositTimestamp\n  );\n\n  /**\n   * @notice Emitted when an ERC721 capital asset has been harvested\n   * @param positionId id for the capital position\n   * @param assetAddress address of the underlying ERC721\n   */\n  event CapitalERC721Harvest(uint256 indexed positionId, address assetAddress);\n\n  /**\n   * @notice Emitted when an ERC721 capital asset has been \"kicked\", which may cause the underlying\n   *  usdc equivalent value to change.\n   * @param positionId id for the capital position\n   * @param assetAddress address of the underlying ERC721\n   * @param usdcEquivalent new usdc equivalent value of the position\n   */\n  event CapitalPositionAdjustment(\n    uint256 indexed positionId,\n    address assetAddress,\n    uint256 usdcEquivalent\n  );\n\n  /// Thrown when called with an invalid asset type for the function. Valid\n  /// types are defined under CapitalAssetType\n  error InvalidAssetType(CapitalAssetType);\n\n  /**\n   * @notice Account for a deposit of `id` for the ERC721 asset at `assetAddress`.\n   * @dev reverts with InvalidAssetType if `assetAddress` is not an ERC721\n   * @param owner address that owns the position\n   * @param assetAddress address of the ERC20 address\n   * @param assetTokenId id of the ERC721 asset to add\n   * @return id of the newly created position\n   */\n  function depositERC721(\n    address owner,\n    address assetAddress,\n    uint256 assetTokenId\n  ) external returns (uint256);\n\n  /**\n   * @notice Get the id of the ERC721 asset held by position `id`. Pair this with\n   *  `assetAddressOf` to get the address & id of the nft.\n   * @dev reverts with InvalidAssetType if `assetAddress` is not an ERC721\n   * @param positionId id of the position\n   * @return id of the underlying ERC721 asset\n   */\n  function erc721IdOf(uint256 positionId) external view returns (uint256);\n\n  /**\n   * @notice Completely withdraw a position\n   * @param positionId id of the position\n   */\n  function withdraw(uint256 positionId) external;\n\n  /**\n   * @notice Harvests the associated rewards, interest, and other accrued assets\n   *  associated with the asset token. For example, if given a PoolToken asset,\n   *  this will collect the GFI rewards (if available), redeemable interest, and\n   *  redeemable principal, and send that to the `owner`.\n   * @param positionId id of the position\n   */\n  function harvest(uint256 positionId) external;\n\n  /**\n   * @notice Get the asset address of the position. Example: For an ERC721 position, this\n   *  returns the address of that ERC721 contract.\n   * @param positionId id of the position\n   * @return asset address of the position\n   */\n  function assetAddressOf(uint256 positionId) external view returns (address);\n\n  /**\n   * @notice Get the owner of a given position.\n   * @param positionId id of the position\n   * @return owner of the position\n   */\n  function ownerOf(uint256 positionId) external view returns (address);\n\n  /**\n   * @notice Total number of positions in the ledger\n   * @return number of positions in the ledger\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @notice Get the number of capital positions held by an address\n   * @param addr address\n   * @return positions held by address\n   */\n  function balanceOf(address addr) external view returns (uint256);\n\n  /**\n   * @notice Returns a position ID owned by `owner` at a given `index` of its position list\n   * @param owner owner of the positions\n   * @param index index of the owner's balance to get the position ID of\n   * @return position id\n   *\n   * @dev use with {balanceOf} to enumerate all of `owner`'s positions\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n  /**\n   * @dev Returns a position ID at a given `index` of all the positions stored by the contract.\n   * @param index index to get the position ID at\n   * @return position id\n   *\n   * @dev use with {totalSupply} to enumerate all positions\n   */\n  function tokenByIndex(uint256 index) external view returns (uint256);\n\n  /**\n   * @notice Get the USDC value of `owner`s positions, reporting what is currently\n   *  eligible and the total amount.\n   * @param owner address owning the positions\n   * @return eligibleAmount USDC value of positions eligible for rewards\n   * @return totalAmount total USDC value of positions\n   *\n   * @dev this is used by Membership to determine how much is eligible in\n   *  the current epoch vs the next epoch.\n   */\n  function totalsOf(\n    address owner\n  ) external view returns (uint256 eligibleAmount, uint256 totalAmount);\n}\n"
    },
    "contracts/interfaces/ICreditLine.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {ILoan} from \"./ILoan.sol\";\n\nimport {ICreditLine} from \"./ICreditLine.sol\";\nimport {ISchedule} from \"./ISchedule.sol\";\n\ninterface ICreditLine {\n  function balance() external view returns (uint256);\n\n  function interestOwed() external view returns (uint256);\n\n  function principalOwed() external view returns (uint256);\n\n  function termEndTime() external view returns (uint256);\n\n  function nextDueTime() external view returns (uint256);\n\n  function interestAccruedAsOf() external view returns (uint256);\n\n  function lastFullPaymentTime() external view returns (uint256);\n\n  function borrower() external view returns (address);\n\n  function currentLimit() external view returns (uint256);\n\n  function limit() external view returns (uint256);\n\n  function maxLimit() external view returns (uint256);\n\n  function interestApr() external view returns (uint256);\n\n  function lateFeeApr() external view returns (uint256);\n\n  function isLate() external view returns (bool);\n\n  function withinPrincipalGracePeriod() external view returns (bool);\n\n  /// @notice Cumulative interest accrued up to now\n  function totalInterestAccrued() external view returns (uint256);\n\n  /// @notice Cumulative interest accrued up to `timestamp`\n  function totalInterestAccruedAt(uint256 timestamp) external view returns (uint256);\n\n  /// @notice Cumulative interest paid back up to now\n  function totalInterestPaid() external view returns (uint256);\n\n  /// @notice Cumulative interest owed up to now\n  function totalInterestOwed() external view returns (uint256);\n\n  /// @notice Cumulative interest owed up to `timestamp`\n  function totalInterestOwedAt(uint256 timestamp) external view returns (uint256);\n\n  /// @notice Interest that would be owed at `timestamp`\n  function interestOwedAt(uint256 timestamp) external view returns (uint256);\n\n  /// @notice Interest accrued in the current payment period up to now. Converted to\n  ///   owed interest once we cross into the next payment period. Is 0 if the\n  ///   current time is after loan maturity (all interest accrued immediately becomes\n  ///   interest owed).\n  function interestAccrued() external view returns (uint256);\n\n  /// @notice Interest accrued in the current payment period for `timestamp`. Coverted to\n  ///   owed interest once we cross into the payment period after `timestamp`. Is 0\n  ///   if `timestamp` is after loan maturity (all interest accrued immediately becomes\n  ///   interest owed).\n  function interestAccruedAt(uint256 timestamp) external view returns (uint256);\n\n  /// @notice Principal owed up to `timestamp`\n  function principalOwedAt(uint256 timestamp) external view returns (uint256);\n\n  /// @notice Returns the total amount of principal thats been paid\n  function totalPrincipalPaid() external view returns (uint256);\n\n  /// @notice Cumulative principal owed at timestamp\n  function totalPrincipalOwedAt(uint256 timestamp) external view returns (uint256);\n\n  /// @notice Cumulative principal owed at current timestamp\n  function totalPrincipalOwed() external view returns (uint256);\n\n  function setLimit(uint256 newAmount) external;\n\n  function setMaxLimit(uint256 newAmount) external;\n\n  /// @notice Time of first drawdown\n  function termStartTime() external view returns (uint256);\n\n  /// @notice Process a bulk payment, allocating the payment amount based on the payment waterfall\n  function pay(uint paymentAmount) external returns (ILoan.PaymentAllocation memory);\n\n  /**\n   * Process a payment according to the waterfall described in `Accountant.allocatePayment`\n   * @param principalPayment principal payment amount\n   * @param interestPayment interest payment amount\n   * @return payment allocation\n   */\n  function pay(\n    uint256 principalPayment,\n    uint256 interestPayment\n  ) external returns (ILoan.PaymentAllocation memory);\n\n  /// @notice Drawdown on the line\n  /// @param amount amount to drawdown. Cannot exceed the line's limit\n  function drawdown(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IERC20Splitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IERC20Splitter {\n  function lastDistributionAt() external view returns (uint256);\n\n  function distribute() external;\n\n  function replacePayees(address[] calldata _payees, uint256[] calldata _shares) external;\n\n  function pendingDistributionFor(address payee) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGFILedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IGFILedger {\n  struct Position {\n    // Owner of the position\n    address owner;\n    // Index of the position in the ownership array\n    uint256 ownedIndex;\n    // Amount of GFI held in the position\n    uint256 amount;\n    // When the position was deposited\n    uint256 depositTimestamp;\n  }\n\n  /**\n   * @notice Emitted when a new GFI deposit has been made\n   * @param owner address owning the deposit\n   * @param positionId id for the deposit\n   * @param amount how much GFI was deposited\n   */\n  event GFIDeposit(address indexed owner, uint256 indexed positionId, uint256 amount);\n\n  /**\n   * @notice Emitted when a new GFI withdrawal has been made. If the remaining amount is 0, the position has bee removed\n   * @param owner address owning the withdrawn position\n   * @param positionId id for the position\n   * @param remainingAmount how much GFI is remaining in the position\n   * @param depositTimestamp block.timestamp of the original deposit\n   */\n  event GFIWithdrawal(\n    address indexed owner,\n    uint256 indexed positionId,\n    uint256 withdrawnAmount,\n    uint256 remainingAmount,\n    uint256 depositTimestamp\n  );\n\n  /**\n   * @notice Account for a new deposit by the owner.\n   * @param owner address to account for the deposit\n   * @param amount how much was deposited\n   * @return how much was deposited\n   */\n  function deposit(address owner, uint256 amount) external returns (uint256);\n\n  /**\n   * @notice Account for a new withdraw by the owner.\n   * @param positionId id of the position\n   * @return how much was withdrawn\n   */\n  function withdraw(uint256 positionId) external returns (uint256);\n\n  /**\n   * @notice Account for a new withdraw by the owner.\n   * @param positionId id of the position\n   * @param amount how much to withdraw\n   * @return how much was withdrawn\n   */\n  function withdraw(uint256 positionId, uint256 amount) external returns (uint256);\n\n  /**\n   * @notice Get the number of GFI positions held by an address\n   * @param addr address\n   * @return positions held by address\n   */\n  function balanceOf(address addr) external view returns (uint256);\n\n  /**\n   * @notice Get the owner of a given position.\n   * @param positionId id of the position\n   * @return owner of the position\n   */\n  function ownerOf(uint256 positionId) external view returns (address);\n\n  /**\n   * @notice Total number of positions in the ledger\n   * @return number of positions in the ledger\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @notice Returns a position ID owned by `owner` at a given `index` of its position list\n   * @param owner owner of the positions\n   * @param index index of the owner's balance to get the position ID of\n   * @return position id\n   *\n   * @dev use with {balanceOf} to enumerate all of `owner`'s positions\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n  /**\n   * @dev Returns a position ID at a given `index` of all the positions stored by the contract.\n   * @param index index to get the position ID at\n   * @return token id\n   *\n   * @dev use with {totalSupply} to enumerate all positions\n   */\n  function tokenByIndex(uint256 index) external view returns (uint256);\n\n  /**\n   * @notice Get amount of GFI of `owner`s positions, reporting what is currently\n   *  eligible and the total amount.\n   * @return eligibleAmount GFI amount of positions eligible for rewards\n   * @return totalAmount total GFI amount of positions\n   *\n   * @dev this is used by Membership to determine how much is eligible in\n   *  the current epoch vs the next epoch.\n   */\n  function totalsOf(\n    address owner\n  ) external view returns (uint256 eligibleAmount, uint256 totalAmount);\n}\n"
    },
    "contracts/interfaces/IGo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nabstract contract IGo {\n  uint256 public constant ID_TYPE_0 = 0;\n  uint256 public constant ID_TYPE_1 = 1;\n  uint256 public constant ID_TYPE_2 = 2;\n  uint256 public constant ID_TYPE_3 = 3;\n  uint256 public constant ID_TYPE_4 = 4;\n  uint256 public constant ID_TYPE_5 = 5;\n  uint256 public constant ID_TYPE_6 = 6;\n  uint256 public constant ID_TYPE_7 = 7;\n  uint256 public constant ID_TYPE_8 = 8;\n  uint256 public constant ID_TYPE_9 = 9;\n  uint256 public constant ID_TYPE_10 = 10;\n\n  /// @notice Returns the address of the UniqueIdentity contract.\n  function uniqueIdentity() external virtual returns (address);\n\n  function go(address account) public view virtual returns (bool);\n\n  function goOnlyIdTypes(\n    address account,\n    uint256[] calldata onlyIdTypes\n  ) public view virtual returns (bool);\n\n  /**\n   * @notice Returns whether the provided account is go-listed for use of the SeniorPool on the Goldfinch protocol.\n   * @param account The account whose go status to obtain\n   * @return true if `account` is go listed\n   */\n  function goSeniorPool(address account) public view virtual returns (bool);\n}\n"
    },
    "contracts/interfaces/IGoldfinchConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IGoldfinchConfig {\n  /**\n   * @dev Adds a user to go-list\n   * @param _member address to add to go-list\n   */\n  function addToGoList(address _member) external;\n\n  /**\n   * @dev removes a user from go-list\n   * @param _member address to remove from go-list\n   */\n  function removeFromGoList(address _member) external;\n\n  /**\n   * @dev adds many users to go-list at once\n   * @param _members addresses to ad to go-list\n   */\n  function bulkAddToGoList(address[] calldata _members) external;\n\n  /**\n   * @dev removes many users from go-list at once\n   * @param _members addresses to remove from go-list\n   */\n  function bulkRemoveFromGoList(address[] calldata _members) external;\n\n  function getNumber(uint256 index) external view returns (uint256);\n\n  /*\n    Using custom getters in case we want to change underlying implementation later,\n    or add checks or validations later on.\n  */\n  function getAddress(uint256 index) external view returns (address);\n\n  function setAddress(uint256 index, address newAddress) external;\n\n  function setNumber(uint256 index, uint256 newNumber) external;\n}\n"
    },
    "contracts/interfaces/ILoan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\nimport {ISchedule} from \"./ISchedule.sol\";\nimport {ICreditLine} from \"./ICreditLine.sol\";\n\nenum LoanType {\n  TranchedPool,\n  CallableLoan\n}\n\ninterface ILoan {\n  /// @notice getLoanType was added to support the new callable loan type.\n  ///         It is not supported in older versions of ILoan (e.g. legacy TranchedPools)\n  function getLoanType() external view returns (LoanType);\n\n  /// @notice Pool's credit line, responsible for managing the loan's accounting variables\n  function creditLine() external view returns (ICreditLine);\n\n  /// @notice Time when the pool was initialized. Zero if uninitialized\n  function createdAt() external view returns (uint256);\n\n  /// @notice Pay down interest + principal. Excess payments are refunded to the caller\n  /// @param amount USDC amount to pay\n  /// @return PaymentAllocation info on how the payment was allocated\n  /// @dev {this} must be approved by msg.sender to transfer {amount} of USDC\n  function pay(uint256 amount) external returns (PaymentAllocation memory);\n\n  /// @notice Compute interest and principal owed on the current balance at a future timestamp\n  /// @param timestamp time to calculate up to\n  /// @return interestOwed amount of obligated interest owed at `timestamp`\n  /// @return interestAccrued amount of accrued interest (not yet owed) that can be paid at `timestamp`\n  /// @return principalOwed amount of principal owed at `timestamp`\n  function getAmountsOwed(\n    uint256 timestamp\n  ) external view returns (uint256 interestOwed, uint256 interestAccrued, uint256 principalOwed);\n\n  function getAllowedUIDTypes() external view returns (uint256[] memory);\n\n  /// @notice Drawdown the loan. The credit line's balance should increase by the amount drawn down.\n  ///   Junior capital must be locked before this function can be called. If senior capital isn't locked\n  ///   then this function will lock it for you (convenience to avoid calling lockPool() separately).\n  ///   This function should revert if the amount requested exceeds the the current slice's currentLimit\n  ///   This function should revert if the caller is not the borrower.\n  /// @param amount USDC to drawdown. This amount is transferred to the caller\n  function drawdown(uint256 amount) external;\n\n  /// @notice Update `fundableAt` to a new timestamp. Only the borrower can call this.\n  function setFundableAt(uint256 newFundableAt) external;\n\n  /// @notice Supply capital to this pool. Caller can't deposit to the junior tranche if the junior pool is locked.\n  ///   Caller can't deposit to a senior tranche if the pool is locked. Caller can't deposit if they are missing the\n  ///   required UID NFT.\n  /// @param tranche id of tranche to supply capital to. Id must correspond to a tranche in the current slice.\n  /// @param amount amount of capital to supply\n  /// @return tokenId NFT representing your position in this pool\n  function deposit(uint256 tranche, uint256 amount) external returns (uint256 tokenId);\n\n  function depositWithPermit(\n    uint256 tranche,\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 tokenId);\n\n  /// @notice Query the max amount available to withdraw for tokenId's position\n  /// @param tokenId position to query max amount withdrawable for\n  /// @return interestRedeemable total interest withdrawable on the position\n  /// @return principalRedeemable total principal redeemable on the position\n  function availableToWithdraw(\n    uint256 tokenId\n  ) external view returns (uint256 interestRedeemable, uint256 principalRedeemable);\n\n  /// @notice Withdraw an already deposited amount if the funds are available. Caller must be the owner or\n  ///   approved by the owner on tokenId. Amount withdrawn is sent to the caller.\n  /// @param tokenId the NFT representing the position\n  /// @param amount amount to withdraw (must be <= interest+principal available to withdraw)\n  /// @return interestWithdrawn interest withdrawn\n  /// @return principalWithdrawn principal withdrawn\n  function withdraw(\n    uint256 tokenId,\n    uint256 amount\n  ) external returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\n\n  /// @notice Similar to withdraw but withdraw the max interest and principal available for `tokenId`\n  function withdrawMax(\n    uint256 tokenId\n  ) external returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\n\n  /// @notice Withdraw from multiple tokens\n  /// @param tokenIds NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array\n  /// @param amounts amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external;\n\n  /// @notice Result of applying a payment to a v2 pool\n  /// @param owedInterestPayment payment portion of interest owed\n  /// @param accruedInterestPayment payment portion of accrued (but not yet owed) interest\n  /// @param principalPayment payment portion on principal owed\n  /// @param additionalBalancePayment payment portion on any balance that is currently owed\n  /// @param paymentRemaining payment amount leftover\n  struct PaymentAllocation {\n    uint256 owedInterestPayment;\n    uint256 accruedInterestPayment;\n    uint256 principalPayment;\n    uint256 additionalBalancePayment;\n    uint256 paymentRemaining;\n  }\n  /// @notice Event emitted on payment\n  /// @param payer address that made the payment\n  /// @param pool pool to which the payment was made\n  /// @param interest amount of payment allocated to interest (obligated + additional)\n  /// @param principal amount of payment allocated to principal owed and remaining balance\n  /// @param remaining any excess payment amount that wasn't allocated to a debt owed\n  /// @param reserve of payment that went to the protocol reserve\n  event PaymentApplied(\n    address indexed payer,\n    address indexed pool,\n    uint256 interest,\n    uint256 principal,\n    uint256 remaining,\n    uint256 reserve\n  );\n  event DepositMade(\n    address indexed owner,\n    uint256 indexed tranche,\n    uint256 indexed tokenId,\n    uint256 amount\n  );\n\n  /// @notice While owner is the label of the first argument, it is actually the sender of the transaction.\n  event WithdrawalMade(\n    address indexed owner,\n    uint256 indexed tranche,\n    uint256 indexed tokenId,\n    uint256 interestWithdrawn,\n    uint256 principalWithdrawn\n  );\n  event ReserveFundsCollected(address indexed from, uint256 amount);\n  event DrawdownMade(address indexed borrower, uint256 amount);\n  event DrawdownsPaused(address indexed pool);\n  event DrawdownsUnpaused(address indexed pool);\n  event EmergencyShutdown(address indexed pool);\n}\n"
    },
    "contracts/interfaces/IMembershipCollector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IMembershipCollector {\n  /// @notice Have the collector distribute `amount` of Fidu to `addr`\n  /// @param addr address to distribute to\n  /// @param amount amount to distribute\n  function distributeFiduTo(address addr, uint256 amount) external;\n\n  /// @notice Get the last epoch finalized by the collector. This means the\n  ///  collector will no longer add rewards to the epoch.\n  /// @return the last finalized epoch\n  function lastFinalizedEpoch() external view returns (uint256);\n\n  /// @notice Get the rewards associated with `epoch`. This amount may change\n  ///  until `epoch` has been finalized (is less than or equal to getLastFinalizedEpoch)\n  /// @return rewards associated with `epoch`\n  function rewardsForEpoch(uint256 epoch) external view returns (uint256);\n\n  /// @notice Estimate rewards for a given epoch. For epochs at or before lastFinalizedEpoch\n  ///  this will be the fixed, accurate reward for the epoch. For the current and other\n  ///  non-finalized epochs, this will be the value as if the epoch were finalized in that\n  ///  moment.\n  /// @param epoch epoch to estimate the rewards of\n  /// @return rewards associated with `epoch`\n  function estimateRewardsFor(uint256 epoch) external view returns (uint256);\n\n  /// @notice Finalize all unfinalized epochs. Causes the reserve splitter to distribute\n  ///  if there are unfinalized epochs so all possible rewards are distributed.\n  function finalizeEpochs() external;\n}\n"
    },
    "contracts/interfaces/IMembershipDirector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IMembershipDirector {\n  /**\n   * @notice Adjust an `owner`s membership score and position due to the change\n   *  in their GFI and Capital holdings\n   * @param owner address who's holdings changed\n   * @return id of membership position\n   */\n  function consumeHoldingsAdjustment(address owner) external returns (uint256);\n\n  /**\n   * @notice Collect all membership yield enhancements for the owner.\n   * @param owner address to claim rewards for\n   * @return amount of yield enhancements collected\n   */\n  function collectRewards(address owner) external returns (uint256);\n\n  /**\n   * @notice Check how many rewards are claimable for the owner. The return\n   *  value here is how much would be retrieved by calling `collectRewards`.\n   * @param owner address to calculate claimable rewards for\n   * @return the amount of rewards that could be claimed by the owner\n   */\n  function claimableRewards(address owner) external view returns (uint256);\n\n  /**\n   * @notice Calculate the membership score\n   * @param gfi Amount of gfi\n   * @param capital Amount of capital in USDC\n   * @return membership score\n   */\n  function calculateMembershipScore(uint256 gfi, uint256 capital) external view returns (uint256);\n\n  /**\n   * @notice Get the current score of `owner`\n   * @param owner address to check the score of\n   * @return eligibleScore score that is currently eligible for rewards\n   * @return totalScore score that will be elgible for rewards next epoch\n   */\n  function currentScore(\n    address owner\n  ) external view returns (uint256 eligibleScore, uint256 totalScore);\n\n  /**\n   * @notice Get the sum of all member scores that are currently eligible and that will be eligible next epoch\n   * @return eligibleTotal sum of all member scores that are currently eligible\n   * @return nextEpochTotal sum of all member scores that will be eligible next epoch\n   */\n  function totalMemberScores()\n    external\n    view\n    returns (uint256 eligibleTotal, uint256 nextEpochTotal);\n\n  /**\n   * @notice Estimate the score for an existing member, given some changes in GFI and capital\n   * @param memberAddress the member's address\n   * @param gfi the change in gfi holdings, denominated in GFI\n   * @param capital the change in gfi holdings, denominated in USDC\n   * @return score resulting score for the member given the GFI and capital changes\n   */\n  function estimateMemberScore(\n    address memberAddress,\n    int256 gfi,\n    int256 capital\n  ) external view returns (uint256 score);\n\n  /// @notice Finalize all unfinalized epochs. Causes the reserve splitter to distribute\n  ///  if there are unfinalized epochs so all possible rewards are distributed.\n  function finalizeEpochs() external;\n}\n"
    },
    "contracts/interfaces/IMembershipLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IMembershipLedger {\n  /**\n   * @notice Set `addr`s allocated rewards back to 0\n   * @param addr address to reset rewards on\n   */\n  function resetRewards(address addr) external;\n\n  /**\n   * @notice Allocate `amount` rewards for `addr` but do not send them\n   * @param addr address to distribute rewards to\n   * @param amount amount of rewards to allocate for `addr`\n   * @return rewards total allocated to `addr`\n   */\n  function allocateRewardsTo(address addr, uint256 amount) external returns (uint256 rewards);\n\n  /**\n   * @notice Get the rewards allocated to a certain `addr`\n   * @param addr the address to check pending rewards for\n   * @return rewards pending rewards for `addr`\n   */\n  function getPendingRewardsFor(address addr) external view returns (uint256 rewards);\n\n  /**\n   * @notice Get the alpha parameter for the cobb douglas function. Will always be in (0,1).\n   * @return numerator numerator for the alpha param\n   * @return denominator denominator for the alpha param\n   */\n  function alpha() external view returns (uint128 numerator, uint128 denominator);\n}\n"
    },
    "contracts/interfaces/IMembershipOrchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\nimport {Context} from \"../cake/Context.sol\";\n\nstruct CapitalDeposit {\n  /// Address of the asset being deposited\n  /// @dev must be supported in CapitalAssets.sol\n  address assetAddress;\n  /// Id of the nft\n  uint256 id;\n}\n\nstruct Deposit {\n  /// Amount of gfi to deposit\n  uint256 gfi;\n  /// List of capital deposits\n  CapitalDeposit[] capitalDeposits;\n}\n\nstruct DepositResult {\n  uint256 membershipId;\n  uint256 gfiPositionId;\n  uint256[] capitalPositionIds;\n}\n\nstruct ERC20Withdrawal {\n  uint256 id;\n  uint256 amount;\n}\n\nstruct Withdrawal {\n  /// List of gfi token ids to withdraw\n  ERC20Withdrawal[] gfiPositions;\n  /// List of capital token ids to withdraw\n  uint256[] capitalPositions;\n}\n\n/**\n * @title MembershipOrchestrator\n * @notice Externally facing gateway to all Goldfinch membership functionality.\n * @author Goldfinch\n */\ninterface IMembershipOrchestrator {\n  /**\n   * @notice Deposit multiple assets defined in `multiDeposit`. Assets can include GFI, Staked Fidu,\n   *  and others.\n   * @param deposit struct describing all the assets to deposit\n   * @return ids all of the ids of the created depoits, in the same order as deposit. If GFI is\n   *  present, it will be the first id.\n   */\n  function deposit(Deposit calldata deposit) external returns (DepositResult memory);\n\n  /**\n   * @notice Withdraw multiple assets defined in `multiWithdraw`. Assets can be GFI or capital\n   *  positions ids. Caller must have been permitted to act upon all of the positions.\n   * @param withdrawal all of the GFI and Capital ids to withdraw\n   */\n  function withdraw(Withdrawal calldata withdrawal) external;\n\n  /**\n   * @notice Collect all membership rewards for the caller.\n   * @return how many rewards were collected and sent to caller\n   */\n  function collectRewards() external returns (uint256);\n\n  /**\n   * @notice Harvest the rewards, interest, redeemable principal, or other assets\n   *  associated with the underlying capital asset. For example, if given a PoolToken,\n   *  this will collect the GFI rewards (if available), redeemable interest, and\n   *  redeemable principal, and send that to the owner of the capital position.\n   * @param capitalPositionIds id of the capital position to harvest the underlying asset of\n   */\n  function harvest(uint256[] calldata capitalPositionIds) external;\n\n  /**\n   * @notice Check how many rewards are claimable at this moment in time for caller.\n   * @param addr the address to check claimable rewards for\n   * @return how many rewards could be claimed by a call to `collectRewards`\n   */\n  function claimableRewards(address addr) external view returns (uint256);\n\n  /**\n   * @notice Check the voting power of a given address\n   * @param addr the address to check the voting power of\n   * @return the voting power\n   */\n  function votingPower(address addr) external view returns (uint256);\n\n  /**\n   * @notice Get all GFI in Membership held by `addr`. This returns the current eligible amount and the\n   *  total amount of GFI.\n   * @param addr the owner\n   * @return eligibleAmount how much GFI is currently eligible for rewards\n   * @return totalAmount how much GFI is currently eligible for rewards\n   */\n  function totalGFIHeldBy(\n    address addr\n  ) external view returns (uint256 eligibleAmount, uint256 totalAmount);\n\n  /**\n   * @notice Get all capital, denominated in USDC, in Membership held by `addr`. This returns the current\n   *  eligible amount and the total USDC value of capital.\n   * @param addr the owner\n   * @return eligibleAmount how much USDC of capital is currently eligible for rewards\n   * @return totalAmount how much  USDC of capital is currently eligible for rewards\n   */\n  function totalCapitalHeldBy(\n    address addr\n  ) external view returns (uint256 eligibleAmount, uint256 totalAmount);\n\n  /**\n   * @notice Get the member score of `addr`\n   * @param addr the owner\n   * @return eligibleScore the currently eligible score\n   * @return totalScore the total score that will be eligible next epoch\n   *\n   * @dev if eligibleScore == totalScore then there are no changes between now and the next epoch\n   */\n  function memberScoreOf(\n    address addr\n  ) external view returns (uint256 eligibleScore, uint256 totalScore);\n\n  /**\n   * @notice Estimate rewards for a given epoch. For epochs at or before lastFinalizedEpoch\n   *  this will be the fixed, accurate reward for the epoch. For the current and other\n   *  non-finalized epochs, this will be the value as if the epoch were finalized in that\n   *  moment.\n   * @param epoch epoch to estimate the rewards of\n   * @return rewards associated with `epoch`\n   */\n  function estimateRewardsFor(uint256 epoch) external view returns (uint256);\n\n  /**\n   * @notice Calculate what the Membership Score would be if a `gfi` amount of GFI and `capital` amount\n   *  of Capital denominated in USDC were deposited.\n   * @param gfi amount of GFI to estimate with\n   * @param capital amount of capital to estimate with, denominated in USDC\n   * @return score the resulting score\n   */\n  function calculateMemberScore(uint256 gfi, uint256 capital) external view returns (uint256 score);\n\n  /**\n   * @notice Get the sum of all member scores that are currently eligible and that will be eligible next epoch\n   * @return eligibleTotal sum of all member scores that are currently eligible\n   * @return nextEpochTotal sum of all member scores that will be eligible next epoch\n   */\n  function totalMemberScores()\n    external\n    view\n    returns (uint256 eligibleTotal, uint256 nextEpochTotal);\n\n  /**\n   * @notice Estimate the score for an existing member, given some changes in GFI and capital\n   * @param memberAddress the member's address\n   * @param gfi the change in gfi holdings, denominated in GFI\n   * @param capital the change in gfi holdings, denominated in USDC\n   * @return score resulting score for the member given the GFI and capital changes\n   */\n  function estimateMemberScore(\n    address memberAddress,\n    int256 gfi,\n    int256 capital\n  ) external view returns (uint256 score);\n\n  /// @notice Finalize all unfinalized epochs. Causes the reserve splitter to distribute\n  ///  if there are unfinalized epochs so all possible rewards are distributed.\n  function finalizeEpochs() external;\n}\n"
    },
    "contracts/interfaces/IMembershipVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\n\nstruct Position {\n  // address owning the position\n  address owner;\n  // how much of the position is eligible as of checkpointEpoch\n  uint256 eligibleAmount;\n  // how much of the postion is eligible the epoch after checkpointEpoch\n  uint256 nextEpochAmount;\n  // when the position was first created\n  uint256 createdTimestamp;\n  // epoch of the last checkpoint\n  uint256 checkpointEpoch;\n}\n\n/**\n * @title IMembershipVault\n * @notice Track assets held by owners in a vault, as well as the total held in the vault. Assets\n *  are not accounted for until the next epoch for MEV protection.\n * @author Goldfinch\n */\ninterface IMembershipVault is IERC721Upgradeable {\n  /**\n   * @notice Emitted when an owner has adjusted their holdings in a vault\n   * @param owner the owner increasing their holdings\n   * @param eligibleAmount the new eligible amount\n   * @param nextEpochAmount the new next epoch amount\n   */\n  event AdjustedHoldings(address indexed owner, uint256 eligibleAmount, uint256 nextEpochAmount);\n\n  /**\n   * @notice Emitted when the total within the vault has changed\n   * @param eligibleAmount new current amount\n   * @param nextEpochAmount new next epoch amount\n   */\n  event VaultTotalUpdate(uint256 eligibleAmount, uint256 nextEpochAmount);\n\n  /**\n   * @notice Get the current value of `owner`. This changes depending on the current\n   *  block.timestamp as increased holdings are not accounted for until the subsequent epoch.\n   * @param owner address owning the positions\n   * @return sum of all positions held by an address\n   */\n  function currentValueOwnedBy(address owner) external view returns (uint256);\n\n  /**\n   * @notice Get the total value in the vault as of block.timestamp\n   * @return total value in the vault as of block.timestamp\n   */\n  function currentTotal() external view returns (uint256);\n\n  /**\n   * @notice Get the total value in the vault as of epoch\n   * @return total value in the vault as of epoch\n   */\n  function totalAtEpoch(uint256 epoch) external view returns (uint256);\n\n  /**\n   * @notice Get the position owned by `owner`\n   * @return position owned by `owner`\n   */\n  function positionOwnedBy(address owner) external view returns (Position memory);\n\n  /**\n   * @notice Record an adjustment in holdings. Eligible assets will update this epoch and\n   *  total assets will become eligible the subsequent epoch.\n   * @param owner the owner to checkpoint\n   * @param eligibleAmount amount of points to apply to the current epoch\n   * @param nextEpochAmount amount of points to apply to the next epoch\n   * @return id of the position\n   */\n  function adjustHoldings(\n    address owner,\n    uint256 eligibleAmount,\n    uint256 nextEpochAmount\n  ) external returns (uint256);\n\n  /**\n   * @notice Checkpoint a specific owner & the vault total\n   * @param owner the owner to checkpoint\n   *\n   * @dev to collect rewards, this must be called before `increaseHoldings` or\n   *  `decreaseHoldings`. Those functions must call checkpoint internally\n   *  so the historical data will be lost otherwise.\n   */\n  function checkpoint(address owner) external;\n}\n"
    },
    "contracts/interfaces/IPoolTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./openzeppelin/IERC721.sol\";\n\ninterface IPoolTokens is IERC721 {\n  struct TokenInfo {\n    address pool;\n    uint256 tranche;\n    uint256 principalAmount;\n    uint256 principalRedeemed;\n    uint256 interestRedeemed;\n  }\n\n  struct MintParams {\n    uint256 principalAmount;\n    uint256 tranche;\n  }\n\n  struct PoolInfo {\n    uint256 totalMinted;\n    uint256 totalPrincipalRedeemed;\n    bool created;\n  }\n\n  /**\n   * @notice Called by pool to create a debt position in a particular tranche and amount\n   * @param params Struct containing the tranche and the amount\n   * @param to The address that should own the position\n   * @return tokenId The token ID (auto-incrementing integer across all pools)\n   */\n  function mint(MintParams calldata params, address to) external returns (uint256);\n\n  /**\n   * @notice Redeem principal and interest on a pool token. Called by valid pools as part of their redemption\n   *  flow\n   * @param tokenId pool token id\n   * @param principalRedeemed principal to redeem. This cannot exceed the token's principal amount, and\n   *  the redemption cannot cause the pool's total principal redeemed to exceed the pool's total minted\n   *  principal\n   * @param interestRedeemed interest to redeem.\n   */\n  function redeem(uint256 tokenId, uint256 principalRedeemed, uint256 interestRedeemed) external;\n\n  /**\n   * @notice Withdraw a pool token's principal up to the token's principalAmount. Called by valid pools\n   *  as part of their withdraw flow before the pool is locked (i.e. before the principal is committed)\n   * @param tokenId pool token id\n   * @param principalAmount principal to withdraw\n   */\n  function withdrawPrincipal(uint256 tokenId, uint256 principalAmount) external;\n\n  /**\n   * @notice Burns a specific ERC721 token and removes deletes the token metadata for PoolTokens, BackerReards,\n   *  and BackerStakingRewards\n   * @param tokenId uint256 id of the ERC721 token to be burned.\n   */\n  function burn(uint256 tokenId) external;\n\n  /**\n   * @notice Called by the GoldfinchFactory to register the pool as a valid pool. Only valid pools can mint/redeem\n   * tokens\n   * @param newPool The address of the newly created pool\n   */\n  function onPoolCreated(address newPool) external;\n\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\n\n  function getPoolInfo(address pool) external view returns (PoolInfo memory);\n\n  /// @notice Query if `pool` is a valid pool. A pool is valid if it was created by the Goldfinch Factory\n  function validPool(address pool) external view returns (bool);\n\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\n\n  /**\n   * @notice Splits a pool token into two smaller positions. The original token is burned and all\n   * its associated data is deleted.\n   * @param tokenId id of the token to split.\n   * @param newPrincipal1 principal amount for the first token in the split. The principal amount for the\n   *  second token in the split is implicitly the original token's principal amount less newPrincipal1\n   * @return tokenId1 id of the first token in the split\n   * @return tokenId2 id of the second token in the split\n   */\n  function splitToken(\n    uint256 tokenId,\n    uint256 newPrincipal1\n  ) external returns (uint256 tokenId1, uint256 tokenId2);\n\n  /**\n   * @notice Mint event emitted for a new TranchedPool deposit or when an existing pool token is\n   *  split\n   * @param owner address to which the token was minted\n   * @param pool tranched pool that the deposit was in\n   * @param tokenId ERC721 tokenId\n   * @param amount the deposit amount\n   * @param tranche id of the tranche of the deposit\n   */\n  event TokenMinted(\n    address indexed owner,\n    address indexed pool,\n    uint256 indexed tokenId,\n    uint256 amount,\n    uint256 tranche\n  );\n\n  /**\n   * @notice Redeem event emitted when interest and/or principal is redeemed in the token's pool\n   * @param owner owner of the pool token\n   * @param pool tranched pool that the token belongs to\n   * @param principalRedeemed amount of principal redeemed from the pool\n   * @param interestRedeemed amount of interest redeemed from the pool\n   * @param tranche id of the tranche the token belongs to\n   */\n  event TokenRedeemed(\n    address indexed owner,\n    address indexed pool,\n    uint256 indexed tokenId,\n    uint256 principalRedeemed,\n    uint256 interestRedeemed,\n    uint256 tranche\n  );\n\n  /**\n   * @notice Burn event emitted when the token owner/operator manually burns the token or burns\n   *  it implicitly by splitting it\n   * @param owner owner of the pool token\n   * @param pool tranched pool that the token belongs to\n   */\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\n\n  /**\n   * @notice Split event emitted when the token owner/operator splits the token\n   * @param pool tranched pool to which the orginal and split tokens belong\n   * @param tokenId id of the original token that was split\n   * @param newTokenId1 id of the first split token\n   * @param newPrincipal1 principalAmount of the first split token\n   * @param newTokenId2 id of the second split token\n   * @param newPrincipal2 principalAmount of the second split token\n   */\n  event TokenSplit(\n    address indexed owner,\n    address indexed pool,\n    uint256 indexed tokenId,\n    uint256 newTokenId1,\n    uint256 newPrincipal1,\n    uint256 newTokenId2,\n    uint256 newPrincipal2\n  );\n\n  /**\n   * @notice Principal Withdrawn event emitted when a token's principal is withdrawn from the pool\n   *  BEFORE the pool's drawdown period\n   * @param pool tranched pool of the token\n   * @param principalWithdrawn amount of principal withdrawn from the pool\n   */\n  event TokenPrincipalWithdrawn(\n    address indexed owner,\n    address indexed pool,\n    uint256 indexed tokenId,\n    uint256 principalWithdrawn,\n    uint256 tranche\n  );\n}\n"
    },
    "contracts/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/// @title IRouter\n/// @author landakram\n/// @notice This contract provides service discovery for contracts using the cake framework.\n///   It can be used in conjunction with the convenience methods defined in the `Routing.Context`\n///   and `Routing.Keys` libraries.\ninterface IRouter {\n  event SetContract(bytes4 indexed key, address indexed addr);\n\n  /// @notice Associate a routing key to a contract address\n  /// @dev This function is only callable by the Router admin\n  /// @param key A routing key (defined in the `Routing.Keys` libary)\n  /// @param addr A contract address\n  function setContract(bytes4 key, address addr) external;\n}\n"
    },
    "contracts/interfaces/ISchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface ISchedule {\n  function periodsPerPrincipalPeriod() external view returns (uint256);\n\n  function periodsInTerm() external view returns (uint256);\n\n  function periodsPerInterestPeriod() external view returns (uint256);\n\n  function gracePrincipalPeriods() external view returns (uint256);\n\n  /**\n   * @notice Returns the period that timestamp resides in\n   */\n  function periodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\n\n  /**\n   * @notice Returns the principal period that timestamp resides in\n   */\n  function principalPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\n\n  /**\n   * @notice Returns the interest period that timestamp resides in\n   */\n  function interestPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\n\n  /**\n   * @notice Returns true if the given timestamp resides in a principal grace period\n   */\n  function withinPrincipalGracePeriodAt(\n    uint256 startTime,\n    uint256 timestamp\n  ) external view returns (bool);\n\n  /**\n   * Returns the next timestamp where either principal or interest will come due following `timestamp`\n   */\n  function nextDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\n\n  /**\n   * @notice Returns the previous timestamp where either principal or timestamp came due\n   */\n  function previousDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\n\n  /**\n   * @notice Returns the previous timestamp where new interest came due\n   */\n  function previousInterestDueTimeAt(\n    uint256 startTime,\n    uint256 timestamp\n  ) external view returns (uint256);\n\n  /**\n   * @notice Returns the previous timestamp where new principal came due\n   */\n  function previousPrincipalDueTimeAt(\n    uint256 startTime,\n    uint256 timestamp\n  ) external view returns (uint256);\n\n  /**\n   * @notice Returns the total number of principal periods\n   */\n  function totalPrincipalPeriods() external view returns (uint256);\n\n  /**\n   * @notice Returns the total number of interest periods\n   */\n  function totalInterestPeriods() external view returns (uint256);\n\n  /**\n   * @notice Returns the timestamp that the term will end\n   */\n  function termEndTime(uint256 startTime) external view returns (uint256);\n\n  /**\n   * @notice Returns the timestamp that the term began\n   */\n  function termStartTime(uint256 startTime) external view returns (uint256);\n\n  /**\n   * @notice Returns the next time principal will come due, or the termEndTime if there are no more due times\n   */\n  function nextPrincipalDueTimeAt(\n    uint256 startTime,\n    uint256 timestamp\n  ) external view returns (uint256);\n\n  /**\n   * @notice Returns the next time interest will come due, or the termEndTime if there are no more due times\n   */\n  function nextInterestDueTimeAt(\n    uint256 startTime,\n    uint256 timestamp\n  ) external view returns (uint256);\n\n  /**\n   * @notice Returns the end time of the given period.\n   */\n  function periodEndTime(uint256 startTime, uint256 period) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISeniorPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {ITranchedPool} from \"./ITranchedPool.sol\";\nimport {ISeniorPoolEpochWithdrawals} from \"./ISeniorPoolEpochWithdrawals.sol\";\n\nabstract contract ISeniorPool is ISeniorPoolEpochWithdrawals {\n  uint256 public sharePrice;\n  uint256 public totalLoansOutstanding;\n  uint256 public totalWritedowns;\n\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\n\n  function depositWithPermit(\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external virtual returns (uint256 depositShares);\n\n  /**\n   * @notice Withdraw `usdcAmount` of USDC, bypassing the epoch withdrawal system. Callable\n   * by Zapper only.\n   */\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\n\n  /**\n   * @notice Withdraw `fiduAmount` of FIDU converted to USDC at the current share price,\n   * bypassing the epoch withdrawal system. Callable by Zapper only\n   */\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\n\n  function invest(ITranchedPool pool) external virtual returns (uint256);\n\n  function estimateInvestment(ITranchedPool pool) external view virtual returns (uint256);\n\n  function redeem(uint256 tokenId) external virtual;\n\n  function writedown(uint256 tokenId) external virtual;\n\n  function calculateWritedown(\n    uint256 tokenId\n  ) external view virtual returns (uint256 writedownAmount);\n\n  function sharesOutstanding() external view virtual returns (uint256);\n\n  function assets() external view virtual returns (uint256);\n\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\n\n  event DepositMade(address indexed capitalProvider, uint256 amount, uint256 shares);\n  event WithdrawalMade(address indexed capitalProvider, uint256 userAmount, uint256 reserveAmount);\n  event InterestCollected(address indexed payer, uint256 amount);\n  event PrincipalCollected(address indexed payer, uint256 amount);\n  event ReserveFundsCollected(address indexed user, uint256 amount);\n  event ReserveSharesCollected(address indexed user, address indexed reserve, uint256 amount);\n\n  event PrincipalWrittenDown(address indexed tranchedPool, int256 amount);\n  event InvestmentMadeInSenior(address indexed tranchedPool, uint256 amount);\n  event InvestmentMadeInJunior(address indexed tranchedPool, uint256 amount);\n}\n"
    },
    "contracts/interfaces/ISeniorPoolEpochWithdrawals.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\npragma experimental ABIEncoderV2;\n\ninterface ISeniorPoolEpochWithdrawals {\n  /**\n   * @notice A withdrawal epoch\n   * @param endsAt timestamp the epoch ends\n   * @param fiduRequested amount of fidu requested in the epoch, including fidu\n   *                      carried over from previous epochs\n   * @param fiduLiquidated Amount of fidu that was liquidated at the end of this epoch\n   * @param usdcAllocated Amount of usdc that was allocated to liquidate fidu.\n   *                      Does not consider withdrawal fees.\n   */\n  struct Epoch {\n    uint256 endsAt;\n    uint256 fiduRequested;\n    uint256 fiduLiquidated;\n    uint256 usdcAllocated;\n  }\n\n  /**\n   * @notice A user's request for withdrawal\n   * @param epochCursor id of next epoch the user can liquidate their request\n   * @param fiduRequested amount of fidu left to liquidate since last checkpoint\n   * @param usdcWithdrawable amount of usdc available for a user to withdraw\n   */\n  struct WithdrawalRequest {\n    uint256 epochCursor;\n    uint256 usdcWithdrawable;\n    uint256 fiduRequested;\n  }\n\n  /**\n   * @notice Returns the amount of unallocated usdc in the senior pool, taking into account\n   *         usdc that _will_ be allocated to withdrawals when a checkpoint happens\n   */\n  function usdcAvailable() external view returns (uint256);\n\n  /// @notice Current duration of withdrawal epochs, in seconds\n  function epochDuration() external view returns (uint256);\n\n  /// @notice Update epoch duration\n  function setEpochDuration(uint256 newEpochDuration) external;\n\n  /// @notice The current withdrawal epoch\n  function currentEpoch() external view returns (Epoch memory);\n\n  /// @notice Get request by tokenId. A request is considered active if epochCursor > 0.\n  function withdrawalRequest(uint256 tokenId) external view returns (WithdrawalRequest memory);\n\n  /**\n   * @notice Submit a request to withdraw `fiduAmount` of FIDU. Request is rejected\n   * if caller already owns a request token. A non-transferrable request token is\n   * minted to the caller\n   * @return tokenId token minted to caller\n   */\n  function requestWithdrawal(uint256 fiduAmount) external returns (uint256 tokenId);\n\n  /**\n   * @notice Add `fiduAmount` FIDU to a withdrawal request for `tokenId`. Caller\n   * must own tokenId\n   */\n  function addToWithdrawalRequest(uint256 fiduAmount, uint256 tokenId) external;\n\n  /**\n   * @notice Cancel request for tokenId. The fiduRequested (minus a fee) is returned\n   * to the caller. Caller must own tokenId.\n   * @return fiduReceived the fidu amount returned to the caller\n   */\n  function cancelWithdrawalRequest(uint256 tokenId) external returns (uint256 fiduReceived);\n\n  /**\n   * @notice Transfer the usdcWithdrawable of request for tokenId to the caller.\n   * Caller must own tokenId\n   */\n  function claimWithdrawalRequest(uint256 tokenId) external returns (uint256 usdcReceived);\n\n  /// @notice Emitted when the epoch duration is changed\n  event EpochDurationChanged(uint256 newDuration);\n\n  /// @notice Emitted when a new withdraw request has been created\n  event WithdrawalRequested(\n    uint256 indexed epochId,\n    uint256 indexed tokenId,\n    address indexed operator,\n    uint256 fiduRequested\n  );\n\n  /// @notice Emitted when a user adds to their existing withdraw request\n  /// @param epochId epoch that the withdraw was added to\n  /// @param tokenId id of token that represents the position being added to\n  /// @param operator address that added to the request\n  /// @param fiduRequested amount of additional fidu added to request\n  event WithdrawalAddedTo(\n    uint256 indexed epochId,\n    uint256 indexed tokenId,\n    address indexed operator,\n    uint256 fiduRequested\n  );\n\n  /// @notice Emitted when a withdraw request has been canceled\n  event WithdrawalCanceled(\n    uint256 indexed epochId,\n    uint256 indexed tokenId,\n    address indexed operator,\n    uint256 fiduCanceled,\n    uint256 reserveFidu\n  );\n\n  /// @notice Emitted when an epoch has been checkpointed\n  /// @param epochId id of epoch that ended\n  /// @param endTime timestamp the epoch ended\n  /// @param fiduRequested amount of FIDU oustanding when the epoch ended\n  /// @param usdcAllocated amount of USDC allocated to liquidate FIDU\n  /// @param fiduLiquidated amount of FIDU liquidated using `usdcAllocated`\n  event EpochEnded(\n    uint256 indexed epochId,\n    uint256 endTime,\n    uint256 fiduRequested,\n    uint256 usdcAllocated,\n    uint256 fiduLiquidated\n  );\n\n  /// @notice Emitted when an epoch could not be finalized and is extended instead\n  /// @param epochId id of epoch that was extended\n  /// @param newEndTime new epoch end time\n  /// @param oldEndTime previous epoch end time\n  event EpochExtended(uint256 indexed epochId, uint256 newEndTime, uint256 oldEndTime);\n}\n"
    },
    "contracts/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\npragma experimental ABIEncoderV2;\n\nimport {IERC721} from \"./openzeppelin/IERC721.sol\";\nimport {IERC721Metadata} from \"./openzeppelin/IERC721Metadata.sol\";\nimport {IERC721Enumerable} from \"./openzeppelin/IERC721Enumerable.sol\";\n\ninterface IStakingRewards is IERC721, IERC721Metadata, IERC721Enumerable {\n  /// @notice Get the staking rewards position\n  /// @param tokenId id of the position token\n  /// @return position the position\n  function getPosition(uint256 tokenId) external view returns (StakedPosition memory position);\n\n  /// @notice Unstake an amount of `stakingToken()` (FIDU, FiduUSDCCurveLP, etc) associated with\n  ///   a given position and transfer to msg.sender. Any remaining staked amount will continue to\n  ///   accrue rewards.\n  /// @dev This function checkpoints rewards\n  /// @param tokenId A staking position token ID\n  /// @param amount Amount of `stakingToken()` to be unstaked from the position\n  function unstake(uint256 tokenId, uint256 amount) external;\n\n  /// @notice Add `amount` to an existing FIDU position (`tokenId`)\n  /// @param tokenId A staking position token ID\n  /// @param amount Amount of `stakingToken()` to be added to tokenId's position\n  function addToStake(uint256 tokenId, uint256 amount) external;\n\n  /// @notice Returns the staked balance of a given position token.\n  /// @dev The value returned is the bare amount, not the effective amount. The bare amount represents\n  ///   the number of tokens the user has staked for a given position. The effective amount is the bare\n  ///   amount multiplied by the token's underlying asset type multiplier. This multiplier is a crypto-\n  ///   economic parameter determined by governance.\n  /// @param tokenId A staking position token ID\n  /// @return Amount of staked tokens denominated in `stakingToken().decimals()`\n  function stakedBalanceOf(uint256 tokenId) external view returns (uint256);\n\n  /// @notice Deposit to FIDU and USDC into the Curve LP, and stake your Curve LP tokens in the same transaction.\n  /// @param fiduAmount The amount of FIDU to deposit\n  /// @param usdcAmount The amount of USDC to deposit\n  function depositToCurveAndStakeFrom(\n    address nftRecipient,\n    uint256 fiduAmount,\n    uint256 usdcAmount\n  ) external;\n\n  /// @notice \"Kick\" a user's reward multiplier. If they are past their lock-up period, their reward\n  ///   multiplier will be reset to 1x.\n  /// @dev This will also checkpoint their rewards up to the current time.\n  function kick(uint256 tokenId) external;\n\n  /// @notice Accumulated rewards per token at the last checkpoint\n  function accumulatedRewardsPerToken() external view returns (uint256);\n\n  /// @notice The block timestamp when rewards were last checkpointed\n  function lastUpdateTime() external view returns (uint256);\n\n  /// @notice Claim rewards for a given staked position\n  /// @param tokenId A staking position token ID\n  /// @return amount of rewards claimed\n  function getReward(uint256 tokenId) external returns (uint256);\n\n  /* ========== EVENTS ========== */\n\n  event RewardAdded(uint256 reward);\n  event Staked(\n    address indexed user,\n    uint256 indexed tokenId,\n    uint256 amount,\n    StakedPositionType positionType,\n    uint256 baseTokenExchangeRate\n  );\n  event DepositedAndStaked(\n    address indexed user,\n    uint256 depositedAmount,\n    uint256 indexed tokenId,\n    uint256 amount\n  );\n  event DepositedToCurve(\n    address indexed user,\n    uint256 fiduAmount,\n    uint256 usdcAmount,\n    uint256 tokensReceived\n  );\n  event DepositedToCurveAndStaked(\n    address indexed user,\n    uint256 fiduAmount,\n    uint256 usdcAmount,\n    uint256 indexed tokenId,\n    uint256 amount\n  );\n  event AddToStake(\n    address indexed user,\n    uint256 indexed tokenId,\n    uint256 amount,\n    StakedPositionType positionType\n  );\n  event Unstaked(\n    address indexed user,\n    uint256 indexed tokenId,\n    uint256 amount,\n    StakedPositionType positionType\n  );\n  event UnstakedMultiple(address indexed user, uint256[] tokenIds, uint256[] amounts);\n  event RewardPaid(address indexed user, uint256 indexed tokenId, uint256 reward);\n  event RewardsParametersUpdated(\n    address indexed who,\n    uint256 targetCapacity,\n    uint256 minRate,\n    uint256 maxRate,\n    uint256 minRateAtPercent,\n    uint256 maxRateAtPercent\n  );\n  event EffectiveMultiplierUpdated(\n    address indexed who,\n    StakedPositionType positionType,\n    uint256 multiplier\n  );\n}\n\n/// @notice Indicates which ERC20 is staked\nenum StakedPositionType {\n  Fidu,\n  CurveLP\n}\n\nstruct Rewards {\n  uint256 totalUnvested;\n  uint256 totalVested;\n  // @dev DEPRECATED (definition kept for storage slot)\n  //   For legacy vesting positions, this was used in the case of slashing.\n  //   For non-vesting positions, this is unused.\n  uint256 totalPreviouslyVested;\n  uint256 totalClaimed;\n  uint256 startTime;\n  // @dev DEPRECATED (definition kept for storage slot)\n  //   For legacy vesting positions, this is the endTime of the vesting.\n  //   For non-vesting positions, this is 0.\n  uint256 endTime;\n}\n\nstruct StakedPosition {\n  // @notice Staked amount denominated in `stakingToken().decimals()`\n  uint256 amount;\n  // @notice Struct describing rewards owed with vesting\n  Rewards rewards;\n  // @notice Multiplier applied to staked amount when locking up position\n  uint256 leverageMultiplier;\n  // @notice Time in seconds after which position can be unstaked\n  uint256 lockedUntil;\n  // @notice Type of the staked position\n  StakedPositionType positionType;\n  // @notice Multiplier applied to staked amount to denominate in `baseStakingToken().decimals()`\n  // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\n  //  If you need this field, use `safeEffectiveMultiplier()`, which correctly handles old staked positions.\n  uint256 unsafeEffectiveMultiplier;\n  // @notice Exchange rate applied to staked amount to denominate in `baseStakingToken().decimals()`\n  // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\n  //  If you need this field, use `safeBaseTokenExchangeRate()`, which correctly handles old staked positions.\n  uint256 unsafeBaseTokenExchangeRate;\n}\n"
    },
    "contracts/interfaces/ITranchedPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\nimport {ISchedule} from \"./ISchedule.sol\";\nimport {ILoan} from \"./ILoan.sol\";\nimport {ICreditLine} from \"./ICreditLine.sol\";\n\ninterface ITranchedPool is ILoan {\n  struct TrancheInfo {\n    uint256 id;\n    uint256 principalDeposited;\n    uint256 principalSharePrice;\n    uint256 interestSharePrice;\n    uint256 lockedUntil;\n  }\n  struct PoolSlice {\n    TrancheInfo seniorTranche;\n    TrancheInfo juniorTranche;\n    uint256 totalInterestAccrued;\n    uint256 principalDeployed;\n  }\n  enum Tranches {\n    Reserved,\n    Senior,\n    Junior\n  }\n\n  /// @notice Initialize the pool. Can only be called once, and should be called in the same transaction as\n  ///   contract creation to avoid initialization front-running\n  /// @param _config address of GoldfinchConfig\n  /// @param _borrower address of borrower, a non-transferrable role for performing privileged actions like\n  ///   drawdown\n  /// @param _juniorFeePercent percent (whole number) of senior interest that gets re-allocated to the junior tranche.\n  ///   valid range is [0, 100]\n  /// @param _limit the max USDC amount that can be drawn down across all pool slices\n  /// @param _interestApr interest rate for the loan\n  /// @param _lateFeeApr late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a\n  ///   payment becomes late\n  /// @param _fundableAt earliest time at which the first slice can be funded\n  function initialize(\n    address _config,\n    address _borrower,\n    uint256 _juniorFeePercent,\n    uint256 _limit,\n    uint256 _interestApr,\n    ISchedule _schedule,\n    uint256 _lateFeeApr,\n    uint256 _fundableAt,\n    uint256[] calldata _allowedUIDTypes\n  ) external;\n\n  /// @notice Pay down the credit line, separating the principal and interest payments. You must pay back all interest\n  ///   before paying back principal. Excess payments are refunded to the caller\n  /// @param principalPayment USDC amount to pay down principal\n  /// @param interestPayment USDC amount to pay down interest\n  /// @return PaymentAllocation info on how the payment was allocated\n  /// @dev {this} must be approved by msg.sender to transfer {principalPayment} + {interestPayment} of USDC\n  function pay(\n    uint256 principalPayment,\n    uint256 interestPayment\n  ) external returns (PaymentAllocation memory);\n\n  /// @notice TrancheInfo for tranche with id `trancheId`. The senior tranche of slice i has id 2*(i-1)+1. The\n  ///   junior tranche of slice i has id 2*i. Slice indices start at 1.\n  /// @param trancheId id of tranche. Valid ids are in the range [1, 2*numSlices]\n  function getTranche(uint256 trancheId) external view returns (ITranchedPool.TrancheInfo memory);\n\n  /// @notice Get a slice by index\n  /// @param index of slice. Valid indices are on the interval [0, numSlices - 1]\n  function poolSlices(uint256 index) external view returns (ITranchedPool.PoolSlice memory);\n\n  /// @notice Lock the junior capital in the junior tranche of the current slice. The capital is locked for\n  ///   `DrawdownPeriodInSeconds` seconds and gives the senior pool time to decide how much to invest (ensure\n  ///   leverage ratio cannot change for the period). During this period the borrower has the option to lock\n  ///   the senior capital by calling `lockPool()`. Backers may withdraw their junior capital if the the senior\n  ///   tranche has not been locked and the drawdown period has ended. Only the borrower can call this function.\n  function lockJuniorCapital() external;\n\n  /// @notice Lock the senior capital in the senior tranche of the current slice and reset the lock period of\n  ///   the junior capital to match the senior capital lock period. During this period the borrower has the\n  ///   option to draw down the pool. Beyond the drawdown period any unused capital is available to withdraw by\n  ///   all depositors.\n  function lockPool() external;\n\n  /// @notice Initialize the next slice for the pool. Enables backers and the senior pool to provide additional\n  ///   capital to the borrower.\n  /// @param _fundableAt time at which the new slice (now the current slice) becomes fundable\n  function initializeNextSlice(uint256 _fundableAt) external;\n\n  /// @notice Query the total capital supplied to the pool's junior tranches\n  function totalJuniorDeposits() external view returns (uint256);\n\n  function assess() external;\n\n  /// @notice Get the current number of slices for this pool\n  /// @return numSlices total current slice count\n  function numSlices() external view returns (uint256);\n\n  // Note: This has to exactly match the event in the TranchingLogic library for events to be emitted\n  // correctly\n  event SharePriceUpdated(\n    address indexed pool,\n    uint256 indexed tranche,\n    uint256 principalSharePrice,\n    int256 principalDelta,\n    uint256 interestSharePrice,\n    int256 interestDelta\n  );\n  event CreditLineMigrated(ICreditLine indexed oldCreditLine, ICreditLine indexed newCreditLine);\n  event TrancheLocked(address indexed pool, uint256 trancheId, uint256 lockedUntil);\n  event SliceCreated(address indexed pool, uint256 sliceId);\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n// This file copied from OZ, but with the version pragma updated to use >=.\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\n// This file copied from OZ, but with the version pragma updated to use >= & reference other >= pragma interfaces.\n// NOTE: Modified to reference our updated pragma version of IERC165\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n  /**\n   * @dev Returns the number of NFTs in ``owner``'s account.\n   */\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  /**\n   * @dev Returns the owner of the NFT specified by `tokenId`.\n   */\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  /**\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n   * another (`to`).\n   *\n   *\n   *\n   * Requirements:\n   * - `from`, `to` cannot be zero.\n   * - `tokenId` must be owned by `from`.\n   * - If the caller is not `from`, it must be have been allowed to move this\n   * NFT by either {approve} or {setApprovalForAll}.\n   */\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n  /**\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n   * another (`to`).\n   *\n   * Requirements:\n   * - If the caller is not `from`, it must be approved to move this NFT by\n   * either {approve} or {setApprovalForAll}.\n   */\n  function transferFrom(address from, address to, uint256 tokenId) external;\n\n  function approve(address to, uint256 tokenId) external;\n\n  function getApproved(uint256 tokenId) external view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) external;\n\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC721Enumerable.sol": {
      "content": "pragma solidity >=0.6.2;\n\n// This file copied from OZ, but with the version pragma updated to use >=.\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n  function totalSupply() external view returns (uint256);\n\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  ) external view returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC721Metadata.sol": {
      "content": "pragma solidity >=0.6.2;\n\n// This file copied from OZ, but with the version pragma updated to use >=.\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/library/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary Arrays {\n  /**\n   * @notice Removes an item from an array and replaces it with the (previously) last element in the array so\n   *  there are no empty spaces. Assumes that `array` is not empty and index is valid.\n   * @param array the array to remove from\n   * @param index index of the item to remove\n   * @return newLength length of the resulting array\n   * @return replaced whether or not the index was replaced. Only false if the removed item was the last item\n   *  in the array.\n   */\n  function reorderingRemove(\n    uint256[] storage array,\n    uint256 index\n  ) internal returns (uint256 newLength, bool replaced) {\n    newLength = array.length - 1;\n    replaced = newLength != index;\n\n    if (replaced) {\n      array[index] = array[newLength];\n    }\n\n    array.pop();\n  }\n}\n"
    },
    "contracts/library/FiduConversions.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary FiduConversions {\n  uint256 internal constant FIDU_MANTISSA = 1e18;\n  uint256 internal constant USDC_MANTISSA = 1e6;\n  uint256 internal constant USDC_TO_FIDU_MANTISSA = FIDU_MANTISSA / USDC_MANTISSA;\n  uint256 internal constant FIDU_USDC_CONVERSION_DECIMALS = USDC_TO_FIDU_MANTISSA * FIDU_MANTISSA;\n\n  /**\n   * @notice Convert Usdc to Fidu using a given share price\n   * @param usdcAmount amount of usdc to convert\n   * @param sharePrice share price to use to convert\n   * @return fiduAmount converted fidu amount\n   */\n  function usdcToFidu(uint256 usdcAmount, uint256 sharePrice) internal pure returns (uint256) {\n    return sharePrice > 0 ? (usdcAmount * FIDU_USDC_CONVERSION_DECIMALS) / sharePrice : 0;\n  }\n\n  /**\n   * @notice Convert fidu to USDC using a given share price\n   * @param fiduAmount fidu amount to convert\n   * @param sharePrice share price to do the conversion with\n   * @return usdcReceived usdc that will be received after converting\n   */\n  function fiduToUsdc(uint256 fiduAmount, uint256 sharePrice) internal pure returns (uint256) {\n    return (fiduAmount * sharePrice) / FIDU_USDC_CONVERSION_DECIMALS;\n  }\n}\n"
    },
    "contracts/protocol/core/membership/assets/CapitalAssets.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\n\nimport {Context} from \"../../../../cake/Context.sol\";\nimport {CapitalAssetType} from \"../../../../interfaces/ICapitalLedger.sol\";\nimport \"../../../../cake/Routing.sol\" as Routing;\n\n/// @dev Adding a New Asset Type\n/// 1. Create a new library in this directory of the name <AssetType>Asset.sol\n/// 2. The library must implement the same functions as the other assets:\n///   2.1 AssetType\n///   2.2 isType\n///   2.3 isValid - if the asset is an ERC721\n///   2.4 getUsdcEquivalent\n/// 3. Import the library below in \"Supported assets\"\n/// 4. Add the new library to the corresponding `getSupportedType` function in this file\n/// 5. Add the new library to the corresponding `getUsdcEquivalent` function in this file\n/// 6. If the new library is an ERC721, add it to the `isValid` function in this file\n\n// Supported assets\nimport {PoolTokensAsset} from \"./PoolTokensAsset.sol\";\nimport {StakedFiduAsset} from \"./StakedFiduAsset.sol\";\n\nusing Routing.Context for Context;\n\nlibrary CapitalAssets {\n  /// Thrown when an asset has been requested that does not exist\n  error InvalidAsset(address assetAddress);\n  /// Thrown when an asset has been requested that does not exist\n  error InvalidAssetWithId(address assetAddress, uint256 assetTokenId);\n\n  /**\n   * @notice Check if a specific `assetAddress` has a corresponding capital asset\n   *  implementation and returns the asset type. Returns INVALID if no\n   *  such asset exists.\n   * @param context goldfinch context for routing\n   * @param assetAddress the address of the asset's contract\n   * @return type of the asset\n   */\n  function getSupportedType(\n    Context context,\n    address assetAddress\n  ) internal view returns (CapitalAssetType) {\n    if (StakedFiduAsset.isType(context, assetAddress)) return StakedFiduAsset.AssetType;\n    if (PoolTokensAsset.isType(context, assetAddress)) return PoolTokensAsset.AssetType;\n\n    return CapitalAssetType.INVALID;\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // ERC721\n\n  /**\n   * @notice Check if a specific token for a supported asset is valid or not. Returns false\n   *  if the asset is not supported or the token is invalid\n   * @param context goldfinch context for routing\n   * @param assetAddress the address of the asset's contract\n   * @param assetTokenId the token id\n   * @return whether or not a specific token id of asset address is supported\n   */\n  function isValid(\n    Context context,\n    address assetAddress,\n    uint256 assetTokenId\n  ) internal view returns (bool) {\n    if (StakedFiduAsset.isType(context, assetAddress))\n      return StakedFiduAsset.isValid(context, assetTokenId);\n    if (PoolTokensAsset.isType(context, assetAddress))\n      return PoolTokensAsset.isValid(context, assetTokenId);\n\n    return false;\n  }\n\n  /**\n   * @notice Get the point-in-time USDC equivalent value of the ERC721 asset. This\n   *  specifically attempts to return the \"principle\" or \"at-risk\" USDC value of\n   *  the asset and does not include rewards, interest, or other benefits.\n   * @param context goldfinch context for routing\n   * @param asset ERC721 to evaluate\n   * @param assetTokenId id of the token to evaluate\n   * @return USDC equivalent value\n   */\n  function getUsdcEquivalent(\n    Context context,\n    IERC721Upgradeable asset,\n    uint256 assetTokenId\n  ) internal view returns (uint256) {\n    if (PoolTokensAsset.isType(context, address(asset))) {\n      return PoolTokensAsset.getUsdcEquivalent(context, assetTokenId);\n    }\n\n    if (StakedFiduAsset.isType(context, address(asset))) {\n      return StakedFiduAsset.getUsdcEquivalent(context, assetTokenId);\n    }\n\n    revert InvalidAsset(address(asset));\n  }\n\n  /**\n   * @notice Harvests the associated rewards, interest, and other accrued assets\n   *  associated with the asset token. For example, if given a PoolToken asset,\n   *  this will collect the GFI rewards (if available), redeemable interest, and\n   *  redeemable principal, and send that to the `owner`.\n   * @param context goldfinch context for routing\n   * @param owner address to send the harvested assets to\n   * @param asset ERC721 to harvest\n   * @param assetTokenId id of the token to harvest\n   */\n  function harvest(\n    Context context,\n    address owner,\n    IERC721Upgradeable asset,\n    uint256 assetTokenId\n  ) internal {\n    if (PoolTokensAsset.isType(context, address(asset))) {\n      return PoolTokensAsset.harvest(context, owner, assetTokenId);\n    }\n\n    if (StakedFiduAsset.isType(context, address(asset))) {\n      return StakedFiduAsset.harvest(context, owner, assetTokenId);\n    }\n\n    revert InvalidAsset(address(asset));\n  }\n}\n"
    },
    "contracts/protocol/core/membership/assets/PoolTokensAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\n// solhint-disable-next-line max-line-length\nimport {SafeERC20Upgradeable as SafeERC20} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport {Context} from \"../../../../cake/Context.sol\";\nimport \"../../../../cake/Routing.sol\" as Routing;\n\nimport {CapitalAssetType} from \"../../../../interfaces/ICapitalLedger.sol\";\nimport {IPoolTokens} from \"../../../../interfaces/IPoolTokens.sol\";\nimport {ITranchedPool} from \"../../../../interfaces/ITranchedPool.sol\";\nimport {ICallableLoan} from \"../../../../interfaces/ICallableLoan.sol\";\nimport {ILoan, LoanType} from \"../../../../interfaces/ILoan.sol\";\n\nusing Routing.Context for Context;\nusing SafeERC20 for IERC20Upgradeable;\n\nlibrary PoolTokensAsset {\n  /// Thrown when trying to harvest a pool token when not go-listed\n  error NotGoListed(address owner);\n\n  CapitalAssetType public constant AssetType = CapitalAssetType.ERC721;\n\n  /**\n   * @notice Get the type of asset that this contract adapts.\n   * @return the asset type\n   */\n  function isType(Context context, address assetAddress) internal view returns (bool) {\n    return assetAddress == address(context.poolTokens());\n  }\n\n  /**\n   * @notice Get whether or not the given asset is valid\n   * @return true if the represented tranche is or may be drawn down (so true if assets are doing work)\n   */\n  function isValid(Context context, uint256 assetTokenId) internal view returns (bool) {\n    IPoolTokens.TokenInfo memory tokenInfo = context.poolTokens().getTokenInfo(assetTokenId);\n\n    // Legacy TranchedPools do not support ILoan#getLoanType\n    LoanType loanType = LoanType.TranchedPool;\n\n    try ILoan(tokenInfo.pool).getLoanType() returns (LoanType _loanType) {\n      loanType = _loanType;\n    } catch {}\n\n    if (loanType == LoanType.TranchedPool) {\n      return ITranchedPool(tokenInfo.pool).getTranche(tokenInfo.tranche).lockedUntil != 0;\n    } else if (loanType == LoanType.CallableLoan) {\n      return ICallableLoan(tokenInfo.pool).uncalledCapitalTrancheIndex() == tokenInfo.tranche;\n    }\n  }\n\n  /**\n   * @notice Get the point-in-time USDC equivalent value of the Pool Token asset. This\n   *  specifically attempts to return the \"principle\" or \"at-risk\" USDC value of\n   *  the asset and does not include rewards, interest, or other benefits.\n   * @param context goldfinch context for routing\n   * @param assetTokenId tokenId of the Pool Token to evaluate\n   * @return USDC equivalent value\n   */\n  function getUsdcEquivalent(\n    Context context,\n    uint256 assetTokenId\n  ) internal view returns (uint256) {\n    IPoolTokens.TokenInfo memory tokenInfo = context.poolTokens().getTokenInfo(assetTokenId);\n    return tokenInfo.principalAmount - tokenInfo.principalRedeemed;\n  }\n\n  /**\n   * @notice Harvest GFI rewards and redeemable interest and principal on PoolToken with id\n   *  `assetTokenId` and send the harvested assets to `owner`.\n   * @param context goldfinch context for routing\n   * @param owner address to send the harvested assets to\n   * @param assetTokenId id of the position to harvest\n   */\n  function harvest(Context context, address owner, uint256 assetTokenId) internal {\n    IPoolTokens.TokenInfo memory tokenInfo = context.poolTokens().getTokenInfo(assetTokenId);\n    ILoan loan = ILoan(tokenInfo.pool);\n\n    if (!context.go().goOnlyIdTypes(owner, getAllowedUIDs(tokenInfo.pool))) {\n      revert NotGoListed(owner);\n    }\n\n    (uint256 interestWithdrawn, uint256 principalWithdrawn) = loan.withdrawMax(assetTokenId);\n    context.usdc().safeTransfer(owner, interestWithdrawn + principalWithdrawn);\n\n    try context.backerRewards().withdraw(assetTokenId) returns (uint256 rewards) {\n      // Withdraw can throw if the pool is late or if it's an early pool and doesn't\n      // have associated backer rewards. Try/catch so the interest and principal can\n      // still be harvested.\n\n      context.gfi().safeTransfer(owner, rewards);\n    } catch {}\n  }\n\n  function getAllowedUIDs(address poolAddress) private view returns (uint256[] memory allowedUIDs) {\n    // TranchedPools are non-upgradeable and have different capabilites. One of the differences\n    // is the `getAllowedUIDTypes` function, which is only available in contracts deployed from\n    // Nov 2022 onward. To get around this limitation, we hardcode the expected UID requirements\n    // based on the pool address for previous contracts. Otherwise, we use the available method.\n    // Pools below are listed in chronological order for convenience.\n\n    if (\n      poolAddress == 0xefeB69eDf6B6999B0e3f2Fa856a2aCf3bdEA4ab5 || // almavest 3\n      poolAddress == 0xaA2ccC5547f64C5dFfd0a624eb4aF2543A67bA65 || // tugende\n      poolAddress == 0xc9BDd0D3B80CC6EfE79a82d850f44EC9B55387Ae || // cauris\n      poolAddress == 0xe6C30756136e07eB5268c3232efBFBe645c1BA5A || // almavest 4\n      poolAddress == 0x1d596D28A7923a22aA013b0e7082bbA23DAA656b // almavest 5\n    ) {\n      // Legacy pools that had custom checks upon signup\n\n      allowedUIDs = new uint256[](1);\n      allowedUIDs[0] = 0;\n      return allowedUIDs;\n    }\n\n    if (poolAddress == 0x418749e294cAbce5A714EfcCC22a8AAde6F9dB57 /* almavest 6 */) {\n      // Old pool that has internal UID check but does not provide a gas-efficient UID interface\n      // Copied the pool's UID requirements below\n\n      allowedUIDs = new uint256[](1);\n      allowedUIDs[0] = 0;\n      return allowedUIDs;\n    }\n\n    if (\n      poolAddress == 0x00c27FC71b159a346e179b4A1608a0865e8A7470 || // stratos\n      poolAddress == 0xd09a57127BC40D680Be7cb061C2a6629Fe71AbEf // cauris 2\n    ) {\n      // Old pools that have internal UID check but do not provide a gas-efficient UID interface\n      // Copied the pools' UID requirements below\n\n      allowedUIDs = new uint256[](2);\n      allowedUIDs[0] = 0;\n      allowedUIDs[1] = 1;\n      return allowedUIDs;\n    }\n\n    if (\n      poolAddress == 0xb26B42Dd5771689D0a7faEea32825ff9710b9c11 || // lend east 1\n      poolAddress == 0x759f097f3153f5d62FF1C2D82bA78B6350F223e3 || // almavest 7\n      poolAddress == 0x89d7C618a4EeF3065DA8ad684859a547548E6169 // addem capital\n    ) {\n      // Old pools that have internal UID check but do not provide a gas-efficient UID interface\n      // Copied the pools' UID requirements below\n\n      allowedUIDs = new uint256[](4);\n      allowedUIDs[0] = 0;\n      allowedUIDs[1] = 1;\n      allowedUIDs[2] = 3;\n      allowedUIDs[3] = 4;\n      return allowedUIDs;\n    }\n\n    // All other and future pools implement getAllowedUIDTypes\n    return ILoan(poolAddress).getAllowedUIDTypes();\n  }\n}\n"
    },
    "contracts/protocol/core/membership/assets/StakedFiduAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n// solhint-disable-next-line max-line-length\nimport {SafeERC20Upgradeable as SafeERC20} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"../../../../library/FiduConversions.sol\";\nimport {Context} from \"../../../../cake/Context.sol\";\nimport \"../../../../cake/Routing.sol\" as Routing;\n\nimport {CapitalAssetType} from \"../../../../interfaces/ICapitalLedger.sol\";\nimport {IStakingRewards, StakedPositionType} from \"../../../../interfaces/IStakingRewards.sol\";\nimport {ISeniorPool} from \"../../../../interfaces/ISeniorPool.sol\";\n\nusing Routing.Context for Context;\nusing SafeERC20 for IERC20Upgradeable;\n\nlibrary StakedFiduAsset {\n  CapitalAssetType public constant AssetType = CapitalAssetType.ERC721;\n\n  /**\n   * @notice Get the type of asset that this contract adapts.\n   * @return the asset type\n   */\n  function isType(Context context, address assetAddress) internal view returns (bool) {\n    return assetAddress == address(context.stakingRewards());\n  }\n\n  /**\n   * @notice Get whether or not the given asset is valid\n   * @return true if the asset is Fidu type (not CurveLP)\n   */\n  function isValid(Context context, uint256 assetTokenId) internal view returns (bool) {\n    return\n      context.stakingRewards().getPosition(assetTokenId).positionType == StakedPositionType.Fidu;\n  }\n\n  /**\n   * @notice Get the point-in-time USDC equivalent value of the ERC721 asset. This\n   *  specifically attempts to return the \"principle\" or \"at-risk\" USDC value of\n   *  the asset and does not include rewards, interest, or other benefits.\n   * @param context goldfinch context for routing\n   * @param assetTokenId id of the position to evaluate\n   * @return USDC equivalent value\n   */\n  function getUsdcEquivalent(\n    Context context,\n    uint256 assetTokenId\n  ) internal view returns (uint256) {\n    uint256 stakedFiduBalance = context.stakingRewards().stakedBalanceOf(assetTokenId);\n    return FiduConversions.fiduToUsdc(stakedFiduBalance, context.seniorPool().sharePrice());\n  }\n\n  /**\n   * @notice Harvest GFI rewards on a staked fidu token and send them to `owner`.\n   * @param context goldfinch context for routing\n   * @param owner address to send the GFI to\n   * @param assetTokenId id of the position to harvest\n   */\n  function harvest(Context context, address owner, uint256 assetTokenId) internal {\n    // Sends reward to owner (this contract)\n    uint256 reward = context.stakingRewards().getReward(assetTokenId);\n\n    if (reward > 0) {\n      context.gfi().safeTransfer(owner, reward);\n    }\n  }\n}\n"
    },
    "contracts/protocol/core/membership/CapitalLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721ReceiverUpgradeable.sol\";\n\nimport {Context} from \"../../../cake/Context.sol\";\nimport {Base} from \"../../../cake/Base.sol\";\nimport \"../../../cake/Routing.sol\" as Routing;\n\nimport {Arrays} from \"../../../library/Arrays.sol\";\nimport {CapitalAssets} from \"./assets/CapitalAssets.sol\";\nimport {UserEpochTotals, UserEpochTotal} from \"./UserEpochTotals.sol\";\n\nimport {ICapitalLedger, CapitalAssetType} from \"../../../interfaces/ICapitalLedger.sol\";\n\nusing Routing.Context for Context;\nusing UserEpochTotals for UserEpochTotal;\nusing Arrays for uint256[];\n\n/**\n * @title CapitalLedger\n * @notice Track Capital held by owners and ensure the Capital has been accounted for.\n * @author Goldfinch\n */\ncontract CapitalLedger is ICapitalLedger, Base, IERC721ReceiverUpgradeable {\n  /// Thrown when attempting to deposit nothing\n  error ZeroDeposit();\n  /// Thrown when withdrawing an invalid amount for a position\n  error InvalidWithdrawAmount(uint256 requested, uint256 max);\n  /// Thrown when depositing from address(0)\n  error InvalidOwnerIndex();\n  /// Thrown when querying token supply with an index greater than the supply\n  error IndexGreaterThanTokenSupply();\n\n  struct Position {\n    // Owner of the position\n    address owner;\n    // Index of the position in the ownership array\n    uint256 ownedIndex;\n    // Address of the underlying asset represented by the position\n    address assetAddress;\n    // USDC equivalent value of the position. This is first written\n    // on position deposit but may be updated on harvesting or kicking\n    uint256 usdcEquivalent;\n    // When the position was deposited\n    uint256 depositTimestamp;\n  }\n\n  struct ERC721Data {\n    // Id of the ERC721 assetAddress' token\n    uint256 assetTokenId;\n  }\n\n  /// Data for positions in the vault. Always has a corresponding\n  /// entry at the same index in ERC20Data or ERC721 data, but never\n  /// both.\n  mapping(uint256 => Position) public positions;\n\n  // Which positions an address owns\n  mapping(address => uint256[]) private owners;\n\n  /// Total held by each user, while being aware of the deposit epoch\n  mapping(address => UserEpochTotal) private totals;\n\n  // The current position index\n  uint256 private positionCounter;\n\n  /// ERC721 data corresponding to positions, data has the same index\n  /// as its corresponding position.\n  mapping(uint256 => ERC721Data) private erc721Datas;\n\n  /// @notice Construct the contract\n  constructor(Context _context) Base(_context) {}\n\n  /// @inheritdoc ICapitalLedger\n  function depositERC721(\n    address owner,\n    address assetAddress,\n    uint256 assetTokenId\n  ) external onlyOperator(Routing.Keys.MembershipOrchestrator) returns (uint256) {\n    if (CapitalAssets.getSupportedType(context, assetAddress) != CapitalAssetType.ERC721) {\n      revert CapitalAssets.InvalidAsset(assetAddress);\n    }\n    if (!CapitalAssets.isValid(context, assetAddress, assetTokenId)) {\n      revert CapitalAssets.InvalidAssetWithId(assetAddress, assetTokenId);\n    }\n\n    IERC721Upgradeable asset = IERC721Upgradeable(assetAddress);\n    uint256 usdcEquivalent = CapitalAssets.getUsdcEquivalent(context, asset, assetTokenId);\n    uint256 positionId = _mintPosition(owner, assetAddress, usdcEquivalent);\n\n    erc721Datas[positionId] = ERC721Data({assetTokenId: assetTokenId});\n\n    totals[owner].recordIncrease(usdcEquivalent);\n\n    asset.safeTransferFrom(address(context.membershipOrchestrator()), address(this), assetTokenId);\n\n    emit CapitalERC721Deposit({\n      owner: owner,\n      assetAddress: assetAddress,\n      positionId: positionId,\n      assetTokenId: assetTokenId,\n      usdcEquivalent: usdcEquivalent\n    });\n\n    return positionId;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function erc721IdOf(uint256 positionId) public view returns (uint256) {\n    return erc721Datas[positionId].assetTokenId;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function withdraw(uint256 positionId) external onlyOperator(Routing.Keys.MembershipOrchestrator) {\n    Position memory position = positions[positionId];\n    delete positions[positionId];\n\n    CapitalAssetType assetType = CapitalAssets.getSupportedType(context, position.assetAddress);\n\n    totals[position.owner].recordDecrease(position.usdcEquivalent, position.depositTimestamp);\n\n    uint256[] storage ownersList = owners[position.owner];\n    (, bool replaced) = ownersList.reorderingRemove(position.ownedIndex);\n    if (replaced) {\n      positions[ownersList[position.ownedIndex]].ownedIndex = position.ownedIndex;\n    }\n\n    if (assetType == CapitalAssetType.ERC721) {\n      uint256 assetTokenId = erc721Datas[positionId].assetTokenId;\n      delete erc721Datas[positionId];\n\n      IERC721Upgradeable(position.assetAddress).safeTransferFrom(\n        address(this),\n        position.owner,\n        assetTokenId\n      );\n\n      emit CapitalERC721Withdrawal(\n        position.owner,\n        positionId,\n        position.assetAddress,\n        position.depositTimestamp\n      );\n    } else {\n      revert InvalidAssetType(assetType);\n    }\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function harvest(uint256 positionId) external onlyOperator(Routing.Keys.MembershipOrchestrator) {\n    Position memory position = positions[positionId];\n    CapitalAssetType assetType = CapitalAssets.getSupportedType(context, position.assetAddress);\n\n    if (assetType != CapitalAssetType.ERC721) revert InvalidAssetType(assetType);\n\n    CapitalAssets.harvest(\n      context,\n      position.owner,\n      IERC721Upgradeable(position.assetAddress),\n      erc721Datas[positionId].assetTokenId\n    );\n\n    emit CapitalERC721Harvest({positionId: positionId, assetAddress: position.assetAddress});\n\n    _kick(positionId);\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function assetAddressOf(uint256 positionId) public view returns (address) {\n    return positions[positionId].assetAddress;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function ownerOf(uint256 positionId) public view returns (address) {\n    return positions[positionId].owner;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function totalsOf(\n    address addr\n  ) external view returns (uint256 eligibleAmount, uint256 totalAmount) {\n    return totals[addr].getTotals();\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function totalSupply() public view returns (uint256) {\n    return positionCounter;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function balanceOf(address addr) external view returns (uint256) {\n    return owners[addr].length;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256) {\n    if (index >= owners[owner].length) revert InvalidOwnerIndex();\n\n    return owners[owner][index];\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function tokenByIndex(uint256 index) external view returns (uint256) {\n    if (index >= totalSupply()) revert IndexGreaterThanTokenSupply();\n\n    return index + 1;\n  }\n\n  /// @inheritdoc IERC721ReceiverUpgradeable\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure returns (bytes4) {\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _mintPosition(\n    address owner,\n    address assetAddress,\n    uint256 usdcEquivalent\n  ) private returns (uint256 positionId) {\n    positionCounter++;\n\n    positionId = positionCounter;\n    positions[positionId] = Position({\n      owner: owner,\n      ownedIndex: owners[owner].length,\n      assetAddress: assetAddress,\n      usdcEquivalent: usdcEquivalent,\n      depositTimestamp: block.timestamp\n    });\n\n    owners[owner].push(positionId);\n  }\n\n  /**\n   * @notice Update the USDC equivalent value of the position, based on the current,\n   *  point-in-time valuation of the underlying asset.\n   * @param positionId id of the position\n   */\n  function _kick(uint256 positionId) internal {\n    Position memory position = positions[positionId];\n    CapitalAssetType assetType = CapitalAssets.getSupportedType(context, position.assetAddress);\n\n    if (assetType != CapitalAssetType.ERC721) revert InvalidAssetType(assetType);\n\n    // Remove the original USDC equivalent value from the owner's total\n    totals[position.owner].recordDecrease(position.usdcEquivalent, position.depositTimestamp);\n\n    uint256 usdcEquivalent = CapitalAssets.getUsdcEquivalent(\n      context,\n      IERC721Upgradeable(position.assetAddress),\n      erc721Datas[positionId].assetTokenId\n    );\n\n    //  Set the new value & add the new USDC equivalent value back to the owner's total\n    positions[positionId].usdcEquivalent = usdcEquivalent;\n    totals[position.owner].recordInstantIncrease(usdcEquivalent, position.depositTimestamp);\n\n    emit CapitalPositionAdjustment({\n      positionId: positionId,\n      assetAddress: position.assetAddress,\n      usdcEquivalent: usdcEquivalent\n    });\n  }\n}\n"
    },
    "contracts/protocol/core/membership/Epochs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary Epochs {\n  uint256 internal constant EPOCH_SECONDS = 7 days;\n\n  /**\n   * @notice Get the epoch containing the timestamp `s`\n   * @param s the timestamp\n   * @return corresponding epoch\n   */\n  function fromSeconds(uint256 s) internal pure returns (uint256) {\n    return s / EPOCH_SECONDS;\n  }\n\n  /**\n   * @notice Get the current epoch for the block.timestamp\n   * @return current epoch\n   */\n  function current() internal view returns (uint256) {\n    return fromSeconds(block.timestamp);\n  }\n\n  /**\n   * @notice Get the start timestamp for the current epoch\n   * @return current epoch start timestamp\n   */\n  function currentEpochStartTimestamp() internal view returns (uint256) {\n    return startOf(current());\n  }\n\n  /**\n   * @notice Get the previous epoch given block.timestamp\n   * @return previous epoch\n   */\n  function previous() internal view returns (uint256) {\n    return current() - 1;\n  }\n\n  /**\n   * @notice Get the next epoch given block.timestamp\n   * @return next epoch\n   */\n  function next() internal view returns (uint256) {\n    return current() + 1;\n  }\n\n  /**\n   * @notice Get the Unix timestamp of the start of `epoch`\n   * @param epoch the epoch\n   * @return unix timestamp\n   */\n  function startOf(uint256 epoch) internal pure returns (uint256) {\n    return epoch * EPOCH_SECONDS;\n  }\n}\n"
    },
    "contracts/protocol/core/membership/FixedMath0x.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable max-line-length\n\npragma solidity ^0.8.16;\n\n// Below is code from 0x's LibFixedMath.sol. Changes:\n// - addition of 0.8-style errors\n// - removal of unused functions\n// - added comments for clarity\n// https://github.com/0xProject/exchange-v3/blob/aae46bef841bfd1cc31028f41793db4fe7197084/contracts/staking/contracts/src/libs/LibFixedMath.sol\n\n/*\n\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\nlibrary FixedMath0x {\n  /// Thrown when the natural log function is given too large of an argument\n  error LnTooLarge(int256 x);\n  /// Thrown when the natural log would have returned a number outside of ℝ\n  error LnNonRealResult(int256 x);\n  /// Thrown when exp is given too large of an argument\n  error ExpTooLarge(int256 x);\n  /// Thrown when an unsigned value is too large to be converted to a signed value\n  error UnsignedValueTooLarge(uint256 x);\n\n  // Base for the fixed point numbers (this is our 1)\n  int256 internal constant FIXED_1 =\n    int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n  // Maximum ln argument (1)\n  int256 private constant LN_MAX_VAL = FIXED_1;\n  // Minimum ln argument. Notice this is related to EXP_MIN_VAL (e ^ -63.875)\n  int256 private constant LN_MIN_VAL =\n    int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n  // Maximum exp argument (0)\n  int256 private constant EXP_MAX_VAL = 0;\n  // Minimum exp argument. Notice this is related to LN_MIN_VAL (-63.875)\n  int256 private constant EXP_MIN_VAL =\n    -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n  /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n  function ln(int256 x) internal pure returns (int256 r) {\n    if (x > LN_MAX_VAL) {\n      revert LnTooLarge(x);\n    }\n    if (x <= 0) {\n      revert LnNonRealResult(x);\n    }\n    if (x == FIXED_1) {\n      return 0;\n    }\n    if (x <= LN_MIN_VAL) {\n      return EXP_MIN_VAL;\n    }\n\n    int256 y;\n    int256 z;\n    int256 w;\n\n    // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n    // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n    //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n    // e ^ -32\n    if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n      r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n      x =\n        (x * FIXED_1) /\n        int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n    }\n    // e ^ -16\n    if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n      r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n      x =\n        (x * FIXED_1) /\n        int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n    }\n    // e ^ -8\n    if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n      x =\n        (x * FIXED_1) /\n        int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n    }\n    // e ^ -4\n    if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n      x =\n        (x * FIXED_1) /\n        int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n    }\n    // e ^ -2\n    if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n      x =\n        (x * FIXED_1) /\n        int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n    }\n    // e ^ -1\n    if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n      x =\n        (x * FIXED_1) /\n        int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n    }\n    // e ^ -0.5\n    if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n      x =\n        (x * FIXED_1) /\n        int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n    }\n    // e ^ -0.25\n    if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n      x =\n        (x * FIXED_1) /\n        int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n    }\n    // e ^ -0.125\n    if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n      r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n      x =\n        (x * FIXED_1) /\n        int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n    }\n    // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n    // Add the taylor series for log(1 + z), where z = x - 1\n    z = y = x - FIXED_1;\n    w = (y * y) / FIXED_1;\n    r += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^01 / 01 - y^02 / 02\n    r += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^03 / 03 - y^04 / 04\n    r += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^05 / 05 - y^06 / 06\n    r += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^07 / 07 - y^08 / 08\n    r += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^09 / 09 - y^10 / 10\n    r += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^11 / 11 - y^12 / 12\n    r += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^13 / 13 - y^14 / 14\n    r += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000; // add y^15 / 15 - y^16 / 16\n  }\n\n  /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n  function exp(int256 x) internal pure returns (int256 r) {\n    if (x < EXP_MIN_VAL) {\n      // Saturate to zero below EXP_MIN_VAL.\n      return 0;\n    }\n    if (x == 0) {\n      return FIXED_1;\n    }\n    if (x > EXP_MAX_VAL) {\n      revert ExpTooLarge(x);\n    }\n\n    // Rewrite the input as a product of natural exponents and a\n    // single residual q, where q is a number of small magnitude.\n    // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n    //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n    //              -> q = -0.044\n\n    // Multiply with the taylor series for e^q\n    int256 y;\n    int256 z;\n    // q = x % 0.125 (the residual)\n    z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n    z = (z * y) / FIXED_1;\n    r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n    r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n    // Multiply with the non-residual terms.\n    x = -x;\n    // e ^ -32\n    if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)) /\n        int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n    }\n    // e ^ -16\n    if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)) /\n        int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n    }\n    // e ^ -8\n    if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)) /\n        int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n    }\n    // e ^ -4\n    if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)) /\n        int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n    }\n    // e ^ -2\n    if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)) /\n        int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n    }\n    // e ^ -1\n    if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)) /\n        int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n    }\n    // e ^ -0.5\n    if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)) /\n        int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n    }\n    // e ^ -0.25\n    if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) /\n        int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n    }\n    // e ^ -0.125\n    if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)) /\n        int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n    }\n  }\n}\n"
    },
    "contracts/protocol/core/membership/MembershipDirector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {Base} from \"../../../cake/Base.sol\";\nimport {Context} from \"../../../cake/Context.sol\";\nimport \"../../../cake/Routing.sol\" as Routing;\n\nimport \"../../../interfaces/IMembershipDirector.sol\";\nimport {IMembershipVault, Position} from \"../../../interfaces/IMembershipVault.sol\";\n\nimport {MembershipScores} from \"./MembershipScores.sol\";\nimport {CapitalAssets} from \"./assets/CapitalAssets.sol\";\nimport {Epochs} from \"./Epochs.sol\";\n\nusing Routing.Context for Context;\n\ncontract MembershipDirector is IMembershipDirector, Base, Initializable {\n  error InvalidVaultPosition();\n  error InvalidPositionType();\n\n  /// @notice Emitted when `owner` claims fidu `rewards`\n  /// @param owner the owner claiming rewards\n  /// @param rewards amount of fidu claimed\n  event RewardsClaimed(address indexed owner, uint256 rewards);\n\n  constructor(Context _context) Base(_context) {}\n\n  /// @inheritdoc IMembershipDirector\n  function consumeHoldingsAdjustment(\n    address owner\n  ) external onlyOperator(Routing.Keys.MembershipOrchestrator) returns (uint256) {\n    _allocateRewards(owner);\n\n    (uint256 eligibleGFI, uint256 totalGFI) = context.gfiLedger().totalsOf(owner);\n    (uint256 eligibleCapital, uint256 totalCapital) = context.capitalLedger().totalsOf(owner);\n\n    return\n      context.membershipVault().adjustHoldings({\n        owner: owner,\n        eligibleAmount: calculateMembershipScore({gfi: eligibleGFI, capital: eligibleCapital}),\n        nextEpochAmount: calculateMembershipScore({gfi: totalGFI, capital: totalCapital})\n      });\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function collectRewards(\n    address owner\n  ) external onlyOperator(Routing.Keys.MembershipOrchestrator) returns (uint256 rewards) {\n    rewards = _allocateRewards(owner);\n\n    context.membershipLedger().resetRewards(owner);\n\n    context.membershipCollector().distributeFiduTo(owner, rewards);\n\n    emit RewardsClaimed(owner, rewards);\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function claimableRewards(address owner) external view returns (uint256) {\n    uint256 allocatedRewards = context.membershipLedger().getPendingRewardsFor(owner);\n\n    Position memory position = context.membershipVault().positionOwnedBy(owner);\n    uint256 rewardsToLastFinalizedEpoch = _calculateRewards(\n      position.checkpointEpoch,\n      position.eligibleAmount,\n      position.nextEpochAmount\n    );\n\n    /// @dev if an epoch has passed, but is not finalized, those rewards are not counted\n    ///  although they would be claimed if collectRewards were called.\n\n    return allocatedRewards + rewardsToLastFinalizedEpoch;\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function currentScore(\n    address owner\n  ) external view returns (uint256 eligibleScore, uint256 totalScore) {\n    Position memory position = context.membershipVault().positionOwnedBy(owner);\n    return (position.eligibleAmount, position.nextEpochAmount);\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function calculateMembershipScore(uint256 gfi, uint256 capital) public view returns (uint256) {\n    (uint256 alphaNumerator, uint256 alphaDenominator) = context.membershipLedger().alpha();\n\n    return\n      MembershipScores.calculateScore({\n        gfi: gfi,\n        capital: capital,\n        alphaNumerator: alphaNumerator,\n        alphaDenominator: alphaDenominator\n      });\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function totalMemberScores()\n    external\n    view\n    returns (uint256 eligibleTotal, uint256 nextEpochTotal)\n  {\n    return (\n      context.membershipVault().totalAtEpoch(Epochs.current()),\n      context.membershipVault().totalAtEpoch(Epochs.next())\n    );\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function estimateMemberScore(\n    address memberAddress,\n    int256 gfi,\n    int256 capital\n  ) external view returns (uint256 score) {\n    (uint256 alphaNumerator, uint256 alphaDenominator) = context.membershipLedger().alpha();\n\n    (, uint256 totalGFI) = context.gfiLedger().totalsOf(memberAddress);\n    (, uint256 totalCapital) = context.capitalLedger().totalsOf(memberAddress);\n\n    uint256 resultingGFI = totalGFI;\n    if (gfi < 0) resultingGFI -= uint256(-gfi);\n    else resultingGFI += uint256(gfi);\n\n    uint256 resultingCapital = totalCapital;\n    if (capital < 0) resultingCapital -= uint256(-capital);\n    else resultingCapital += uint256(capital);\n\n    return\n      MembershipScores.calculateScore({\n        gfi: resultingGFI,\n        capital: resultingCapital,\n        alphaNumerator: alphaNumerator,\n        alphaDenominator: alphaDenominator\n      });\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function finalizeEpochs() external onlyOperator(Routing.Keys.MembershipOrchestrator) {\n    context.membershipCollector().finalizeEpochs();\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _allocateRewards(address owner) private returns (uint256) {\n    if (context.membershipCollector().lastFinalizedEpoch() < Epochs.current() - 1) {\n      // Guarantee that lastFinalizedEpoch is always up to date when distributing rewards\n      // Without this, we will never distribute rewards for an epoch that has already\n      // passed but is not finalized: the vault's checkpoint will update to epochs.current()\n      // so we will never attempt the missing epoch again.\n\n      context.membershipCollector().finalizeEpochs();\n    }\n\n    Position memory position = context.membershipVault().positionOwnedBy(owner);\n\n    context.membershipVault().checkpoint(owner);\n\n    uint256 rewards = _calculateRewards(\n      position.checkpointEpoch,\n      position.eligibleAmount,\n      position.nextEpochAmount\n    );\n\n    return context.membershipLedger().allocateRewardsTo(owner, rewards);\n  }\n\n  function _calculateRewards(\n    uint256 startEpoch,\n    uint256 eligibleMemberScore,\n    uint256 nextEpochMemberScore\n  ) private view returns (uint256 rewards) {\n    if (eligibleMemberScore > 0) {\n      if (startEpoch < Epochs.current()) {\n        rewards += _shareOfEpochRewards(startEpoch, eligibleMemberScore);\n      }\n    }\n\n    if (nextEpochMemberScore > 0) {\n      for (uint256 epoch = startEpoch + 1; epoch < Epochs.current(); epoch++) {\n        rewards += _shareOfEpochRewards(epoch, nextEpochMemberScore);\n      }\n    }\n  }\n\n  function _shareOfEpochRewards(uint256 epoch, uint256 memberScore) private view returns (uint256) {\n    uint256 totalMemberScoresForEpoch = context.membershipVault().totalAtEpoch(epoch);\n    uint256 rewardTotal = context.membershipCollector().rewardsForEpoch(epoch);\n\n    if (memberScore > totalMemberScoresForEpoch) revert InvalidVaultPosition();\n    if (totalMemberScoresForEpoch == 0) return 0;\n\n    return (memberScore * rewardTotal) / totalMemberScoresForEpoch;\n  }\n}\n"
    },
    "contracts/protocol/core/membership/MembershipFixedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable var-name-mixedcase\n\npragma solidity ^0.8.16;\n\nimport {SafeCastUpgradeable as SafeCast} from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\n\nimport {FixedMath0x} from \"./FixedMath0x.sol\";\n\nusing SafeCast for uint256;\n\nlibrary MembershipFixedMath {\n  error InvalidFraction(uint256 n, uint256 d);\n\n  /**\n   * @notice Convert some uint256 fraction `n` numerator / `d` denominator to a fixed-point number `f`.\n   * @param n numerator\n   * @param d denominator\n   * @return fixed-point number\n   */\n  function toFixed(uint256 n, uint256 d) internal pure returns (int256) {\n    if (d.toInt256() < n.toInt256()) revert InvalidFraction(n, d);\n\n    return (n.toInt256() * FixedMath0x.FIXED_1) / int256(d.toInt256());\n  }\n\n  /**\n   * @notice Divide some unsigned int `u` by a fixed point number `f`\n   * @param u unsigned dividend\n   * @param f fixed point divisor, in FIXED_1 units\n   * @return unsigned int quotient\n   */\n  function uintDiv(uint256 u, int256 f) internal pure returns (uint256) {\n    // multiply `u` by FIXED_1 to cancel out the built-in FIXED_1 in f\n    return uint256((u.toInt256() * FixedMath0x.FIXED_1) / f);\n  }\n\n  /**\n   * @notice Multiply some unsigned int `u` by a fixed point number `f`\n   * @param u unsigned multiplicand\n   * @param f fixed point multiplier, in FIXED_1 units\n   * @return unsigned int product\n   */\n  function uintMul(uint256 u, int256 f) internal pure returns (uint256) {\n    // divide the product by FIXED_1 to cancel out the built-in FIXED_1 in f\n    return uint256((u.toInt256() * f) / FixedMath0x.FIXED_1);\n  }\n\n  /// @notice see FixedMath0x\n  function ln(int256 x) internal pure returns (int256 r) {\n    return FixedMath0x.ln(x);\n  }\n\n  /// @notice see FixedMath0x\n  function exp(int256 x) internal pure returns (int256 r) {\n    return FixedMath0x.exp(x);\n  }\n}\n"
    },
    "contracts/protocol/core/membership/MembershipScores.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {SafeCastUpgradeable as SafeCast} from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport \"./MembershipFixedMath.sol\";\n\nusing SafeCast for uint256;\n\nlibrary MembershipScores {\n  uint256 internal constant GFI_MANTISSA = 1e18;\n  uint256 internal constant USDC_MANTISSA = 1e6;\n  uint256 internal constant USDC_TO_GFI_MANTISSA = GFI_MANTISSA / USDC_MANTISSA;\n\n  /**\n   * @notice Calculate a membership score given some amount of `gfi` and `capital`, along\n   *  with some 𝝰 = `alphaNumerator` / `alphaDenominator`.\n   * @param gfi amount of gfi (GFI, 1e18 decimal places)\n   * @param capital amount of capital (USDC, 1e6 decimal places)\n   * @param alphaNumerator alpha param numerator\n   * @param alphaDenominator alpha param denominator\n   * @return membership score with 1e18 decimal places\n   *\n   * @dev 𝝰 must be in the range [0, 1]\n   */\n  function calculateScore(\n    uint256 gfi,\n    uint256 capital,\n    uint256 alphaNumerator,\n    uint256 alphaDenominator\n  ) internal pure returns (uint256) {\n    // Convert capital to the same base units as GFI\n    capital = capital * USDC_TO_GFI_MANTISSA;\n\n    // Score function is:\n    // gfi^𝝰 * capital^(1-𝝰)\n    //    = capital * capital^(-𝝰) * gfi^𝝰\n    //    = capital * (gfi / capital)^𝝰\n    //    = capital * (e ^ (ln(gfi / capital))) ^ 𝝰\n    //    = capital * e ^ (𝝰 * ln(gfi / capital))     (1)\n    // or\n    //    = capital / ( 1 / e ^ (𝝰 * ln(gfi / capital)))\n    //    = capital / (e ^ (𝝰 * ln(gfi / capital)) ^ -1)\n    //    = capital / e ^ (𝝰 * -1 * ln(gfi / capital))\n    //    = capital / e ^ (𝝰 * ln(capital / gfi))     (2)\n    //\n    // To avoid overflows, use (1) when gfi < capital and\n    // use (2) when capital < gfi\n\n    assert(alphaNumerator <= alphaDenominator);\n\n    // If any side is 0, exit early\n    if (gfi == 0 || capital == 0) return 0;\n\n    // If both sides are equal, we have:\n    // gfi^𝝰 * capital^(1-𝝰)\n    //    = gfi^𝝰 * gfi^(1-𝝰)\n    //    = gfi^(𝝰 + 1 - 𝝰)     = gfi\n    if (gfi == capital) return gfi;\n\n    bool lessGFIThanCapital = gfi < capital;\n\n    // (gfi / capital) or (capital / gfi), always in range (0, 1)\n    int256 ratio = lessGFIThanCapital\n      ? MembershipFixedMath.toFixed(gfi, capital)\n      : MembershipFixedMath.toFixed(capital, gfi);\n\n    // e ^ ( ln(ratio) * 𝝰 )\n    int256 exponentiation = MembershipFixedMath.exp(\n      (MembershipFixedMath.ln(ratio) * alphaNumerator.toInt256()) / alphaDenominator.toInt256()\n    );\n\n    if (lessGFIThanCapital) {\n      // capital * e ^ (𝝰 * ln(gfi / capital))\n      return MembershipFixedMath.uintMul(capital, exponentiation);\n    }\n\n    // capital / e ^ (𝝰 * ln(capital / gfi))\n    return MembershipFixedMath.uintDiv(capital, exponentiation);\n  }\n}\n"
    },
    "contracts/protocol/core/membership/UserEpochTotals.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Epochs} from \"./Epochs.sol\";\n\n/// @dev Epoch Awareness\n/// The Membership system relies on an epoch structure to incentivize economic behavior. Deposits\n/// are tracked by epoch and only count toward yield enhancements if they have been present for\n/// an entire epoch. This means positions have a specific lifetime:\n/// 1. Deposit Epoch - Positions are in the membership system but do not count for rewards as they\n///      were not in since the beginning of the epoch. Deposits are externally triggered.\n/// 2. Eligible Epoch - Positions are in the membership system and count for rewards as they have been\n///      present the entire epoch.\n/// 3. Withdrawal Epoch - Positions are no longer in the membership system and forfeit their rewards\n///      for the withdrawal epoch. Rewards are forfeited as the position was not present for the\n///      entire epoch when withdrawn. Withdrawals are externally triggered.\n///\n/// All of these deposits' value is summed together to calculate the yield enhancement. A naive\n/// approach is, for every summation query, iterate over all deposits and check if they were deposited\n/// in the current epoch (so case (1)) or in a previous epoch (so case (2)). This has a high gas\n/// cost, so we use another approach: UserEpochTotal.\n///\n/// UserEpochTotal is the total of the user's deposits as of its lastEpochUpdate- the last epoch that\n/// the total was updated in. For that epoch, it tracks:\n/// 1. Eligible Amount - The sum of deposits that are in their Eligible Epoch for the current epoch\n/// 2. Total Amount - The sum of deposits that will be in their Eligible Epoch for the next epoch\n///\n/// It is not necessary to track previous epochs as deposits in those will already be eligible, or they\n/// will have been withdrawn and already affected the eligible amount.\n///\n/// It is also unnecessary to track future epochs beyond the next one. Any deposit in the current epoch\n/// will become eligible in the next epoch. It is not possible to have a deposit (or withdrawal) take\n/// effect any further in the future.\n\nstruct UserEpochTotal {\n  /// Total amount that will be eligible for membership, after `checkpointedAt` epoch\n  uint256 totalAmount;\n  /// Amount eligible for membership, as of `checkpointedAt` epoch\n  uint256 eligibleAmount;\n  /// Last epoch the total was checkpointed at\n  uint256 checkpointedAt;\n}\n\nlibrary UserEpochTotals {\n  error InvalidDepositEpoch(uint256 epoch);\n\n  /// @notice Record an increase of `amount` in the `total`. This is counted toward the\n  ///  nextAmount as deposits must be present for an entire epoch to be valid.\n  /// @param total storage pointer to the UserEpochTotal\n  /// @param amount amount to increase the total by\n  function recordIncrease(UserEpochTotal storage total, uint256 amount) internal {\n    _checkpoint(total);\n\n    total.totalAmount += amount;\n  }\n\n  /// @notice Record an increase of `amount` instantly based on the time of the deposit.\n  ///  This is counted either:\n  ///  1. To just the totalAmount if the deposit was this epoch\n  ///  2. To both the totalAmount and eligibleAmount if the deposit was before this epoch\n  /// @param total storage pointer to the UserEpochTotal\n  /// @param amount amount to increase the total by\n  function recordInstantIncrease(\n    UserEpochTotal storage total,\n    uint256 amount,\n    uint256 depositTimestamp\n  ) internal {\n    uint256 depositEpoch = Epochs.fromSeconds(depositTimestamp);\n    if (depositEpoch > Epochs.current()) revert InvalidDepositEpoch(depositEpoch);\n\n    _checkpoint(total);\n\n    if (depositEpoch < Epochs.current()) {\n      // If this was deposited earlier, then it also counts towards eligible\n      total.eligibleAmount += amount;\n    }\n\n    total.totalAmount += amount;\n  }\n\n  /// @notice Record a decrease of `amount` in the `total`. Depending on the `depositTimestamp`\n  ///  this will withdraw from the total's currentAmount (if it's withdrawn from an already valid deposit)\n  ///  or from the total's nextAmount (if it's withdrawn from a deposit this epoch).\n  /// @param total storage pointer to the UserEpochTotal\n  /// @param amount amount to decrease the total by\n  /// @param depositTimestamp timestamp of the deposit associated with `amount`\n  function recordDecrease(\n    UserEpochTotal storage total,\n    uint256 amount,\n    uint256 depositTimestamp\n  ) internal {\n    uint256 depositEpoch = Epochs.fromSeconds(depositTimestamp);\n    if (depositEpoch > Epochs.current()) revert InvalidDepositEpoch(depositEpoch);\n\n    _checkpoint(total);\n\n    total.totalAmount -= amount;\n\n    if (depositEpoch < Epochs.current()) {\n      // If this was deposited earlier, then it would have been promoted in _checkpoint and must be removed.\n      total.eligibleAmount -= amount;\n    }\n  }\n\n  /// @notice Get the up-to-date current and next amount for the `_total`. UserEpochTotals\n  ///  may have a lastEpochUpdate of long ago. This returns the current and next amounts as if it had\n  ///  been checkpointed just now.\n  /// @param _total storage pointer to the UserEpochTotal\n  /// @return current the currentAmount of the UserEpochTotal\n  /// @return next the nextAmount of the UserEpochTotal\n  function getTotals(\n    UserEpochTotal storage _total\n  ) internal view returns (uint256 current, uint256 next) {\n    UserEpochTotal memory total = _total;\n    if (Epochs.current() == total.checkpointedAt) {\n      return (total.eligibleAmount, total.totalAmount);\n    }\n\n    return (total.totalAmount, total.totalAmount);\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _checkpoint(UserEpochTotal storage total) private {\n    // Only promote the total amount if we've moved to the next epoch\n    // after the last checkpoint.\n    if (Epochs.current() <= total.checkpointedAt) return;\n\n    total.eligibleAmount = total.totalAmount;\n\n    total.checkpointedAt = Epochs.current();\n  }\n}\n"
    },
    "contracts/protocol/core/MembershipOrchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n// solhint-disable-next-line max-line-length\nimport {SafeERC20Upgradeable as SafeERC20} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721ReceiverUpgradeable.sol\";\n\nimport {Base} from \"../../cake/Base.sol\";\nimport {PausableUpgradeable} from \"../../cake/Pausable.sol\";\nimport {Context} from \"../../cake/Context.sol\";\nimport \"../../cake/Routing.sol\" as Routing;\n\nimport {IMembershipDirector} from \"../../interfaces/IMembershipDirector.sol\";\nimport \"../../interfaces/IMembershipOrchestrator.sol\";\nimport {CapitalAssetType} from \"../../interfaces/ICapitalLedger.sol\";\n\nimport {Epochs} from \"./membership/Epochs.sol\";\nimport {MembershipScores} from \"./membership/MembershipScores.sol\";\nimport {CapitalAssets} from \"./membership/assets/CapitalAssets.sol\";\n\nusing Routing.Context for Context;\nusing SafeERC20 for IERC20Upgradeable;\n\n/**\n * @title MembershipOrchestrator\n * @notice Externally facing gateway to all Goldfinch membership functionality.\n * @author Goldfinch\n */\ncontract MembershipOrchestrator is\n  IMembershipOrchestrator,\n  Base,\n  Initializable,\n  ReentrancyGuardUpgradeable,\n  PausableUpgradeable,\n  IERC721ReceiverUpgradeable\n{\n  /// Thrown when anything is called with an unsupported asset\n  error UnsupportedAssetAddress(address addr);\n  /// Thrown when calling a method with invalid input\n  error RequiresValidInput();\n  /// Thrown when operating on an unowned asset\n  error CannotOperateOnUnownedAsset(address nonOwner);\n\n  constructor(Context _context) Base(_context) {}\n\n  /// @notice Initialize the contract\n  function initialize() external initializer {\n    __ReentrancyGuard_init_unchained();\n    __Pausable_init_unchained();\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function deposit(\n    Deposit calldata depositData\n  ) external nonReentrant whenNotPaused returns (DepositResult memory result) {\n    if (depositData.gfi > 0) {\n      result.gfiPositionId = _depositGFI(depositData.gfi);\n    }\n\n    uint256 numCapitalDeposits = depositData.capitalDeposits.length;\n\n    result.capitalPositionIds = new uint256[](numCapitalDeposits);\n    for (uint256 i = 0; i < numCapitalDeposits; i++) {\n      CapitalDeposit memory capitalDeposit = depositData.capitalDeposits[i];\n      result.capitalPositionIds[i] = _depositCapitalERC721(\n        capitalDeposit.assetAddress,\n        capitalDeposit.id\n      );\n    }\n\n    result.membershipId = context.membershipDirector().consumeHoldingsAdjustment(msg.sender);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function withdraw(Withdrawal calldata withdrawal) external nonReentrant whenNotPaused {\n    // Find the owner that is being withdrawn for. The owner must be the same across all of the\n    // positions so the membership vault can be updated.\n    address owner = address(0);\n    if (withdrawal.gfiPositions.length > 0) {\n      owner = context.gfiLedger().ownerOf(withdrawal.gfiPositions[0].id);\n    } else if (withdrawal.capitalPositions.length > 0) {\n      owner = context.capitalLedger().ownerOf(withdrawal.capitalPositions[0]);\n    }\n\n    if (owner == address(0)) revert RequiresValidInput();\n\n    for (uint256 i = 0; i < withdrawal.gfiPositions.length; i++) {\n      uint256 positionId = withdrawal.gfiPositions[i].id;\n      address positionOwner = context.gfiLedger().ownerOf(positionId);\n\n      if (positionOwner == address(0)) revert CannotOperateOnUnownedAsset(address(0));\n      if (positionOwner != owner) revert CannotOperateOnUnownedAsset(positionOwner);\n\n      _withdrawGFI(positionId, withdrawal.gfiPositions[i].amount);\n    }\n\n    for (uint256 i = 0; i < withdrawal.capitalPositions.length; i++) {\n      uint256 positionId = withdrawal.capitalPositions[i];\n      address positionOwner = context.capitalLedger().ownerOf(positionId);\n\n      if (positionOwner == address(0)) revert CannotOperateOnUnownedAsset(address(0));\n      if (positionOwner != owner) revert CannotOperateOnUnownedAsset(positionOwner);\n\n      _withdrawCapital(positionId);\n    }\n\n    context.membershipDirector().consumeHoldingsAdjustment(owner);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function collectRewards() external nonReentrant whenNotPaused returns (uint256) {\n    return context.membershipDirector().collectRewards(msg.sender);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function harvest(uint256[] calldata capitalPositionIds) external nonReentrant whenNotPaused {\n    if (capitalPositionIds.length == 0) revert RequiresValidInput();\n\n    for (uint256 i = 0; i < capitalPositionIds.length; i++) {\n      uint256 capitalPositionId = capitalPositionIds[i];\n\n      address owner = context.capitalLedger().ownerOf(capitalPositionId);\n      if (owner != msg.sender) revert CannotOperateOnUnownedAsset(msg.sender);\n\n      context.capitalLedger().harvest(capitalPositionId);\n    }\n\n    // Consume adjustment to account for possible token principal changes\n    // Checkpoints the user's rewards as they may get a new score from the changes\n    address owner = context.capitalLedger().ownerOf(capitalPositionIds[0]);\n    context.membershipDirector().consumeHoldingsAdjustment(owner);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function claimableRewards(address addr) external view returns (uint256) {\n    return context.membershipDirector().claimableRewards(addr);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function votingPower(address addr) external view returns (uint256) {\n    (, uint256 total) = context.gfiLedger().totalsOf(addr);\n    return total;\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function totalGFIHeldBy(\n    address addr\n  ) external view returns (uint256 eligibleAmount, uint256 totalAmount) {\n    return context.gfiLedger().totalsOf(addr);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function totalCapitalHeldBy(\n    address addr\n  ) external view returns (uint256 eligibleAmount, uint256 totalAmount) {\n    return context.capitalLedger().totalsOf(addr);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function memberScoreOf(\n    address addr\n  ) external view returns (uint256 eligibleScore, uint256 totalScore) {\n    return context.membershipDirector().currentScore(addr);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function estimateRewardsFor(uint256 epoch) external view returns (uint256) {\n    return context.membershipCollector().estimateRewardsFor(epoch);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function calculateMemberScore(uint256 gfi, uint256 capital) external view returns (uint256) {\n    return context.membershipDirector().calculateMembershipScore(gfi, capital);\n  }\n\n  function finalizeEpochs() external nonReentrant whenNotPaused {\n    return context.membershipDirector().finalizeEpochs();\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function estimateMemberScore(\n    address memberAddress,\n    int256 gfi,\n    int256 capital\n  ) external view returns (uint256 score) {\n    return context.membershipDirector().estimateMemberScore(memberAddress, gfi, capital);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function totalMemberScores()\n    external\n    view\n    returns (uint256 eligibleTotal, uint256 nextEpochTotal)\n  {\n    return context.membershipDirector().totalMemberScores();\n  }\n\n  /// @inheritdoc IERC721ReceiverUpgradeable\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure returns (bytes4) {\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _depositGFI(uint256 amount) private returns (uint256) {\n    uint256 balanceBefore = context.gfi().balanceOf(address(this));\n\n    context.gfi().safeTransferFrom(msg.sender, address(this), amount);\n\n    context.gfi().approve(address(context.gfiLedger()), amount);\n    uint256 positionId = context.gfiLedger().deposit(msg.sender, amount);\n\n    assert(context.gfi().balanceOf(address(this)) == balanceBefore);\n\n    return positionId;\n  }\n\n  function _depositCapitalERC721(address assetAddress, uint256 id) private returns (uint256) {\n    if (CapitalAssets.getSupportedType(context, assetAddress) == CapitalAssetType.INVALID) {\n      revert UnsupportedAssetAddress(assetAddress);\n    }\n\n    IERC721Upgradeable asset = IERC721Upgradeable(assetAddress);\n\n    asset.safeTransferFrom(msg.sender, address(this), id);\n\n    asset.approve(address(context.capitalLedger()), id);\n    uint256 positionId = context.capitalLedger().depositERC721(msg.sender, assetAddress, id);\n\n    assert(asset.ownerOf(id) != address(this));\n\n    return positionId;\n  }\n\n  function _withdrawGFI(uint256 positionId) private returns (uint256) {\n    if (context.gfiLedger().ownerOf(positionId) != msg.sender) {\n      revert CannotOperateOnUnownedAsset(msg.sender);\n    }\n\n    return context.gfiLedger().withdraw(positionId);\n  }\n\n  function _withdrawGFI(uint256 positionId, uint256 amount) private returns (uint256) {\n    if (context.gfiLedger().ownerOf(positionId) != msg.sender) {\n      revert CannotOperateOnUnownedAsset(msg.sender);\n    }\n\n    return context.gfiLedger().withdraw(positionId, amount);\n  }\n\n  function _withdrawCapital(uint256 positionId) private {\n    if (context.capitalLedger().ownerOf(positionId) != msg.sender) {\n      revert CannotOperateOnUnownedAsset(msg.sender);\n    }\n\n    context.capitalLedger().withdraw(positionId);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}