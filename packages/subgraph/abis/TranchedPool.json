{
  "address": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ICreditLine",
          "name": "oldCreditLine",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ICreditLine",
          "name": "newCreditLine",
          "type": "address"
        }
      ],
      "name": "CreditLineMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DrawdownMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "EmergencyShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        }
      ],
      "name": "PaymentApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveFundsCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "principalDelta",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "interestDelta",
          "type": "int256"
        }
      ],
      "name": "SharePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sliceId",
          "type": "uint256"
        }
      ],
      "name": "SliceCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "TrancheLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "TranchedPoolAssessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_TRANCHES_PER_SLICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SENIOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedUIDTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "availableToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditLine",
      "outputs": [
        {
          "internalType": "contract ICreditLine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawdownsPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyShutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundableAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedUIDTypes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getAmountsOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAccrued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalOwed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        }
      ],
      "name": "getTranche",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITranchedPool.TrancheInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint8[3]",
          "name": "version",
          "type": "uint8[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "hasAllowedUID",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_juniorFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "contract ISchedule",
          "name": "_schedule",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundableAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_allowedUIDTypes",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundableAt",
          "type": "uint256"
        }
      ],
      "name": "initializeNextSlice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juniorFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockJuniorCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSlices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "owedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "additionalBalancePayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRemaining",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILoan.PaymentAllocation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "owedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "additionalBalancePayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRemaining",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILoan.PaymentAllocation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "poolSlices",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principalDeposited",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principalSharePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interestSharePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ITranchedPool.TrancheInfo",
              "name": "seniorTranche",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principalDeposited",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principalSharePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "interestSharePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ITranchedPool.TrancheInfo",
              "name": "juniorTranche",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "totalInterestAccrued",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDeployed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITranchedPool.PoolSlice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "setAllowedUIDTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFundableAt",
          "type": "uint256"
        }
      ],
      "name": "setFundableAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalJuniorDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x509c77a7e3bd02d7b98fa9411488fbf22a2131f4ce76ee30208c93b39b63f534",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
    "transactionIndex": 0,
    "gasUsed": "4987186",
    "logsBloom": "0x
    "blockHash": "0x3b1cc6b4643f298c953685e02d33dc64473abe5f2347076add0d47bfa2a19921",
    "transactionHash": "0x509c77a7e3bd02d7b98fa9411488fbf22a2131f4ce76ee30208c93b39b63f534",
    "logs": [],
    "blockNumber": 30,
    "cumulativeGasUsed": "4987186",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b5a512f3f5607b9a5599ca16940311f6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICreditLine\",\"name\":\"oldCreditLine\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ICreditLine\",\"name\":\"newCreditLine\",\"type\":\"address\"}],\"name\":\"CreditLineMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawdownMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"PaymentApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveFundsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"principalDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"interestDelta\",\"type\":\"int256\"}],\"name\":\"SharePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sliceId\",\"type\":\"uint256\"}],\"name\":\"SliceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"TrancheLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_TRANCHES_PER_SLICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SENIOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedUIDTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditLine\",\"outputs\":[{\"internalType\":\"contract ICreditLine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawdownsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundableAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedUIDTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getAmountsOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"getTranche\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.TrancheInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"version\",\"type\":\"uint8[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"hasAllowedUID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_juniorFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"contract ISchedule\",\"name\":\"_schedule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundableAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowedUIDTypes\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundableAt\",\"type\":\"uint256\"}],\"name\":\"initializeNextSlice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juniorFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockJuniorCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSlices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"owedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalBalancePayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRemaining\",\"type\":\"uint256\"}],\"internalType\":\"struct ILoan.PaymentAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"owedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalBalancePayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRemaining\",\"type\":\"uint256\"}],\"internalType\":\"struct ILoan.PaymentAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"poolSlices\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.TrancheInfo\",\"name\":\"seniorTranche\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.TrancheInfo\",\"name\":\"juniorTranche\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalInterestAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeployed\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.PoolSlice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"setAllowedUIDTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFundableAt\",\"type\":\"uint256\"}],\"name\":\"setFundableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJuniorDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Warbler Labs\",\"kind\":\"dev\",\"methods\":{\"availableToWithdraw(uint256)\":{\"params\":{\"tokenId\":\"position to query max amount withdrawable for\"},\"returns\":{\"_0\":\"interestRedeemable total interest withdrawable on the position\",\"_1\":\"principalRedeemable total principal redeemable on the position\"}},\"deposit(uint256,uint256)\":{\"details\":\"TL: tranche lockedIA: invalid amountNA: not authorized. Must have correct UID or be go listed\",\"params\":{\"amount\":\"amount of capital to supply\",\"tranche\":\"id of tranche to supply capital to. Id must correspond to a tranche in the current slice.\"},\"returns\":{\"_0\":\"tokenId NFT representing your position in this pool\"}},\"drawdown(uint256)\":{\"details\":\"DP: drawdowns pausedIF: insufficient funds\",\"params\":{\"amount\":\"USDC to drawdown. This amount is transferred to the caller\"}},\"getAmountsOwed(uint256)\":{\"details\":\"IT: invalid timestampLI: loan inactive\",\"params\":{\"timestamp\":\"time to calculate up to\"},\"returns\":{\"interestAccrued\":\"amount of accrued interest (not yet owed) that can be paid at `timestamp`\",\"interestOwed\":\"amount of obligated interest owed at `timestamp`\",\"principalOwed\":\"amount of principal owed at `timestamp`\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getTranche(uint256)\":{\"params\":{\"trancheId\":\"id of tranche. Valid ids are in the range [1, 2*numSlices]\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])\":{\"params\":{\"_borrower\":\"address of borrower, a non-transferrable role for performing privileged actions like   drawdown\",\"_config\":\"address of GoldfinchConfig\",\"_fundableAt\":\"earliest time at which the first slice can be funded\",\"_interestApr\":\"interest rate for the loan\",\"_juniorFeePercent\":\"percent (whole number) of senior interest that gets re-allocated to the junior tranche\",\"_lateFeeApr\":\"late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a   payment becomes late\",\"_limit\":\"the max USDC amount that can be drawn down across all pool slices\"}},\"initializeNextSlice(uint256)\":{\"details\":\"NL: not lockedLP: late paymentGP: beyond principal grace period\",\"params\":{\"_fundableAt\":\"time at which the new slice (now the current slice) becomes fundable\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay(uint256)\":{\"details\":\"ZA: zero amount\",\"params\":{\"amount\":\"USDC amount to pay\"},\"returns\":{\"_0\":\"PaymentAllocation info on how the payment was allocated\"}},\"pay(uint256,uint256)\":{\"details\":\"ZA: zero amount\",\"params\":{\"interestPayment\":\"USDC amount to pay down interest\",\"principalPayment\":\"USDC amount to pay down principal\"},\"returns\":{\"_0\":\"PaymentAllocation info on how the payment was allocated\"}},\"poolSlices(uint256)\":{\"params\":{\"index\":\"of slice. Valid indices are on the interval [0, numSlices - 1]\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"amount to withdraw (must be <= interest+principal available to withdraw)\",\"tokenId\":\"the NFT representing the position\"},\"returns\":{\"_0\":\"interestWithdrawn interest withdrawn\",\"_1\":\"principalWithdrawn principal withdrawn\"}},\"withdrawMultiple(uint256[],uint256[])\":{\"details\":\"LEN: argument length mismatch\",\"params\":{\"amounts\":\"amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]\",\"tokenIds\":\"NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array\"}}},\"stateVariables\":{\"numSlices\":{\"return\":\"numSlices total current slice count\"}},\"title\":\"The main contract to faciliate lending. Backers and the Senior Pool fund the loan   through this contract. The borrower draws down on and pays back a loan through this contract.\",\"version\":1},\"userdoc\":{\"events\":{\"PaymentApplied(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted on payment\"},\"WithdrawalMade(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"While owner is the label of the first argument, it is actually the sender of the transaction.\"}},\"kind\":\"user\",\"methods\":{\"assess()\":{\"notice\":\"Intentionable no-op. Included to be compatible with the v1 pool interface\"},\"availableToWithdraw(uint256)\":{\"notice\":\"Query the max amount available to withdraw for tokenId's position\"},\"createdAt()\":{\"notice\":\"Time when the pool was initialized. Zero if uninitialized\"},\"creditLine()\":{\"notice\":\"Pool's credit line, responsible for managing the loan's accounting variables\"},\"deposit(uint256,uint256)\":{\"notice\":\"Supply capital to this pool. Caller can't deposit to the junior tranche if the junior pool is locked.   Caller can't deposit to a senior tranche if the pool is locked. Caller can't deposit if they are missing the   required UID NFT.\"},\"drawdown(uint256)\":{\"notice\":\"Drawdown the loan. The credit line's balance should increase by the amount drawn down.   Junior capital must be locked before this function can be called. If senior capital isn't locked   then this function will lock it for you (convenience to avoid calling lockPool() separately).   This function should revert if the amount requested exceeds the the current slice's currentLimit   This function should revert if the caller is not the borrower.\"},\"emergencyShutdown()\":{\"notice\":\"Pauses the pool and sweeps any remaining funds to the treasury reserve.\"},\"getAmountsOwed(uint256)\":{\"notice\":\"Compute interest and principal owed on the current balance at a future timestamp\"},\"getTranche(uint256)\":{\"notice\":\"TrancheInfo for tranche with id `trancheId`. The senior tranche of slice i has id 2*(i-1)+1. The   junior tranche of slice i has id 2*i. Slice indices start at 1.\"},\"getVersion()\":{\"notice\":\"Returns the version triplet `[major, minor, patch]`\"},\"initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])\":{\"notice\":\"Initialize the pool. Can only be called once, and should be called in the same transaction as   contract creation to avoid initialization front-running\"},\"initializeNextSlice(uint256)\":{\"notice\":\"Initialize the next slice for the pool. Enables backers and the senior pool to provide additional   capital to the borrower.\"},\"lockJuniorCapital()\":{\"notice\":\"Lock the junior capital in the junior tranche of the current slice. The capital is locked for   `DrawdownPeriodInSeconds` seconds and gives the senior pool time to decide how much to invest (ensure   leverage ratio cannot change for the period). During this period the borrower has the option to lock   the senior capital by calling `lockPool()`. Backers may withdraw their junior capital if the the senior   tranche has not been locked and the drawdown period has ended. Only the borrower can call this function.\"},\"lockPool()\":{\"notice\":\"Lock the senior capital in the senior tranche of the current slice and reset the lock period of   the junior capital to match the senior capital lock period. During this period the borrower has the   option to draw down the pool. Beyond the drawdown period any unused capital is available to withdraw by   all depositors.\"},\"numSlices()\":{\"notice\":\"Get the current number of slices for this pool\"},\"pauseDrawdowns()\":{\"notice\":\"Pauses all drawdowns (but not deposits/withdraws)\"},\"pay(uint256)\":{\"notice\":\"Pay down interest + principal. Excess payments are refunded to the caller\"},\"pay(uint256,uint256)\":{\"notice\":\"Pay down the credit line, separating the principal and interest payments. You must pay back all interest   before paying back principal. Excess payments are refunded to the caller\"},\"poolSlices(uint256)\":{\"notice\":\"Get a slice by index\"},\"setFundableAt(uint256)\":{\"notice\":\"Update `fundableAt` to a new timestamp. Only the borrower can call this.\"},\"totalJuniorDeposits()\":{\"notice\":\"Query the total capital supplied to the pool's junior tranches\"},\"unpauseDrawdowns()\":{\"notice\":\"Unpause drawdowns\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw an already deposited amount if the funds are available. Caller must be the owner or   approved by the owner on tokenId. Amount withdrawn is sent to the caller.\"},\"withdrawMax(uint256)\":{\"notice\":\"Similar to withdraw but withdraw the max interest and principal available for `tokenId`\"},\"withdrawMultiple(uint256[],uint256[])\":{\"notice\":\"Withdraw from multiple tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/TranchedPool.sol\":\"TranchedPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x50280546205978ca6573541955e15453b4c07a19e6c8ec4f6785a5ae0d7343fb\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/external/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n// solhint-disable\\n// Imported from https://github.com/UMAprotocol/protocol/blob/4d1c8cc47a4df5e79f978cb05647a7432e111a3d/packages/core/contracts/common/implementation/FixedPoint.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n  using SafeMath for uint256;\\n  using SignedSafeMath for int256;\\n\\n  // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n  // For unsigned values:\\n  //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n  uint256 private constant FP_SCALING_FACTOR = 10 ** 18;\\n\\n  // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n  struct Unsigned {\\n    uint256 rawValue;\\n  }\\n\\n  /**\\n   * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5**18`.\\n   * @param a uint to convert into a FixedPoint.\\n   * @return the converted FixedPoint.\\n   */\\n  function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.mul(FP_SCALING_FACTOR));\\n  }\\n\\n  /**\\n   * @notice Whether `a` is equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if equal, or False.\\n   */\\n  function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue == fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if equal, or False.\\n   */\\n  function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue == b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue > b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue > fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n    return fromUnscaledUint(a).rawValue > b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue >= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue >= fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n    return fromUnscaledUint(a).rawValue >= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue < b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue < fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n    return fromUnscaledUint(a).rawValue < b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n    return a.rawValue <= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n    return a.rawValue <= fromUnscaledUint(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n    return fromUnscaledUint(a).rawValue <= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice The minimum of `a` and `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the minimum of `a` and `b`.\\n   */\\n  function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return a.rawValue < b.rawValue ? a : b;\\n  }\\n\\n  /**\\n   * @notice The maximum of `a` and `b`.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the maximum of `a` and `b`.\\n   */\\n  function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return a.rawValue > b.rawValue ? a : b;\\n  }\\n\\n  /**\\n   * @notice Adds two `Unsigned`s, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the sum of `a` and `b`.\\n   */\\n  function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.rawValue.add(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return the sum of `a` and `b`.\\n   */\\n  function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    return add(a, fromUnscaledUint(b));\\n  }\\n\\n  /**\\n   * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.rawValue.sub(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    return sub(a, fromUnscaledUint(b));\\n  }\\n\\n  /**\\n   * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n   * @param a a uint256.\\n   * @param b a FixedPoint.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return sub(fromUnscaledUint(a), b);\\n  }\\n\\n  /**\\n   * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n   * @dev This will \\\"floor\\\" the product.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    // There are two caveats with this computation:\\n    // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n    // stored internally as a uint256 ~10^59.\\n    // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n    // would round to 3, but this computation produces the result 2.\\n    // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n    return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n  }\\n\\n  /**\\n   * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n   * @dev This will \\\"floor\\\" the product.\\n   * @param a a FixedPoint.\\n   * @param b a uint256.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.rawValue.mul(b));\\n  }\\n\\n  /**\\n   * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n    uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n    uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n    if (mod != 0) {\\n      return Unsigned(mulFloor.add(1));\\n    } else {\\n      return Unsigned(mulFloor);\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n   * @param a a FixedPoint.\\n   * @param b a FixedPoint.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    // Since b is an int, there is no risk of truncation and we can just mul it normally\\n    return Unsigned(a.rawValue.mul(b));\\n  }\\n\\n  /**\\n   * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a FixedPoint numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    // There are two caveats with this computation:\\n    // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n    // 10^41 is stored internally as a uint256 10^59.\\n    // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n    // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n    return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a FixedPoint numerator.\\n   * @param b a uint256 denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    return Unsigned(a.rawValue.div(b));\\n  }\\n\\n  /**\\n   * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a uint256 numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    return div(fromUnscaledUint(a), b);\\n  }\\n\\n  /**\\n   * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n   * @param a a FixedPoint numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n    uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n    uint256 divFloor = aScaled.div(b.rawValue);\\n    uint256 mod = aScaled.mod(b.rawValue);\\n    if (mod != 0) {\\n      return Unsigned(divFloor.add(1));\\n    } else {\\n      return Unsigned(divFloor);\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n   * @param a a FixedPoint numerator.\\n   * @param b a uint256 denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n    // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n    // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n    // This creates the possibility of overflow if b is very large.\\n    return divCeil(a, fromUnscaledUint(b));\\n  }\\n\\n  /**\\n   * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n   * @dev This will \\\"floor\\\" the result.\\n   * @param a a FixedPoint numerator.\\n   * @param b a uint256 denominator.\\n   * @return output is `a` to the power of `b`.\\n   */\\n  function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n    output = fromUnscaledUint(1);\\n    for (uint256 i = 0; i < b; i = i.add(1)) {\\n      output = mul(output, a);\\n    }\\n  }\\n\\n  // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n  // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n  // For signed values:\\n  //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n  int256 private constant SFP_SCALING_FACTOR = 10 ** 18;\\n\\n  struct Signed {\\n    int256 rawValue;\\n  }\\n\\n  function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n    require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n    return Unsigned(uint256(a.rawValue));\\n  }\\n\\n  function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n    require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n    return Signed(int256(a.rawValue));\\n  }\\n\\n  /**\\n   * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5**18`.\\n   * @param a int to convert into a FixedPoint.Signed.\\n   * @return the converted FixedPoint.Signed.\\n   */\\n  function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n    return Signed(a.mul(SFP_SCALING_FACTOR));\\n  }\\n\\n  /**\\n   * @notice Whether `a` is equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a int256.\\n   * @return True if equal, or False.\\n   */\\n  function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue == fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if equal, or False.\\n   */\\n  function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue == b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue > b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue > fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than `b`.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a > b`, or False.\\n   */\\n  function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n    return fromUnscaledInt(a).rawValue > b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue >= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue >= fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is greater than or equal to `b`.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a >= b`, or False.\\n   */\\n  function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n    return fromUnscaledInt(a).rawValue >= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue < b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue < fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than `b`.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a < b`, or False.\\n   */\\n  function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n    return fromUnscaledInt(a).rawValue < b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n    return a.rawValue <= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n    return a.rawValue <= fromUnscaledInt(b).rawValue;\\n  }\\n\\n  /**\\n   * @notice Whether `a` is less than or equal to `b`.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return True if `a <= b`, or False.\\n   */\\n  function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n    return fromUnscaledInt(a).rawValue <= b.rawValue;\\n  }\\n\\n  /**\\n   * @notice The minimum of `a` and `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the minimum of `a` and `b`.\\n   */\\n  function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    return a.rawValue < b.rawValue ? a : b;\\n  }\\n\\n  /**\\n   * @notice The maximum of `a` and `b`.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the maximum of `a` and `b`.\\n   */\\n  function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    return a.rawValue > b.rawValue ? a : b;\\n  }\\n\\n  /**\\n   * @notice Adds two `Signed`s, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the sum of `a` and `b`.\\n   */\\n  function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    return Signed(a.rawValue.add(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return the sum of `a` and `b`.\\n   */\\n  function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    return add(a, fromUnscaledInt(b));\\n  }\\n\\n  /**\\n   * @notice Subtracts two `Signed`s, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    return Signed(a.rawValue.sub(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    return sub(a, fromUnscaledInt(b));\\n  }\\n\\n  /**\\n   * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n   * @param a an int256.\\n   * @param b a FixedPoint.Signed.\\n   * @return the difference of `a` and `b`.\\n   */\\n  function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n    return sub(fromUnscaledInt(a), b);\\n  }\\n\\n  /**\\n   * @notice Multiplies two `Signed`s, reverting on overflow.\\n   * @dev This will \\\"floor\\\" the product.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    // There are two caveats with this computation:\\n    // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n    // stored internally as an int256 ~10^59.\\n    // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n    // would round to 3, but this computation produces the result 2.\\n    // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n    return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n  }\\n\\n  /**\\n   * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n   * @dev This will \\\"floor\\\" the product.\\n   * @param a a FixedPoint.Signed.\\n   * @param b an int256.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    return Signed(a.rawValue.mul(b));\\n  }\\n\\n  /**\\n   * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    int256 mulRaw = a.rawValue.mul(b.rawValue);\\n    int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n    // Manual mod because SignedSafeMath doesn't support it.\\n    int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n    if (mod != 0) {\\n      bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n      int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n      return Signed(mulTowardsZero.add(valueToAdd));\\n    } else {\\n      return Signed(mulTowardsZero);\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a FixedPoint.Signed.\\n   * @return the product of `a` and `b`.\\n   */\\n  function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    // Since b is an int, there is no risk of truncation and we can just mul it normally\\n    return Signed(a.rawValue.mul(b));\\n  }\\n\\n  /**\\n   * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a FixedPoint numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    // There are two caveats with this computation:\\n    // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n    // 10^41 is stored internally as an int256 10^59.\\n    // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n    // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n    return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n  }\\n\\n  /**\\n   * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a a FixedPoint numerator.\\n   * @param b an int256 denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    return Signed(a.rawValue.div(b));\\n  }\\n\\n  /**\\n   * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n   * @dev This will \\\"floor\\\" the quotient.\\n   * @param a an int256 numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n    return div(fromUnscaledInt(a), b);\\n  }\\n\\n  /**\\n   * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n   * @param a a FixedPoint numerator.\\n   * @param b a FixedPoint denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n    int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n    int256 divTowardsZero = aScaled.div(b.rawValue);\\n    // Manual mod because SignedSafeMath doesn't support it.\\n    int256 mod = aScaled % b.rawValue;\\n    if (mod != 0) {\\n      bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n      int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n      return Signed(divTowardsZero.add(valueToAdd));\\n    } else {\\n      return Signed(divTowardsZero);\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n   * @param a a FixedPoint numerator.\\n   * @param b an int256 denominator.\\n   * @return the quotient of `a` divided by `b`.\\n   */\\n  function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n    // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n    // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n    // This creates the possibility of overflow if b is very large.\\n    return divAwayFromZero(a, fromUnscaledInt(b));\\n  }\\n\\n  /**\\n   * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n   * @dev This will \\\"floor\\\" the result.\\n   * @param a a FixedPoint.Signed.\\n   * @param b a uint256 (negative exponents are not allowed).\\n   * @return output is `a` to the power of `b`.\\n   */\\n  function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n    output = fromUnscaledInt(1);\\n    for (uint256 i = 0; i < b; i = i.add(1)) {\\n      output = mul(output, a);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x10e2bb4ab4d2d103da60f6b340142ebe9a2112e037b57da2ab1df1a89f4656ea\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IBackerRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {ITranchedPool} from \\\"./ITranchedPool.sol\\\";\\n\\ninterface IBackerRewards {\\n  struct BackerRewardsTokenInfo {\\n    uint256 rewardsClaimed; // gfi claimed\\n    uint256 accRewardsPerPrincipalDollarAtMint; // Pool's accRewardsPerPrincipalDollar at PoolToken mint()\\n  }\\n\\n  struct BackerRewardsInfo {\\n    uint256 accRewardsPerPrincipalDollar; // accumulator gfi per interest dollar\\n  }\\n\\n  /// @notice Staking rewards parameters relevant to a TranchedPool\\n  struct StakingRewardsPoolInfo {\\n    // @notice the value `StakingRewards.accumulatedRewardsPerToken()` at the last checkpoint\\n    uint256 accumulatedRewardsPerTokenAtLastCheckpoint;\\n    // @notice last time the rewards info was updated\\n    //\\n    // we need this in order to know how much to pro rate rewards after the term is over.\\n    uint256 lastUpdateTime;\\n    // @notice staking rewards parameters for each slice of the tranched pool\\n    StakingRewardsSliceInfo[] slicesInfo;\\n  }\\n\\n  /// @notice Staking rewards paramters relevant to a TranchedPool slice\\n  struct StakingRewardsSliceInfo {\\n    // @notice fidu share price when the slice is first drawn down\\n    //\\n    // we need to save this to calculate what an equivalent position in\\n    // the senior pool would be at the time the slice is downdown\\n    uint256 fiduSharePriceAtDrawdown;\\n    // @notice the amount of principal deployed at the last checkpoint\\n    //\\n    // we use this to calculate the amount of principal that should\\n    // acctually accrue rewards during between the last checkpoint and\\n    // and subsequent updates\\n    uint256 principalDeployedAtLastCheckpoint;\\n    // @notice the value of StakingRewards.accumulatedRewardsPerToken() at time of drawdown\\n    //\\n    // we need to keep track of this to use this as a base value to accumulate rewards\\n    // for tokens. If the token has never claimed staking rewards, we use this value\\n    // and the current staking rewards accumulator\\n    uint256 accumulatedRewardsPerTokenAtDrawdown;\\n    // @notice amount of rewards per token accumulated over the lifetime of the slice that a backer\\n    //          can claim\\n    uint256 accumulatedRewardsPerTokenAtLastCheckpoint;\\n    // @notice the amount of rewards per token accumulated over the lifetime of the slice\\n    //\\n    // this value is \\\"unrealized\\\" because backers will be unable to claim against this value.\\n    // we keep this value so that we can always accumulate rewards for the amount of capital\\n    // deployed at any point in time, but not allow backers to withdraw them until a payment\\n    // is made. For example: we want to accumulate rewards when a backer does a drawdown. but\\n    // a backer shouldn't be allowed to claim rewards until a payment is made.\\n    //\\n    // this value is scaled depending on the current proportion of capital currently deployed\\n    // in the slice. For example, if the staking rewards contract accrued 10 rewards per token\\n    // between the current checkpoint and a new update, and only 20% of the capital was deployed\\n    // during that period, we would accumulate 2 (10 * 20%) rewards.\\n    uint256 unrealizedAccumulatedRewardsPerTokenAtLastCheckpoint;\\n  }\\n\\n  /// @notice Staking rewards parameters relevant to a PoolToken\\n  struct StakingRewardsTokenInfo {\\n    // @notice the amount of rewards accumulated the last time a token's rewards were withdrawn\\n    uint256 accumulatedRewardsPerTokenAtLastWithdraw;\\n  }\\n\\n  /// @notice total amount of GFI rewards available, times 1e18\\n  function totalRewards() external view returns (uint256);\\n\\n  /// @notice interest $ eligible for gfi rewards, times 1e18\\n  function maxInterestDollarsEligible() external view returns (uint256);\\n\\n  /// @notice counter of total interest repayments, times 1e6\\n  function totalInterestReceived() external view returns (uint256);\\n\\n  /// @notice totalRewards/totalGFISupply * 100, times 1e18\\n  function totalRewardPercentOfTotalGFI() external view returns (uint256);\\n\\n  /// @notice Get backer rewards metadata for a pool token\\n  function getTokenInfo(uint256 poolTokenId) external view returns (BackerRewardsTokenInfo memory);\\n\\n  /// @notice Get backer staking rewards metadata for a pool token\\n  function getStakingRewardsTokenInfo(\\n    uint256 poolTokenId\\n  ) external view returns (StakingRewardsTokenInfo memory);\\n\\n  /// @notice Get backer staking rewards for a pool\\n  function getBackerStakingRewardsPoolInfo(\\n    ITranchedPool pool\\n  ) external view returns (StakingRewardsPoolInfo memory);\\n\\n  /// @notice Calculates the accRewardsPerPrincipalDollar for a given pool,\\n  ///   when a interest payment is received by the protocol\\n  /// @param _interestPaymentAmount Atomic usdc amount of the interest payment\\n  function allocateRewards(uint256 _interestPaymentAmount) external;\\n\\n  /// @notice callback for TranchedPools when they drawdown\\n  /// @param sliceIndex index of the tranched pool slice\\n  /// @dev initializes rewards info for the calling TranchedPool if it's the first\\n  ///  drawdown for the given slice\\n  function onTranchedPoolDrawdown(uint256 sliceIndex) external;\\n\\n  /// @notice When a pool token is minted for multiple drawdowns,\\n  ///   set accRewardsPerPrincipalDollarAtMint to the current accRewardsPerPrincipalDollar price\\n  /// @param poolAddress Address of the pool associated with the pool token\\n  /// @param tokenId Pool token id\\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(\\n    address poolAddress,\\n    uint256 tokenId\\n  ) external;\\n\\n  /// @notice PoolToken request to withdraw all allocated rewards\\n  /// @param tokenId Pool token id\\n  /// @return amount of rewards withdrawn\\n  function withdraw(uint256 tokenId) external returns (uint256);\\n\\n  /**\\n   * @notice Set BackerRewards and BackerStakingRewards metadata for tokens created by a pool token split.\\n   * @param originalBackerRewardsTokenInfo backer rewards info for the pool token that was split\\n   * @param originalStakingRewardsTokenInfo backer staking rewards info for the pool token that was split\\n   * @param newTokenId id of one of the tokens in the split\\n   * @param newRewardsClaimed rewardsClaimed value for the new token.\\n   */\\n  function setBackerAndStakingRewardsTokenInfoOnSplit(\\n    BackerRewardsTokenInfo memory originalBackerRewardsTokenInfo,\\n    StakingRewardsTokenInfo memory originalStakingRewardsTokenInfo,\\n    uint256 newTokenId,\\n    uint256 newRewardsClaimed\\n  ) external;\\n\\n  /**\\n   * @notice Calculate the gross available gfi rewards for a PoolToken\\n   * @param tokenId Pool token id\\n   * @return The amount of GFI claimable\\n   */\\n  function poolTokenClaimableRewards(uint256 tokenId) external view returns (uint256);\\n\\n  /// @notice Clear all BackerRewards and StakingRewards associated data for `tokenId`\\n  function clearTokenInfo(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x3dd4a2d1cc08623440bca57bb606671fe002edf56be04d5a9138ef01fcffeda7\",\"license\":\"MIT\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(\\n    address account\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x1e5f5b179b98e0fc4c081b6f68d7c39afcd305d7bf24071774a6c184007e5ebc\",\"license\":\"MIT\"},\"contracts/interfaces/ICallableLoan.sol\":{\"content\":\"pragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILoan} from \\\"./ILoan.sol\\\";\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {IGoldfinchConfig} from \\\"./IGoldfinchConfig.sol\\\";\\n\\n/// A LockState represents a period of time during which certain callable loan actions are prohibited.\\n/// @param LockState.Funding Starts when a loan is created and ends when the first borrower drawdown occurs.\\n/// In Funding, the lender can deposit principal to mint a pool token and they can withdraw their deposited principal.\\n/// @param LockState.DrawdownPeriod Starts when the first borrower drawdown occurs and\\n/// ends after ConfigHelper.DrawdownPeriodInSeconds elapses.\\n/// In DrawdownPeriod, the lender can deposit principal to mint a pool token and they can withdraw\\n/// their deposited principal.\\n/// @param LockState.Unlocked Starts after ConfigHelper.DrawdownPeriodInSeconds elapses and never ends.\\n/// In Unlocked, all post-funding & drawdown actions are allowed (not withdraw, deposit, or drawdown).\\nenum LockState {\\n  Funding,\\n  DrawdownPeriod,\\n  Unlocked\\n}\\n\\n/// @dev A CallableLoan is a loan which allows the lender to call the borrower's principal.\\n///     The lender can call the borrower's principal at any time, but the borrower must pay back the principal\\n/// @dev The ICallableLoanErrors interface contains all errors due to Solidity version compatibility with custom errors.\\ninterface ICallableLoan is ILoan {\\n  /*================================================================================\\n  Structs\\n  ================================================================================*/\\n  /// @param principalDeposited The amount of principal deposited towards this call request period.\\n  /// @param principalPaid The amount of principal which has already been paid back towards this call request period.\\n  ///                      There are 3 ways principal paid can enter a CallRequestPeriod.\\n  ///                      1. Converted from principalReserved after a call request period becomes due.\\n  ///                      2. Moved from uncalled tranche as the result of a call request.\\n  ///                      3. Paid directly when a CallRequestPeriod is past due and has a remaining balance.\\n  /// @param principalReserved The amount of principal reserved for this call request period.\\n  ///                          Payments to a not-yet-due CallRequestPeriod are applied to principalReserved.\\n  /// @param interestPaid The amount of interest paid towards this call request period.\\n  struct CallRequestPeriod {\\n    uint256 principalDeposited;\\n    uint256 principalPaid;\\n    uint256 principalReserved;\\n    uint256 interestPaid;\\n  }\\n\\n  /// @param principalDeposited The amount of uncalled, deposited principal.\\n  /// @param principalPaid The amount of principal which has already been paid back.\\n  ///                      There are two ways uncalled principal can be paid.\\n  ///                      1. Remainder after drawdowns.\\n  ///                      2. Conversion from principalReserved after a call request period becomes due.\\n  ///                         All call requested principal outstanding must already be paid\\n  ///                         (or have principal reserved) before uncalled principal can be paid.\\n  ///                      3. Paid directly after term end time.\\n  /// @param principalReserved The amount of principal reserved for uncalled tranche.\\n  ///                          principalReserved is greedily moved to call request periods (as much as can fill)\\n  ///                          when a call request is submitted.\\n  /// @param interestPaid The amount of interest paid towards uncalled capital.\\n  struct UncalledCapitalInfo {\\n    uint256 principalDeposited;\\n    uint256 principalPaid;\\n    uint256 principalReserved;\\n    uint256 interestPaid;\\n  }\\n\\n  /*================================================================================\\n  Functions\\n  ================================================================================*/\\n  /// @notice Initialize the pool. Can only be called once, and should be called in the same transaction as\\n  ///   contract creation to avoid initialization front-running\\n  /// @param _config address of GoldfinchConfig\\n  /// @param _borrower address of borrower, a non-transferrable role for performing privileged actions like\\n  ///   drawdown\\n  /// @param _limit the max USDC amount that can be drawn down across all pool slices\\n  /// @param _limit the number of periods at the tail end of a principal period during which call requests rollover\\n  ///   to the next principal period.\\n  /// @param _interestApr interest rate for the loan\\n  /// @param _lateFeeApr late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a\\n  ///   payment becomes late\\n  /// @param _fundableAt earliest time at which the first slice can be funded\\n  function initialize(\\n    IGoldfinchConfig _config,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external;\\n\\n  /// @notice Submits a call request for the specified pool token and amount\\n  ///         Mints a new, called pool token of the called amount.\\n  ///         Splits off any uncalled amount as a new uncalled pool token.\\n  /// @param amountToCall The amount of the pool token that should be called.\\n  /// @param poolTokenId The id of the pool token that should be called.\\n  /// @return callRequestedTokenId  Token id of the call requested token.\\n  /// @return remainingTokenId Token id of the remaining token.\\n  function submitCall(\\n    uint256 amountToCall,\\n    uint256 poolTokenId\\n  ) external returns (uint256, uint256);\\n\\n  function schedule() external view returns (ISchedule);\\n\\n  function nextDueTimeAt(uint256 timestamp) external view returns (uint256);\\n\\n  function getUncalledCapitalInfo() external view returns (UncalledCapitalInfo memory);\\n\\n  function getCallRequestPeriod(\\n    uint256 callRequestPeriodIndex\\n  ) external view returns (CallRequestPeriod memory);\\n\\n  function availableToCall(uint256 tokenId) external view returns (uint256);\\n\\n  /*================================================================================\\n  Events\\n  ================================================================================*/\\n  event CallRequestSubmitted(\\n    uint256 indexed originalTokenId,\\n    uint256 indexed callRequestedTokenId,\\n    uint256 indexed remainingTokenId,\\n    uint256 callAmount\\n  );\\n  event DepositsLocked(address indexed loan);\\n}\\n\",\"keccak256\":\"0xd900b592a8cd5719285bd65e7dafc3d3c512829314393fe2a1a028a50c84de2d\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILoan} from \\\"./ILoan.sol\\\";\\n\\nimport {ICreditLine} from \\\"./ICreditLine.sol\\\";\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\n\\ninterface ICreditLine {\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n\\n  function borrower() external view returns (address);\\n\\n  function currentLimit() external view returns (uint256);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  /// @notice Cumulative interest accrued up to now\\n  function totalInterestAccrued() external view returns (uint256);\\n\\n  /// @notice Cumulative interest accrued up to `timestamp`\\n  function totalInterestAccruedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Cumulative interest paid back up to now\\n  function totalInterestPaid() external view returns (uint256);\\n\\n  /// @notice Cumulative interest owed up to now\\n  function totalInterestOwed() external view returns (uint256);\\n\\n  /// @notice Cumulative interest owed up to `timestamp`\\n  function totalInterestOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Interest that would be owed at `timestamp`\\n  function interestOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Interest accrued in the current payment period up to now. Converted to\\n  ///   owed interest once we cross into the next payment period. Is 0 if the\\n  ///   current time is after loan maturity (all interest accrued immediately becomes\\n  ///   interest owed).\\n  function interestAccrued() external view returns (uint256);\\n\\n  /// @notice Interest accrued in the current payment period for `timestamp`. Coverted to\\n  ///   owed interest once we cross into the payment period after `timestamp`. Is 0\\n  ///   if `timestamp` is after loan maturity (all interest accrued immediately becomes\\n  ///   interest owed).\\n  function interestAccruedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Principal owed up to `timestamp`\\n  function principalOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Returns the total amount of principal thats been paid\\n  function totalPrincipalPaid() external view returns (uint256);\\n\\n  /// @notice Cumulative principal owed at timestamp\\n  function totalPrincipalOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Cumulative principal owed at current timestamp\\n  function totalPrincipalOwed() external view returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external;\\n\\n  function setMaxLimit(uint256 newAmount) external;\\n\\n  /// @notice Time of first drawdown\\n  function termStartTime() external view returns (uint256);\\n\\n  /// @notice Process a bulk payment, allocating the payment amount based on the payment waterfall\\n  function pay(uint paymentAmount) external returns (ILoan.PaymentAllocation memory);\\n\\n  /**\\n   * Process a payment according to the waterfall described in `Accountant.allocatePayment`\\n   * @param principalPayment principal payment amount\\n   * @param interestPayment interest payment amount\\n   * @return payment allocation\\n   */\\n  function pay(\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) external returns (ILoan.PaymentAllocation memory);\\n\\n  /// @notice Drawdown on the line\\n  /// @param amount amount to drawdown. Cannot exceed the line's limit\\n  function drawdown(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb686be076b47f3d64138d7e2ba5084f8bb81f13cd61385c88307f07defa96d65\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurveLP {\\n  function coins(uint256) external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\\n\\n  function lp_price() external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] calldata amounts,\\n    uint256 min_mint_amount,\\n    bool use_eth,\\n    address receiver\\n  ) external returns (uint256);\\n\\n  function remove_liquidity(\\n    uint256 _amount,\\n    uint256[2] calldata min_amounts\\n  ) external returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n\\n  function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external returns (uint256);\\n\\n  function balances(uint256 arg0) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf7d904a550adc06b61454e9e68f356fec1a86078e2aec5a82e7878ec22d9774e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd490aa7656dd26c6e31c7706cb9071a0830e39b0442985e6879038d9b61db103\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x31ac8c9d596015b925647ff222be3ff0cb9952802fc7c39c3cdc30416a37f1f6\",\"license\":\"MIT\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IGo {\\n  uint256 public constant ID_TYPE_0 = 0;\\n  uint256 public constant ID_TYPE_1 = 1;\\n  uint256 public constant ID_TYPE_2 = 2;\\n  uint256 public constant ID_TYPE_3 = 3;\\n  uint256 public constant ID_TYPE_4 = 4;\\n  uint256 public constant ID_TYPE_5 = 5;\\n  uint256 public constant ID_TYPE_6 = 6;\\n  uint256 public constant ID_TYPE_7 = 7;\\n  uint256 public constant ID_TYPE_8 = 8;\\n  uint256 public constant ID_TYPE_9 = 9;\\n  uint256 public constant ID_TYPE_10 = 10;\\n\\n  /// @notice Returns the address of the UniqueIdentity contract.\\n  function uniqueIdentity() external virtual returns (address);\\n\\n  function go(address account) public view virtual returns (bool);\\n\\n  function goOnlyIdTypes(\\n    address account,\\n    uint256[] calldata onlyIdTypes\\n  ) public view virtual returns (bool);\\n\\n  /**\\n   * @notice Returns whether the provided account is go-listed for use of the SeniorPool on the Goldfinch protocol.\\n   * @param account The account whose go status to obtain\\n   * @return true if `account` is go listed\\n   */\\n  function goSeniorPool(address account) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x3d4e566ab6aa670da6526d3eaf090c7c4c4e1fae9e941c3dcba606f417051339\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchConfig {\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) external;\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) external;\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external;\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external;\\n\\n  function getNumber(uint256 index) external view returns (uint256);\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) external view returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external;\\n\\n  function setNumber(uint256 index, uint256 newNumber) external;\\n}\\n\",\"keccak256\":\"0xdedd4f8d4fe5f720a01aadf0d12535afcbc3cc1bceb1aab1761764e5999343b4\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {ICallableLoan} from \\\"./ICallableLoan.sol\\\";\\n\\ninterface IGoldfinchFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createCallableLoan(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (ICallableLoan);\\n}\\n\",\"keccak256\":\"0xf5b680851ff613a1c9c59c1229571c58c7e27d363ed1492c1ae5a8eb9522737c\",\"license\":\"MIT\"},\"contracts/interfaces/IImplementationRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title User Controlled Upgrades (UCU) Proxy Repository\\n/// A repository maintaing a collection of \\\"lineages\\\" of implementation contracts\\n///\\n/// Lineages are a sequence of implementations each lineage can be thought of as\\n/// a \\\"major\\\" revision of implementations. Implementations between lineages are\\n/// considered incompatible.\\ninterface IImplementationRepository {\\n  /// @notice returns data that will be delegatedCalled when the given implementation\\n  ///           is upgraded to\\n  function upgradeDataFor(address key) external returns (bytes memory);\\n\\n  /// @notice Returns the id of the lineage a given implementation belongs to\\n  function lineageIdOf(address key) external returns (uint256);\\n\\n  /// @notice Returns the id of the most recently created lineage\\n  function currentLineageId() external view returns (uint256);\\n\\n  // //////// External ////////////////////////////////////////////////////////////\\n\\n  /// @notice set data that will be delegate called when a proxy upgrades to the given `implementation`\\n  /// @dev reverts when caller is not an admin\\n  /// @dev reverts when the contract is paused\\n  /// @dev reverts if the given implementation isn't registered\\n  function setUpgradeDataFor(address implementation, bytes calldata data) external;\\n\\n  /// @notice Create a new lineage of implementations.\\n  ///\\n  /// This creates a new \\\"root\\\" of a new lineage\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation that will be the first implementation in the lineage\\n  /// @return newly created lineage's id\\n  function createLineage(address implementation) external returns (uint256);\\n\\n  /// @notice add a new implementation and set it as the current implementation\\n  /// @dev reverts if the sender is not an owner\\n  /// @dev reverts if the contract is paused\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation to append\\n  function append(address implementation) external;\\n\\n  /// @notice Append an implementation to a specified lineage\\n  /// @dev reverts if the contract is paused\\n  /// @dev reverts if the sender is not an owner\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation to append\\n  /// @param lineageId id of lineage to append to\\n  function append(address implementation, uint256 lineageId) external;\\n\\n  /// @notice Remove an implementation from the chain and \\\"stitch\\\" together its neighbors\\n  /// @dev If you have a chain of `A -> B -> C` and I call `remove(B, C)` it will result in `A -> C`\\n  /// @dev reverts if `previos` is not the ancestor of `toRemove`\\n  /// @dev we need to provide the previous implementation here to be able to successfully \\\"stitch\\\"\\n  ///       the chain back together. Because this is an admin action, we can source what the previous\\n  ///       version is from events.\\n  /// @param toRemove Implementation to remove\\n  /// @param previous Implementation that currently has `toRemove` as its successor\\n  function remove(address toRemove, address previous) external;\\n\\n  // //////// External view ////////////////////////////////////////////////////////////\\n\\n  /// @notice Returns `true` if an implementation has a next implementation set\\n  /// @param implementation implementation to check\\n  /// @return The implementation following the given implementation\\n  function hasNext(address implementation) external view returns (bool);\\n\\n  /// @notice Returns `true` if an implementation has already been added\\n  /// @param implementation Implementation to check existence of\\n  /// @return `true` if the implementation has already been added\\n  function has(address implementation) external view returns (bool);\\n\\n  /// @notice Get the next implementation for a given implementation or\\n  ///           `address(0)` if it doesn't exist\\n  /// @dev reverts when contract is paused\\n  /// @param implementation implementation to get the upgraded implementation for\\n  /// @return Next Implementation\\n  function nextImplementationOf(address implementation) external view returns (address);\\n\\n  /// @notice Returns `true` if a given lineageId exists\\n  function lineageExists(uint256 lineageId) external view returns (bool);\\n\\n  /// @notice Return the current implementation of a lineage with the given `lineageId`\\n  function currentImplementation(uint256 lineageId) external view returns (address);\\n\\n  /// @notice return current implementaton of the current lineage\\n  function currentImplementation() external view returns (address);\\n\\n  // //////// Events //////////////////////////////////////////////////////////////\\n  event Added(\\n    uint256 indexed lineageId,\\n    address indexed newImplementation,\\n    address indexed oldImplementation\\n  );\\n  event Removed(uint256 indexed lineageId, address indexed implementation);\\n  event UpgradeDataSet(address indexed implementation, bytes data);\\n}\\n\",\"keccak256\":\"0xc4a7761be1d7b7a62596809495467465c77997232ccc80e08a9340ec055a040c\",\"license\":\"MIT\"},\"contracts/interfaces/ILoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {ICreditLine} from \\\"./ICreditLine.sol\\\";\\n\\ninterface ILoan {\\n  /// @notice Pool's credit line, responsible for managing the loan's accounting variables\\n  function creditLine() external view returns (ICreditLine);\\n\\n  /// @notice Time when the pool was initialized. Zero if uninitialized\\n  function createdAt() external view returns (uint256);\\n\\n  /// @notice Pay down interest + principal. Excess payments are refunded to the caller\\n  /// @param amount USDC amount to pay\\n  /// @return PaymentAllocation info on how the payment was allocated\\n  /// @dev {this} must be approved by msg.sender to transfer {amount} of USDC\\n  function pay(uint256 amount) external returns (PaymentAllocation memory);\\n\\n  /// @notice Compute interest and principal owed on the current balance at a future timestamp\\n  /// @param timestamp time to calculate up to\\n  /// @return interestOwed amount of obligated interest owed at `timestamp`\\n  /// @return interestAccrued amount of accrued interest (not yet owed) that can be paid at `timestamp`\\n  /// @return principalOwed amount of principal owed at `timestamp`\\n  function getAmountsOwed(\\n    uint256 timestamp\\n  ) external view returns (uint256 interestOwed, uint256 interestAccrued, uint256 principalOwed);\\n\\n  function getAllowedUIDTypes() external view returns (uint256[] memory);\\n\\n  /// @notice Drawdown the loan. The credit line's balance should increase by the amount drawn down.\\n  ///   Junior capital must be locked before this function can be called. If senior capital isn't locked\\n  ///   then this function will lock it for you (convenience to avoid calling lockPool() separately).\\n  ///   This function should revert if the amount requested exceeds the the current slice's currentLimit\\n  ///   This function should revert if the caller is not the borrower.\\n  /// @param amount USDC to drawdown. This amount is transferred to the caller\\n  function drawdown(uint256 amount) external;\\n\\n  /// @notice Update `fundableAt` to a new timestamp. Only the borrower can call this.\\n  function setFundableAt(uint256 newFundableAt) external;\\n\\n  /// @notice Supply capital to this pool. Caller can't deposit to the junior tranche if the junior pool is locked.\\n  ///   Caller can't deposit to a senior tranche if the pool is locked. Caller can't deposit if they are missing the\\n  ///   required UID NFT.\\n  /// @param tranche id of tranche to supply capital to. Id must correspond to a tranche in the current slice.\\n  /// @param amount amount of capital to supply\\n  /// @return tokenId NFT representing your position in this pool\\n  function deposit(uint256 tranche, uint256 amount) external returns (uint256 tokenId);\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 tokenId);\\n\\n  /// @notice Query the max amount available to withdraw for tokenId's position\\n  /// @param tokenId position to query max amount withdrawable for\\n  /// @return interestRedeemable total interest withdrawable on the position\\n  /// @return principalRedeemable total principal redeemable on the position\\n  function availableToWithdraw(\\n    uint256 tokenId\\n  ) external view returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  /// @notice Withdraw an already deposited amount if the funds are available. Caller must be the owner or\\n  ///   approved by the owner on tokenId. Amount withdrawn is sent to the caller.\\n  /// @param tokenId the NFT representing the position\\n  /// @param amount amount to withdraw (must be <= interest+principal available to withdraw)\\n  /// @return interestWithdrawn interest withdrawn\\n  /// @return principalWithdrawn principal withdrawn\\n  function withdraw(\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  /// @notice Similar to withdraw but withdraw the max interest and principal available for `tokenId`\\n  function withdrawMax(\\n    uint256 tokenId\\n  ) external returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  /// @notice Withdraw from multiple tokens\\n  /// @param tokenIds NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array\\n  /// @param amounts amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n  /// @notice Result of applying a payment to a v2 pool\\n  /// @param owedInterestPayment payment portion of interest owed\\n  /// @param accruedInterestPayment payment portion of accrued (but not yet owed) interest\\n  /// @param principalPayment payment portion on principal owed\\n  /// @param additionalBalancePayment payment portion on any balance that is currently owed\\n  /// @param paymentRemaining payment amount leftover\\n  struct PaymentAllocation {\\n    uint256 owedInterestPayment;\\n    uint256 accruedInterestPayment;\\n    uint256 principalPayment;\\n    uint256 additionalBalancePayment;\\n    uint256 paymentRemaining;\\n  }\\n  /// @notice Event emitted on payment\\n  /// @param payer address that made the payment\\n  /// @param pool pool to which the payment was made\\n  /// @param interest amount of payment allocated to interest (obligated + additional)\\n  /// @param principal amount of payment allocated to principal owed and remaining balance\\n  /// @param remaining any excess payment amount that wasn't allocated to a debt owed\\n  /// @param reserve of payment that went to the protocol reserve\\n  event PaymentApplied(\\n    address indexed payer,\\n    address indexed pool,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 remaining,\\n    uint256 reserve\\n  );\\n  event DepositMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 amount\\n  );\\n\\n  /// @notice While owner is the label of the first argument, it is actually the sender of the transaction.\\n  event WithdrawalMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 interestWithdrawn,\\n    uint256 principalWithdrawn\\n  );\\n  event ReserveFundsCollected(address indexed from, uint256 amount);\\n  event DrawdownMade(address indexed borrower, uint256 amount);\\n  event DrawdownsPaused(address indexed pool);\\n  event DrawdownsUnpaused(address indexed pool);\\n  event EmergencyShutdown(address indexed pool);\\n}\\n\",\"keccak256\":\"0x4e46d93959ba100d532bac632fd099d69ffa32084f8b32db47df30cdc802ebde\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./openzeppelin/IERC721.sol\\\";\\nimport \\\"./IGoldfinchConfig.sol\\\";\\n\\ninterface IPoolTokens is IERC721 {\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 totalMinted;\\n    uint256 totalPrincipalRedeemed;\\n    bool created;\\n  }\\n\\n  /**\\n   * @notice Called by pool to create a debt position in a particular tranche and amount\\n   * @param params Struct containing the tranche and the amount\\n   * @param to The address that should own the position\\n   * @return tokenId The token ID (auto-incrementing integer across all pools)\\n   */\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Redeem principal and interest on a pool token. Called by valid pools as part of their redemption\\n   *  flow\\n   * @param tokenId pool token id\\n   * @param principalRedeemed principal to redeem. This cannot exceed the token's principal amount, and\\n   *  the redemption cannot cause the pool's total principal redeemed to exceed the pool's total minted\\n   *  principal\\n   * @param interestRedeemed interest to redeem.\\n   */\\n  function redeem(uint256 tokenId, uint256 principalRedeemed, uint256 interestRedeemed) external;\\n\\n  /**\\n   * @notice Withdraw a pool token's principal up to the token's principalAmount. Called by valid pools\\n   *  as part of their withdraw flow before the pool is locked (i.e. before the principal is committed)\\n   * @param tokenId pool token id\\n   * @param principalAmount principal to withdraw\\n   */\\n  function withdrawPrincipal(uint256 tokenId, uint256 principalAmount) external;\\n\\n  /**\\n   * @notice Burns a specific ERC721 token and removes deletes the token metadata for PoolTokens, BackerReards,\\n   *  and BackerStakingRewards\\n   * @param tokenId uint256 id of the ERC721 token to be burned.\\n   */\\n  function burn(uint256 tokenId) external;\\n\\n  /**\\n   * @notice Called by the GoldfinchFactory to register the pool as a valid pool. Only valid pools can mint/redeem\\n   * tokens\\n   * @param newPool The address of the newly created pool\\n   */\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function getPoolInfo(address pool) external view returns (PoolInfo memory);\\n\\n  /// @notice Query if `pool` is a valid pool. A pool is valid if it was created by the Goldfinch Factory\\n  function validPool(address pool) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n  /**\\n   * @notice Splits a pool token into two smaller positions. The original token is burned and all\\n   * its associated data is deleted.\\n   * @param tokenId id of the token to split.\\n   * @param newPrincipal1 principal amount for the first token in the split. The principal amount for the\\n   *  second token in the split is implicitly the original token's principal amount less newPrincipal1\\n   * @return tokenId1 id of the first token in the split\\n   * @return tokenId2 id of the second token in the split\\n   */\\n  function splitToken(\\n    uint256 tokenId,\\n    uint256 newPrincipal1\\n  ) external returns (uint256 tokenId1, uint256 tokenId2);\\n\\n  /**\\n   * @notice Mint event emitted for a new TranchedPool deposit or when an existing pool token is\\n   *  split\\n   * @param owner address to which the token was minted\\n   * @param pool tranched pool that the deposit was in\\n   * @param tokenId ERC721 tokenId\\n   * @param amount the deposit amount\\n   * @param tranche id of the tranche of the deposit\\n   */\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  /**\\n   * @notice Redeem event emitted when interest and/or principal is redeemed in the token's pool\\n   * @param owner owner of the pool token\\n   * @param pool tranched pool that the token belongs to\\n   * @param principalRedeemed amount of principal redeemed from the pool\\n   * @param interestRedeemed amount of interest redeemed from the pool\\n   * @param tranche id of the tranche the token belongs to\\n   */\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n\\n  /**\\n   * @notice Burn event emitted when the token owner/operator manually burns the token or burns\\n   *  it implicitly by splitting it\\n   * @param owner owner of the pool token\\n   * @param pool tranched pool that the token belongs to\\n   */\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  /**\\n   * @notice Split event emitted when the token owner/operator splits the token\\n   * @param pool tranched pool to which the orginal and split tokens belong\\n   * @param tokenId id of the original token that was split\\n   * @param newTokenId1 id of the first split token\\n   * @param newPrincipal1 principalAmount of the first split token\\n   * @param newTokenId2 id of the second split token\\n   * @param newPrincipal2 principalAmount of the second split token\\n   */\\n  event TokenSplit(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 newTokenId1,\\n    uint256 newPrincipal1,\\n    uint256 newTokenId2,\\n    uint256 newPrincipal2\\n  );\\n\\n  /**\\n   * @notice Principal Withdrawn event emitted when a token's principal is withdrawn from the pool\\n   *  BEFORE the pool's drawdown period\\n   * @param pool tranched pool of the token\\n   * @param principalWithdrawn amount of principal withdrawn from the pool\\n   */\\n  event TokenPrincipalWithdrawn(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalWithdrawn,\\n    uint256 tranche\\n  );\\n}\\n\",\"keccak256\":\"0x2c6b45491f8b77483e2e809780cd79f5570865b31b7ef7904c099bbb1e306b43\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiresUID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRequiresUID {\\n  function hasAllowedUID(address sender) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdc1693ea2ef81d20c4f5c0c507f814671691959d6d177398159cfbfda90e08d7\",\"license\":\"MIT\"},\"contracts/interfaces/ISchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ISchedule {\\n  function periodsPerPrincipalPeriod() external view returns (uint256);\\n\\n  function periodsInTerm() external view returns (uint256);\\n\\n  function periodsPerInterestPeriod() external view returns (uint256);\\n\\n  function gracePrincipalPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the period that timestamp resides in\\n   */\\n  function periodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the principal period that timestamp resides in\\n   */\\n  function principalPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the interest period that timestamp resides in\\n   */\\n  function interestPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns true if the given timestamp resides in a principal grace period\\n   */\\n  function withinPrincipalGracePeriodAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (bool);\\n\\n  /**\\n   * Returns the next timestamp where either principal or interest will come due following `timestamp`\\n   */\\n  function nextDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where either principal or timestamp came due\\n   */\\n  function previousDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where new interest came due\\n   */\\n  function previousInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where new principal came due\\n   */\\n  function previousPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total number of principal periods\\n   */\\n  function totalPrincipalPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total number of interest periods\\n   */\\n  function totalInterestPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp that the term will end\\n   */\\n  function termEndTime(uint256 startTime) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp that the term began\\n   */\\n  function termStartTime(uint256 startTime) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next time principal will come due, or the termEndTime if there are no more due times\\n   */\\n  function nextPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next time interest will come due, or the termEndTime if there are no more due times\\n   */\\n  function nextInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the end time of the given period.\\n   */\\n  function periodEndTime(uint256 startTime, uint256 period) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd12234c42aeb8a91fb435196e0aa5f45568b9f16b44ce29ea70118393ae952b1\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ITranchedPool} from \\\"./ITranchedPool.sol\\\";\\nimport {ISeniorPoolEpochWithdrawals} from \\\"./ISeniorPoolEpochWithdrawals.sol\\\";\\n\\nabstract contract ISeniorPool is ISeniorPoolEpochWithdrawals {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  /**\\n   * @notice Withdraw `usdcAmount` of USDC, bypassing the epoch withdrawal system. Callable\\n   * by Zapper only.\\n   */\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  /**\\n   * @notice Withdraw `fiduAmount` of FIDU converted to USDC at the current share price,\\n   * bypassing the epoch withdrawal system. Callable by Zapper only\\n   */\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function invest(ITranchedPool pool) external virtual returns (uint256);\\n\\n  function estimateInvestment(ITranchedPool pool) external view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) external virtual;\\n\\n  function writedown(uint256 tokenId) external virtual;\\n\\n  function calculateWritedown(\\n    uint256 tokenId\\n  ) external view virtual returns (uint256 writedownAmount);\\n\\n  function sharesOutstanding() external view virtual returns (uint256);\\n\\n  function assets() external view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n\\n  event DepositMade(address indexed capitalProvider, uint256 amount, uint256 shares);\\n  event WithdrawalMade(address indexed capitalProvider, uint256 userAmount, uint256 reserveAmount);\\n  event InterestCollected(address indexed payer, uint256 amount);\\n  event PrincipalCollected(address indexed payer, uint256 amount);\\n  event ReserveFundsCollected(address indexed user, uint256 amount);\\n  event ReserveSharesCollected(address indexed user, address indexed reserve, uint256 amount);\\n\\n  event PrincipalWrittenDown(address indexed tranchedPool, int256 amount);\\n  event InvestmentMadeInSenior(address indexed tranchedPool, uint256 amount);\\n  event InvestmentMadeInJunior(address indexed tranchedPool, uint256 amount);\\n}\\n\",\"keccak256\":\"0x4b29697012980b05c2be579a75bad466eb8236754b5212aa8ef644767ff1046f\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolEpochWithdrawals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface ISeniorPoolEpochWithdrawals {\\n  /**\\n   * @notice A withdrawal epoch\\n   * @param endsAt timestamp the epoch ends\\n   * @param fiduRequested amount of fidu requested in the epoch, including fidu\\n   *                      carried over from previous epochs\\n   * @param fiduLiquidated Amount of fidu that was liquidated at the end of this epoch\\n   * @param usdcAllocated Amount of usdc that was allocated to liquidate fidu.\\n   *                      Does not consider withdrawal fees.\\n   */\\n  struct Epoch {\\n    uint256 endsAt;\\n    uint256 fiduRequested;\\n    uint256 fiduLiquidated;\\n    uint256 usdcAllocated;\\n  }\\n\\n  /**\\n   * @notice A user's request for withdrawal\\n   * @param epochCursor id of next epoch the user can liquidate their request\\n   * @param fiduRequested amount of fidu left to liquidate since last checkpoint\\n   * @param usdcWithdrawable amount of usdc available for a user to withdraw\\n   */\\n  struct WithdrawalRequest {\\n    uint256 epochCursor;\\n    uint256 usdcWithdrawable;\\n    uint256 fiduRequested;\\n  }\\n\\n  /**\\n   * @notice Returns the amount of unallocated usdc in the senior pool, taking into account\\n   *         usdc that _will_ be allocated to withdrawals when a checkpoint happens\\n   */\\n  function usdcAvailable() external view returns (uint256);\\n\\n  /// @notice Current duration of withdrawal epochs, in seconds\\n  function epochDuration() external view returns (uint256);\\n\\n  /// @notice Update epoch duration\\n  function setEpochDuration(uint256 newEpochDuration) external;\\n\\n  /// @notice The current withdrawal epoch\\n  function currentEpoch() external view returns (Epoch memory);\\n\\n  /// @notice Get request by tokenId. A request is considered active if epochCursor > 0.\\n  function withdrawalRequest(uint256 tokenId) external view returns (WithdrawalRequest memory);\\n\\n  /**\\n   * @notice Submit a request to withdraw `fiduAmount` of FIDU. Request is rejected\\n   * if caller already owns a request token. A non-transferrable request token is\\n   * minted to the caller\\n   * @return tokenId token minted to caller\\n   */\\n  function requestWithdrawal(uint256 fiduAmount) external returns (uint256 tokenId);\\n\\n  /**\\n   * @notice Add `fiduAmount` FIDU to a withdrawal request for `tokenId`. Caller\\n   * must own tokenId\\n   */\\n  function addToWithdrawalRequest(uint256 fiduAmount, uint256 tokenId) external;\\n\\n  /**\\n   * @notice Cancel request for tokenId. The fiduRequested (minus a fee) is returned\\n   * to the caller. Caller must own tokenId.\\n   * @return fiduReceived the fidu amount returned to the caller\\n   */\\n  function cancelWithdrawalRequest(uint256 tokenId) external returns (uint256 fiduReceived);\\n\\n  /**\\n   * @notice Transfer the usdcWithdrawable of request for tokenId to the caller.\\n   * Caller must own tokenId\\n   */\\n  function claimWithdrawalRequest(uint256 tokenId) external returns (uint256 usdcReceived);\\n\\n  /// @notice Emitted when the epoch duration is changed\\n  event EpochDurationChanged(uint256 newDuration);\\n\\n  /// @notice Emitted when a new withdraw request has been created\\n  event WithdrawalRequested(\\n    uint256 indexed epochId,\\n    uint256 indexed tokenId,\\n    address indexed operator,\\n    uint256 fiduRequested\\n  );\\n\\n  /// @notice Emitted when a user adds to their existing withdraw request\\n  /// @param epochId epoch that the withdraw was added to\\n  /// @param tokenId id of token that represents the position being added to\\n  /// @param operator address that added to the request\\n  /// @param fiduRequested amount of additional fidu added to request\\n  event WithdrawalAddedTo(\\n    uint256 indexed epochId,\\n    uint256 indexed tokenId,\\n    address indexed operator,\\n    uint256 fiduRequested\\n  );\\n\\n  /// @notice Emitted when a withdraw request has been canceled\\n  event WithdrawalCanceled(\\n    uint256 indexed epochId,\\n    uint256 indexed tokenId,\\n    address indexed operator,\\n    uint256 fiduCanceled,\\n    uint256 reserveFidu\\n  );\\n\\n  /// @notice Emitted when an epoch has been checkpointed\\n  /// @param epochId id of epoch that ended\\n  /// @param endTime timestamp the epoch ended\\n  /// @param fiduRequested amount of FIDU oustanding when the epoch ended\\n  /// @param usdcAllocated amount of USDC allocated to liquidate FIDU\\n  /// @param fiduLiquidated amount of FIDU liquidated using `usdcAllocated`\\n  event EpochEnded(\\n    uint256 indexed epochId,\\n    uint256 endTime,\\n    uint256 fiduRequested,\\n    uint256 usdcAllocated,\\n    uint256 fiduLiquidated\\n  );\\n\\n  /// @notice Emitted when an epoch could not be finalized and is extended instead\\n  /// @param epochId id of epoch that was extended\\n  /// @param newEndTime new epoch end time\\n  /// @param oldEndTime previous epoch end time\\n  event EpochExtended(uint256 indexed epochId, uint256 newEndTime, uint256 oldEndTime);\\n}\\n\",\"keccak256\":\"0x6dcde0dc692a196f464d950ff81e01032c1a606b980413f862b297a86936051c\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ISeniorPool.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPoolStrategy {\\n  function getLeverageRatio(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Determines how much money to invest in the senior tranche based on what is committed to the junior\\n   * tranche, what is committed to the senior tranche, and a leverage ratio to the junior tranche. Because\\n   * it takes into account what is already committed to the senior tranche, the value returned by this\\n   * function can be used \\\"idempotently\\\" to achieve the investment target amount without exceeding that target.\\n   * @param seniorPool The senior pool to invest from\\n   * @param pool The tranched pool to invest into (as the senior)\\n   * @return amount of money to invest into the tranched pool's senior tranche, from the senior pool\\n   */\\n  function invest(\\n    ISeniorPool seniorPool,\\n    ITranchedPool pool\\n  ) public view virtual returns (uint256 amount);\\n\\n  /**\\n   * @notice A companion of `invest()`: determines how much would be returned by `invest()`, as the\\n   * value to invest into the senior tranche, if the junior tranche were locked and the senior tranche\\n   * were not locked.\\n   * @param seniorPool The senior pool to invest from\\n   * @param pool The tranched pool to invest into (as the senior)\\n   * @return The amount of money to invest into the tranched pool's senior tranche, from the senior pool\\n   */\\n  function estimateInvestment(\\n    ISeniorPool seniorPool,\\n    ITranchedPool pool\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x90606c932e1ee61d011971e50bc1df3361dee9a7db9e58c014a1fab8faa0487b\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC721} from \\\"./openzeppelin/IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./openzeppelin/IERC721Metadata.sol\\\";\\nimport {IERC721Enumerable} from \\\"./openzeppelin/IERC721Enumerable.sol\\\";\\n\\ninterface IStakingRewards is IERC721, IERC721Metadata, IERC721Enumerable {\\n  /// @notice Get the staking rewards position\\n  /// @param tokenId id of the position token\\n  /// @return position the position\\n  function getPosition(uint256 tokenId) external view returns (StakedPosition memory position);\\n\\n  /// @notice Unstake an amount of `stakingToken()` (FIDU, FiduUSDCCurveLP, etc) associated with\\n  ///   a given position and transfer to msg.sender. Any remaining staked amount will continue to\\n  ///   accrue rewards.\\n  /// @dev This function checkpoints rewards\\n  /// @param tokenId A staking position token ID\\n  /// @param amount Amount of `stakingToken()` to be unstaked from the position\\n  function unstake(uint256 tokenId, uint256 amount) external;\\n\\n  /// @notice Add `amount` to an existing FIDU position (`tokenId`)\\n  /// @param tokenId A staking position token ID\\n  /// @param amount Amount of `stakingToken()` to be added to tokenId's position\\n  function addToStake(uint256 tokenId, uint256 amount) external;\\n\\n  /// @notice Returns the staked balance of a given position token.\\n  /// @dev The value returned is the bare amount, not the effective amount. The bare amount represents\\n  ///   the number of tokens the user has staked for a given position. The effective amount is the bare\\n  ///   amount multiplied by the token's underlying asset type multiplier. This multiplier is a crypto-\\n  ///   economic parameter determined by governance.\\n  /// @param tokenId A staking position token ID\\n  /// @return Amount of staked tokens denominated in `stakingToken().decimals()`\\n  function stakedBalanceOf(uint256 tokenId) external view returns (uint256);\\n\\n  /// @notice Deposit to FIDU and USDC into the Curve LP, and stake your Curve LP tokens in the same transaction.\\n  /// @param fiduAmount The amount of FIDU to deposit\\n  /// @param usdcAmount The amount of USDC to deposit\\n  function depositToCurveAndStakeFrom(\\n    address nftRecipient,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount\\n  ) external;\\n\\n  /// @notice \\\"Kick\\\" a user's reward multiplier. If they are past their lock-up period, their reward\\n  ///   multiplier will be reset to 1x.\\n  /// @dev This will also checkpoint their rewards up to the current time.\\n  function kick(uint256 tokenId) external;\\n\\n  /// @notice Accumulated rewards per token at the last checkpoint\\n  function accumulatedRewardsPerToken() external view returns (uint256);\\n\\n  /// @notice The block timestamp when rewards were last checkpointed\\n  function lastUpdateTime() external view returns (uint256);\\n\\n  /// @notice Claim rewards for a given staked position\\n  /// @param tokenId A staking position token ID\\n  /// @return amount of rewards claimed\\n  function getReward(uint256 tokenId) external returns (uint256);\\n\\n  /* ========== EVENTS ========== */\\n\\n  event RewardAdded(uint256 reward);\\n  event Staked(\\n    address indexed user,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    StakedPositionType positionType,\\n    uint256 baseTokenExchangeRate\\n  );\\n  event DepositedAndStaked(\\n    address indexed user,\\n    uint256 depositedAmount,\\n    uint256 indexed tokenId,\\n    uint256 amount\\n  );\\n  event DepositedToCurve(\\n    address indexed user,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount,\\n    uint256 tokensReceived\\n  );\\n  event DepositedToCurveAndStaked(\\n    address indexed user,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount,\\n    uint256 indexed tokenId,\\n    uint256 amount\\n  );\\n  event AddToStake(\\n    address indexed user,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    StakedPositionType positionType\\n  );\\n  event Unstaked(\\n    address indexed user,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    StakedPositionType positionType\\n  );\\n  event UnstakedMultiple(address indexed user, uint256[] tokenIds, uint256[] amounts);\\n  event RewardPaid(address indexed user, uint256 indexed tokenId, uint256 reward);\\n  event RewardsParametersUpdated(\\n    address indexed who,\\n    uint256 targetCapacity,\\n    uint256 minRate,\\n    uint256 maxRate,\\n    uint256 minRateAtPercent,\\n    uint256 maxRateAtPercent\\n  );\\n  event EffectiveMultiplierUpdated(\\n    address indexed who,\\n    StakedPositionType positionType,\\n    uint256 multiplier\\n  );\\n}\\n\\n/// @notice Indicates which ERC20 is staked\\nenum StakedPositionType {\\n  Fidu,\\n  CurveLP\\n}\\n\\nstruct Rewards {\\n  uint256 totalUnvested;\\n  uint256 totalVested;\\n  // @dev DEPRECATED (definition kept for storage slot)\\n  //   For legacy vesting positions, this was used in the case of slashing.\\n  //   For non-vesting positions, this is unused.\\n  uint256 totalPreviouslyVested;\\n  uint256 totalClaimed;\\n  uint256 startTime;\\n  // @dev DEPRECATED (definition kept for storage slot)\\n  //   For legacy vesting positions, this is the endTime of the vesting.\\n  //   For non-vesting positions, this is 0.\\n  uint256 endTime;\\n}\\n\\nstruct StakedPosition {\\n  // @notice Staked amount denominated in `stakingToken().decimals()`\\n  uint256 amount;\\n  // @notice Struct describing rewards owed with vesting\\n  Rewards rewards;\\n  // @notice Multiplier applied to staked amount when locking up position\\n  uint256 leverageMultiplier;\\n  // @notice Time in seconds after which position can be unstaked\\n  uint256 lockedUntil;\\n  // @notice Type of the staked position\\n  StakedPositionType positionType;\\n  // @notice Multiplier applied to staked amount to denominate in `baseStakingToken().decimals()`\\n  // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\\n  //  If you need this field, use `safeEffectiveMultiplier()`, which correctly handles old staked positions.\\n  uint256 unsafeEffectiveMultiplier;\\n  // @notice Exchange rate applied to staked amount to denominate in `baseStakingToken().decimals()`\\n  // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\\n  //  If you need this field, use `safeBaseTokenExchangeRate()`, which correctly handles old staked positions.\\n  uint256 unsafeBaseTokenExchangeRate;\\n}\\n\",\"keccak256\":\"0x9df006b4cd4966a605ab6a9871ca4dd76200467c9d1d177691c4e9f9323eac8f\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedCreditLineInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\n\\ninterface ITranchedCreditLineInitializable {\\n  /// @notice Initialize a brand new credit line\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr\\n  ) external;\\n}\\n\",\"keccak256\":\"0x29877d3c8827159176a9dfcadbdc21eab6f2fe4db120bf10e8d48e02b5d73e4f\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {ILoan} from \\\"./ILoan.sol\\\";\\nimport {ICreditLine} from \\\"./ICreditLine.sol\\\";\\n\\ninterface ITranchedPool is ILoan {\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  /// @notice Initialize the pool. Can only be called once, and should be called in the same transaction as\\n  ///   contract creation to avoid initialization front-running\\n  /// @param _config address of GoldfinchConfig\\n  /// @param _borrower address of borrower, a non-transferrable role for performing privileged actions like\\n  ///   drawdown\\n  /// @param _juniorFeePercent percent (whole number) of senior interest that gets re-allocated to the junior tranche\\n  /// @param _limit the max USDC amount that can be drawn down across all pool slices\\n  /// @param _interestApr interest rate for the loan\\n  /// @param _lateFeeApr late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a\\n  ///   payment becomes late\\n  /// @param _fundableAt earliest time at which the first slice can be funded\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external;\\n\\n  /// @notice Pay down the credit line, separating the principal and interest payments. You must pay back all interest\\n  ///   before paying back principal. Excess payments are refunded to the caller\\n  /// @param principalPayment USDC amount to pay down principal\\n  /// @param interestPayment USDC amount to pay down interest\\n  /// @return PaymentAllocation info on how the payment was allocated\\n  /// @dev {this} must be approved by msg.sender to transfer {principalPayment} + {interestPayment} of USDC\\n  function pay(\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) external returns (PaymentAllocation memory);\\n\\n  /// @notice TrancheInfo for tranche with id `trancheId`. The senior tranche of slice i has id 2*(i-1)+1. The\\n  ///   junior tranche of slice i has id 2*i. Slice indices start at 1.\\n  /// @param trancheId id of tranche. Valid ids are in the range [1, 2*numSlices]\\n  function getTranche(uint256 trancheId) external view returns (ITranchedPool.TrancheInfo memory);\\n\\n  /// @notice Get a slice by index\\n  /// @param index of slice. Valid indices are on the interval [0, numSlices - 1]\\n  function poolSlices(uint256 index) external view returns (ITranchedPool.PoolSlice memory);\\n\\n  /// @notice Lock the junior capital in the junior tranche of the current slice. The capital is locked for\\n  ///   `DrawdownPeriodInSeconds` seconds and gives the senior pool time to decide how much to invest (ensure\\n  ///   leverage ratio cannot change for the period). During this period the borrower has the option to lock\\n  ///   the senior capital by calling `lockPool()`. Backers may withdraw their junior capital if the the senior\\n  ///   tranche has not been locked and the drawdown period has ended. Only the borrower can call this function.\\n  function lockJuniorCapital() external;\\n\\n  /// @notice Lock the senior capital in the senior tranche of the current slice and reset the lock period of\\n  ///   the junior capital to match the senior capital lock period. During this period the borrower has the\\n  ///   option to draw down the pool. Beyond the drawdown period any unused capital is available to withdraw by\\n  ///   all depositors.\\n  function lockPool() external;\\n\\n  /// @notice Initialize the next slice for the pool. Enables backers and the senior pool to provide additional\\n  ///   capital to the borrower.\\n  /// @param _fundableAt time at which the new slice (now the current slice) becomes fundable\\n  function initializeNextSlice(uint256 _fundableAt) external;\\n\\n  /// @notice Query the total capital supplied to the pool's junior tranches\\n  function totalJuniorDeposits() external view returns (uint256);\\n\\n  function assess() external;\\n\\n  /// @notice Get the current number of slices for this pool\\n  /// @return numSlices total current slice count\\n  function numSlices() external view returns (uint256);\\n\\n  // Note: This has to exactly match the even in the TranchingLogic library for events to be emitted\\n  // correctly\\n  event SharePriceUpdated(\\n    address indexed pool,\\n    uint256 indexed tranche,\\n    uint256 principalSharePrice,\\n    int256 principalDelta,\\n    uint256 interestSharePrice,\\n    int256 interestDelta\\n  );\\n  event CreditLineMigrated(ICreditLine indexed oldCreditLine, ICreditLine indexed newCreditLine);\\n  event TrancheLocked(address indexed pool, uint256 trancheId, uint256 lockedUntil);\\n  event SliceCreated(address indexed pool, uint256 sliceId);\\n}\\n\",\"keccak256\":\"0x5c856a841a7e178e7685aeb124a1f9e1b3f3792d931113e5b3959206bf4799cd\",\"license\":\"MIT\"},\"contracts/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title interface for implementers that have an arbitrary associated tag\\ninterface IVersioned {\\n  /// @notice Returns the version triplet `[major, minor, patch]`\\n  function getVersion() external pure returns (uint8[3] memory);\\n}\\n\",\"keccak256\":\"0xcfad0eb9092682c0634635007f727cdcb9b95046094ea6342612a96b4a26eded\",\"license\":\"MIT\"},\"contracts/interfaces/IWithdrawalRequestToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC721Enumerable} from \\\"./openzeppelin/IERC721Enumerable.sol\\\";\\n\\ninterface IWithdrawalRequestToken is IERC721Enumerable {\\n  /// @notice Mint a withdrawal request token to `receiver`\\n  /// @dev succeeds if and only if called by senior pool\\n  function mint(address receiver) external returns (uint256 tokenId);\\n\\n  /// @notice Burn token `tokenId`\\n  /// @dev suceeds if and only if called by senior pool\\n  function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xe7d5eae6f02adc163f1543a569cf9fc08763756d78447753a74c86eb80ef037d\",\"license\":\"MIT\"},\"contracts/interfaces/openzeppelin/IERC165.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\n// This file copied from OZ, but with the version pragma updated to use >=.\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbbdb8f6dfaecd47a0d65bee707877d6974a0e0da6c02403ad5ce00590bd97497\"},\"contracts/interfaces/openzeppelin/IERC721.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\n// This file copied from OZ, but with the version pragma updated to use >= & reference other >= pragma interfaces.\\n// NOTE: Modified to reference our updated pragma version of IERC165\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of NFTs in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the NFT specified by `tokenId`.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n   * another (`to`).\\n   *\\n   *\\n   *\\n   * Requirements:\\n   * - `from`, `to` cannot be zero.\\n   * - `tokenId` must be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this\\n   * NFT by either {approve} or {setApprovalForAll}.\\n   */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Requirements:\\n   * - If the caller is not `from`, it must be approved to move this NFT by\\n   * either {approve} or {setApprovalForAll}.\\n   */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x839a8ac86a7be93a842f708f7e41a5a56a6e44ee9dcc2559b99042122dd76048\"},\"contracts/interfaces/openzeppelin/IERC721Enumerable.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\n// This file copied from OZ, but with the version pragma updated to use >=.\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function tokenOfOwnerByIndex(\\n    address owner,\\n    uint256 index\\n  ) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8612dba35cd477a6392985f5309e9ca495fa21d8a07176956a53207a54da898d\"},\"contracts/interfaces/openzeppelin/IERC721Metadata.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\n// This file copied from OZ, but with the version pragma updated to use >=.\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x56c56c47d03d0ea452a13842ad2e3e5b81b3689c484efd35a48f3977e9b929d8\"},\"contracts/library/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Safe ERC20 Transfer\\n * @notice Reverts when transfer is not successful\\n * @author Goldfinch\\n */\\nlibrary SafeERC20Transfer {\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    /// @dev ZERO address\\n    require(to != address(0), \\\"ZERO\\\");\\n    bool success = erc20.transfer(to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Transfer(IERC20 erc20, address to, uint256 amount) internal {\\n    safeERC20Transfer(erc20, to, amount, \\\"\\\");\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    require(to != address(0), \\\"ZERO\\\");\\n    bool success = erc20.transferFrom(from, to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20TransferFrom(IERC20 erc20, address from, address to, uint256 amount) internal {\\n    safeERC20TransferFrom(erc20, from, to, amount, \\\"\\\");\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance,\\n    string memory message\\n  ) internal {\\n    bool success = erc20.approve(spender, allowance);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Approve(IERC20 erc20, address spender, uint256 allowance) internal {\\n    safeERC20Approve(erc20, spender, allowance, \\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x5ba8506f8df017cbec694c084529bd7a4f3c8fc973dc5bad7fe7307bc76fe7ba\",\"license\":\"MIT\"},\"contracts/library/SafeMath.sol\":{\"content\":\"pragma solidity >=0.6.12;\\n\\n// NOTE: this file exists only to remove the extremely long error messages in safe math.\\n\\nimport {SafeMath as OzSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return OzSafeMath.sub(a, b, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    return OzSafeMath.sub(a, b, errorMessage);\\n  }\\n\\n  /// @notice Do a - b. If that would result in overflow then return 0\\n  function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return b > a ? 0 : a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return OzSafeMath.div(a, b, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    return OzSafeMath.div(a, b, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return OzSafeMath.mod(a, b, \\\"\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    return OzSafeMath.mod(a, b, errorMessage);\\n  }\\n}\\n\",\"keccak256\":\"0x492f16ba6645f576d55d73cb648a4f7268bf84dae52768826d7e37693ffa7148\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {AccessControlUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuardUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport {SafeMath} from \\\"../../library/SafeMath.sol\\\";\\nimport {PauserPausable} from \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x6d54b1a0f1e2a6d1e6934f1a596192727ea6ba6c6ecaccf0e43c8be11508df9e\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ImplementationRepository} from \\\"./proxy/ImplementationRepository.sol\\\";\\nimport {ConfigOptions} from \\\"./ConfigOptions.sol\\\";\\nimport {GoldfinchConfig} from \\\"./GoldfinchConfig.sol\\\";\\nimport {IFidu} from \\\"../../interfaces/IFidu.sol\\\";\\nimport {IWithdrawalRequestToken} from \\\"../../interfaces/IWithdrawalRequestToken.sol\\\";\\nimport {ISeniorPool} from \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport {ISeniorPoolStrategy} from \\\"../../interfaces/ISeniorPoolStrategy.sol\\\";\\nimport {IERC20withDec} from \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport {ICUSDCContract} from \\\"../../interfaces/ICUSDCContract.sol\\\";\\nimport {IPoolTokens} from \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport {IBackerRewards} from \\\"../../interfaces/IBackerRewards.sol\\\";\\nimport {IGoldfinchFactory} from \\\"../../interfaces/IGoldfinchFactory.sol\\\";\\nimport {IGo} from \\\"../../interfaces/IGo.sol\\\";\\nimport {IStakingRewards} from \\\"../../interfaces/IStakingRewards.sol\\\";\\nimport {ICurveLP} from \\\"../../interfaces/ICurveLP.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getSeniorPool(GoldfinchConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getSeniorPoolStrategy(\\n    GoldfinchConfig config\\n  ) internal view returns (ISeniorPoolStrategy) {\\n    return ISeniorPoolStrategy(seniorPoolStrategyAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getFiduUSDCCurveLP(GoldfinchConfig config) internal view returns (ICurveLP) {\\n    return ICurveLP(fiduUSDCCurveLPAddress(config));\\n  }\\n\\n  function getCUSDCContract(GoldfinchConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function getPoolTokens(GoldfinchConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getBackerRewards(GoldfinchConfig config) internal view returns (IBackerRewards) {\\n    return IBackerRewards(backerRewardsAddress(config));\\n  }\\n\\n  function getGoldfinchFactory(GoldfinchConfig config) internal view returns (IGoldfinchFactory) {\\n    return IGoldfinchFactory(goldfinchFactoryAddress(config));\\n  }\\n\\n  function getGFI(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(gfiAddress(config));\\n  }\\n\\n  function getGo(GoldfinchConfig config) internal view returns (IGo) {\\n    return IGo(goAddress(config));\\n  }\\n\\n  function getStakingRewards(GoldfinchConfig config) internal view returns (IStakingRewards) {\\n    return IStakingRewards(stakingRewardsAddress(config));\\n  }\\n\\n  function getTranchedPoolImplementationRepository(\\n    GoldfinchConfig config\\n  ) internal view returns (ImplementationRepository) {\\n    return\\n      ImplementationRepository(\\n        config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementationRepository))\\n      );\\n  }\\n\\n  function getCallableLoanImplementationRepository(\\n    GoldfinchConfig config\\n  ) internal view returns (ImplementationRepository) {\\n    return\\n      ImplementationRepository(\\n        config.getAddress(uint256(ConfigOptions.Addresses.CallableLoanImplementationRepository))\\n      );\\n  }\\n\\n  function getWithdrawalRequestToken(\\n    GoldfinchConfig config\\n  ) internal view returns (IWithdrawalRequestToken) {\\n    return\\n      IWithdrawalRequestToken(\\n        config.getAddress(uint256(ConfigOptions.Addresses.WithdrawalRequestToken))\\n      );\\n  }\\n\\n  function oneInchAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function creditLineImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  /// @dev deprecated because we no longer use GSN\\n  function trustedForwarderAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolTokensAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function backerRewardsAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackerRewards));\\n  }\\n\\n  function seniorPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function seniorPoolStrategyAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPoolStrategy));\\n  }\\n\\n  function goldfinchFactoryAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory));\\n  }\\n\\n  function gfiAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function fiduUSDCCurveLPAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.FiduUSDCCurveLP));\\n  }\\n\\n  function cusdcContractAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function goAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Go));\\n  }\\n\\n  function stakingRewardsAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakingRewards));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(\\n    GoldfinchConfig config\\n  ) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n\\n  function getSeniorPoolWithdrawalCancelationFeeInBps(\\n    GoldfinchConfig config\\n  ) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.SeniorPoolWithdrawalCancelationFeeInBps));\\n  }\\n}\\n\",\"keccak256\":\"0x8cc6a08e3745ecd516d5654d642d1819cb05a8297882e3889ec96b9d09689294\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    /// @dev: TotalFundsLimit used to represent a total cap on senior pool deposits\\n    /// but is now deprecated\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio,\\n    /// A number in the range [0, 10000] representing basis points of FIDU taken as a fee\\n    /// when a withdrawal request is canceled.\\n    SeniorPoolWithdrawalCancelationFeeInBps\\n  }\\n  /// @dev TrustedForwarder is deprecated because we no longer use GSN. CreditDesk\\n  ///   and Pool are deprecated because they are no longer used in the protocol.\\n  enum Addresses {\\n    Pool, // deprecated\\n    CreditLineImplementation,\\n    GoldfinchFactory,\\n    CreditDesk, // deprecated\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder, // deprecated\\n    CUSDCContract,\\n    GoldfinchConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation, // deprecated\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation,\\n    GFI,\\n    Go,\\n    BackerRewards,\\n    StakingRewards,\\n    FiduUSDCCurveLP,\\n    TranchedPoolImplementationRepository,\\n    WithdrawalRequestToken,\\n    MonthlyScheduleRepo,\\n    CallableLoanImplementationRepository\\n  }\\n}\\n\",\"keccak256\":\"0xc782f8613bfcb2b4709c7919ba175bd74335586dd6c43980b496337c5bf6d132\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {BaseUpgradeablePausable} from \\\"./BaseUpgradeablePausable.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../interfaces/IGoldfinchConfig.sol\\\";\\nimport {ConfigOptions} from \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n *  Note: While this inherits from BaseUpgradeablePausable, it is not deployed as an upgradeable contract (this\\n *    is mostly to save gas costs of having each call go through a proxy)\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable, IGoldfinchConfig {\\n  bytes32 public constant GO_LISTER_ROLE = keccak256(\\\"GO_LISTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n  mapping(address => bool) public goList;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  event GoListed(address indexed member);\\n  event NoListed(address indexed member);\\n\\n  bool public valuesInitialized;\\n\\n  function initialize(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    _setupRole(GO_LISTER_ROLE, owner);\\n\\n    _setRoleAdmin(GO_LISTER_ROLE, OWNER_ROLE);\\n  }\\n\\n  /// @inheritdoc IGoldfinchConfig\\n  function setAddress(uint256 addressIndex, address newAddress) public override onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  /// @inheritdoc IGoldfinchConfig\\n  function setNumber(uint256 index, uint256 newNumber) public override onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  function setSeniorPoolStrategy(address newStrategy) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.SeniorPoolStrategy);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newStrategy);\\n    addresses[key] = newStrategy;\\n  }\\n\\n  function setCreditLineImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setTranchedPoolImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TranchedPoolImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setBorrowerImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.BorrowerImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setGoldfinchConfig(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.GoldfinchConfig);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function initializeFromOtherConfig(\\n    address _initialConfig,\\n    uint256 numbersLength,\\n    uint256 addressesLength\\n  ) public onlyAdmin {\\n    require(!valuesInitialized, \\\"Already initialized values\\\");\\n    IGoldfinchConfig initialConfig = IGoldfinchConfig(_initialConfig);\\n    for (uint256 i = 0; i < numbersLength; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < addressesLength; i++) {\\n      if (getAddress(i) == address(0)) {\\n        setAddress(i, initialConfig.getAddress(i));\\n      }\\n    }\\n    valuesInitialized = true;\\n  }\\n\\n  /// @inheritdoc IGoldfinchConfig\\n  function addToGoList(address _member) public override onlyGoListerRole {\\n    goList[_member] = true;\\n    emit GoListed(_member);\\n  }\\n\\n  /// @inheritdoc IGoldfinchConfig\\n  function removeFromGoList(address _member) public override onlyGoListerRole {\\n    goList[_member] = false;\\n    emit NoListed(_member);\\n  }\\n\\n  /// @inheritdoc IGoldfinchConfig\\n  function bulkAddToGoList(address[] calldata _members) external override onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      addToGoList(_members[i]);\\n    }\\n  }\\n\\n  /// @inheritdoc IGoldfinchConfig\\n  function bulkRemoveFromGoList(address[] calldata _members) external override onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      removeFromGoList(_members[i]);\\n    }\\n  }\\n\\n  /// @inheritdoc IGoldfinchConfig\\n  function getAddress(uint256 index) public view override returns (address) {\\n    return addresses[index];\\n  }\\n\\n  function getNumber(uint256 index) public view override returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  modifier onlyGoListerRole() {\\n    require(\\n      hasRole(GO_LISTER_ROLE, _msgSender()),\\n      \\\"Must have go-lister role to perform this action\\\"\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa496d974d7ec803bf8a0ba8e3f2fc1a42a2cc3ca6404df80ab34e6a8f3c8c0a4\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    /// @dev NA: not authorized\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x218eb32fc1649d98c0ac6f80689fc3e5fdcfbca36cf94431b9901788fbf3d266\",\"license\":\"MIT\"},\"contracts/protocol/core/TranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/drafts/IERC20Permit.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {ITranchedPool} from \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport {ILoan} from \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport {IRequiresUID} from \\\"../../interfaces/IRequiresUID.sol\\\";\\nimport {IERC20withDec} from \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport {ICreditLine} from \\\"../../interfaces/ICreditLine.sol\\\";\\nimport {ITranchedCreditLineInitializable} from \\\"../../interfaces/ITranchedCreditLineInitializable.sol\\\";\\nimport {IBackerRewards} from \\\"../../interfaces/IBackerRewards.sol\\\";\\nimport {IPoolTokens} from \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport {IVersioned} from \\\"../../interfaces/IVersioned.sol\\\";\\nimport {ISchedule} from \\\"../../interfaces/ISchedule.sol\\\";\\nimport {GoldfinchConfig} from \\\"./GoldfinchConfig.sol\\\";\\nimport {BaseUpgradeablePausable} from \\\"./BaseUpgradeablePausable.sol\\\";\\nimport {ConfigHelper} from \\\"./ConfigHelper.sol\\\";\\nimport {SafeERC20Transfer} from \\\"../../library/SafeERC20Transfer.sol\\\";\\nimport {TranchingLogic} from \\\"./TranchingLogic.sol\\\";\\n\\n/// @title The main contract to faciliate lending. Backers and the Senior Pool fund the loan\\n///   through this contract. The borrower draws down on and pays back a loan through this contract.\\n/// @author Warbler Labs\\ncontract TranchedPool is BaseUpgradeablePausable, ITranchedPool, IRequiresUID, IVersioned {\\n  GoldfinchConfig public config;\\n\\n  using ConfigHelper for GoldfinchConfig;\\n  using TranchingLogic for ITranchedPool.PoolSlice;\\n  using TranchingLogic for ITranchedPool.TrancheInfo;\\n  using SafeERC20Transfer for IERC20withDec;\\n\\n  bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n  bytes32 public constant SENIOR_ROLE = keccak256(\\\"SENIOR_ROLE\\\");\\n  uint8 internal constant MAJOR_VERSION = 1;\\n  uint8 internal constant MINOR_VERSION = 0;\\n  uint8 internal constant PATCH_VERSION = 0;\\n\\n  ICreditLine public override creditLine;\\n  uint256 public override createdAt;\\n  uint256 public juniorFeePercent;\\n  bool public drawdownsPaused;\\n  uint256[] public allowedUIDTypes;\\n  uint256 public totalDeployed;\\n  uint256 public fundableAt;\\n\\n  mapping(uint256 => ITranchedPool.PoolSlice) internal _poolSlices;\\n\\n  /// @inheritdoc ITranchedPool\\n  uint256 public override numSlices;\\n\\n  /// @inheritdoc ITranchedPool\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public override initializer {\\n    require(address(_config) != address(0) && address(_borrower) != address(0), \\\"ZERO\\\");\\n\\n    config = GoldfinchConfig(_config);\\n    address owner = config.protocolAdminAddress();\\n    __BaseUpgradeablePausable__init(owner);\\n    _initializeNextSlice(_fundableAt);\\n    _createAndSetCreditLine(_borrower, _limit, _interestApr, _schedule, _lateFeeApr);\\n\\n    createdAt = block.timestamp;\\n    juniorFeePercent = _juniorFeePercent;\\n    if (_allowedUIDTypes.length == 0) {\\n      uint256[1] memory defaultAllowedUIDTypes = [config.getGo().ID_TYPE_0()];\\n      allowedUIDTypes = defaultAllowedUIDTypes;\\n    } else {\\n      allowedUIDTypes = _allowedUIDTypes;\\n    }\\n\\n    _setupRole(LOCKER_ROLE, _borrower);\\n    _setupRole(LOCKER_ROLE, owner);\\n    _setRoleAdmin(LOCKER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(SENIOR_ROLE, OWNER_ROLE);\\n\\n    // Give the senior pool the ability to deposit into the senior pool\\n    _setupRole(SENIOR_ROLE, address(config.getSeniorPool()));\\n  }\\n\\n  function setAllowedUIDTypes(uint256[] calldata ids) external onlyLocker {\\n    require(\\n      _poolSlices[0].juniorTranche.principalDeposited == 0 &&\\n        _poolSlices[0].seniorTranche.principalDeposited == 0,\\n      \\\"has balance\\\"\\n    );\\n    allowedUIDTypes = ids;\\n  }\\n\\n  function getAllowedUIDTypes() external view override returns (uint256[] memory) {\\n    return allowedUIDTypes;\\n  }\\n\\n  /// @notice Intentionable no-op. Included to be compatible with the v1 pool interface\\n  // solhint-disable-next-line no-empty-blocks\\n  function assess() external override whenNotPaused {}\\n\\n  /// @inheritdoc ILoan\\n  /// @dev TL: tranche locked\\n  /// @dev IA: invalid amount\\n  /// @dev NA: not authorized. Must have correct UID or be go listed\\n  function deposit(\\n    uint256 tranche,\\n    uint256 amount\\n  ) public override nonReentrant whenNotPaused returns (uint256) {\\n    ITranchedPool.TrancheInfo storage trancheInfo = _getTrancheInfo(tranche);\\n    require(trancheInfo.lockedUntil == 0, \\\"TL\\\");\\n    require(amount > 0, \\\"IA\\\");\\n    require(hasAllowedUID(msg.sender), \\\"NA\\\");\\n    require(block.timestamp >= fundableAt, \\\"Not open\\\");\\n    // senior tranche ids are always odd numbered\\n    if (TranchingLogic.isSeniorTrancheId(trancheInfo.id)) {\\n      require(hasRole(SENIOR_ROLE, _msgSender()), \\\"NA\\\");\\n    }\\n\\n    trancheInfo.principalDeposited = trancheInfo.principalDeposited.add(amount);\\n    uint256 tokenId = config.getPoolTokens().mint(\\n      IPoolTokens.MintParams({tranche: tranche, principalAmount: amount}),\\n      msg.sender\\n    );\\n\\n    config.getUSDC().safeERC20TransferFrom(msg.sender, address(this), amount);\\n    emit DepositMade(msg.sender, tranche, tokenId, amount);\\n    return tokenId;\\n  }\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public override whenNotPaused returns (uint256 tokenId) {\\n    IERC20Permit(config.usdcAddress()).permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    return deposit(tranche, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function withdraw(\\n    uint256 tokenId,\\n    uint256 amount\\n  ) public override nonReentrant whenNotPaused returns (uint256, uint256) {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    ITranchedPool.TrancheInfo storage trancheInfo = _getTrancheInfo(tokenInfo.tranche);\\n\\n    return _withdraw(trancheInfo, tokenInfo, tokenId, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @dev LEN: argument length mismatch\\n  function withdrawMultiple(\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts\\n  ) public override {\\n    require(tokenIds.length == amounts.length, \\\"LEN\\\");\\n\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      withdraw(tokenIds[i], amounts[i]);\\n    }\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function withdrawMax(\\n    uint256 tokenId\\n  )\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\\n  {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    ITranchedPool.TrancheInfo storage trancheInfo = _getTrancheInfo(tokenInfo.tranche);\\n\\n    (uint256 interestRedeemable, uint256 principalRedeemable) = TranchingLogic\\n      .redeemableInterestAndPrincipal(trancheInfo, tokenInfo);\\n\\n    uint256 amount = interestRedeemable.add(principalRedeemable);\\n\\n    return _withdraw(trancheInfo, tokenInfo, tokenId, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @dev DP: drawdowns paused\\n  /// @dev IF: insufficient funds\\n  function drawdown(uint256 amount) external override onlyLocker whenNotPaused {\\n    require(!drawdownsPaused, \\\"DP\\\");\\n    if (!_locked()) {\\n      // Assumes the senior pool has invested already (saves the borrower a separate transaction to lock the pool)\\n      _lockPool();\\n    }\\n    // Drawdown only draws down from the current slice for simplicity. It's harder to account for how much\\n    // money is available from previous slices since depositors can redeem after unlock.\\n    ITranchedPool.PoolSlice storage currentSlice = _poolSlices[numSlices - 1];\\n    uint256 amountAvailable = TranchingLogic.sharePriceToUsdc(\\n      currentSlice.juniorTranche.principalSharePrice,\\n      currentSlice.juniorTranche.principalDeposited\\n    );\\n    amountAvailable = amountAvailable.add(\\n      TranchingLogic.sharePriceToUsdc(\\n        currentSlice.seniorTranche.principalSharePrice,\\n        currentSlice.seniorTranche.principalDeposited\\n      )\\n    );\\n\\n    require(amount <= amountAvailable, \\\"IF\\\");\\n\\n    creditLine.drawdown(amount);\\n\\n    // Update the share price to reflect the amount remaining in the pool\\n    uint256 amountRemaining = amountAvailable.sub(amount);\\n    uint256 oldJuniorPrincipalSharePrice = currentSlice.juniorTranche.principalSharePrice;\\n    uint256 oldSeniorPrincipalSharePrice = currentSlice.seniorTranche.principalSharePrice;\\n    currentSlice.juniorTranche.principalSharePrice = currentSlice\\n      .juniorTranche\\n      .calculateExpectedSharePrice(amountRemaining, currentSlice);\\n    currentSlice.seniorTranche.principalSharePrice = currentSlice\\n      .seniorTranche\\n      .calculateExpectedSharePrice(amountRemaining, currentSlice);\\n    currentSlice.principalDeployed = currentSlice.principalDeployed.add(amount);\\n    totalDeployed = totalDeployed.add(amount);\\n\\n    address borrower = creditLine.borrower();\\n    IBackerRewards backerRewards = IBackerRewards(config.backerRewardsAddress());\\n    backerRewards.onTranchedPoolDrawdown(numSlices - 1);\\n    config.getUSDC().safeERC20Transfer(borrower, amount);\\n    emit DrawdownMade(borrower, amount);\\n    emit SharePriceUpdated(\\n      address(this),\\n      currentSlice.juniorTranche.id,\\n      currentSlice.juniorTranche.principalSharePrice,\\n      int256(oldJuniorPrincipalSharePrice.sub(currentSlice.juniorTranche.principalSharePrice)) * -1,\\n      currentSlice.juniorTranche.interestSharePrice,\\n      0\\n    );\\n    emit SharePriceUpdated(\\n      address(this),\\n      currentSlice.seniorTranche.id,\\n      currentSlice.seniorTranche.principalSharePrice,\\n      int256(oldSeniorPrincipalSharePrice.sub(currentSlice.seniorTranche.principalSharePrice)) * -1,\\n      currentSlice.seniorTranche.interestSharePrice,\\n      0\\n    );\\n  }\\n\\n  function NUM_TRANCHES_PER_SLICE() external pure returns (uint256) {\\n    return TranchingLogic.NUM_TRANCHES_PER_SLICE;\\n  }\\n\\n  /// @inheritdoc ITranchedPool\\n  function lockJuniorCapital() external override onlyLocker whenNotPaused {\\n    _lockJuniorCapital(numSlices.sub(1));\\n  }\\n\\n  /// @inheritdoc ITranchedPool\\n  function lockPool() external override onlyLocker whenNotPaused {\\n    _lockPool();\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function setFundableAt(uint256 newFundableAt) external override onlyLocker {\\n    fundableAt = newFundableAt;\\n  }\\n\\n  /// @inheritdoc ITranchedPool\\n  /// @dev NL: not locked\\n  /// @dev LP: late payment\\n  /// @dev GP: beyond principal grace period\\n  function initializeNextSlice(uint256 _fundableAt) external override onlyLocker whenNotPaused {\\n    require(_locked(), \\\"NL\\\");\\n    require(!creditLine.isLate(), \\\"LP\\\");\\n    require(creditLine.withinPrincipalGracePeriod(), \\\"GP\\\");\\n    _initializeNextSlice(_fundableAt);\\n    emit SliceCreated(address(this), numSlices.sub(1));\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @dev IT: invalid timestamp\\n  /// @dev LI: loan inactive\\n  function getAmountsOwed(\\n    uint256 timestamp\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 interestOwed, uint256 interestAccrued, uint256 principalOwed)\\n  {\\n    require(timestamp >= block.timestamp, \\\"IT\\\");\\n    require(creditLine.termEndTime() > 0, \\\"LI\\\");\\n\\n    return (\\n      creditLine.interestOwedAt(timestamp),\\n      creditLine.interestAccruedAt(timestamp),\\n      creditLine.principalOwedAt(timestamp)\\n    );\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @dev ZA: zero amount\\n  function pay(\\n    uint256 amount\\n  ) external override nonReentrant whenNotPaused returns (PaymentAllocation memory) {\\n    require(amount > 0, \\\"ZA\\\");\\n    // Send money to the credit line. Only take what's actually owed\\n    uint256 maxPayableAmount = creditLine.interestAccrued().add(creditLine.interestOwed()).add(\\n      creditLine.balance()\\n    );\\n    uint256 amountToPay = Math.min(amount, maxPayableAmount);\\n    config.getUSDC().safeERC20TransferFrom(msg.sender, address(this), amountToPay);\\n\\n    PaymentAllocation memory pa = _pay(amount);\\n\\n    // Payment remaining should always be 0 because we don't take excess usdc\\n    assert(pa.paymentRemaining == 0);\\n    return pa;\\n  }\\n\\n  /// @inheritdoc ITranchedPool\\n  /// @dev ZA: zero amount\\n  function pay(\\n    uint256 principalAmount,\\n    uint256 interestAmount\\n  ) external override nonReentrant whenNotPaused returns (PaymentAllocation memory) {\\n    uint256 totalPayment = principalAmount.add(interestAmount);\\n    require(totalPayment > 0, \\\"ZA\\\");\\n\\n    // If there is an excess principal payment then only take what we actually need\\n    uint256 principalToPay = Math.min(principalAmount, creditLine.balance());\\n\\n    // If there is an excess interest payment then only take what we actually need\\n    uint256 maxPayableInterest = creditLine.interestAccrued().add(creditLine.interestOwed());\\n    uint256 interestToPay = Math.min(interestAmount, maxPayableInterest);\\n    config.getUSDC().safeERC20TransferFrom(\\n      msg.sender,\\n      address(this),\\n      principalToPay.add(interestToPay)\\n    );\\n    PaymentAllocation memory pa = _pay(principalToPay, interestToPay);\\n\\n    // Payment remaining should always be 0 because we don't take excess usdc\\n    assert(pa.paymentRemaining == 0);\\n    return pa;\\n  }\\n\\n  /// @notice Pauses the pool and sweeps any remaining funds to the treasury reserve.\\n  function emergencyShutdown() public onlyAdmin {\\n    if (!paused()) {\\n      pause();\\n    }\\n\\n    IERC20withDec usdc = config.getUSDC();\\n    address reserveAddress = config.reserveAddress();\\n    // Sweep any funds to community reserve\\n    uint256 poolBalance = usdc.balanceOf(address(this));\\n    if (poolBalance > 0) {\\n      config.getUSDC().safeERC20Transfer(reserveAddress, poolBalance);\\n    }\\n\\n    uint256 clBalance = usdc.balanceOf(address(creditLine));\\n    if (clBalance > 0) {\\n      usdc.safeERC20TransferFrom(address(creditLine), reserveAddress, clBalance);\\n    }\\n    emit EmergencyShutdown(address(this));\\n  }\\n\\n  /// @notice Pauses all drawdowns (but not deposits/withdraws)\\n  function pauseDrawdowns() public onlyAdmin {\\n    drawdownsPaused = true;\\n    emit DrawdownsPaused(address(this));\\n  }\\n\\n  /// @notice Unpause drawdowns\\n  function unpauseDrawdowns() public onlyAdmin {\\n    drawdownsPaused = false;\\n    emit DrawdownsUnpaused(address(this));\\n  }\\n\\n  // CreditLine proxy method\\n  function setLimit(uint256 newAmount) external onlyAdmin {\\n    return creditLine.setLimit(newAmount);\\n  }\\n\\n  function setMaxLimit(uint256 newAmount) external onlyAdmin {\\n    return creditLine.setMaxLimit(newAmount);\\n  }\\n\\n  /// @inheritdoc ITranchedPool\\n  function getTranche(\\n    uint256 tranche\\n  ) public view override returns (ITranchedPool.TrancheInfo memory) {\\n    return _getTrancheInfo(tranche);\\n  }\\n\\n  /// @inheritdoc ITranchedPool\\n  function poolSlices(\\n    uint256 index\\n  ) external view override returns (ITranchedPool.PoolSlice memory) {\\n    return _poolSlices[index];\\n  }\\n\\n  /// @inheritdoc ITranchedPool\\n  function totalJuniorDeposits() external view override returns (uint256) {\\n    uint256 total;\\n    for (uint256 i = 0; i < numSlices; i++) {\\n      total = total.add(_poolSlices[i].juniorTranche.principalDeposited);\\n    }\\n    return total;\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function availableToWithdraw(uint256 tokenId) public view override returns (uint256, uint256) {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    ITranchedPool.TrancheInfo storage trancheInfo = _getTrancheInfo(tokenInfo.tranche);\\n\\n    if (block.timestamp > trancheInfo.lockedUntil) {\\n      return TranchingLogic.redeemableInterestAndPrincipal(trancheInfo, tokenInfo);\\n    } else {\\n      return (0, 0);\\n    }\\n  }\\n\\n  function hasAllowedUID(address sender) public view override returns (bool) {\\n    return config.getGo().goOnlyIdTypes(sender, allowedUIDTypes);\\n  }\\n\\n  /* Internal functions  */\\n\\n  /// @dev NL: not locked\\n  function _pay(\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) internal returns (PaymentAllocation memory) {\\n    // We need to make sure the pool is locked before we allocate rewards to ensure it's not\\n    // possible to game rewards by sandwiching an interest payment to an unlocked pool\\n    // It also causes issues trying to allocate payments to an empty slice (divide by zero)\\n    require(_locked(), \\\"NL\\\");\\n\\n    uint256 interestAccrued = creditLine.totalInterestAccruedAt(creditLine.interestAccruedAsOf());\\n    PaymentAllocation memory pa = creditLine.pay(principalPayment, interestPayment);\\n    interestAccrued = creditLine.totalInterestAccrued().sub(interestAccrued);\\n\\n    distributeToSlicesAndAllocateBackerRewards(interestAccrued, pa);\\n    return pa;\\n  }\\n\\n  function _pay(uint256 paymentAmount) internal returns (PaymentAllocation memory) {\\n    // We need to make sure the pool is locked before we allocate rewards to ensure it's not\\n    // possible to game rewards by sandwiching an interest payment to an unlocked pool\\n    // It also causes issues trying to allocate payments to an empty slice (divide by zero)\\n    require(_locked(), \\\"NL\\\");\\n\\n    uint256 interestAccrued = creditLine.totalInterestAccruedAt(creditLine.interestAccruedAsOf());\\n    PaymentAllocation memory pa = creditLine.pay(paymentAmount);\\n    interestAccrued = creditLine.totalInterestAccrued().sub(interestAccrued);\\n\\n    distributeToSlicesAndAllocateBackerRewards(interestAccrued, pa);\\n    return pa;\\n  }\\n\\n  function distributeToSlicesAndAllocateBackerRewards(\\n    uint256 interestAccrued,\\n    PaymentAllocation memory pa\\n  ) internal {\\n    // Split the interest accrued proportionally across slices so we know how much interest goes to each slice\\n    // We need this because the slice start at different times, so we cannot retroactively allocate the interest\\n    // linearly\\n    uint256[] memory principalPaymentsPerSlice = new uint256[](numSlices);\\n    for (uint256 i = 0; i < numSlices; i++) {\\n      uint256 interestForSlice = TranchingLogic.scaleByFraction(\\n        interestAccrued,\\n        _poolSlices[i].principalDeployed,\\n        totalDeployed\\n      );\\n      principalPaymentsPerSlice[i] = TranchingLogic.scaleByFraction(\\n        pa.principalPayment.add(pa.additionalBalancePayment),\\n        _poolSlices[i].principalDeployed,\\n        totalDeployed\\n      );\\n      _poolSlices[i].totalInterestAccrued = _poolSlices[i].totalInterestAccrued.add(\\n        interestForSlice\\n      );\\n    }\\n\\n    uint256 interestPayment = pa.owedInterestPayment.add(pa.accruedInterestPayment);\\n    uint256 principalPayment = pa.principalPayment.add(pa.additionalBalancePayment);\\n    if (interestPayment > 0 || principalPayment > 0) {\\n      uint256 reserveAmount = _collectInterestAndPrincipal(interestPayment, principalPayment);\\n\\n      uint256 principalPaymentsToSlices = 0;\\n      for (uint256 i = 0; i < numSlices; i++) {\\n        _poolSlices[i].principalDeployed = _poolSlices[i].principalDeployed.sub(\\n          principalPaymentsPerSlice[i]\\n        );\\n        principalPaymentsToSlices = principalPaymentsToSlices.add(principalPaymentsPerSlice[i]);\\n      }\\n\\n      totalDeployed = totalDeployed.sub(principalPaymentsToSlices);\\n\\n      config.getBackerRewards().allocateRewards(interestPayment);\\n\\n      emit PaymentApplied(\\n        creditLine.borrower(),\\n        address(this),\\n        pa.owedInterestPayment.add(pa.accruedInterestPayment),\\n        principalPayment,\\n        pa.paymentRemaining,\\n        reserveAmount\\n      );\\n    }\\n  }\\n\\n  function _collectInterestAndPrincipal(\\n    uint256 interest,\\n    uint256 principal\\n  ) internal returns (uint256) {\\n    uint256 totalReserveAmount = TranchingLogic.applyToAllSlices(\\n      _poolSlices,\\n      numSlices,\\n      interest,\\n      principal,\\n      uint256(100).div(config.getReserveDenominator()), // Convert the denominator to percent\\n      totalDeployed,\\n      creditLine,\\n      juniorFeePercent\\n    );\\n\\n    config.getUSDC().safeERC20Transfer(config.reserveAddress(), totalReserveAmount);\\n\\n    emit ReserveFundsCollected(address(this), totalReserveAmount);\\n\\n    return totalReserveAmount;\\n  }\\n\\n  function _createAndSetCreditLine(\\n    address _borrower,\\n    uint256 _maxLimit,\\n    uint256 _interestApr,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr\\n  ) internal {\\n    creditLine = ICreditLine(config.getGoldfinchFactory().createCreditLine());\\n    ITranchedCreditLineInitializable(address(creditLine)).initialize(\\n      address(config),\\n      address(this), // Set self as the owner\\n      _borrower,\\n      _maxLimit,\\n      _interestApr,\\n      _schedule,\\n      _lateFeeApr\\n    );\\n  }\\n\\n  // // Internal //////////////////////////////////////////////////////////////////\\n\\n  /// @dev ZA: Zero amount\\n  /// @dev IA: Invalid amount - amount too large\\n  /// @dev TL: Tranched Locked\\n  function _withdraw(\\n    ITranchedPool.TrancheInfo storage trancheInfo,\\n    IPoolTokens.TokenInfo memory tokenInfo,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) internal returns (uint256, uint256) {\\n    /// @dev NA: not authorized\\n    require(\\n      config.getPoolTokens().isApprovedOrOwner(msg.sender, tokenId) && hasAllowedUID(msg.sender),\\n      \\\"NA\\\"\\n    );\\n    require(amount > 0, \\\"ZA\\\");\\n    (uint256 interestRedeemable, uint256 principalRedeemable) = TranchingLogic\\n      .redeemableInterestAndPrincipal(trancheInfo, tokenInfo);\\n    uint256 netRedeemable = interestRedeemable.add(principalRedeemable);\\n\\n    require(amount <= netRedeemable, \\\"IA\\\");\\n    require(block.timestamp > trancheInfo.lockedUntil, \\\"TL\\\");\\n\\n    uint256 interestToRedeem = 0;\\n    uint256 principalToRedeem = 0;\\n\\n    // If the tranche has not been locked, ensure the deposited amount is correct\\n    if (trancheInfo.lockedUntil == 0) {\\n      trancheInfo.principalDeposited = trancheInfo.principalDeposited.sub(amount);\\n\\n      principalToRedeem = amount;\\n\\n      config.getPoolTokens().withdrawPrincipal(tokenId, principalToRedeem);\\n    } else {\\n      interestToRedeem = Math.min(interestRedeemable, amount);\\n      principalToRedeem = Math.min(principalRedeemable, amount.sub(interestToRedeem));\\n\\n      config.getPoolTokens().redeem(tokenId, principalToRedeem, interestToRedeem);\\n    }\\n\\n    config.getUSDC().safeERC20Transfer(msg.sender, principalToRedeem.add(interestToRedeem));\\n\\n    emit WithdrawalMade(\\n      msg.sender,\\n      tokenInfo.tranche,\\n      tokenId,\\n      interestToRedeem,\\n      principalToRedeem\\n    );\\n\\n    return (interestToRedeem, principalToRedeem);\\n  }\\n\\n  /// @dev TL: tranch locked or has been locked before\\n  function _lockJuniorCapital(uint256 sliceId) internal {\\n    require(!_locked() && _poolSlices[sliceId].juniorTranche.lockedUntil == 0, \\\"TL\\\");\\n    TranchingLogic.lockTranche(_poolSlices[sliceId].juniorTranche, config);\\n  }\\n\\n  /// @dev NL: Not locked\\n  /// @dev TL: tranche locked. The senior pool has already been locked.\\n  function _lockPool() internal {\\n    ITranchedPool.PoolSlice storage slice = _poolSlices[numSlices.sub(1)];\\n    require(slice.juniorTranche.lockedUntil > 0, \\\"NL\\\");\\n    // Allow locking the pool only once; do not allow extending the lock of an\\n    // already-locked pool. Otherwise the locker could keep the pool locked\\n    // indefinitely, preventing withdrawals.\\n    require(slice.seniorTranche.lockedUntil == 0, \\\"TL\\\");\\n\\n    uint256 currentTotal = slice.juniorTranche.principalDeposited.add(\\n      slice.seniorTranche.principalDeposited\\n    );\\n    creditLine.setLimit(Math.min(creditLine.limit().add(currentTotal), creditLine.maxLimit()));\\n\\n    // We start the drawdown period, so backers can withdraw unused capital after borrower draws down\\n    TranchingLogic.lockTranche(slice.juniorTranche, config);\\n    TranchingLogic.lockTranche(slice.seniorTranche, config);\\n  }\\n\\n  /// @dev SL: slice limit\\n  function _initializeNextSlice(uint256 newFundableAt) internal {\\n    require(numSlices < 5, \\\"SL\\\");\\n    TranchingLogic.initializeNextSlice(_poolSlices, numSlices);\\n    numSlices = numSlices.add(1);\\n    fundableAt = newFundableAt;\\n  }\\n\\n  // If the senior tranche of the current slice is locked, then the pool is not open to any more deposits\\n  // (could throw off leverage ratio)\\n  function _locked() internal view returns (bool) {\\n    return numSlices == 0 || _poolSlices[numSlices - 1].seniorTranche.lockedUntil > 0;\\n  }\\n\\n  function _getTrancheInfo(\\n    uint256 trancheId\\n  ) internal view returns (ITranchedPool.TrancheInfo storage) {\\n    require(\\n      trancheId > 0 && trancheId <= numSlices.mul(TranchingLogic.NUM_TRANCHES_PER_SLICE),\\n      \\\"invalid tranche\\\"\\n    );\\n    uint256 sliceId = TranchingLogic.trancheIdToSliceIndex(trancheId);\\n    ITranchedPool.PoolSlice storage slice = _poolSlices[sliceId];\\n    ITranchedPool.TrancheInfo storage trancheInfo = TranchingLogic.isSeniorTrancheId(trancheId)\\n      ? slice.seniorTranche\\n      : slice.juniorTranche;\\n    return trancheInfo;\\n  }\\n\\n  // // Modifiers /////////////////////////////////////////////////////////////////\\n\\n  /// @inheritdoc IVersioned\\n  function getVersion() external pure override returns (uint8[3] memory version) {\\n    (version[0], version[1], version[2]) = (MAJOR_VERSION, MINOR_VERSION, PATCH_VERSION);\\n  }\\n\\n  /// @dev NA: not authorized. not locker\\n  modifier onlyLocker() {\\n    require(hasRole(LOCKER_ROLE, msg.sender), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xc3e32f7923c8a93f576a51e6d2605f5ca9dbb340a89fb6961968633dcff5f41c\",\"license\":\"MIT\"},\"contracts/protocol/core/TranchingLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ICreditLine} from \\\"../../interfaces/ICreditLine.sol\\\";\\nimport {ITranchedPool} from \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport {IPoolTokens} from \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport {GoldfinchConfig} from \\\"./GoldfinchConfig.sol\\\";\\nimport {ConfigHelper} from \\\"./ConfigHelper.sol\\\";\\nimport {FixedPoint} from \\\"../../external/FixedPoint.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title TranchingLogic\\n * @notice Library for handling the payments waterfall\\n * @author Goldfinch\\n */\\n\\nlibrary TranchingLogic {\\n  using SafeMath for uint256;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FixedPoint for uint256;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  uint256 internal constant FP_SCALING_FACTOR = 1e18;\\n  uint256 public constant NUM_TRANCHES_PER_SLICE = 2;\\n\\n  function usdcToSharePrice(uint256 amount, uint256 totalShares) public pure returns (uint256) {\\n    return totalShares == 0 ? 0 : amount.mul(FP_SCALING_FACTOR).div(totalShares);\\n  }\\n\\n  function sharePriceToUsdc(uint256 sharePrice, uint256 totalShares) public pure returns (uint256) {\\n    return sharePrice.mul(totalShares).div(FP_SCALING_FACTOR);\\n  }\\n\\n  function lockTranche(ITranchedPool.TrancheInfo storage tranche, GoldfinchConfig config) external {\\n    tranche.lockedUntil = block.timestamp.add(config.getDrawdownPeriodInSeconds());\\n    emit TrancheLocked(address(this), tranche.id, tranche.lockedUntil);\\n  }\\n\\n  function redeemableInterestAndPrincipal(\\n    ITranchedPool.TrancheInfo storage trancheInfo,\\n    IPoolTokens.TokenInfo memory tokenInfo\\n  ) public view returns (uint256, uint256) {\\n    // This supports withdrawing before or after locking because principal share price starts at 1\\n    // and is set to 0 on lock. Interest share price is always 0 until interest payments come back, when it increases\\n    uint256 maxPrincipalRedeemable = sharePriceToUsdc(\\n      trancheInfo.principalSharePrice,\\n      tokenInfo.principalAmount\\n    );\\n    // The principalAmount is used as the totalShares because we want the interestSharePrice to be expressed as a\\n    // percent of total loan value e.g. if the interest is 10% APR, the interestSharePrice should approach a max of 0.1.\\n    uint256 maxInterestRedeemable = sharePriceToUsdc(\\n      trancheInfo.interestSharePrice,\\n      tokenInfo.principalAmount\\n    );\\n\\n    uint256 interestRedeemable = maxInterestRedeemable.sub(tokenInfo.interestRedeemed);\\n    uint256 principalRedeemable = maxPrincipalRedeemable.sub(tokenInfo.principalRedeemed);\\n\\n    return (interestRedeemable, principalRedeemable);\\n  }\\n\\n  function calculateExpectedSharePrice(\\n    ITranchedPool.TrancheInfo memory tranche,\\n    uint256 amount,\\n    ITranchedPool.PoolSlice memory slice\\n  ) public pure returns (uint256) {\\n    uint256 sharePrice = usdcToSharePrice(amount, tranche.principalDeposited);\\n    return _scaleByPercentOwnership(tranche, sharePrice, slice);\\n  }\\n\\n  function scaleForSlice(\\n    ITranchedPool.PoolSlice memory slice,\\n    uint256 amount,\\n    uint256 totalDeployed\\n  ) public pure returns (uint256) {\\n    return scaleByFraction(amount, slice.principalDeployed, totalDeployed);\\n  }\\n\\n  // We need to create this struct so we don't run into a stack too deep error due to too many variables\\n  function getSliceInfo(\\n    ITranchedPool.PoolSlice memory slice,\\n    ICreditLine creditLine,\\n    uint256 totalDeployed,\\n    uint256 reserveFeePercent\\n  ) public view returns (SliceInfo memory) {\\n    (uint256 interestAccrued, uint256 principalAccrued) = getTotalInterestAndPrincipal(\\n      slice,\\n      creditLine,\\n      totalDeployed\\n    );\\n    return\\n      SliceInfo({\\n        reserveFeePercent: reserveFeePercent,\\n        interestAccrued: interestAccrued,\\n        principalAccrued: principalAccrued\\n      });\\n  }\\n\\n  function getTotalInterestAndPrincipal(\\n    ITranchedPool.PoolSlice memory slice,\\n    ICreditLine creditLine,\\n    uint256 totalDeployed\\n  ) public view returns (uint256, uint256) {\\n    uint256 principalAccrued = creditLine.principalOwed();\\n    // In addition to principal actually owed, we need to account for early principal payments\\n    // If the borrower pays back 5K early on a 10K loan, the actual principal accrued should be\\n    // 5K (balance- deployed) + 0 (principal owed)\\n    principalAccrued = totalDeployed.sub(creditLine.balance()).add(principalAccrued);\\n    // Now we need to scale that correctly for the slice we're interested in\\n    principalAccrued = scaleForSlice(slice, principalAccrued, totalDeployed);\\n    // Finally, we need to account for partial drawdowns. e.g. If 20K was deposited, and only 10K was drawn down,\\n    // Then principal accrued should start at 10K (total deposited - principal deployed), not 0. This is because\\n    // share price starts at 1, and is decremented by what was drawn down.\\n    uint256 totalDeposited = slice.seniorTranche.principalDeposited.add(\\n      slice.juniorTranche.principalDeposited\\n    );\\n    principalAccrued = totalDeposited.sub(slice.principalDeployed).add(principalAccrued);\\n    return (slice.totalInterestAccrued, principalAccrued);\\n  }\\n\\n  function scaleByFraction(\\n    uint256 amount,\\n    uint256 fraction,\\n    uint256 total\\n  ) public pure returns (uint256) {\\n    FixedPoint.Unsigned memory totalAsFixedPoint = FixedPoint.fromUnscaledUint(total);\\n    FixedPoint.Unsigned memory fractionAsFixedPoint = FixedPoint.fromUnscaledUint(fraction);\\n    return fractionAsFixedPoint.div(totalAsFixedPoint).mul(amount).div(FP_SCALING_FACTOR).rawValue;\\n  }\\n\\n  /// @notice apply a payment to all slices\\n  /// @param poolSlices slices to apply to\\n  /// @param numSlices number of slices\\n  /// @param interest amount of interest to apply\\n  /// @param principal amount of principal to apply\\n  /// @param reserveFeePercent percentage that protocol will take for reserves\\n  /// @param totalDeployed total amount of principal deployed\\n  /// @param creditLine creditline to account for\\n  /// @param juniorFeePercent percentage the junior tranche will take\\n  /// @return total amount that will be sent to reserves\\n  function applyToAllSlices(\\n    mapping(uint256 => ITranchedPool.PoolSlice) storage poolSlices,\\n    uint256 numSlices,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 reserveFeePercent,\\n    uint256 totalDeployed,\\n    ICreditLine creditLine,\\n    uint256 juniorFeePercent\\n  ) external returns (uint256) {\\n    ApplyResult memory result = TranchingLogic.applyToAllSeniorTranches(\\n      poolSlices,\\n      numSlices,\\n      interest,\\n      principal,\\n      reserveFeePercent,\\n      totalDeployed,\\n      creditLine,\\n      juniorFeePercent\\n    );\\n\\n    return\\n      result.reserveDeduction.add(\\n        TranchingLogic.applyToAllJuniorTranches(\\n          poolSlices,\\n          numSlices,\\n          result.interestRemaining,\\n          result.principalRemaining,\\n          reserveFeePercent,\\n          totalDeployed,\\n          creditLine\\n        )\\n      );\\n  }\\n\\n  function applyToAllSeniorTranches(\\n    mapping(uint256 => ITranchedPool.PoolSlice) storage poolSlices,\\n    uint256 numSlices,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 reserveFeePercent,\\n    uint256 totalDeployed,\\n    ICreditLine creditLine,\\n    uint256 juniorFeePercent\\n  ) internal returns (ApplyResult memory) {\\n    ApplyResult memory seniorApplyResult;\\n    for (uint256 i = 0; i < numSlices; i++) {\\n      ITranchedPool.PoolSlice storage slice = poolSlices[i];\\n\\n      SliceInfo memory sliceInfo = getSliceInfo(\\n        slice,\\n        creditLine,\\n        totalDeployed,\\n        reserveFeePercent\\n      );\\n\\n      // Since slices cannot be created when the loan is late, all interest collected can be assumed to split\\n      // pro-rata across the slices. So we scale the interest and principal to the slice\\n      ApplyResult memory applyResult = applyToSeniorTranche(\\n        slice,\\n        scaleForSlice(slice, interest, totalDeployed),\\n        scaleForSlice(slice, principal, totalDeployed),\\n        juniorFeePercent,\\n        sliceInfo\\n      );\\n      emitSharePriceUpdatedEvent(slice.seniorTranche, applyResult);\\n      seniorApplyResult.interestRemaining = seniorApplyResult.interestRemaining.add(\\n        applyResult.interestRemaining\\n      );\\n      seniorApplyResult.principalRemaining = seniorApplyResult.principalRemaining.add(\\n        applyResult.principalRemaining\\n      );\\n      seniorApplyResult.reserveDeduction = seniorApplyResult.reserveDeduction.add(\\n        applyResult.reserveDeduction\\n      );\\n    }\\n    return seniorApplyResult;\\n  }\\n\\n  function applyToAllJuniorTranches(\\n    mapping(uint256 => ITranchedPool.PoolSlice) storage poolSlices,\\n    uint256 numSlices,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 reserveFeePercent,\\n    uint256 totalDeployed,\\n    ICreditLine creditLine\\n  ) internal returns (uint256 totalReserveAmount) {\\n    for (uint256 i = 0; i < numSlices; i++) {\\n      SliceInfo memory sliceInfo = getSliceInfo(\\n        poolSlices[i],\\n        creditLine,\\n        totalDeployed,\\n        reserveFeePercent\\n      );\\n      // Any remaining interest and principal is then shared pro-rata with the junior slices\\n      ApplyResult memory applyResult = applyToJuniorTranche(\\n        poolSlices[i],\\n        scaleForSlice(poolSlices[i], interest, totalDeployed),\\n        scaleForSlice(poolSlices[i], principal, totalDeployed),\\n        sliceInfo\\n      );\\n      emitSharePriceUpdatedEvent(poolSlices[i].juniorTranche, applyResult);\\n      totalReserveAmount = totalReserveAmount.add(applyResult.reserveDeduction);\\n    }\\n    return totalReserveAmount;\\n  }\\n\\n  function emitSharePriceUpdatedEvent(\\n    ITranchedPool.TrancheInfo memory tranche,\\n    ApplyResult memory applyResult\\n  ) internal {\\n    emit SharePriceUpdated(\\n      address(this),\\n      tranche.id,\\n      tranche.principalSharePrice,\\n      int256(tranche.principalSharePrice.sub(applyResult.oldPrincipalSharePrice)),\\n      tranche.interestSharePrice,\\n      int256(tranche.interestSharePrice.sub(applyResult.oldInterestSharePrice))\\n    );\\n  }\\n\\n  function applyToSeniorTranche(\\n    ITranchedPool.PoolSlice storage slice,\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    uint256 juniorFeePercent,\\n    SliceInfo memory sliceInfo\\n  ) internal returns (ApplyResult memory) {\\n    // First determine the expected share price for the senior tranche. This is the gross amount the senior\\n    // tranche should receive.\\n    uint256 expectedInterestSharePrice = calculateExpectedSharePrice(\\n      slice.seniorTranche,\\n      sliceInfo.interestAccrued,\\n      slice\\n    );\\n    uint256 expectedPrincipalSharePrice = calculateExpectedSharePrice(\\n      slice.seniorTranche,\\n      sliceInfo.principalAccrued,\\n      slice\\n    );\\n\\n    // Deduct the junior fee and the protocol reserve\\n    uint256 desiredNetInterestSharePrice = scaleByFraction(\\n      expectedInterestSharePrice,\\n      uint256(100).sub(juniorFeePercent.add(sliceInfo.reserveFeePercent)),\\n      uint256(100)\\n    );\\n    // Collect protocol fee interest received (we've subtracted this from the senior portion above)\\n    uint256 reserveDeduction = scaleByFraction(\\n      interestRemaining,\\n      sliceInfo.reserveFeePercent,\\n      uint256(100)\\n    );\\n    interestRemaining = interestRemaining.sub(reserveDeduction);\\n    uint256 oldInterestSharePrice = slice.seniorTranche.interestSharePrice;\\n    uint256 oldPrincipalSharePrice = slice.seniorTranche.principalSharePrice;\\n    // Apply the interest remaining so we get up to the netInterestSharePrice\\n    (interestRemaining, principalRemaining) = _applyBySharePrice(\\n      slice.seniorTranche,\\n      interestRemaining,\\n      principalRemaining,\\n      desiredNetInterestSharePrice,\\n      expectedPrincipalSharePrice\\n    );\\n    return\\n      ApplyResult({\\n        interestRemaining: interestRemaining,\\n        principalRemaining: principalRemaining,\\n        reserveDeduction: reserveDeduction,\\n        oldInterestSharePrice: oldInterestSharePrice,\\n        oldPrincipalSharePrice: oldPrincipalSharePrice\\n      });\\n  }\\n\\n  function applyToJuniorTranche(\\n    ITranchedPool.PoolSlice storage slice,\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    SliceInfo memory sliceInfo\\n  ) public returns (ApplyResult memory) {\\n    // Then fill up the junior tranche with all the interest remaining, upto the principal share price\\n    uint256 expectedInterestSharePrice = slice.juniorTranche.interestSharePrice.add(\\n      usdcToSharePrice(interestRemaining, slice.juniorTranche.principalDeposited)\\n    );\\n    uint256 expectedPrincipalSharePrice = calculateExpectedSharePrice(\\n      slice.juniorTranche,\\n      sliceInfo.principalAccrued,\\n      slice\\n    );\\n    uint256 oldInterestSharePrice = slice.juniorTranche.interestSharePrice;\\n    uint256 oldPrincipalSharePrice = slice.juniorTranche.principalSharePrice;\\n    (interestRemaining, principalRemaining) = _applyBySharePrice(\\n      slice.juniorTranche,\\n      interestRemaining,\\n      principalRemaining,\\n      expectedInterestSharePrice,\\n      expectedPrincipalSharePrice\\n    );\\n\\n    // All remaining interest and principal is applied towards the junior tranche as interest\\n    interestRemaining = interestRemaining.add(principalRemaining);\\n    // Since any principal remaining is treated as interest (there is \\\"extra\\\" interest to be distributed)\\n    // we need to make sure to collect the protocol fee on the additional interest (we only deducted the\\n    // fee on the original interest portion)\\n    uint256 reserveDeduction = scaleByFraction(\\n      principalRemaining,\\n      sliceInfo.reserveFeePercent,\\n      uint256(100)\\n    );\\n    interestRemaining = interestRemaining.sub(reserveDeduction);\\n    principalRemaining = 0;\\n\\n    (interestRemaining, principalRemaining) = _applyByAmount(\\n      slice.juniorTranche,\\n      interestRemaining.add(principalRemaining),\\n      0,\\n      interestRemaining.add(principalRemaining),\\n      0\\n    );\\n    return\\n      ApplyResult({\\n        interestRemaining: interestRemaining,\\n        principalRemaining: principalRemaining,\\n        reserveDeduction: reserveDeduction,\\n        oldInterestSharePrice: oldInterestSharePrice,\\n        oldPrincipalSharePrice: oldPrincipalSharePrice\\n      });\\n  }\\n\\n  function trancheIdToSliceIndex(uint256 trancheId) external pure returns (uint256) {\\n    return trancheId.sub(1).div(NUM_TRANCHES_PER_SLICE);\\n  }\\n\\n  function initializeNextSlice(\\n    mapping(uint256 => ITranchedPool.PoolSlice) storage poolSlices,\\n    uint256 sliceIndex\\n  ) external {\\n    poolSlices[sliceIndex] = ITranchedPool.PoolSlice({\\n      seniorTranche: ITranchedPool.TrancheInfo({\\n        id: sliceIndexToSeniorTrancheId(sliceIndex),\\n        principalSharePrice: usdcToSharePrice(1, 1),\\n        interestSharePrice: 0,\\n        principalDeposited: 0,\\n        lockedUntil: 0\\n      }),\\n      juniorTranche: ITranchedPool.TrancheInfo({\\n        id: sliceIndexToJuniorTrancheId(sliceIndex),\\n        principalSharePrice: usdcToSharePrice(1, 1),\\n        interestSharePrice: 0,\\n        principalDeposited: 0,\\n        lockedUntil: 0\\n      }),\\n      totalInterestAccrued: 0,\\n      principalDeployed: 0\\n    });\\n  }\\n\\n  function sliceIndexToJuniorTrancheId(uint256 sliceIndex) public pure returns (uint256) {\\n    // 0 -> 2\\n    // 1 -> 4\\n    return sliceIndex.mul(NUM_TRANCHES_PER_SLICE).add(2);\\n  }\\n\\n  function sliceIndexToSeniorTrancheId(uint256 sliceIndex) public pure returns (uint256) {\\n    // 0 -> 1\\n    // 1 -> 3\\n    return sliceIndex.mul(NUM_TRANCHES_PER_SLICE).add(1);\\n  }\\n\\n  function isSeniorTrancheId(uint256 trancheId) external pure returns (bool) {\\n    return trancheId.mod(TranchingLogic.NUM_TRANCHES_PER_SLICE) == 1;\\n  }\\n\\n  function isJuniorTrancheId(uint256 trancheId) external pure returns (bool) {\\n    return trancheId != 0 && trancheId.mod(TranchingLogic.NUM_TRANCHES_PER_SLICE) == 0;\\n  }\\n\\n  // // INTERNAL //////////////////////////////////////////////////////////////////\\n\\n  function _applyToSharePrice(\\n    uint256 amountRemaining,\\n    uint256 currentSharePrice,\\n    uint256 desiredAmount,\\n    uint256 totalShares\\n  ) internal pure returns (uint256, uint256) {\\n    // If no money left to apply, or don't need any changes, return the original amounts\\n    if (amountRemaining == 0 || desiredAmount == 0) {\\n      return (amountRemaining, currentSharePrice);\\n    }\\n    if (amountRemaining < desiredAmount) {\\n      // We don't have enough money to adjust share price to the desired level. So just use whatever amount is left\\n      desiredAmount = amountRemaining;\\n    }\\n    uint256 sharePriceDifference = usdcToSharePrice(desiredAmount, totalShares);\\n    return (amountRemaining.sub(desiredAmount), currentSharePrice.add(sharePriceDifference));\\n  }\\n\\n  function _scaleByPercentOwnership(\\n    ITranchedPool.TrancheInfo memory tranche,\\n    uint256 amount,\\n    ITranchedPool.PoolSlice memory slice\\n  ) internal pure returns (uint256) {\\n    uint256 totalDeposited = slice.juniorTranche.principalDeposited.add(\\n      slice.seniorTranche.principalDeposited\\n    );\\n    return scaleByFraction(amount, tranche.principalDeposited, totalDeposited);\\n  }\\n\\n  function _desiredAmountFromSharePrice(\\n    uint256 desiredSharePrice,\\n    uint256 actualSharePrice,\\n    uint256 totalShares\\n  ) internal pure returns (uint256) {\\n    // If the desired share price is lower, then ignore it, and leave it unchanged\\n    if (desiredSharePrice < actualSharePrice) {\\n      desiredSharePrice = actualSharePrice;\\n    }\\n    uint256 sharePriceDifference = desiredSharePrice.sub(actualSharePrice);\\n    return sharePriceToUsdc(sharePriceDifference, totalShares);\\n  }\\n\\n  function _applyByAmount(\\n    ITranchedPool.TrancheInfo storage tranche,\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    uint256 desiredInterestAmount,\\n    uint256 desiredPrincipalAmount\\n  ) internal returns (uint256, uint256) {\\n    uint256 totalShares = tranche.principalDeposited;\\n    uint256 newSharePrice;\\n\\n    (interestRemaining, newSharePrice) = _applyToSharePrice(\\n      interestRemaining,\\n      tranche.interestSharePrice,\\n      desiredInterestAmount,\\n      totalShares\\n    );\\n    tranche.interestSharePrice = newSharePrice;\\n\\n    (principalRemaining, newSharePrice) = _applyToSharePrice(\\n      principalRemaining,\\n      tranche.principalSharePrice,\\n      desiredPrincipalAmount,\\n      totalShares\\n    );\\n    tranche.principalSharePrice = newSharePrice;\\n    return (interestRemaining, principalRemaining);\\n  }\\n\\n  function _applyBySharePrice(\\n    ITranchedPool.TrancheInfo storage tranche,\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    uint256 desiredInterestSharePrice,\\n    uint256 desiredPrincipalSharePrice\\n  ) internal returns (uint256, uint256) {\\n    uint256 desiredInterestAmount = _desiredAmountFromSharePrice(\\n      desiredInterestSharePrice,\\n      tranche.interestSharePrice,\\n      tranche.principalDeposited\\n    );\\n    uint256 desiredPrincipalAmount = _desiredAmountFromSharePrice(\\n      desiredPrincipalSharePrice,\\n      tranche.principalSharePrice,\\n      tranche.principalDeposited\\n    );\\n    return\\n      _applyByAmount(\\n        tranche,\\n        interestRemaining,\\n        principalRemaining,\\n        desiredInterestAmount,\\n        desiredPrincipalAmount\\n      );\\n  }\\n\\n  // // Events /////////////////////////////////////////////////////////////////////\\n\\n  // NOTE: this needs to match the event in TranchedPool\\n  event TrancheLocked(address indexed pool, uint256 trancheId, uint256 lockedUntil);\\n\\n  event SharePriceUpdated(\\n    address indexed pool,\\n    uint256 indexed tranche,\\n    uint256 principalSharePrice,\\n    int256 principalDelta,\\n    uint256 interestSharePrice,\\n    int256 interestDelta\\n  );\\n}\\n\",\"keccak256\":\"0x936e678b5f8c68c866362e9345ede7cf757aeb31e62afefb8cd7afbf869adfd1\",\"license\":\"MIT\"},\"contracts/protocol/core/proxy/ImplementationRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {BaseUpgradeablePausable} from \\\"../BaseUpgradeablePausable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IImplementationRepository} from \\\"../../../interfaces/IImplementationRepository.sol\\\";\\n\\n/// @title User Controlled Upgrades (UCU) Proxy Repository\\n/// A repository maintaing a collection of \\\"lineages\\\" of implementation contracts\\n///\\n/// Lineages are a sequence of implementations each lineage can be thought of as\\n/// a \\\"major\\\" revision of implementations. Implementations between lineages are\\n/// considered incompatible.\\ncontract ImplementationRepository is BaseUpgradeablePausable, IImplementationRepository {\\n  address internal constant INVALID_IMPL = address(0);\\n  uint256 internal constant INVALID_LINEAGE_ID = 0;\\n\\n  /// @notice returns data that will be delegatedCalled when the given implementation\\n  ///           is upgraded to\\n  mapping(address => bytes) public override upgradeDataFor;\\n\\n  /// @dev mapping from one implementation to the succeeding implementation\\n  mapping(address => address) internal _nextImplementationOf;\\n\\n  /// @notice Returns the id of the lineage a given implementation belongs to\\n  mapping(address => uint256) public override lineageIdOf;\\n\\n  /// @dev internal because we expose this through the `currentImplementation(uint256)` api\\n  mapping(uint256 => address) internal _currentOfLineage;\\n\\n  /// @notice Returns the id of the most recently created lineage\\n  uint256 public override currentLineageId;\\n\\n  // //////// External ////////////////////////////////////////////////////////////\\n\\n  /// @notice initialize the repository's state\\n  /// @dev reverts if `_owner` is the null address\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param _owner owner of the repository\\n  /// @param implementation initial implementation in the repository\\n  function initialize(address _owner, address implementation) external initializer {\\n    __BaseUpgradeablePausable__init(_owner);\\n    _createLineage(implementation);\\n    require(currentLineageId != INVALID_LINEAGE_ID);\\n  }\\n\\n  /// @notice set data that will be delegate called when a proxy upgrades to the given `implementation`\\n  /// @dev reverts when caller is not an admin\\n  /// @dev reverts when the contract is paused\\n  /// @dev reverts if the given implementation isn't registered\\n  function setUpgradeDataFor(\\n    address implementation,\\n    bytes calldata data\\n  ) external override onlyAdmin whenNotPaused {\\n    _setUpgradeDataFor(implementation, data);\\n  }\\n\\n  /// @notice Create a new lineage of implementations.\\n  ///\\n  /// This creates a new \\\"root\\\" of a new lineage\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation that will be the first implementation in the lineage\\n  /// @return newly created lineage's id\\n  function createLineage(\\n    address implementation\\n  ) external override onlyAdmin whenNotPaused returns (uint256) {\\n    return _createLineage(implementation);\\n  }\\n\\n  /// @notice add a new implementation and set it as the current implementation\\n  /// @dev reverts if the sender is not an owner\\n  /// @dev reverts if the contract is paused\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation to append\\n  function append(address implementation) external override onlyAdmin whenNotPaused {\\n    _append(implementation, currentLineageId);\\n  }\\n\\n  /// @notice Append an implementation to a specified lineage\\n  /// @dev reverts if the contract is paused\\n  /// @dev reverts if the sender is not an owner\\n  /// @dev reverts if `implementation` is not a contract\\n  /// @param implementation implementation to append\\n  /// @param lineageId id of lineage to append to\\n  function append(\\n    address implementation,\\n    uint256 lineageId\\n  ) external override onlyAdmin whenNotPaused {\\n    _append(implementation, lineageId);\\n  }\\n\\n  /// @notice Remove an implementation from the chain and \\\"stitch\\\" together its neighbors\\n  /// @dev If you have a chain of `A -> B -> C` and I call `remove(B, C)` it will result in `A -> C`\\n  /// @dev reverts if `previos` is not the ancestor of `toRemove`\\n  /// @dev we need to provide the previous implementation here to be able to successfully \\\"stitch\\\"\\n  ///       the chain back together. Because this is an admin action, we can source what the previous\\n  ///       version is from events.\\n  /// @param toRemove Implementation to remove\\n  /// @param previous Implementation that currently has `toRemove` as its successor\\n  function remove(address toRemove, address previous) external override onlyAdmin whenNotPaused {\\n    _remove(toRemove, previous);\\n  }\\n\\n  // //////// External view ////////////////////////////////////////////////////////////\\n\\n  /// @notice Returns `true` if an implementation has a next implementation set\\n  /// @param implementation implementation to check\\n  /// @return The implementation following the given implementation\\n  function hasNext(address implementation) external view override returns (bool) {\\n    return _nextImplementationOf[implementation] != INVALID_IMPL;\\n  }\\n\\n  /// @notice Returns `true` if an implementation has already been added\\n  /// @param implementation Implementation to check existence of\\n  /// @return `true` if the implementation has already been added\\n  function has(address implementation) external view override returns (bool) {\\n    return _has(implementation);\\n  }\\n\\n  /// @notice Get the next implementation for a given implementation or\\n  ///           `address(0)` if it doesn't exist\\n  /// @dev reverts when contract is paused\\n  /// @param implementation implementation to get the upgraded implementation for\\n  /// @return Next Implementation\\n  function nextImplementationOf(\\n    address implementation\\n  ) external view override whenNotPaused returns (address) {\\n    return _nextImplementationOf[implementation];\\n  }\\n\\n  /// @notice Returns `true` if a given lineageId exists\\n  function lineageExists(uint256 lineageId) external view override returns (bool) {\\n    return _lineageExists(lineageId);\\n  }\\n\\n  /// @notice Return the current implementation of a lineage with the given `lineageId`\\n  function currentImplementation(\\n    uint256 lineageId\\n  ) external view override whenNotPaused returns (address) {\\n    return _currentImplementation(lineageId);\\n  }\\n\\n  /// @notice return current implementaton of the current lineage\\n  function currentImplementation() external view override whenNotPaused returns (address) {\\n    return _currentImplementation(currentLineageId);\\n  }\\n\\n  // //////// Internal ////////////////////////////////////////////////////////////\\n\\n  function _setUpgradeDataFor(address implementation, bytes memory data) internal {\\n    require(_has(implementation), \\\"unknown impl\\\");\\n    upgradeDataFor[implementation] = data;\\n    emit UpgradeDataSet(implementation, data);\\n  }\\n\\n  function _createLineage(address implementation) internal virtual returns (uint256) {\\n    require(Address.isContract(implementation), \\\"not a contract\\\");\\n    // NOTE: impractical to overflow\\n    currentLineageId += 1;\\n\\n    _currentOfLineage[currentLineageId] = implementation;\\n    lineageIdOf[implementation] = currentLineageId;\\n\\n    emit Added(currentLineageId, implementation, address(0));\\n    return currentLineageId;\\n  }\\n\\n  function _currentImplementation(uint256 lineageId) internal view returns (address) {\\n    return _currentOfLineage[lineageId];\\n  }\\n\\n  /// @notice Returns `true` if an implementation has already been added\\n  /// @param implementation implementation to check for\\n  /// @return `true` if the implementation has already been added\\n  function _has(address implementation) internal view virtual returns (bool) {\\n    return lineageIdOf[implementation] != INVALID_LINEAGE_ID;\\n  }\\n\\n  /// @notice Set an implementation to the current implementation\\n  /// @param implementation implementation to set as current implementation\\n  /// @param lineageId id of lineage to append to\\n  function _append(address implementation, uint256 lineageId) internal virtual {\\n    require(Address.isContract(implementation), \\\"not a contract\\\");\\n    require(!_has(implementation), \\\"exists\\\");\\n    require(_lineageExists(lineageId), \\\"invalid lineageId\\\");\\n    require(_currentOfLineage[lineageId] != INVALID_IMPL, \\\"empty lineage\\\");\\n\\n    address oldImplementation = _currentOfLineage[lineageId];\\n    _currentOfLineage[lineageId] = implementation;\\n    lineageIdOf[implementation] = lineageId;\\n    _nextImplementationOf[oldImplementation] = implementation;\\n\\n    emit Added(lineageId, implementation, oldImplementation);\\n  }\\n\\n  function _remove(address toRemove, address previous) internal virtual {\\n    require(toRemove != INVALID_IMPL && previous != INVALID_IMPL, \\\"ZERO\\\");\\n    require(_nextImplementationOf[previous] == toRemove, \\\"Not prev\\\");\\n\\n    uint256 lineageId = lineageIdOf[toRemove];\\n\\n    // need to reset the head pointer to the previous version if we remove the head\\n    if (toRemove == _currentOfLineage[lineageId]) {\\n      _currentOfLineage[lineageId] = previous;\\n    }\\n\\n    _setUpgradeDataFor(toRemove, \\\"\\\"); // reset upgrade data\\n    _nextImplementationOf[previous] = _nextImplementationOf[toRemove];\\n    _nextImplementationOf[toRemove] = INVALID_IMPL;\\n    lineageIdOf[toRemove] = INVALID_LINEAGE_ID;\\n    emit Removed(lineageId, toRemove);\\n  }\\n\\n  function _lineageExists(uint256 lineageId) internal view returns (bool) {\\n    return lineageId != INVALID_LINEAGE_ID && lineageId <= currentLineageId;\\n  }\\n\\n  // //////// Events //////////////////////////////////////////////////////////////\\n  event Added(\\n    uint256 indexed lineageId,\\n    address indexed newImplementation,\\n    address indexed oldImplementation\\n  );\\n  event Removed(uint256 indexed lineageId, address indexed implementation);\\n  event UpgradeDataSet(address indexed implementation, bytes data);\\n}\\n\",\"keccak256\":\"0x78162688d5bb9a6abf01b1108b6cb1c113c7d396f51f2d2bfe49348eb4358cde\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061593f80620000216000396000f3fe608060405234801561001057600080fd5b50600436106102f85760003560e01c80639d11053011610193578063c78bed86116100e4578063e2bbb15811610092578063e2bbb15814610610578063e58378bb14610623578063e63ab1e91461062b578063e7aa8a9214610633578063ef48eee614610646578063f362136714610659578063f94f5a1214610661576102f8565b8063c78bed861461059f578063ca15c873146105b4578063cf09e0d0146105c7578063d547741f146105cf578063d972e8ad146105e2578063dd0ec241146105f5578063e2a657f9146105fd576102f8565b8063ae6c857a11610141578063ae6c857a1461052e578063b6db75a014610541578063b9317d8614610549578063bf6c87c71461055c578063bf8bcee414610564578063c290d69114610577578063c77d569814610597576102f8565b80639d110530146104bb578063a079a4dd146104ce578063a217fddf146104e1578063a6a25e88146104e9578063a8f9c4fe146104f1578063aa2a7c4c146104f9578063aae932fe1461050c576102f8565b806344c08f231161024d57806378bcd604116101fb57806378bcd6041461044a57806379502c551461045d5780637976323d1461046557806380b654311461046d5780638456cb591461048d5780639010d07c1461049557806391d14854146104a8576102f8565b806344c08f23146103ef57806347195e13146103f75780634d02fe6f1461040c578063515bc3231461041f578063526d81f6146104325780635c975abb1461043a5780635eb185a214610442576102f8565b80632ae754be116102aa5780632ae754be146103885780632f2ff15d146103905780633403c2fc146103a357806336568abe146103ab5780633f4ba83a146103be5780634026478e146103c6578063441a3e70146103ce576102f8565b80630881806c146102fd578063097616a3146103075780630cfb14b01461031a5780630d8e6e2c1461033857806317f769411461034d578063248a9ca31461036257806327ea6f2b14610375575b600080fd5b610305610674565b005b610305610315366004614c62565b6106ee565b61032261081e565b60405161032f91906151c6565b60405180910390f35b610340610825565b60405161032f9190615187565b610355610842565b60405161032f91906151bb565b610322610370366004614e11565b61084c565b610305610383366004614e11565b610861565b6103226108ec565b61030561039e366004614e29565b6108fe565b610305610942565b6103056103b9366004614e29565b610b3e565b610305610b80565b610305610bbe565b6103e16103dc366004614e58565b610c1d565b60405161032f9291906151cf565b610322610d45565b6103ff610d4a565b60405161032f9190615016565b6103e161041a366004614e11565b610d5a565b61032261042d366004614f61565b610eb7565b610305610f71565b610355610ffb565b610322611004565b610305610458366004614e11565b61100b565b6103ff611221565b610322611231565b61048061047b366004614e11565b611238565b60405161032f919061572a565b6103056112ec565b6103ff6104a3366004614e58565b61132a565b6103556104b6366004614e29565b61134b565b6103056104c9366004614d88565b611363565b6103056104dc366004614e11565b6113c5565b610322611a0a565b610305611a0f565b610305611a32565b6103e1610507366004614e11565b611a91565b61051f61051a366004614e11565b611c58565b60405161032f93929190615837565b61030561053c366004614e11565b611ea8565b610355611ee2565b610305610557366004614d48565b611f03565b610305611fc7565b610305610572366004614e11565b612023565b61058a610585366004614e11565b612078565b60405161032f919061571c565b610322612300565b6105a7612307565b60405161032f9190615143565b6103226105c2366004614e11565b612360565b610322612377565b6103056105dd366004614e29565b61237e565b61058a6105f0366004614e11565b6123b8565b610322612408565b61032261060b366004614e11565b612447565b61032261061e366004614e58565b612466565b610322612750565b610322612762565b610305610641366004614c9a565b612774565b61058a610654366004614e58565b612a0c565b610322612be9565b61035561066f366004614c62565b612bfb565b61068c6000805160206158ea8339815191523361134b565b6106b15760405162461bcd60e51b81526004016106a89061560a565b60405180910390fd5b60975460ff16156106d45760405162461bcd60e51b81526004016106a8906154b4565b6101cc546106ec906106e7906001612c93565b612caf565b565b600054610100900460ff16806107075750610707612d75565b80610715575060005460ff16155b6107315760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff1615801561075c576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166107825760405162461bcd60e51b81526004016106a8906154fa565b61078a612d7b565b610792612dfc565b61079a612e88565b6107b260008051602061588a83398151915283610938565b6107ca6000805160206158aa83398151915283610938565b6107f06000805160206158aa83398151915260008051602061588a833981519152612f17565b61080860008051602061588a83398151915280612f17565b801561081a576000805461ff00191690555b5050565b6101c95481565b61082d614aa7565b60006040820181905260208201526001815290565b6101c75460ff1681565b60009081526065602052604090206002015490565b610869611ee2565b6108855760405162461bcd60e51b81526004016106a89061565d565b6101c4546040516327ea6f2b60e01b81526001600160a01b03909116906327ea6f2b906108b69084906004016151c6565b600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b505050505b50565b6000805160206158ca83398151915281565b60008281526065602052604090206002015461091c906104b6612f2c565b6109385760405162461bcd60e51b81526004016106a8906152d3565b61081a8282612f30565b61094a611ee2565b6109665760405162461bcd60e51b81526004016106a89061565d565b61096e610ffb565b61097a5761097a6112ec565b6101c354600090610993906001600160a01b0316612f99565b6101c3549091506000906109af906001600160a01b0316612fa4565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109df9190615016565b60206040518083038186803b1580156109f757600080fd5b505afa158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f9190614f26565b90508015610a65576101c354610a659083908390610a55906001600160a01b0316612f99565b6001600160a01b03169190613024565b6101c4546040516370a0823160e01b81526000916001600160a01b03808716926370a0823192610a99921690600401615016565b60206040518083038186803b158015610ab157600080fd5b505afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae99190614f26565b90508015610b0d576101c454610b0d906001600160a01b038681169116858461303f565b60405130907f1fc1e771236d2e93bb9541cdcb4654ba0fd3fb615b48d829b7b365f03998512690600090a250505050565b610b46612f2c565b6001600160a01b0316816001600160a01b031614610b765760405162461bcd60e51b81526004016106a8906156a8565b61081a8282613061565b610b9a6000805160206158aa8339815191526104b6612f2c565b610bb65760405162461bcd60e51b81526004016106a89061560a565b6106ec6130ca565b610bd66000805160206158ea8339815191523361134b565b610bf25760405162461bcd60e51b81526004016106a89061560a565b60975460ff1615610c155760405162461bcd60e51b81526004016106a8906154b4565b6106ec613136565b60c954600090819060ff16610c445760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff1615610c715760405162461bcd60e51b81526004016106a8906154b4565b610c79614ac5565b6101c354610c8f906001600160a01b03166133b0565b6001600160a01b0316638c7a63ae866040518263ffffffff1660e01b8152600401610cba91906151c6565b60a06040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190614eca565b90506000610d1b82602001516133bb565b9050610d2981838888613532565b93509350505060c9805460ff1916600117905590939092509050565b600290565b6101c4546001600160a01b031681565b600080610d65614ac5565b6101c354610d7b906001600160a01b03166133b0565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b8152600401610da691906151c6565b60a06040518083038186803b158015610dbe57600080fd5b505afa158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df69190614eca565b90506000610e0782602001516133bb565b90508060040154421115610ea857604051637bfe125960e11b8152730b48aF34f4c854F5ae1A3D587da471FeA45bAD529063f7fc24b290610e4e90849086906004016157bd565b604080518083038186803b158015610e6557600080fd5b505af4158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d9190614f3e565b935093505050610eb2565b6000809350935050505b915091565b60975460009060ff1615610edd5760405162461bcd60e51b81526004016106a8906154b4565b6101c354610ef3906001600160a01b03166138aa565b6001600160a01b031663d505accf333089898989896040518863ffffffff1660e01b8152600401610f2a979695949392919061502a565b600060405180830381600087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b50505050610f668787612466565b979650505050505050565b600054610100900460ff1680610f8a5750610f8a612d75565b80610f98575060005460ff16155b610fb45760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff16158015610fdf576000805460ff1961ff0019909116610100171660011790555b610fe7612dfc565b80156108e9576000805461ff001916905550565b60975460ff1690565b6101ca5481565b6110236000805160206158ea8339815191523361134b565b61103f5760405162461bcd60e51b81526004016106a89061560a565b60975460ff16156110625760405162461bcd60e51b81526004016106a8906154b4565b61106a6138c2565b6110865760405162461bcd60e51b81526004016106a8906155d2565b6101c460009054906101000a90046001600160a01b03166001600160a01b03166381c17a156040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d557600080fd5b505afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190614df1565b1561112a5760405162461bcd60e51b81526004016106a89061554b565b6101c460009054906101000a90046001600160a01b03166001600160a01b031663457147a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190614df1565b6111cd5760405162461bcd60e51b81526004016106a89061542c565b6111d6816138f2565b6101cc5430907f3420dd9c54d6a8846edd2fb39a41c30c31e7bc95b43655dae59f47cc913b60d590611209906001612c93565b60405161121691906151c6565b60405180910390a250565b6101c3546001600160a01b031681565b6101cc5481565b611240614afd565b5060009081526101cb602090815260409182902082516101208101845281546080808301918252600184015460a080850191909152600285015460c0850152600385015460e085015260048501546101008501529183528551918201865260058401548252600684015482860152600784015482870152600884015460608084019190915260098501549183019190915293820152600a82015493810193909352600b01549082015290565b6113066000805160206158aa8339815191526104b6612f2c565b6113225760405162461bcd60e51b81526004016106a89061560a565b6106ec61399c565b600082815260656020526040812061134290836139f5565b90505b92915050565b60008281526065602052604081206113429083613a01565b8281146113825760405162461bcd60e51b81526004016106a8906155b5565b60005b818110156108e4576113bb85858381811061139c57fe5b905060200201358484848181106113af57fe5b90506020020135610c1d565b5050600101611385565b6113dd6000805160206158ea8339815191523361134b565b6113f95760405162461bcd60e51b81526004016106a89061560a565b60975460ff161561141c5760405162461bcd60e51b81526004016106a8906154b4565b6101c75460ff16156114405760405162461bcd60e51b81526004016106a89061536c565b6114486138c2565b61145457611454613136565b6101cc546000190160009081526101cb6020526040808220600781015460068201549251630174b44960e01b8152919392730b48aF34f4c854F5ae1A3D587da471FeA45bAD5292630174b449926114af9290916004016151cf565b60206040518083038186803b1580156114c757600080fd5b505af41580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190614f26565b60028301546001840154604051630174b44960e01b815292935061159c92730b48aF34f4c854F5ae1A3D587da471FeA45bAD5292630174b44992611545926004016151cf565b60206040518083038186803b15801561155d57600080fd5b505af4158015611571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115959190614f26565b8290613a16565b9050808311156115be5760405162461bcd60e51b81526004016106a8906154de565b6101c45460405163a079a4dd60e01b81526001600160a01b039091169063a079a4dd906115ef9086906004016151c6565b600060405180830381600087803b15801561160957600080fd5b505af115801561161d573d6000803e3d6000fd5b5050505060006116368483612c9390919063ffffffff16565b600784015460028501546040805160a081018252600588015481526006880154602082015280820184905260088801546060820152600988015460808201529051634ec167e960e11b815293945091929091730b48aF34f4c854F5ae1A3D587da471FeA45bAD5291639d82cfd2916116b49187908a9060040161576c565b60206040518083038186803b1580156116cc57600080fd5b505af41580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190614f26565b60078601556040805160a08101825286548152600187015460208201526002870154818301526003870154606082015260048088015460808301529151634ec167e960e11b8152730b48aF34f4c854F5ae1A3D587da471FeA45bAD5292639d82cfd29261177792909188918b910161576c565b60206040518083038186803b15801561178f57600080fd5b505af41580156117a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c79190614f26565b6002860155600b8501546117db9087613a16565b600b8601556101c9546117ee9087613a16565b6101c9556101c45460408051637df1f1b960e01b815290516000926001600160a01b031691637df1f1b9916004808301926020929190829003018186803b15801561183857600080fd5b505afa15801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190614c7e565b6101c35490915060009061188c906001600160a01b0316613a28565b9050806001600160a01b031663e149ee8060016101cc54036040518263ffffffff1660e01b81526004016118c091906151c6565b600060405180830381600087803b1580156118da57600080fd5b505af11580156118ee573d6000803e3d6000fd5b50506101c35461191092508491508a90610a55906001600160a01b0316612f99565b816001600160a01b03167f7411b87a3c039bdfd8f3510b21e8bd0736265f53513735e1f4aa7b4f306b728d8960405161194991906151c6565b60405180910390a26005870154600788015430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b687906119898882612c93565b60088c01546040516119a293926000908103929161581c565b60405180910390a38654600288015430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b687906119df8782612c93565b60038c01546040516119f893926000908103929161581c565b60405180910390a35050505050505050565b600081565b60975460ff16156106ec5760405162461bcd60e51b81526004016106a8906154b4565b611a3a611ee2565b611a565760405162461bcd60e51b81526004016106a89061565d565b6101c7805460ff1916600117905560405130907f90d9b09c68a7e1312ce22801552b47265d77db9496383d51374b4058545447d790600090a2565b60c954600090819060ff16611ab85760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff1615611ae55760405162461bcd60e51b81526004016106a8906154b4565b611aed614ac5565b6101c354611b03906001600160a01b03166133b0565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b8152600401611b2e91906151c6565b60a06040518083038186803b158015611b4657600080fd5b505afa158015611b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e9190614eca565b90506000611b8f82602001516133bb565b9050600080730b48aF34f4c854F5ae1A3D587da471FeA45bAD5263f7fc24b284866040518363ffffffff1660e01b8152600401611bcd9291906157bd565b604080518083038186803b158015611be457600080fd5b505af4158015611bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1c9190614f3e565b90925090506000611c2d8383613a16565b9050611c3b84868a84613532565b96509650505050505060c9805460ff191660011790559092909150565b600080600042841015611c7d5760405162461bcd60e51b81526004016106a8906155ee565b6101c454604080516364fb2d9560e01b815290516000926001600160a01b0316916364fb2d95916004808301926020929190829003018186803b158015611cc357600080fd5b505afa158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb9190614f26565b11611d185760405162461bcd60e51b81526004016106a890615448565b6101c454604051631ac1df9760e31b81526001600160a01b039091169063d60efcb890611d499087906004016151c6565b60206040518083038186803b158015611d6157600080fd5b505afa158015611d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190614f26565b6101c454604051634d90a53960e01b81526001600160a01b0390911690634d90a53990611dca9088906004016151c6565b60206040518083038186803b158015611de257600080fd5b505afa158015611df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1a9190614f26565b6101c4546040516311daef0760e01b81526001600160a01b03909116906311daef0790611e4b9089906004016151c6565b60206040518083038186803b158015611e6357600080fd5b505afa158015611e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9b9190614f26565b9250925092509193909250565b611ec06000805160206158ea8339815191523361134b565b611edc5760405162461bcd60e51b81526004016106a89061560a565b6101ca55565b6000611efe60008051602061588a8339815191526104b6612f2c565b905090565b611f1b6000805160206158ea8339815191523361134b565b611f375760405162461bcd60e51b81526004016106a89061560a565b600080526101cb6020527f7815f96d61162a6533de7fc4199513d6e939c8cbee1627dfd11ec1fe503f0bb954158015611f995750600080526101cb6020527f7815f96d61162a6533de7fc4199513d6e939c8cbee1627dfd11ec1fe503f0bb454155b611fb55760405162461bcd60e51b81526004016106a890615407565b611fc26101c88383614b31565b505050565b611fcf611ee2565b611feb5760405162461bcd60e51b81526004016106a89061565d565b6101c7805460ff1916905560405130907f7184039938737267597232635b117c924371ac877d4329f2dfa5ca674c5cc4a590600090a2565b61202b611ee2565b6120475760405162461bcd60e51b81526004016106a89061565d565b6101c454604051632fe2f3b960e21b81526001600160a01b039091169063bf8bcee4906108b69084906004016151c6565b612080614b7c565b60c95460ff166120a25760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff16156120cf5760405162461bcd60e51b81526004016106a8906154b4565b600082116120ef5760405162461bcd60e51b81526004016106a8906153c2565b60006122876101c460009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561214357600080fd5b505afa158015612157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217b9190614f26565b6101c454604080516310c2b59b60e11b81529051612281926001600160a01b0316916321856b36916004808301926020929190829003018186803b1580156121c257600080fd5b505afa1580156121d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fa9190614f26565b6101c460009054906101000a90046001600160a01b03166001600160a01b03166320dcc3426040518163ffffffff1660e01b815260040160206040518083038186803b15801561224957600080fd5b505afa15801561225d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122819190614f26565b90613a16565b905060006122958483613a40565b6101c3549091506122c9903390309084906122b8906001600160a01b0316612f99565b6001600160a01b031692919061303f565b6122d1614b7c565b6122da85613a56565b905080608001516000146122ea57fe5b9250505060c9805460ff19166001179055919050565b6101c65481565b60606101c880548060200260200160405190810160405280929190818152602001828054801561235657602002820191906000526020600020905b815481526020019060010190808311612342575b5050505050905090565b600081815260656020526040812061134590613ca7565b6101c55481565b60008281526065602052604090206002015461239c906104b6612f2c565b610b765760405162461bcd60e51b81526004016106a890615464565b6123c0614b7c565b6123c9826133bb565b6040805160a081018252825481526001830154602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b60008060005b6101cc548110156124415760008181526101cb6020526040902060060154612437908390613a16565b915060010161240e565b50905090565b6101c8818154811061245557fe5b600091825260209091200154905081565b60c95460009060ff1661248b5760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff16156124b85760405162461bcd60e51b81526004016106a8906154b4565b60006124c3846133bb565b905080600401546000146124e95760405162461bcd60e51b81526004016106a8906153a6565b600083116125095760405162461bcd60e51b81526004016106a89061552f565b61251233612bfb565b61252e5760405162461bcd60e51b81526004016106a89061560a565b6101ca544210156125515760405162461bcd60e51b81526004016106a8906152b1565b80546040516337b1b00560e21b8152730b48aF34f4c854F5ae1A3D587da471FeA45bAD529163dec6c0149161258991906004016151c6565b60206040518083038186803b1580156125a157600080fd5b505af41580156125b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d99190614df1565b15612614576125f86000805160206158ca8339815191526104b6612f2c565b6126145760405162461bcd60e51b81526004016106a89061560a565b60018101546126239084613a16565b60018201556101c354600090612641906001600160a01b03166133b0565b6001600160a01b0316635be57b6a604051806040016040528087815260200188815250336040518363ffffffff1660e01b81526004016126829291906156f7565b602060405180830381600087803b15801561269c57600080fd5b505af11580156126b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d49190614f26565b6101c3549091506126f7903390309087906122b8906001600160a01b0316612f99565b8085336001600160a01b03167fcb3ef4109dcd006671348924f00aac8398190a5ff283d6e470d74581513e10368760405161273291906151c6565b60405180910390a491505060c9805460ff1916600117905592915050565b60008051602061588a83398151915281565b6000805160206158aa83398151915281565b600054610100900460ff168061278d575061278d612d75565b8061279b575060005460ff16155b6127b75760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff161580156127e2576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038b161580159061280257506001600160a01b038a1615155b61281e5760405162461bcd60e51b81526004016106a890615388565b6101c380546001600160a01b0319166001600160a01b038d8116919091179182905560009161284d9116613cb2565b9050612858816106ee565b612861856138f2565b61286e8b8a8a8a8a613cca565b426101c5556101c68a90558261293257612886614bab565b60408051602081019091526101c35481906128a9906001600160a01b0316613de1565b6001600160a01b0316639b56d7886040518163ffffffff1660e01b815260040160206040518083038186803b1580156128e157600080fd5b505afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129199190614f26565b9052905061292b6101c8826001614bc9565b5050612941565b61293f6101c88585614b31565b505b6129596000805160206158ea8339815191528c610938565b6129716000805160206158ea83398151915282610938565b6129976000805160206158ea83398151915260008051602061588a833981519152612f17565b6129bd6000805160206158ca83398151915260008051602061588a833981519152612f17565b6101c3546129ec906000805160206158ca833981519152906129e7906001600160a01b0316613dec565b610938565b5080156129ff576000805461ff00191690555b5050505050505050505050565b612a14614b7c565b60c95460ff16612a365760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff1615612a635760405162461bcd60e51b81526004016106a8906154b4565b6000612a6f8484613a16565b905060008111612a915760405162461bcd60e51b81526004016106a8906153c2565b6000612b23856101c460009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae657600080fd5b505afa158015612afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1e9190614f26565b613a40565b90506000612b796101c460009054906101000a90046001600160a01b03166001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c257600080fd5b90506000612b878683613a40565b9050612bae3330612b988685613a16565b6101c3546122b8906001600160a01b0316612f99565b612bb6614b7c565b612bc08483613df7565b90508060800151600014612bd057fe5b94505050505060c9805460ff1916600117905592915050565b6000805160206158ea83398151915281565b6101c354600090612c14906001600160a01b0316613de1565b6001600160a01b0316631852f200836101c86040518363ffffffff1660e01b8152600401612c439291906150e8565b60206040518083038186803b158015612c5b57600080fd5b505afa158015612c6f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190614df1565b600061134283836040518060200160405280600081525061400d565b612cb76138c2565b158015612cd4575060008181526101cb6020526040902060090154155b612cf05760405162461bcd60e51b81526004016106a8906153a6565b60008181526101cb6020526040908190206101c3549151636e10dbd760e01b8152730b48aF34f4c854F5ae1A3D587da471FeA45bAD5292636e10dbd792612d49926005909101916001600160a01b031690600401615805565b60006040518083038186803b158015612d6157600080fd5b505af41580156108e4573d6000803e3d6000fd5b303b1590565b600054610100900460ff1680612d945750612d94612d75565b80612da2575060005460ff16155b612dbe5760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff16158015610fe7576000805460ff1961ff00199091166101001716600117905580156108e9576000805461ff001916905550565b600054610100900460ff1680612e155750612e15612d75565b80612e23575060005460ff16155b612e3f5760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff16158015612e6a576000805460ff1961ff0019909116610100171660011790555b6097805460ff1916905580156108e9576000805461ff001916905550565b600054610100900460ff1680612ea15750612ea1612d75565b80612eaf575060005460ff16155b612ecb5760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff16158015612ef6576000805460ff1961ff0019909116610100171660011790555b60c9805460ff1916600117905580156108e9576000805461ff001916905550565b60009182526065602052604090912060020155565b3390565b6000828152606560205260409020612f489082614039565b1561081a57612f55612f2c565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611345826138aa565b60006001600160a01b03821663b93f9b0a60065b6040518263ffffffff1660e01b8152600401612fd491906151c6565b60206040518083038186803b158015612fec57600080fd5b505afa158015613000573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190614c7e565b611fc28383836040518060200160405280600081525061404e565b61305b8484848460405180602001604052806000815250614118565b50505050565b600082815260656020526040902061307990826141ed565b1561081a57613086612f2c565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff166130ec5760405162461bcd60e51b81526004016106a890615322565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61311f612f2c565b60405161312c9190615016565b60405180910390a1565b60006101cb600061315460016101cc54612c9390919063ffffffff16565b81526020019081526020016000209050600081600501600401541161318b5760405162461bcd60e51b81526004016106a8906155d2565b6004810154156131ad5760405162461bcd60e51b81526004016106a8906153a6565b600181015460068201546000916131c49190613a16565b6101c4546040805163a4d66daf60e01b815290519293506001600160a01b03909116916327ea6f2b9161326d9161321e918691869163a4d66daf916004808301926020929190829003018186803b15801561224957600080fd5b6101c460009054906101000a90046001600160a01b03166001600160a01b0316631a861d266040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae657600080fd5b6040518263ffffffff1660e01b815260040161328991906151c6565b600060405180830381600087803b1580156132a357600080fd5b505af11580156132b7573d6000803e3d6000fd5b50506101c354604051636e10dbd760e01b8152730b48aF34f4c854F5ae1A3D587da471FeA45bAD529350636e10dbd792506133059160058701916001600160a01b0390911690600401615805565b60006040518083038186803b15801561331d57600080fd5b505af4158015613331573d6000803e3d6000fd5b50506101c354604051636e10dbd760e01b8152730b48aF34f4c854F5ae1A3D587da471FeA45bAD529350636e10dbd7925061337c9186916001600160a01b0390911690600401615805565b60006040518083038186803b15801561339457600080fd5b505af41580156133a8573d6000803e3d6000fd5b505050505050565b600061134582614202565b600080821180156133da57506101cc546133d690600261421a565b8211155b6133f65760405162461bcd60e51b81526004016106a8906153de565b604051630257abad60e01b8152600090730b48aF34f4c854F5ae1A3D587da471FeA45bAD5290630257abad906134309086906004016151c6565b60206040518083038186803b15801561344857600080fd5b505af415801561345c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134809190614f26565b60008181526101cb602052604080822090516337b1b00560e21b815292935091730b48aF34f4c854F5ae1A3D587da471FeA45bAD529063dec6c014906134ca9088906004016151c6565b60206040518083038186803b1580156134e257600080fd5b505af41580156134f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351a9190614df1565b6135275781600501613529565b815b95945050505050565b6101c354600090819061354d906001600160a01b03166133b0565b6001600160a01b031663430c208133866040518363ffffffff1660e01b815260040161357a92919061506b565b60206040518083038186803b15801561359257600080fd5b505afa1580156135a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ca9190614df1565b80156135da57506135da33612bfb565b6135f65760405162461bcd60e51b81526004016106a89061560a565b600083116136165760405162461bcd60e51b81526004016106a8906153c2565b600080730b48aF34f4c854F5ae1A3D587da471FeA45bAD5263f7fc24b289896040518363ffffffff1660e01b81526004016136529291906157bd565b604080518083038186803b15801561366957600080fd5b505af415801561367d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a19190614f3e565b909250905060006136b28383613a16565b9050808611156136d45760405162461bcd60e51b81526004016106a89061552f565b886004015442116136f75760405162461bcd60e51b81526004016106a8906153a6565b6000808a60040154600014156137985760018b01546137169089612c93565b60018c0155506101c3548790613734906001600160a01b03166133b0565b6001600160a01b03166366cbb0378a836040518363ffffffff1660e01b81526004016137619291906151cf565b600060405180830381600087803b15801561377b57600080fd5b505af115801561378f573d6000803e3d6000fd5b5050505061382d565b6137a28589613a40565b91506137b284612b1e8a85612c93565b6101c3549091506137cb906001600160a01b03166133b0565b6001600160a01b031663b81922058a83856040518463ffffffff1660e01b81526004016137fa93929190615837565b600060405180830381600087803b15801561381457600080fd5b505af1158015613828573d6000803e3d6000fd5b505050505b6138513361383b8385613a16565b6101c354610a55906001600160a01b0316612f99565b888a60200151336001600160a01b03167f92f2787b755dae547f1701582fe74c7abf277ec14db316dd01abc69cacf7a25985856040516138929291906151cf565b60405180910390a4909a909950975050505050505050565b60006001600160a01b03821663b93f9b0a6005612fb8565b60006101cc5460001480611efe5750506101cc546000190160009081526101cb6020526040902060040154151590565b60056101cc54106139155760405162461bcd60e51b81526004016106a890615350565b6101cc54604051632788c17160e21b8152730b48aF34f4c854F5ae1A3D587da471FeA45bAD5291639e2305c491613952916101cb916004016151cf565b60006040518083038186803b15801561396a57600080fd5b505af415801561397e573d6000803e3d6000fd5b50506101cc54613992925090506001613a16565b6101cc556101ca55565b60975460ff16156139bf5760405162461bcd60e51b81526004016106a8906154b4565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861311f612f2c565b60006113428383614241565b6000611342836001600160a01b038416614286565b60008282018381101561134257600080fd5b60006001600160a01b03821663b93f9b0a6014612fb8565b6000818310613a4f5781611342565b5090919050565b613a5e614b7c565b613a666138c2565b613a825760405162461bcd60e51b81526004016106a8906155d2565b6101c454604080516302eebf2d60e61b815290516000926001600160a01b031691634af75d3591839163bbafcb40916004808301926020929190829003018186803b158015613ad057600080fd5b505afa158015613ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b089190614f26565b6040518263ffffffff1660e01b8152600401613b2491906151c6565b60206040518083038186803b158015613b3c57600080fd5b505afa158015613b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b749190614f26565b9050613b7e614b7c565b6101c45460405163c290d69160e01b81526001600160a01b039091169063c290d69190613baf9087906004016151c6565b60a060405180830381600087803b158015613bc957600080fd5b505af1158015613bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c019190614e79565b9050613c94826101c460009054906101000a90046001600160a01b03166001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c5657600080fd5b505afa158015613c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8e9190614f26565b90612c93565b9150613ca0828261429e565b9392505050565b600061134582614704565b60006001600160a01b03821663b93f9b0a6007612fb8565b6101c354613ce0906001600160a01b0316614708565b6001600160a01b03166301b215516040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613d1a57600080fd5b505af1158015613d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d529190614c7e565b6101c480546001600160a01b0319166001600160a01b0392831617908190556101c35460405163297aaadd60e11b8152918316926352f555ba92613da8929091169030908a908a908a908a908a90600401615084565b600060405180830381600087803b158015613dc257600080fd5b505af1158015613dd6573d6000803e3d6000fd5b505050505050505050565b600061134582614713565b60006113458261472b565b613dff614b7c565b613e076138c2565b613e235760405162461bcd60e51b81526004016106a8906155d2565b6101c454604080516302eebf2d60e61b815290516000926001600160a01b031691634af75d3591839163bbafcb40916004808301926020929190829003018186803b158015613e7157600080fd5b505afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea99190614f26565b6040518263ffffffff1660e01b8152600401613ec591906151c6565b60206040518083038186803b158015613edd57600080fd5b505afa158015613ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f159190614f26565b9050613f1f614b7c565b6101c4546040516377a4777360e11b81526001600160a01b039091169063ef48eee690613f5290889088906004016151cf565b60a060405180830381600087803b158015613f6c57600080fd5b505af1158015613f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa49190614e79565b9050613ff9826101c460009054906101000a90046001600160a01b03166001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c5657600080fd5b9150614005828261429e565b949350505050565b600081848411156140315760405162461bcd60e51b81526004016106a8919061521c565b505050900390565b6000611342836001600160a01b038416614743565b6001600160a01b0383166140745760405162461bcd60e51b81526004016106a890615388565b60405163a9059cbb60e01b81526000906001600160a01b0386169063a9059cbb906140a5908790879060040161506b565b602060405180830381600087803b1580156140bf57600080fd5b505af11580156140d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f79190614df1565b905081816133a85760405162461bcd60e51b81526004016106a8919061521c565b6001600160a01b03831661413e5760405162461bcd60e51b81526004016106a890615388565b6040516323b872dd60e01b81526000906001600160a01b038716906323b872dd90614171908890889088906004016150c4565b602060405180830381600087803b15801561418b57600080fd5b505af115801561419f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c39190614df1565b905081816141e45760405162461bcd60e51b81526004016106a8919061521c565b50505050505050565b6000611342836001600160a01b03841661478d565b60006001600160a01b03821663b93f9b0a600c612fb8565b60008261422957506000611345565b8282028284828161423657fe5b041461134257600080fd5b815460009082106142645760405162461bcd60e51b81526004016106a89061526f565b82600001828154811061427357fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60606101cc5467ffffffffffffffff811180156142ba57600080fd5b506040519080825280602002602001820160405280156142e4578160200160208202803683370190505b50905060005b6101cc548110156144a95760008181526101cb6020526040808220600b01546101c95491516333b8e3b960e21b8152730b48aF34f4c854F5ae1A3D587da471FeA45bAD529263cee38ee492614344928a9290600401615837565b60206040518083038186803b15801561435c57600080fd5b505af4158015614370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143949190614f26565b9050730b48aF34f4c854F5ae1A3D587da471FeA45bAD5263cee38ee46143cb86606001518760400151613a1690919063ffffffff16565b60008581526101cb602052604090819020600b01546101c95491516001600160e01b031960e086901b168152614405939290600401615837565b60206040518083038186803b15801561441d57600080fd5b505af4158015614431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144559190614f26565b83838151811061446157fe5b60209081029190910181019190915260008381526101cb90915260409020600a015461448d9082613a16565b60008381526101cb60205260409020600a0155506001016142ea565b50602082015182516000916144be9190613a16565b905060006144dd84606001518560400151613a1690919063ffffffff16565b905060008211806144ee5750600081115b156108e45760006144ff8383614853565b90506000805b6101cc548110156145935761454d86828151811061451f57fe5b60200260200101516101cb6000848152602001908152602001600020600b0154612c9390919063ffffffff16565b60008281526101cb60205260409020600b015585516145899087908390811061457257fe5b602002602001015183613a1690919063ffffffff16565b9150600101614505565b506101c9546145a29082612c93565b6101c9556101c3546145bc906001600160a01b03166149b6565b6001600160a01b03166328fc33c7856040518263ffffffff1660e01b81526004016145e791906151c6565b600060405180830381600087803b15801561460157600080fd5b505af1158015614615573d6000803e3d6000fd5b50506101c45460408051637df1f1b960e01b815290513094506001600160a01b039092169250637df1f1b9916004808301926020929190829003018186803b15801561466057600080fd5b505afa158015614674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146989190614c7e565b6001600160a01b03167fd1055dc2c2a003a83dfacb1c38db776eab5ef89d77a8f05a3512e8cf57f953ce6146dd89602001518a60000151613a1690919063ffffffff16565b60808a01516040516146f392918991899061581c565b60405180910390a350505050505050565b5490565b6000611345826149c1565b60006001600160a01b03821663b93f9b0a6013612fb8565b60006001600160a01b03821663b93f9b0a600e612fb8565b600061474f8383614286565b61478557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611345565b506000611345565b6000818152600183016020526040812054801561484957835460001980830191908101906000908790839081106147c057fe5b90600052602060002001549050808760000184815481106147dd57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061480d57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611345565b6000915050611345565b600080730b48aF34f4c854F5ae1A3D587da471FeA45bAD52633068ee156101cb6101cc5487876148ac6148a46101c360009054906101000a90046001600160a01b03166001600160a01b03166149d9565b606490614a59565b6101c9546101c4546101c6546040516001600160e01b031960e08b901b1681526148e9989796959493926001600160a01b031691906004016151dd565b60206040518083038186803b15801561490157600080fd5b505af4158015614915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149399190614f26565b6101c35490915061496e90614956906001600160a01b0316612fa4565b6101c3548390610a55906001600160a01b0316612f99565b306001600160a01b03167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb826040516149a791906151c6565b60405180910390a29392505050565b600061134582613a28565b60006001600160a01b03821663b93f9b0a6002612fb8565b604051631f8ac6cb60e31b81526000906001600160a01b0383169063fc56365890614a09906003906004016151c6565b60206040518083038186803b158015614a2157600080fd5b505afa158015614a35573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190614f26565b600061134283836040518060200160405280600081525060008183614a915760405162461bcd60e51b81526004016106a8919061521c565b506000838581614a9d57fe5b0495945050505050565b60405180606001604052806003906020820280368337509192915050565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280614b10614b7c565b8152602001614b1d614b7c565b815260200160008152602001600081525090565b828054828255906000526020600020908101928215614b6c579160200282015b82811115614b6c578235825591602001919060010190614b51565b50614b78929150614c04565b5090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405180602001604052806001906020820280368337509192915050565b828054828255906000526020600020908101928215614b6c579160200282015b82811115614b6c578251825591602001919060010190614be9565b5b80821115614b785760008155600101614c05565b60008083601f840112614c2a578182fd5b50813567ffffffffffffffff811115614c41578182fd5b6020830191508360208083028501011115614c5b57600080fd5b9250929050565b600060208284031215614c73578081fd5b813561134281615874565b600060208284031215614c8f578081fd5b815161134281615874565b6000806000806000806000806000806101208b8d031215614cb9578586fd5b8a35614cc481615874565b995060208b0135614cd481615874565b985060408b0135975060608b0135965060808b0135955060a08b0135614cf981615874565b945060c08b0135935060e08b013592506101008b013567ffffffffffffffff811115614d23578283fd5b614d2f8d828e01614c19565b915080935050809150509295989b9194979a5092959850565b60008060208385031215614d5a578182fd5b823567ffffffffffffffff811115614d70578283fd5b614d7c85828601614c19565b90969095509350505050565b60008060008060408587031215614d9d578384fd5b843567ffffffffffffffff80821115614db4578586fd5b614dc088838901614c19565b90965094506020870135915080821115614dd8578384fd5b50614de587828801614c19565b95989497509550505050565b600060208284031215614e02578081fd5b81518015158114611342578182fd5b600060208284031215614e22578081fd5b5035919050565b60008060408385031215614e3b578182fd5b823591506020830135614e4d81615874565b809150509250929050565b60008060408385031215614e6a578182fd5b50508035926020909101359150565b600060a08284031215614e8a578081fd5b614e9460a061584d565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060a08284031215614edb578081fd5b614ee560a061584d565b8251614ef081615874565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215614f37578081fd5b5051919050565b60008060408385031215614f50578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215614f79578384fd5b863595506020870135945060408701359350606087013560ff81168114614f9e578283fd5b9598949750929560808101359460a0909101359350915050565b80518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b8054825260018101546020830152600281015460408301526003810154606083015260040154608090910152565b6001600160a01b0391909116815260200190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039788168152958716602087015293861660408601526060850192909252608084015290921660a082015260c081019190915260e00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208083018290528354918301829052600084815281812090929091906060850190845b818110156151365784548352600194850194928401920161511a565b5090979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561517b5783518352928401929184019160010161515f565b50909695505050505050565b60608101818360005b60038110156151b257815160ff16835260209283019290910190600101615190565b50505092915050565b901515815260200190565b90815260200190565b918252602082015260400190565b978852602088019690965260408701949094526060860192909252608085015260a08401526001600160a01b031660c083015260e08201526101000190565b6000602080835283518082850152825b818110156152485785810183015185820160400152820161522c565b818111156152595783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600890820152672737ba1037b832b760c11b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526002908201526114d360f21b604082015260600190565b602080825260029082015261044560f41b604082015260600190565b6020808252600490820152635a45524f60e01b604082015260600190565b602080825260029082015261151360f21b604082015260600190565b6020808252600290820152615a4160f01b604082015260600190565b6020808252600f908201526e696e76616c6964207472616e63686560881b604082015260600190565b6020808252600b908201526a6861732062616c616e636560a81b604082015260600190565b602080825260029082015261047560f41b604082015260600190565b6020808252600290820152614c4960f01b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526002908201526124a360f11b604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b602080825260029082015261494160f01b604082015260600190565b60208082526002908201526104c560f41b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600390820152622622a760e91b604082015260600190565b602080825260029082015261139360f21b604082015260600190565b602080825260029082015261125560f21b604082015260600190565b6020808252600290820152614e4160f01b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b82518152602092830151928101929092526001600160a01b0316604082015260600190565b60a081016113458284614fb8565b60006101808201905061573e828451614fb8565b602083015161575060a0840182614fb8565b5060408301516101408301526060909201516101609091015290565b610240810161577b8286614fb8565b8360a083015261578e60c0830184614fe8565b61579f610160830160058501614fe8565b600a830154610200830152600b830154610220830152949350505050565b91825280516001600160a01b0316602080840191909152810151604080840191909152810151606080840191909152810151608080840191909152015160a082015260c00190565b9182526001600160a01b0316602082015260400190565b93845260208401929092526040830152606082015260800190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561586c57600080fd5b604052919050565b6001600160a01b03811681146108e957600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a956624bfbe09c0e98e645d61eba0de4ce88e8cceabdb00fead208d19a8e1209baf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a90279a2646970667358221220ae8a3d389b37ac75ca536d843d9006105050de775cf1661d53712079c419e21064736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f85760003560e01c80639d11053011610193578063c78bed86116100e4578063e2bbb15811610092578063e2bbb15814610610578063e58378bb14610623578063e63ab1e91461062b578063e7aa8a9214610633578063ef48eee614610646578063f362136714610659578063f94f5a1214610661576102f8565b8063c78bed861461059f578063ca15c873146105b4578063cf09e0d0146105c7578063d547741f146105cf578063d972e8ad146105e2578063dd0ec241146105f5578063e2a657f9146105fd576102f8565b8063ae6c857a11610141578063ae6c857a1461052e578063b6db75a014610541578063b9317d8614610549578063bf6c87c71461055c578063bf8bcee414610564578063c290d69114610577578063c77d569814610597576102f8565b80639d110530146104bb578063a079a4dd146104ce578063a217fddf146104e1578063a6a25e88146104e9578063a8f9c4fe146104f1578063aa2a7c4c146104f9578063aae932fe1461050c576102f8565b806344c08f231161024d57806378bcd604116101fb57806378bcd6041461044a57806379502c551461045d5780637976323d1461046557806380b654311461046d5780638456cb591461048d5780639010d07c1461049557806391d14854146104a8576102f8565b806344c08f23146103ef57806347195e13146103f75780634d02fe6f1461040c578063515bc3231461041f578063526d81f6146104325780635c975abb1461043a5780635eb185a214610442576102f8565b80632ae754be116102aa5780632ae754be146103885780632f2ff15d146103905780633403c2fc146103a357806336568abe146103ab5780633f4ba83a146103be5780634026478e146103c6578063441a3e70146103ce576102f8565b80630881806c146102fd578063097616a3146103075780630cfb14b01461031a5780630d8e6e2c1461033857806317f769411461034d578063248a9ca31461036257806327ea6f2b14610375575b600080fd5b610305610674565b005b610305610315366004614c62565b6106ee565b61032261081e565b60405161032f91906151c6565b60405180910390f35b610340610825565b60405161032f9190615187565b610355610842565b60405161032f91906151bb565b610322610370366004614e11565b61084c565b610305610383366004614e11565b610861565b6103226108ec565b61030561039e366004614e29565b6108fe565b610305610942565b6103056103b9366004614e29565b610b3e565b610305610b80565b610305610bbe565b6103e16103dc366004614e58565b610c1d565b60405161032f9291906151cf565b610322610d45565b6103ff610d4a565b60405161032f9190615016565b6103e161041a366004614e11565b610d5a565b61032261042d366004614f61565b610eb7565b610305610f71565b610355610ffb565b610322611004565b610305610458366004614e11565b61100b565b6103ff611221565b610322611231565b61048061047b366004614e11565b611238565b60405161032f919061572a565b6103056112ec565b6103ff6104a3366004614e58565b61132a565b6103556104b6366004614e29565b61134b565b6103056104c9366004614d88565b611363565b6103056104dc366004614e11565b6113c5565b610322611a0a565b610305611a0f565b610305611a32565b6103e1610507366004614e11565b611a91565b61051f61051a366004614e11565b611c58565b60405161032f93929190615837565b61030561053c366004614e11565b611ea8565b610355611ee2565b610305610557366004614d48565b611f03565b610305611fc7565b610305610572366004614e11565b612023565b61058a610585366004614e11565b612078565b60405161032f919061571c565b610322612300565b6105a7612307565b60405161032f9190615143565b6103226105c2366004614e11565b612360565b610322612377565b6103056105dd366004614e29565b61237e565b61058a6105f0366004614e11565b6123b8565b610322612408565b61032261060b366004614e11565b612447565b61032261061e366004614e58565b612466565b610322612750565b610322612762565b610305610641366004614c9a565b612774565b61058a610654366004614e58565b612a0c565b610322612be9565b61035561066f366004614c62565b612bfb565b61068c6000805160206158ea8339815191523361134b565b6106b15760405162461bcd60e51b81526004016106a89061560a565b60405180910390fd5b60975460ff16156106d45760405162461bcd60e51b81526004016106a8906154b4565b6101cc546106ec906106e7906001612c93565b612caf565b565b600054610100900460ff16806107075750610707612d75565b80610715575060005460ff16155b6107315760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff1615801561075c576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166107825760405162461bcd60e51b81526004016106a8906154fa565b61078a612d7b565b610792612dfc565b61079a612e88565b6107b260008051602061588a83398151915283610938565b6107ca6000805160206158aa83398151915283610938565b6107f06000805160206158aa83398151915260008051602061588a833981519152612f17565b61080860008051602061588a83398151915280612f17565b801561081a576000805461ff00191690555b5050565b6101c95481565b61082d614aa7565b60006040820181905260208201526001815290565b6101c75460ff1681565b60009081526065602052604090206002015490565b610869611ee2565b6108855760405162461bcd60e51b81526004016106a89061565d565b6101c4546040516327ea6f2b60e01b81526001600160a01b03909116906327ea6f2b906108b69084906004016151c6565b600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b505050505b50565b6000805160206158ca83398151915281565b60008281526065602052604090206002015461091c906104b6612f2c565b6109385760405162461bcd60e51b81526004016106a8906152d3565b61081a8282612f30565b61094a611ee2565b6109665760405162461bcd60e51b81526004016106a89061565d565b61096e610ffb565b61097a5761097a6112ec565b6101c354600090610993906001600160a01b0316612f99565b6101c3549091506000906109af906001600160a01b0316612fa4565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109df9190615016565b60206040518083038186803b1580156109f757600080fd5b505afa158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f9190614f26565b90508015610a65576101c354610a659083908390610a55906001600160a01b0316612f99565b6001600160a01b03169190613024565b6101c4546040516370a0823160e01b81526000916001600160a01b03808716926370a0823192610a99921690600401615016565b60206040518083038186803b158015610ab157600080fd5b505afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae99190614f26565b90508015610b0d576101c454610b0d906001600160a01b038681169116858461303f565b60405130907f1fc1e771236d2e93bb9541cdcb4654ba0fd3fb615b48d829b7b365f03998512690600090a250505050565b610b46612f2c565b6001600160a01b0316816001600160a01b031614610b765760405162461bcd60e51b81526004016106a8906156a8565b61081a8282613061565b610b9a6000805160206158aa8339815191526104b6612f2c565b610bb65760405162461bcd60e51b81526004016106a89061560a565b6106ec6130ca565b610bd66000805160206158ea8339815191523361134b565b610bf25760405162461bcd60e51b81526004016106a89061560a565b60975460ff1615610c155760405162461bcd60e51b81526004016106a8906154b4565b6106ec613136565b60c954600090819060ff16610c445760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff1615610c715760405162461bcd60e51b81526004016106a8906154b4565b610c79614ac5565b6101c354610c8f906001600160a01b03166133b0565b6001600160a01b0316638c7a63ae866040518263ffffffff1660e01b8152600401610cba91906151c6565b60a06040518083038186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190614eca565b90506000610d1b82602001516133bb565b9050610d2981838888613532565b93509350505060c9805460ff1916600117905590939092509050565b600290565b6101c4546001600160a01b031681565b600080610d65614ac5565b6101c354610d7b906001600160a01b03166133b0565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b8152600401610da691906151c6565b60a06040518083038186803b158015610dbe57600080fd5b505afa158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df69190614eca565b90506000610e0782602001516133bb565b90508060040154421115610ea857604051637bfe125960e11b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9063f7fc24b290610e4e90849086906004016157bd565b604080518083038186803b158015610e6557600080fd5b505af4158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d9190614f3e565b935093505050610eb2565b6000809350935050505b915091565b60975460009060ff1615610edd5760405162461bcd60e51b81526004016106a8906154b4565b6101c354610ef3906001600160a01b03166138aa565b6001600160a01b031663d505accf333089898989896040518863ffffffff1660e01b8152600401610f2a979695949392919061502a565b600060405180830381600087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b50505050610f668787612466565b979650505050505050565b600054610100900460ff1680610f8a5750610f8a612d75565b80610f98575060005460ff16155b610fb45760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff16158015610fdf576000805460ff1961ff0019909116610100171660011790555b610fe7612dfc565b80156108e9576000805461ff001916905550565b60975460ff1690565b6101ca5481565b6110236000805160206158ea8339815191523361134b565b61103f5760405162461bcd60e51b81526004016106a89061560a565b60975460ff16156110625760405162461bcd60e51b81526004016106a8906154b4565b61106a6138c2565b6110865760405162461bcd60e51b81526004016106a8906155d2565b6101c460009054906101000a90046001600160a01b03166001600160a01b03166381c17a156040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d557600080fd5b505afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190614df1565b1561112a5760405162461bcd60e51b81526004016106a89061554b565b6101c460009054906101000a90046001600160a01b03166001600160a01b031663457147a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190614df1565b6111cd5760405162461bcd60e51b81526004016106a89061542c565b6111d6816138f2565b6101cc5430907f3420dd9c54d6a8846edd2fb39a41c30c31e7bc95b43655dae59f47cc913b60d590611209906001612c93565b60405161121691906151c6565b60405180910390a250565b6101c3546001600160a01b031681565b6101cc5481565b611240614afd565b5060009081526101cb602090815260409182902082516101208101845281546080808301918252600184015460a080850191909152600285015460c0850152600385015460e085015260048501546101008501529183528551918201865260058401548252600684015482860152600784015482870152600884015460608084019190915260098501549183019190915293820152600a82015493810193909352600b01549082015290565b6113066000805160206158aa8339815191526104b6612f2c565b6113225760405162461bcd60e51b81526004016106a89061560a565b6106ec61399c565b600082815260656020526040812061134290836139f5565b90505b92915050565b60008281526065602052604081206113429083613a01565b8281146113825760405162461bcd60e51b81526004016106a8906155b5565b60005b818110156108e4576113bb85858381811061139c57fe5b905060200201358484848181106113af57fe5b90506020020135610c1d565b5050600101611385565b6113dd6000805160206158ea8339815191523361134b565b6113f95760405162461bcd60e51b81526004016106a89061560a565b60975460ff161561141c5760405162461bcd60e51b81526004016106a8906154b4565b6101c75460ff16156114405760405162461bcd60e51b81526004016106a89061536c565b6114486138c2565b61145457611454613136565b6101cc546000190160009081526101cb6020526040808220600781015460068201549251630174b44960e01b815291939273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__92630174b449926114af9290916004016151cf565b60206040518083038186803b1580156114c757600080fd5b505af41580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190614f26565b60028301546001840154604051630174b44960e01b815292935061159c9273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__92630174b44992611545926004016151cf565b60206040518083038186803b15801561155d57600080fd5b505af4158015611571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115959190614f26565b8290613a16565b9050808311156115be5760405162461bcd60e51b81526004016106a8906154de565b6101c45460405163a079a4dd60e01b81526001600160a01b039091169063a079a4dd906115ef9086906004016151c6565b600060405180830381600087803b15801561160957600080fd5b505af115801561161d573d6000803e3d6000fd5b5050505060006116368483612c9390919063ffffffff16565b600784015460028501546040805160a081018252600588015481526006880154602082015280820184905260088801546060820152600988015460808201529051634ec167e960e11b81529394509192909173__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__91639d82cfd2916116b49187908a9060040161576c565b60206040518083038186803b1580156116cc57600080fd5b505af41580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190614f26565b60078601556040805160a08101825286548152600187015460208201526002870154818301526003870154606082015260048088015460808301529151634ec167e960e11b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__92639d82cfd29261177792909188918b910161576c565b60206040518083038186803b15801561178f57600080fd5b505af41580156117a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c79190614f26565b6002860155600b8501546117db9087613a16565b600b8601556101c9546117ee9087613a16565b6101c9556101c45460408051637df1f1b960e01b815290516000926001600160a01b031691637df1f1b9916004808301926020929190829003018186803b15801561183857600080fd5b505afa15801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190614c7e565b6101c35490915060009061188c906001600160a01b0316613a28565b9050806001600160a01b031663e149ee8060016101cc54036040518263ffffffff1660e01b81526004016118c091906151c6565b600060405180830381600087803b1580156118da57600080fd5b505af11580156118ee573d6000803e3d6000fd5b50506101c35461191092508491508a90610a55906001600160a01b0316612f99565b816001600160a01b03167f7411b87a3c039bdfd8f3510b21e8bd0736265f53513735e1f4aa7b4f306b728d8960405161194991906151c6565b60405180910390a26005870154600788015430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b687906119898882612c93565b60088c01546040516119a293926000908103929161581c565b60405180910390a38654600288015430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b687906119df8782612c93565b60038c01546040516119f893926000908103929161581c565b60405180910390a35050505050505050565b600081565b60975460ff16156106ec5760405162461bcd60e51b81526004016106a8906154b4565b611a3a611ee2565b611a565760405162461bcd60e51b81526004016106a89061565d565b6101c7805460ff1916600117905560405130907f90d9b09c68a7e1312ce22801552b47265d77db9496383d51374b4058545447d790600090a2565b60c954600090819060ff16611ab85760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff1615611ae55760405162461bcd60e51b81526004016106a8906154b4565b611aed614ac5565b6101c354611b03906001600160a01b03166133b0565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b8152600401611b2e91906151c6565b60a06040518083038186803b158015611b4657600080fd5b505afa158015611b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e9190614eca565b90506000611b8f82602001516133bb565b905060008073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__63f7fc24b284866040518363ffffffff1660e01b8152600401611bcd9291906157bd565b604080518083038186803b158015611be457600080fd5b505af4158015611bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1c9190614f3e565b90925090506000611c2d8383613a16565b9050611c3b84868a84613532565b96509650505050505060c9805460ff191660011790559092909150565b600080600042841015611c7d5760405162461bcd60e51b81526004016106a8906155ee565b6101c454604080516364fb2d9560e01b815290516000926001600160a01b0316916364fb2d95916004808301926020929190829003018186803b158015611cc357600080fd5b505afa158015611cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfb9190614f26565b11611d185760405162461bcd60e51b81526004016106a890615448565b6101c454604051631ac1df9760e31b81526001600160a01b039091169063d60efcb890611d499087906004016151c6565b60206040518083038186803b158015611d6157600080fd5b505afa158015611d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190614f26565b6101c454604051634d90a53960e01b81526001600160a01b0390911690634d90a53990611dca9088906004016151c6565b60206040518083038186803b158015611de257600080fd5b505afa158015611df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1a9190614f26565b6101c4546040516311daef0760e01b81526001600160a01b03909116906311daef0790611e4b9089906004016151c6565b60206040518083038186803b158015611e6357600080fd5b505afa158015611e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9b9190614f26565b9250925092509193909250565b611ec06000805160206158ea8339815191523361134b565b611edc5760405162461bcd60e51b81526004016106a89061560a565b6101ca55565b6000611efe60008051602061588a8339815191526104b6612f2c565b905090565b611f1b6000805160206158ea8339815191523361134b565b611f375760405162461bcd60e51b81526004016106a89061560a565b600080526101cb6020527f7815f96d61162a6533de7fc4199513d6e939c8cbee1627dfd11ec1fe503f0bb954158015611f995750600080526101cb6020527f7815f96d61162a6533de7fc4199513d6e939c8cbee1627dfd11ec1fe503f0bb454155b611fb55760405162461bcd60e51b81526004016106a890615407565b611fc26101c88383614b31565b505050565b611fcf611ee2565b611feb5760405162461bcd60e51b81526004016106a89061565d565b6101c7805460ff1916905560405130907f7184039938737267597232635b117c924371ac877d4329f2dfa5ca674c5cc4a590600090a2565b61202b611ee2565b6120475760405162461bcd60e51b81526004016106a89061565d565b6101c454604051632fe2f3b960e21b81526001600160a01b039091169063bf8bcee4906108b69084906004016151c6565b612080614b7c565b60c95460ff166120a25760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff16156120cf5760405162461bcd60e51b81526004016106a8906154b4565b600082116120ef5760405162461bcd60e51b81526004016106a8906153c2565b60006122876101c460009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561214357600080fd5b505afa158015612157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217b9190614f26565b6101c454604080516310c2b59b60e11b81529051612281926001600160a01b0316916321856b36916004808301926020929190829003018186803b1580156121c257600080fd5b505afa1580156121d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fa9190614f26565b6101c460009054906101000a90046001600160a01b03166001600160a01b03166320dcc3426040518163ffffffff1660e01b815260040160206040518083038186803b15801561224957600080fd5b505afa15801561225d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122819190614f26565b90613a16565b905060006122958483613a40565b6101c3549091506122c9903390309084906122b8906001600160a01b0316612f99565b6001600160a01b031692919061303f565b6122d1614b7c565b6122da85613a56565b905080608001516000146122ea57fe5b9250505060c9805460ff19166001179055919050565b6101c65481565b60606101c880548060200260200160405190810160405280929190818152602001828054801561235657602002820191906000526020600020905b815481526020019060010190808311612342575b5050505050905090565b600081815260656020526040812061134590613ca7565b6101c55481565b60008281526065602052604090206002015461239c906104b6612f2c565b610b765760405162461bcd60e51b81526004016106a890615464565b6123c0614b7c565b6123c9826133bb565b6040805160a081018252825481526001830154602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b60008060005b6101cc548110156124415760008181526101cb6020526040902060060154612437908390613a16565b915060010161240e565b50905090565b6101c8818154811061245557fe5b600091825260209091200154905081565b60c95460009060ff1661248b5760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff16156124b85760405162461bcd60e51b81526004016106a8906154b4565b60006124c3846133bb565b905080600401546000146124e95760405162461bcd60e51b81526004016106a8906153a6565b600083116125095760405162461bcd60e51b81526004016106a89061552f565b61251233612bfb565b61252e5760405162461bcd60e51b81526004016106a89061560a565b6101ca544210156125515760405162461bcd60e51b81526004016106a8906152b1565b80546040516337b1b00560e21b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9163dec6c0149161258991906004016151c6565b60206040518083038186803b1580156125a157600080fd5b505af41580156125b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d99190614df1565b15612614576125f86000805160206158ca8339815191526104b6612f2c565b6126145760405162461bcd60e51b81526004016106a89061560a565b60018101546126239084613a16565b60018201556101c354600090612641906001600160a01b03166133b0565b6001600160a01b0316635be57b6a604051806040016040528087815260200188815250336040518363ffffffff1660e01b81526004016126829291906156f7565b602060405180830381600087803b15801561269c57600080fd5b505af11580156126b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d49190614f26565b6101c3549091506126f7903390309087906122b8906001600160a01b0316612f99565b8085336001600160a01b03167fcb3ef4109dcd006671348924f00aac8398190a5ff283d6e470d74581513e10368760405161273291906151c6565b60405180910390a491505060c9805460ff1916600117905592915050565b60008051602061588a83398151915281565b6000805160206158aa83398151915281565b600054610100900460ff168061278d575061278d612d75565b8061279b575060005460ff16155b6127b75760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff161580156127e2576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038b161580159061280257506001600160a01b038a1615155b61281e5760405162461bcd60e51b81526004016106a890615388565b6101c380546001600160a01b0319166001600160a01b038d8116919091179182905560009161284d9116613cb2565b9050612858816106ee565b612861856138f2565b61286e8b8a8a8a8a613cca565b426101c5556101c68a90558261293257612886614bab565b60408051602081019091526101c35481906128a9906001600160a01b0316613de1565b6001600160a01b0316639b56d7886040518163ffffffff1660e01b815260040160206040518083038186803b1580156128e157600080fd5b505afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129199190614f26565b9052905061292b6101c8826001614bc9565b5050612941565b61293f6101c88585614b31565b505b6129596000805160206158ea8339815191528c610938565b6129716000805160206158ea83398151915282610938565b6129976000805160206158ea83398151915260008051602061588a833981519152612f17565b6129bd6000805160206158ca83398151915260008051602061588a833981519152612f17565b6101c3546129ec906000805160206158ca833981519152906129e7906001600160a01b0316613dec565b610938565b5080156129ff576000805461ff00191690555b5050505050505050505050565b612a14614b7c565b60c95460ff16612a365760405162461bcd60e51b81526004016106a890615626565b60c9805460ff1916905560975460ff1615612a635760405162461bcd60e51b81526004016106a8906154b4565b6000612a6f8484613a16565b905060008111612a915760405162461bcd60e51b81526004016106a8906153c2565b6000612b23856101c460009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae657600080fd5b505afa158015612afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1e9190614f26565b613a40565b90506000612b796101c460009054906101000a90046001600160a01b03166001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c257600080fd5b90506000612b878683613a40565b9050612bae3330612b988685613a16565b6101c3546122b8906001600160a01b0316612f99565b612bb6614b7c565b612bc08483613df7565b90508060800151600014612bd057fe5b94505050505060c9805460ff1916600117905592915050565b6000805160206158ea83398151915281565b6101c354600090612c14906001600160a01b0316613de1565b6001600160a01b0316631852f200836101c86040518363ffffffff1660e01b8152600401612c439291906150e8565b60206040518083038186803b158015612c5b57600080fd5b505afa158015612c6f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190614df1565b600061134283836040518060200160405280600081525061400d565b612cb76138c2565b158015612cd4575060008181526101cb6020526040902060090154155b612cf05760405162461bcd60e51b81526004016106a8906153a6565b60008181526101cb6020526040908190206101c3549151636e10dbd760e01b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__92636e10dbd792612d49926005909101916001600160a01b031690600401615805565b60006040518083038186803b158015612d6157600080fd5b505af41580156108e4573d6000803e3d6000fd5b303b1590565b600054610100900460ff1680612d945750612d94612d75565b80612da2575060005460ff16155b612dbe5760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff16158015610fe7576000805460ff1961ff00199091166101001716600117905580156108e9576000805461ff001916905550565b600054610100900460ff1680612e155750612e15612d75565b80612e23575060005460ff16155b612e3f5760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff16158015612e6a576000805460ff1961ff0019909116610100171660011790555b6097805460ff1916905580156108e9576000805461ff001916905550565b600054610100900460ff1680612ea15750612ea1612d75565b80612eaf575060005460ff16155b612ecb5760405162461bcd60e51b81526004016106a890615567565b600054610100900460ff16158015612ef6576000805460ff1961ff0019909116610100171660011790555b60c9805460ff1916600117905580156108e9576000805461ff001916905550565b60009182526065602052604090912060020155565b3390565b6000828152606560205260409020612f489082614039565b1561081a57612f55612f2c565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611345826138aa565b60006001600160a01b03821663b93f9b0a60065b6040518263ffffffff1660e01b8152600401612fd491906151c6565b60206040518083038186803b158015612fec57600080fd5b505afa158015613000573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190614c7e565b611fc28383836040518060200160405280600081525061404e565b61305b8484848460405180602001604052806000815250614118565b50505050565b600082815260656020526040902061307990826141ed565b1561081a57613086612f2c565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff166130ec5760405162461bcd60e51b81526004016106a890615322565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61311f612f2c565b60405161312c9190615016565b60405180910390a1565b60006101cb600061315460016101cc54612c9390919063ffffffff16565b81526020019081526020016000209050600081600501600401541161318b5760405162461bcd60e51b81526004016106a8906155d2565b6004810154156131ad5760405162461bcd60e51b81526004016106a8906153a6565b600181015460068201546000916131c49190613a16565b6101c4546040805163a4d66daf60e01b815290519293506001600160a01b03909116916327ea6f2b9161326d9161321e918691869163a4d66daf916004808301926020929190829003018186803b15801561224957600080fd5b6101c460009054906101000a90046001600160a01b03166001600160a01b0316631a861d266040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae657600080fd5b6040518263ffffffff1660e01b815260040161328991906151c6565b600060405180830381600087803b1580156132a357600080fd5b505af11580156132b7573d6000803e3d6000fd5b50506101c354604051636e10dbd760e01b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9350636e10dbd792506133059160058701916001600160a01b0390911690600401615805565b60006040518083038186803b15801561331d57600080fd5b505af4158015613331573d6000803e3d6000fd5b50506101c354604051636e10dbd760e01b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9350636e10dbd7925061337c9186916001600160a01b0390911690600401615805565b60006040518083038186803b15801561339457600080fd5b505af41580156133a8573d6000803e3d6000fd5b505050505050565b600061134582614202565b600080821180156133da57506101cc546133d690600261421a565b8211155b6133f65760405162461bcd60e51b81526004016106a8906153de565b604051630257abad60e01b815260009073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__90630257abad906134309086906004016151c6565b60206040518083038186803b15801561344857600080fd5b505af415801561345c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134809190614f26565b60008181526101cb602052604080822090516337b1b00560e21b81529293509173__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9063dec6c014906134ca9088906004016151c6565b60206040518083038186803b1580156134e257600080fd5b505af41580156134f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351a9190614df1565b6135275781600501613529565b815b95945050505050565b6101c354600090819061354d906001600160a01b03166133b0565b6001600160a01b031663430c208133866040518363ffffffff1660e01b815260040161357a92919061506b565b60206040518083038186803b15801561359257600080fd5b505afa1580156135a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ca9190614df1565b80156135da57506135da33612bfb565b6135f65760405162461bcd60e51b81526004016106a89061560a565b600083116136165760405162461bcd60e51b81526004016106a8906153c2565b60008073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__63f7fc24b289896040518363ffffffff1660e01b81526004016136529291906157bd565b604080518083038186803b15801561366957600080fd5b505af415801561367d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a19190614f3e565b909250905060006136b28383613a16565b9050808611156136d45760405162461bcd60e51b81526004016106a89061552f565b886004015442116136f75760405162461bcd60e51b81526004016106a8906153a6565b6000808a60040154600014156137985760018b01546137169089612c93565b60018c0155506101c3548790613734906001600160a01b03166133b0565b6001600160a01b03166366cbb0378a836040518363ffffffff1660e01b81526004016137619291906151cf565b600060405180830381600087803b15801561377b57600080fd5b505af115801561378f573d6000803e3d6000fd5b5050505061382d565b6137a28589613a40565b91506137b284612b1e8a85612c93565b6101c3549091506137cb906001600160a01b03166133b0565b6001600160a01b031663b81922058a83856040518463ffffffff1660e01b81526004016137fa93929190615837565b600060405180830381600087803b15801561381457600080fd5b505af1158015613828573d6000803e3d6000fd5b505050505b6138513361383b8385613a16565b6101c354610a55906001600160a01b0316612f99565b888a60200151336001600160a01b03167f92f2787b755dae547f1701582fe74c7abf277ec14db316dd01abc69cacf7a25985856040516138929291906151cf565b60405180910390a4909a909950975050505050505050565b60006001600160a01b03821663b93f9b0a6005612fb8565b60006101cc5460001480611efe5750506101cc546000190160009081526101cb6020526040902060040154151590565b60056101cc54106139155760405162461bcd60e51b81526004016106a890615350565b6101cc54604051632788c17160e21b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__91639e2305c491613952916101cb916004016151cf565b60006040518083038186803b15801561396a57600080fd5b505af415801561397e573d6000803e3d6000fd5b50506101cc54613992925090506001613a16565b6101cc556101ca55565b60975460ff16156139bf5760405162461bcd60e51b81526004016106a8906154b4565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861311f612f2c565b60006113428383614241565b6000611342836001600160a01b038416614286565b60008282018381101561134257600080fd5b60006001600160a01b03821663b93f9b0a6014612fb8565b6000818310613a4f5781611342565b5090919050565b613a5e614b7c565b613a666138c2565b613a825760405162461bcd60e51b81526004016106a8906155d2565b6101c454604080516302eebf2d60e61b815290516000926001600160a01b031691634af75d3591839163bbafcb40916004808301926020929190829003018186803b158015613ad057600080fd5b505afa158015613ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b089190614f26565b6040518263ffffffff1660e01b8152600401613b2491906151c6565b60206040518083038186803b158015613b3c57600080fd5b505afa158015613b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b749190614f26565b9050613b7e614b7c565b6101c45460405163c290d69160e01b81526001600160a01b039091169063c290d69190613baf9087906004016151c6565b60a060405180830381600087803b158015613bc957600080fd5b505af1158015613bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c019190614e79565b9050613c94826101c460009054906101000a90046001600160a01b03166001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c5657600080fd5b505afa158015613c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8e9190614f26565b90612c93565b9150613ca0828261429e565b9392505050565b600061134582614704565b60006001600160a01b03821663b93f9b0a6007612fb8565b6101c354613ce0906001600160a01b0316614708565b6001600160a01b03166301b215516040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613d1a57600080fd5b505af1158015613d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d529190614c7e565b6101c480546001600160a01b0319166001600160a01b0392831617908190556101c35460405163297aaadd60e11b8152918316926352f555ba92613da8929091169030908a908a908a908a908a90600401615084565b600060405180830381600087803b158015613dc257600080fd5b505af1158015613dd6573d6000803e3d6000fd5b505050505050505050565b600061134582614713565b60006113458261472b565b613dff614b7c565b613e076138c2565b613e235760405162461bcd60e51b81526004016106a8906155d2565b6101c454604080516302eebf2d60e61b815290516000926001600160a01b031691634af75d3591839163bbafcb40916004808301926020929190829003018186803b158015613e7157600080fd5b505afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea99190614f26565b6040518263ffffffff1660e01b8152600401613ec591906151c6565b60206040518083038186803b158015613edd57600080fd5b505afa158015613ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f159190614f26565b9050613f1f614b7c565b6101c4546040516377a4777360e11b81526001600160a01b039091169063ef48eee690613f5290889088906004016151cf565b60a060405180830381600087803b158015613f6c57600080fd5b505af1158015613f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa49190614e79565b9050613ff9826101c460009054906101000a90046001600160a01b03166001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c5657600080fd5b9150614005828261429e565b949350505050565b600081848411156140315760405162461bcd60e51b81526004016106a8919061521c565b505050900390565b6000611342836001600160a01b038416614743565b6001600160a01b0383166140745760405162461bcd60e51b81526004016106a890615388565b60405163a9059cbb60e01b81526000906001600160a01b0386169063a9059cbb906140a5908790879060040161506b565b602060405180830381600087803b1580156140bf57600080fd5b505af11580156140d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f79190614df1565b905081816133a85760405162461bcd60e51b81526004016106a8919061521c565b6001600160a01b03831661413e5760405162461bcd60e51b81526004016106a890615388565b6040516323b872dd60e01b81526000906001600160a01b038716906323b872dd90614171908890889088906004016150c4565b602060405180830381600087803b15801561418b57600080fd5b505af115801561419f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c39190614df1565b905081816141e45760405162461bcd60e51b81526004016106a8919061521c565b50505050505050565b6000611342836001600160a01b03841661478d565b60006001600160a01b03821663b93f9b0a600c612fb8565b60008261422957506000611345565b8282028284828161423657fe5b041461134257600080fd5b815460009082106142645760405162461bcd60e51b81526004016106a89061526f565b82600001828154811061427357fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60606101cc5467ffffffffffffffff811180156142ba57600080fd5b506040519080825280602002602001820160405280156142e4578160200160208202803683370190505b50905060005b6101cc548110156144a95760008181526101cb6020526040808220600b01546101c95491516333b8e3b960e21b815273__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__9263cee38ee492614344928a9290600401615837565b60206040518083038186803b15801561435c57600080fd5b505af4158015614370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143949190614f26565b905073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__63cee38ee46143cb86606001518760400151613a1690919063ffffffff16565b60008581526101cb602052604090819020600b01546101c95491516001600160e01b031960e086901b168152614405939290600401615837565b60206040518083038186803b15801561441d57600080fd5b505af4158015614431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144559190614f26565b83838151811061446157fe5b60209081029190910181019190915260008381526101cb90915260409020600a015461448d9082613a16565b60008381526101cb60205260409020600a0155506001016142ea565b50602082015182516000916144be9190613a16565b905060006144dd84606001518560400151613a1690919063ffffffff16565b905060008211806144ee5750600081115b156108e45760006144ff8383614853565b90506000805b6101cc548110156145935761454d86828151811061451f57fe5b60200260200101516101cb6000848152602001908152602001600020600b0154612c9390919063ffffffff16565b60008281526101cb60205260409020600b015585516145899087908390811061457257fe5b602002602001015183613a1690919063ffffffff16565b9150600101614505565b506101c9546145a29082612c93565b6101c9556101c3546145bc906001600160a01b03166149b6565b6001600160a01b03166328fc33c7856040518263ffffffff1660e01b81526004016145e791906151c6565b600060405180830381600087803b15801561460157600080fd5b505af1158015614615573d6000803e3d6000fd5b50506101c45460408051637df1f1b960e01b815290513094506001600160a01b039092169250637df1f1b9916004808301926020929190829003018186803b15801561466057600080fd5b505afa158015614674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146989190614c7e565b6001600160a01b03167fd1055dc2c2a003a83dfacb1c38db776eab5ef89d77a8f05a3512e8cf57f953ce6146dd89602001518a60000151613a1690919063ffffffff16565b60808a01516040516146f392918991899061581c565b60405180910390a350505050505050565b5490565b6000611345826149c1565b60006001600160a01b03821663b93f9b0a6013612fb8565b60006001600160a01b03821663b93f9b0a600e612fb8565b600061474f8383614286565b61478557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611345565b506000611345565b6000818152600183016020526040812054801561484957835460001980830191908101906000908790839081106147c057fe5b90600052602060002001549050808760000184815481106147dd57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061480d57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611345565b6000915050611345565b60008073__$07e8ed413e81d51a5dfb2d8e1b1fa75af5$__633068ee156101cb6101cc5487876148ac6148a46101c360009054906101000a90046001600160a01b03166001600160a01b03166149d9565b606490614a59565b6101c9546101c4546101c6546040516001600160e01b031960e08b901b1681526148e9989796959493926001600160a01b031691906004016151dd565b60206040518083038186803b15801561490157600080fd5b505af4158015614915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149399190614f26565b6101c35490915061496e90614956906001600160a01b0316612fa4565b6101c3548390610a55906001600160a01b0316612f99565b306001600160a01b03167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb826040516149a791906151c6565b60405180910390a29392505050565b600061134582613a28565b60006001600160a01b03821663b93f9b0a6002612fb8565b604051631f8ac6cb60e31b81526000906001600160a01b0383169063fc56365890614a09906003906004016151c6565b60206040518083038186803b158015614a2157600080fd5b505afa158015614a35573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190614f26565b600061134283836040518060200160405280600081525060008183614a915760405162461bcd60e51b81526004016106a8919061521c565b506000838581614a9d57fe5b0495945050505050565b60405180606001604052806003906020820280368337509192915050565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280614b10614b7c565b8152602001614b1d614b7c565b815260200160008152602001600081525090565b828054828255906000526020600020908101928215614b6c579160200282015b82811115614b6c578235825591602001919060010190614b51565b50614b78929150614c04565b5090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405180602001604052806001906020820280368337509192915050565b828054828255906000526020600020908101928215614b6c579160200282015b82811115614b6c578251825591602001919060010190614be9565b5b80821115614b785760008155600101614c05565b60008083601f840112614c2a578182fd5b50813567ffffffffffffffff811115614c41578182fd5b6020830191508360208083028501011115614c5b57600080fd5b9250929050565b600060208284031215614c73578081fd5b813561134281615874565b600060208284031215614c8f578081fd5b815161134281615874565b6000806000806000806000806000806101208b8d031215614cb9578586fd5b8a35614cc481615874565b995060208b0135614cd481615874565b985060408b0135975060608b0135965060808b0135955060a08b0135614cf981615874565b945060c08b0135935060e08b013592506101008b013567ffffffffffffffff811115614d23578283fd5b614d2f8d828e01614c19565b915080935050809150509295989b9194979a5092959850565b60008060208385031215614d5a578182fd5b823567ffffffffffffffff811115614d70578283fd5b614d7c85828601614c19565b90969095509350505050565b60008060008060408587031215614d9d578384fd5b843567ffffffffffffffff80821115614db4578586fd5b614dc088838901614c19565b90965094506020870135915080821115614dd8578384fd5b50614de587828801614c19565b95989497509550505050565b600060208284031215614e02578081fd5b81518015158114611342578182fd5b600060208284031215614e22578081fd5b5035919050565b60008060408385031215614e3b578182fd5b823591506020830135614e4d81615874565b809150509250929050565b60008060408385031215614e6a578182fd5b50508035926020909101359150565b600060a08284031215614e8a578081fd5b614e9460a061584d565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060a08284031215614edb578081fd5b614ee560a061584d565b8251614ef081615874565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215614f37578081fd5b5051919050565b60008060408385031215614f50578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215614f79578384fd5b863595506020870135945060408701359350606087013560ff81168114614f9e578283fd5b9598949750929560808101359460a0909101359350915050565b80518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b8054825260018101546020830152600281015460408301526003810154606083015260040154608090910152565b6001600160a01b0391909116815260200190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039788168152958716602087015293861660408601526060850192909252608084015290921660a082015260c081019190915260e00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208083018290528354918301829052600084815281812090929091906060850190845b818110156151365784548352600194850194928401920161511a565b5090979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561517b5783518352928401929184019160010161515f565b50909695505050505050565b60608101818360005b60038110156151b257815160ff16835260209283019290910190600101615190565b50505092915050565b901515815260200190565b90815260200190565b918252602082015260400190565b978852602088019690965260408701949094526060860192909252608085015260a08401526001600160a01b031660c083015260e08201526101000190565b6000602080835283518082850152825b818110156152485785810183015185820160400152820161522c565b818111156152595783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600890820152672737ba1037b832b760c11b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526002908201526114d360f21b604082015260600190565b602080825260029082015261044560f41b604082015260600190565b6020808252600490820152635a45524f60e01b604082015260600190565b602080825260029082015261151360f21b604082015260600190565b6020808252600290820152615a4160f01b604082015260600190565b6020808252600f908201526e696e76616c6964207472616e63686560881b604082015260600190565b6020808252600b908201526a6861732062616c616e636560a81b604082015260600190565b602080825260029082015261047560f41b604082015260600190565b6020808252600290820152614c4960f01b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526002908201526124a360f11b604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b602080825260029082015261494160f01b604082015260600190565b60208082526002908201526104c560f41b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600390820152622622a760e91b604082015260600190565b602080825260029082015261139360f21b604082015260600190565b602080825260029082015261125560f21b604082015260600190565b6020808252600290820152614e4160f01b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b82518152602092830151928101929092526001600160a01b0316604082015260600190565b60a081016113458284614fb8565b60006101808201905061573e828451614fb8565b602083015161575060a0840182614fb8565b5060408301516101408301526060909201516101609091015290565b610240810161577b8286614fb8565b8360a083015261578e60c0830184614fe8565b61579f610160830160058501614fe8565b600a830154610200830152600b830154610220830152949350505050565b91825280516001600160a01b0316602080840191909152810151604080840191909152810151606080840191909152810151608080840191909152015160a082015260c00190565b9182526001600160a01b0316602082015260400190565b93845260208401929092526040830152606082015260800190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561586c57600080fd5b604052919050565b6001600160a01b03811681146108e957600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a956624bfbe09c0e98e645d61eba0de4ce88e8cceabdb00fead208d19a8e1209baf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a90279a2646970667358221220ae8a3d389b37ac75ca536d843d9006105050de775cf1661d53712079c419e21064736f6c634300060c0033",
  "libraries": {
    "TranchingLogic": "0x0b48aF34f4c854F5ae1A3D587da471FeA45bAD52"
  },
  "devdoc": {
    "author": "Warbler Labs",
    "kind": "dev",
    "methods": {
      "availableToWithdraw(uint256)": {
        "params": {
          "tokenId": "position to query max amount withdrawable for"
        },
        "returns": {
          "_0": "interestRedeemable total interest withdrawable on the position",
          "_1": "principalRedeemable total principal redeemable on the position"
        }
      },
      "deposit(uint256,uint256)": {
        "details": "TL: tranche lockedIA: invalid amountNA: not authorized. Must have correct UID or be go listed",
        "params": {
          "amount": "amount of capital to supply",
          "tranche": "id of tranche to supply capital to. Id must correspond to a tranche in the current slice."
        },
        "returns": {
          "_0": "tokenId NFT representing your position in this pool"
        }
      },
      "drawdown(uint256)": {
        "details": "DP: drawdowns pausedIF: insufficient funds",
        "params": {
          "amount": "USDC to drawdown. This amount is transferred to the caller"
        }
      },
      "getAmountsOwed(uint256)": {
        "details": "IT: invalid timestampLI: loan inactive",
        "params": {
          "timestamp": "time to calculate up to"
        },
        "returns": {
          "interestAccrued": "amount of accrued interest (not yet owed) that can be paid at `timestamp`",
          "interestOwed": "amount of obligated interest owed at `timestamp`",
          "principalOwed": "amount of principal owed at `timestamp`"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getTranche(uint256)": {
        "params": {
          "trancheId": "id of tranche. Valid ids are in the range [1, 2*numSlices]"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])": {
        "params": {
          "_borrower": "address of borrower, a non-transferrable role for performing privileged actions like   drawdown",
          "_config": "address of GoldfinchConfig",
          "_fundableAt": "earliest time at which the first slice can be funded",
          "_interestApr": "interest rate for the loan",
          "_juniorFeePercent": "percent (whole number) of senior interest that gets re-allocated to the junior tranche",
          "_lateFeeApr": "late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a   payment becomes late",
          "_limit": "the max USDC amount that can be drawn down across all pool slices"
        }
      },
      "initializeNextSlice(uint256)": {
        "details": "NL: not lockedLP: late paymentGP: beyond principal grace period",
        "params": {
          "_fundableAt": "time at which the new slice (now the current slice) becomes fundable"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay(uint256)": {
        "details": "ZA: zero amount",
        "params": {
          "amount": "USDC amount to pay"
        },
        "returns": {
          "_0": "PaymentAllocation info on how the payment was allocated"
        }
      },
      "pay(uint256,uint256)": {
        "details": "ZA: zero amount",
        "params": {
          "interestPayment": "USDC amount to pay down interest",
          "principalPayment": "USDC amount to pay down principal"
        },
        "returns": {
          "_0": "PaymentAllocation info on how the payment was allocated"
        }
      },
      "poolSlices(uint256)": {
        "params": {
          "index": "of slice. Valid indices are on the interval [0, numSlices - 1]"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "amount to withdraw (must be <= interest+principal available to withdraw)",
          "tokenId": "the NFT representing the position"
        },
        "returns": {
          "_0": "interestWithdrawn interest withdrawn",
          "_1": "principalWithdrawn principal withdrawn"
        }
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "details": "LEN: argument length mismatch",
        "params": {
          "amounts": "amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]",
          "tokenIds": "NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array"
        }
      }
    },
    "stateVariables": {
      "numSlices": {
        "return": "numSlices total current slice count"
      }
    },
    "title": "The main contract to faciliate lending. Backers and the Senior Pool fund the loan   through this contract. The borrower draws down on and pays back a loan through this contract.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PaymentApplied(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted on payment"
      },
      "WithdrawalMade(address,uint256,uint256,uint256,uint256)": {
        "notice": "While owner is the label of the first argument, it is actually the sender of the transaction."
      }
    },
    "kind": "user",
    "methods": {
      "assess()": {
        "notice": "Intentionable no-op. Included to be compatible with the v1 pool interface"
      },
      "availableToWithdraw(uint256)": {
        "notice": "Query the max amount available to withdraw for tokenId's position"
      },
      "createdAt()": {
        "notice": "Time when the pool was initialized. Zero if uninitialized"
      },
      "creditLine()": {
        "notice": "Pool's credit line, responsible for managing the loan's accounting variables"
      },
      "deposit(uint256,uint256)": {
        "notice": "Supply capital to this pool. Caller can't deposit to the junior tranche if the junior pool is locked.   Caller can't deposit to a senior tranche if the pool is locked. Caller can't deposit if they are missing the   required UID NFT."
      },
      "drawdown(uint256)": {
        "notice": "Drawdown the loan. The credit line's balance should increase by the amount drawn down.   Junior capital must be locked before this function can be called. If senior capital isn't locked   then this function will lock it for you (convenience to avoid calling lockPool() separately).   This function should revert if the amount requested exceeds the the current slice's currentLimit   This function should revert if the caller is not the borrower."
      },
      "emergencyShutdown()": {
        "notice": "Pauses the pool and sweeps any remaining funds to the treasury reserve."
      },
      "getAmountsOwed(uint256)": {
        "notice": "Compute interest and principal owed on the current balance at a future timestamp"
      },
      "getTranche(uint256)": {
        "notice": "TrancheInfo for tranche with id `trancheId`. The senior tranche of slice i has id 2*(i-1)+1. The   junior tranche of slice i has id 2*i. Slice indices start at 1."
      },
      "getVersion()": {
        "notice": "Returns the version triplet `[major, minor, patch]`"
      },
      "initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])": {
        "notice": "Initialize the pool. Can only be called once, and should be called in the same transaction as   contract creation to avoid initialization front-running"
      },
      "initializeNextSlice(uint256)": {
        "notice": "Initialize the next slice for the pool. Enables backers and the senior pool to provide additional   capital to the borrower."
      },
      "lockJuniorCapital()": {
        "notice": "Lock the junior capital in the junior tranche of the current slice. The capital is locked for   `DrawdownPeriodInSeconds` seconds and gives the senior pool time to decide how much to invest (ensure   leverage ratio cannot change for the period). During this period the borrower has the option to lock   the senior capital by calling `lockPool()`. Backers may withdraw their junior capital if the the senior   tranche has not been locked and the drawdown period has ended. Only the borrower can call this function."
      },
      "lockPool()": {
        "notice": "Lock the senior capital in the senior tranche of the current slice and reset the lock period of   the junior capital to match the senior capital lock period. During this period the borrower has the   option to draw down the pool. Beyond the drawdown period any unused capital is available to withdraw by   all depositors."
      },
      "numSlices()": {
        "notice": "Get the current number of slices for this pool"
      },
      "pauseDrawdowns()": {
        "notice": "Pauses all drawdowns (but not deposits/withdraws)"
      },
      "pay(uint256)": {
        "notice": "Pay down interest + principal. Excess payments are refunded to the caller"
      },
      "pay(uint256,uint256)": {
        "notice": "Pay down the credit line, separating the principal and interest payments. You must pay back all interest   before paying back principal. Excess payments are refunded to the caller"
      },
      "poolSlices(uint256)": {
        "notice": "Get a slice by index"
      },
      "setFundableAt(uint256)": {
        "notice": "Update `fundableAt` to a new timestamp. Only the borrower can call this."
      },
      "totalJuniorDeposits()": {
        "notice": "Query the total capital supplied to the pool's junior tranches"
      },
      "unpauseDrawdowns()": {
        "notice": "Unpause drawdowns"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw an already deposited amount if the funds are available. Caller must be the owner or   approved by the owner on tokenId. Amount withdrawn is sent to the caller."
      },
      "withdrawMax(uint256)": {
        "notice": "Similar to withdraw but withdraw the max interest and principal available for `tokenId`"
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "notice": "Withdraw from multiple tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 53,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 43,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)159_storage)"
      },
      {
        "astId": 408,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3137,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 3226,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3235,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 3276,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15669,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15673,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15677,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15681,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24003,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "config",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(GoldfinchConfig)19583"
      },
      {
        "astId": 24037,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "creditLine",
        "offset": 0,
        "slot": "452",
        "type": "t_contract(ICreditLine)12030"
      },
      {
        "astId": 24040,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "createdAt",
        "offset": 0,
        "slot": "453",
        "type": "t_uint256"
      },
      {
        "astId": 24042,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "juniorFeePercent",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 24044,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "drawdownsPaused",
        "offset": 0,
        "slot": "455",
        "type": "t_bool"
      },
      {
        "astId": 24047,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "allowedUIDTypes",
        "offset": 0,
        "slot": "456",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 24049,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "totalDeployed",
        "offset": 0,
        "slot": "457",
        "type": "t_uint256"
      },
      {
        "astId": 24051,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "fundableAt",
        "offset": 0,
        "slot": "458",
        "type": "t_uint256"
      },
      {
        "astId": 24055,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_poolSlices",
        "offset": 0,
        "slot": "459",
        "type": "t_mapping(t_uint256,t_struct(PoolSlice)13927_storage)"
      },
      {
        "astId": 24059,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "numSlices",
        "offset": 0,
        "slot": "460",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GoldfinchConfig)19583": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_contract(ICreditLine)12030": {
        "encoding": "inplace",
        "label": "contract ICreditLine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)159_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)159_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PoolSlice)13927_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITranchedPool.PoolSlice)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolSlice)13927_storage"
      },
      "t_struct(AddressSet)2912_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2911,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2732_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolSlice)13927_storage": {
        "encoding": "inplace",
        "label": "struct ITranchedPool.PoolSlice",
        "members": [
          {
            "astId": 13920,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "seniorTranche",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(TrancheInfo)13918_storage"
          },
          {
            "astId": 13922,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "juniorTranche",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(TrancheInfo)13918_storage"
          },
          {
            "astId": 13924,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "totalInterestAccrued",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 13926,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "principalDeployed",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(RoleData)159_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 156,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2912_storage"
          },
          {
            "astId": 158,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2732_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2727,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2731,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TrancheInfo)13918_storage": {
        "encoding": "inplace",
        "label": "struct ITranchedPool.TrancheInfo",
        "members": [
          {
            "astId": 13909,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13911,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "principalDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13913,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "principalSharePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13915,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "interestSharePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13917,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
