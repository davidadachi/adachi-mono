{
  "address": "0x3c705dB336C81c7FEFC5746e283aB2c0781A4B7b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "originalTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "callRequestedTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "remainingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "callAmount",
          "type": "uint256"
        }
      ],
      "name": "CallRequestSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "loan",
          "type": "address"
        }
      ],
      "name": "DepositsLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DrawdownMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "EmergencyShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        }
      ],
      "name": "PaymentApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveFundsCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_reserveFundsFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedUIDTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "availableToCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "availableToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IGoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditLine",
      "outputs": [
        {
          "internalType": "contract ICreditLine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawdownsPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundableAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedUIDTypes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getAmountsOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnedInterestOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "returnedInterestAccrued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "returnedPrincipalOwed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callRequestPeriodIndex",
          "type": "uint256"
        }
      ],
      "name": "getCallRequestPeriod",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalReserved",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICallableLoan.CallRequestPeriod",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUncalledCapitalInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalReserved",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICallableLoan.UncalledCapitalInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint8[3]",
          "name": "version",
          "type": "uint8[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "hasAllowedUID",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "contract ISchedule",
          "name": "_schedule",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numLockupPeriods",
          "type": "uint256"
        },
        {
          "internalType": "contract ISchedule",
          "name": "_schedule",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundableAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_allowedUIDTypes",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestAccruedAsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "interestAccruedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestBearingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "interestOwedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFullPaymentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lateFeeApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextDueTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "nextDueTimeAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "nextInterestDueTimeAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPrincipalDueTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "owedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "additionalBalancePayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRemaining",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILoan.PaymentAllocation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principalPayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestPayment",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "owedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "additionalBalancePayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRemaining",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILoan.PaymentAllocation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "principalOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "principalOwedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schedule",
      "outputs": [
        {
          "internalType": "contract ISchedule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "setAllowedUIDTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFundableAt",
          "type": "uint256"
        }
      ],
      "name": "setFundableAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenId",
          "type": "uint256"
        }
      ],
      "name": "submitCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "callRequestedTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "totalInterestAccruedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "totalInterestOwedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipalOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "totalPrincipalOwedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipalPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uncalledCapitalTrancheIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withinPrincipalGracePeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e1b6a5f745fdfc131c0bcd5ff3a314836ceafca1439272a011ca54cef952448",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x3c705dB336C81c7FEFC5746e283aB2c0781A4B7b",
    "transactionIndex": 0,
    "gasUsed": "5624488",
    "logsBloom": "0x
    "blockHash": "0xa40acd45c0480356cd427ca98e0c46157b3dc64fd4f1240a8da5359e65c0aabf",
    "transactionHash": "0x7e1b6a5f745fdfc131c0bcd5ff3a314836ceafca1439272a011ca54cef952448",
    "logs": [],
    "blockNumber": 127,
    "cumulativeGasUsed": "5624488",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c261153317399284a227d29fe7527816",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"callRequestedTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"remainingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callAmount\",\"type\":\"uint256\"}],\"name\":\"CallRequestSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"DepositsLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawdownMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"PaymentApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveFundsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reserveFundsFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedUIDTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"availableToCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IGoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditLine\",\"outputs\":[{\"internalType\":\"contract ICreditLine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawdownsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundableAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedUIDTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getAmountsOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnedInterestOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedInterestAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedPrincipalOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callRequestPeriodIndex\",\"type\":\"uint256\"}],\"name\":\"getCallRequestPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalReserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct ICallableLoan.CallRequestPeriod\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUncalledCapitalInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalReserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct ICallableLoan.UncalledCapitalInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"version\",\"type\":\"uint8[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"hasAllowedUID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"contract ISchedule\",\"name\":\"_schedule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numLockupPeriods\",\"type\":\"uint256\"},{\"internalType\":\"contract ISchedule\",\"name\":\"_schedule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundableAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowedUIDTypes\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestAccruedAsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"interestAccruedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestBearingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"interestOwedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFullPaymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lateFeeApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"nextDueTimeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"nextInterestDueTimeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPrincipalDueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"owedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalBalancePayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRemaining\",\"type\":\"uint256\"}],\"internalType\":\"struct ILoan.PaymentAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPayment\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"owedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalBalancePayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRemaining\",\"type\":\"uint256\"}],\"internalType\":\"struct ILoan.PaymentAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"principalOwedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"contract ISchedule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"setAllowedUIDTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFundableAt\",\"type\":\"uint256\"}],\"name\":\"setFundableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenId\",\"type\":\"uint256\"}],\"name\":\"submitCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"callRequestedTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"totalInterestAccruedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"totalInterestOwedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"totalPrincipalOwedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipalPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uncalledCapitalTrancheIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withinPrincipalGracePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Warbler Labs\",\"kind\":\"dev\",\"methods\":{\"availableToCall(uint256)\":{\"details\":\"OU: Only the uncalled tranche can call\"},\"availableToWithdraw(uint256)\":{\"params\":{\"tokenId\":\"position to query max amount withdrawable for\"},\"returns\":{\"_0\":\"total interest withdrawable on the position\",\"_1\":\"total principal redeemable on the position\"}},\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"amount of capital to supply\",\"tranche\":\"*UNSUPPORTED* - Should always be uncalled capital tranche index.\"},\"returns\":{\"_0\":\"tokenId NFT representing your position in this pool\"}},\"depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"amount of capital to supply\",\"deadline\":\"deadline of permit operation\",\"r\":\"r portion of signature\",\"s\":\"s portion of signature\",\"tranche\":\"*UNSUPPORTED* -\",\"v\":\"v portion of signature\"},\"returns\":{\"tokenId\":\"NFT representing your position in this pool\"}},\"drawdown(uint256)\":{\"details\":\"DP: drawdowns pausedZA: Zero amount - must be greater than 0\",\"params\":{\"amount\":\"USDC to drawdown. This amount is transferred to the caller\"}},\"getAmountsOwed(uint256)\":{\"details\":\"IT: invalid timestampLI: loan inactive\",\"params\":{\"timestamp\":\"time to calculate up to\"},\"returns\":{\"returnedInterestAccrued\":\"amount of accrued interest (not yet owed) that can be paid at `timestamp`\",\"returnedInterestOwed\":\"amount of obligated interest owed at `timestamp`\",\"returnedPrincipalOwed\":\"amount of principal owed at `timestamp`\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])\":{\"params\":{\"_borrower\":\"address of borrower, a non-transferrable role for performing privileged actions like   drawdown\",\"_config\":\"address of GoldfinchConfig\",\"_fundableAt\":\"earliest time at which the first slice can be funded\",\"_interestApr\":\"interest rate for the loan\",\"_lateFeeApr\":\"late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a   payment becomes late\",\"_limit\":\"the number of periods at the tail end of a principal period during which call requests rollover   to the next principal period.\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay(uint256)\":{\"details\":\"ZA: zero amount\",\"params\":{\"amount\":\"USDC amount to pay\"},\"returns\":{\"_0\":\"PaymentAllocation info on how the payment was allocated\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"submitCall(uint256,uint256)\":{\"details\":\"IA: Invalid amount - Call amount must be non-zero amount < than principal remaining.IT: invalid tranche - must be uncalled capital trancheNA: not authorized. Must have correct UID or be go listed\",\"params\":{\"callAmount\":\"Amount of capital to call back\",\"poolTokenId\":\"Pool token id to be called back.\"},\"returns\":{\"callRequestedTokenId\":\" Token id of the call requested token.\",\"remainingTokenId\":\"Token id of the remaining token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"amount to withdraw (must be <= interest+principal available to withdraw)\",\"tokenId\":\"the NFT representing the position\"},\"returns\":{\"_0\":\"interest withdrawn\",\"_1\":\"principal withdrawn\"}},\"withdrawMultiple(uint256[],uint256[])\":{\"details\":\"LEN: argument length mismatch\",\"params\":{\"amounts\":\"amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]\",\"tokenIds\":\"NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array\"}}},\"title\":\"CallableLoan\",\"version\":1},\"userdoc\":{\"events\":{\"PaymentApplied(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted on payment\"}},\"kind\":\"user\",\"methods\":{\"availableToWithdraw(uint256)\":{\"notice\":\"Query the max amount available to withdraw for tokenId's position\"},\"createdAt()\":{\"notice\":\"Time when the pool was initialized. Zero if uninitialized\"},\"creditLine()\":{\"notice\":\"Pool's credit line, responsible for managing the loan's accounting variables\"},\"deposit(uint256,uint256)\":{\"notice\":\"Supply capital to the loan.\"},\"depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Supply capital to the loan.\"},\"drawdown(uint256)\":{\"notice\":\"Drawdown the loan. The credit line's balance should increase by the amount drawn down.   Junior capital must be locked before this function can be called. If senior capital isn't locked   then this function will lock it for you (convenience to avoid calling lockPool() separately).   This function should revert if the amount requested exceeds the the current slice's currentLimit   This function should revert if the caller is not the borrower.\"},\"getAmountsOwed(uint256)\":{\"notice\":\"Compute interest and principal owed on the current balance at a future timestamp\"},\"getVersion()\":{\"notice\":\"Returns the version triplet `[major, minor, patch]`\"},\"initialize(address,address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Unsupported - only included for compatibility with ICreditLine.\"},\"initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])\":{\"notice\":\"Initialize the pool. Can only be called once, and should be called in the same transaction as   contract creation to avoid initialization front-running\"},\"interestAccrued()\":{\"notice\":\"Interest accrued in the current payment period up to now. Converted to   owed interest once we cross into the next payment period. Is 0 if the   current time is after loan maturity (all interest accrued immediately becomes   interest owed).\"},\"interestAccruedAsOf()\":{\"notice\":\"We keep this to conform to the ICreditLine interface, but it's redundant information   now that we have `checkpointedAsOf`\"},\"interestAccruedAt(uint256)\":{\"notice\":\"Interest accrued in the current payment period for `timestamp`. Coverted to   owed interest once we cross into the payment period after `timestamp`. Is 0   if `timestamp` is after loan maturity (all interest accrued immediately becomes   interest owed).\"},\"interestOwedAt(uint256)\":{\"notice\":\"Interest that would be owed at `timestamp`\"},\"maxLimit()\":{\"notice\":\"Unsupported in callable loans.\"},\"pauseDrawdowns()\":{\"notice\":\"Pauses all drawdowns (but not deposits/withdraws)\"},\"pay(uint256)\":{\"notice\":\"Pay down interest + principal. Excess payments are refunded to the caller\"},\"pay(uint256,uint256)\":{\"notice\":\"Unsupported in callable loans.\"},\"principalOwedAt(uint256)\":{\"notice\":\"Principal owed up to `timestamp`\"},\"setAllowedUIDTypes(uint256[])\":{\"notice\":\"Set accepted UID types for the loan. Requires that users have not already begun to deposit.\"},\"setFundableAt(uint256)\":{\"notice\":\"Update `fundableAt` to a new timestamp. Only the borrower can call this.\"},\"setLimit(uint256)\":{\"notice\":\"Unsupported ICreditLine method kept for ICreditLine conformance\"},\"setMaxLimit(uint256)\":{\"notice\":\"Unsupported in callable loans.\"},\"submitCall(uint256,uint256)\":{\"notice\":\"Supply capital to the loan.\"},\"termStartTime()\":{\"notice\":\"Time of first drawdown\"},\"totalInterestAccrued()\":{\"notice\":\"Cumulative interest accrued up to now\"},\"totalInterestAccruedAt(uint256)\":{\"notice\":\"Cumulative interest accrued up to `timestamp`\"},\"totalInterestOwed()\":{\"notice\":\"Cumulative interest owed up to now\"},\"totalInterestOwedAt(uint256)\":{\"notice\":\"Cumulative interest owed up to `timestamp`\"},\"totalInterestPaid()\":{\"notice\":\"Cumulative interest paid back up to now\"},\"totalPrincipalOwed()\":{\"notice\":\"Cumulative principal owed at current timestamp\"},\"totalPrincipalOwedAt(uint256)\":{\"notice\":\"Cumulative principal owed at timestamp\"},\"totalPrincipalPaid()\":{\"notice\":\"Returns the total amount of principal thats been paid\"},\"unpauseDrawdowns()\":{\"notice\":\"Unpause drawdowns\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw an already deposited amount if the funds are available. Caller must be the owner or   approved by the owner on tokenId. Amount withdrawn is sent to the caller.\"},\"withdrawMax(uint256)\":{\"notice\":\"Similar to withdraw but withdraw the max interest and principal available for `tokenId`\"},\"withdrawMultiple(uint256[],uint256[])\":{\"notice\":\"Withdraw from multiple tokens\"}},\"notice\":\"A loan that allows the lenders to call back capital from the borrower.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/callable/CallableLoan.sol\":\"CallableLoan\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd10ce93bb60b3d8ad10fffca3d35594eba4a58e6c76a7ad96d184c326f88d9ac\",\"license\":\"MIT\"},\"contracts/interfaces/ICallableLoan.sol\":{\"content\":\"pragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILoan} from \\\"./ILoan.sol\\\";\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\n\\ninterface ICallableLoan is ILoan {\\n  /// @param principalDeposited The amount of principal deposited towards this call request period.\\n  /// @param principalPaid The amount of principal which has already been paid back towards this call request period.\\n  ///                      There are 3 ways principal paid can enter a CallRequestPeriod.\\n  ///                      1. Converted from principalReserved after a call request period becomes due.\\n  ///                      2. Moved from uncalled tranche as the result of a call request.\\n  ///                      3. Paid directly when a CallRequestPeriod is past due and has a remaining balance.\\n  /// @param principalReserved The amount of principal reserved for this call request period.\\n  ///                          Payments to a not-yet-due CallRequestPeriod are applied to principalReserved.\\n  /// @param interestPaid The amount of interest paid towards this call request period.\\n  struct CallRequestPeriod {\\n    uint256 principalDeposited;\\n    uint256 principalPaid;\\n    uint256 principalReserved;\\n    uint256 interestPaid;\\n  }\\n\\n  /// @param principalDeposited The amount of uncalled, deposited principal.\\n  /// @param principalPaid The amount of principal which has already been paid back.\\n  ///                      There are two ways uncalled principal can be paid.\\n  ///                      1. Remainder after drawdowns.\\n  ///                      2. Conversion from principalReserved after a call request period becomes due.\\n  ///                         All call requested principal outstanding must already be paid\\n  ///                         (or have principal reserved) before uncalled principal can be paid.\\n  ///                      3. Paid directly after term end time.\\n  /// @param principalReserved The amount of principal reserved for uncalled tranche.\\n  ///                          principalReserved is greedily moved to call request periods (as much as can fill)\\n  ///                          when a call request is submitted.\\n  /// @param interestPaid The amount of interest paid towards uncalled capital.\\n  struct UncalledCapitalInfo {\\n    uint256 principalDeposited;\\n    uint256 principalPaid;\\n    uint256 principalReserved;\\n    uint256 interestPaid;\\n  }\\n\\n  /// @notice Initialize the pool. Can only be called once, and should be called in the same transaction as\\n  ///   contract creation to avoid initialization front-running\\n  /// @param _config address of GoldfinchConfig\\n  /// @param _borrower address of borrower, a non-transferrable role for performing privileged actions like\\n  ///   drawdown\\n  /// @param _limit the max USDC amount that can be drawn down across all pool slices\\n  /// @param _limit the number of periods at the tail end of a principal period during which call requests rollover\\n  ///   to the next principal period.\\n  /// @param _interestApr interest rate for the loan\\n  /// @param _lateFeeApr late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a\\n  ///   payment becomes late\\n  /// @param _fundableAt earliest time at which the first slice can be funded\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external;\\n\\n  /// @notice Submits a call request for the specified pool token and amount\\n  ///         Mints a new, called pool token of the called amount.\\n  ///         Splits off any uncalled amount as a new uncalled pool token.\\n  /// @param amountToCall The amount of the pool token that should be called.\\n  /// @param poolTokenId The id of the pool token that should be called.\\n  /// @return callRequestedTokenId  Token id of the call requested token.\\n  /// @return remainingTokenId Token id of the remaining token.\\n  function submitCall(\\n    uint256 amountToCall,\\n    uint256 poolTokenId\\n  ) external returns (uint256, uint256);\\n\\n  function schedule() external view returns (ISchedule);\\n\\n  function nextDueTimeAt(uint256 timestamp) external view returns (uint256);\\n\\n  function getUncalledCapitalInfo() external view returns (UncalledCapitalInfo memory);\\n\\n  function getCallRequestPeriod(\\n    uint callRequestPeriodIndex\\n  ) external view returns (CallRequestPeriod memory);\\n\\n  event CallRequestSubmitted(\\n    uint256 indexed originalTokenId,\\n    uint256 indexed callRequestedTokenId,\\n    uint256 indexed remainingTokenId,\\n    uint256 callAmount\\n  );\\n  event DepositsLocked(address indexed loan);\\n}\\n\",\"keccak256\":\"0x40d7f464c463d37f018a6d6399ac93c89367879b5fb0e35ed5204cdcbbd50cc0\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILoan} from \\\"./ILoan.sol\\\";\\n\\nimport {ICreditLine} from \\\"./ICreditLine.sol\\\";\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\n\\ninterface ICreditLine {\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n\\n  function borrower() external view returns (address);\\n\\n  function currentLimit() external view returns (uint256);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  /// @notice Cumulative interest accrued up to now\\n  function totalInterestAccrued() external view returns (uint256);\\n\\n  /// @notice Cumulative interest accrued up to `timestamp`\\n  function totalInterestAccruedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Cumulative interest paid back up to now\\n  function totalInterestPaid() external view returns (uint256);\\n\\n  /// @notice Cumulative interest owed up to now\\n  function totalInterestOwed() external view returns (uint256);\\n\\n  /// @notice Cumulative interest owed up to `timestamp`\\n  function totalInterestOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Interest that would be owed at `timestamp`\\n  function interestOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Interest accrued in the current payment period up to now. Converted to\\n  ///   owed interest once we cross into the next payment period. Is 0 if the\\n  ///   current time is after loan maturity (all interest accrued immediately becomes\\n  ///   interest owed).\\n  function interestAccrued() external view returns (uint256);\\n\\n  /// @notice Interest accrued in the current payment period for `timestamp`. Coverted to\\n  ///   owed interest once we cross into the payment period after `timestamp`. Is 0\\n  ///   if `timestamp` is after loan maturity (all interest accrued immediately becomes\\n  ///   interest owed).\\n  function interestAccruedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Principal owed up to `timestamp`\\n  function principalOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Returns the total amount of principal thats been paid\\n  function totalPrincipalPaid() external view returns (uint256);\\n\\n  /// @notice Cumulative principal owed at timestamp\\n  function totalPrincipalOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Cumulative principal owed at current timestamp\\n  function totalPrincipalOwed() external view returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external;\\n\\n  function setMaxLimit(uint256 newAmount) external;\\n\\n  /// @notice Time of first drawdown\\n  function termStartTime() external view returns (uint256);\\n\\n  /// @notice Initialize a brand new credit line\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr\\n  ) external;\\n\\n  /// @notice Process a bulk payment, allocating the payment amount based on the payment waterfall\\n  function pay(uint paymentAmount) external returns (ILoan.PaymentAllocation memory);\\n\\n  /**\\n   * Process a payment according to the waterfall described in `Accountant.allocatePayment`\\n   * @param principalPayment principal payment amount\\n   * @param interestPayment interest payment amount\\n   * @return payment allocation\\n   */\\n  function pay(\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) external returns (ILoan.PaymentAllocation memory);\\n\\n  /// @notice Drawdown on the line\\n  /// @param amount amount to drawdown. Cannot exceed the line's limit\\n  function drawdown(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x469b27d7124f9c99d913f7b7eb3bd0ec9143bc422c015a24fdd5233dae886c98\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurveLP {\\n  function coins(uint256) external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\\n\\n  function lp_price() external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] calldata amounts,\\n    uint256 min_mint_amount,\\n    bool use_eth,\\n    address receiver\\n  ) external returns (uint256);\\n\\n  function remove_liquidity(\\n    uint256 _amount,\\n    uint256[2] calldata min_amounts\\n  ) external returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n\\n  function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external returns (uint256);\\n\\n  function balances(uint256 arg0) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf7d904a550adc06b61454e9e68f356fec1a86078e2aec5a82e7878ec22d9774e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20UpgradeableWithDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20UpgradeableWithDec is IERC20Upgradeable {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x222c460101a057d37ca6c654a278e22b7b1bf6b3ce12887742a9dbcbb396145d\",\"license\":\"MIT\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IGo {\\n  uint256 public constant ID_TYPE_0 = 0;\\n  uint256 public constant ID_TYPE_1 = 1;\\n  uint256 public constant ID_TYPE_2 = 2;\\n  uint256 public constant ID_TYPE_3 = 3;\\n  uint256 public constant ID_TYPE_4 = 4;\\n  uint256 public constant ID_TYPE_5 = 5;\\n  uint256 public constant ID_TYPE_6 = 6;\\n  uint256 public constant ID_TYPE_7 = 7;\\n  uint256 public constant ID_TYPE_8 = 8;\\n  uint256 public constant ID_TYPE_9 = 9;\\n  uint256 public constant ID_TYPE_10 = 10;\\n\\n  /// @notice Returns the address of the UniqueIdentity contract.\\n  function uniqueIdentity() external virtual returns (address);\\n\\n  function go(address account) public view virtual returns (bool);\\n\\n  function goOnlyIdTypes(\\n    address account,\\n    uint256[] calldata onlyIdTypes\\n  ) public view virtual returns (bool);\\n\\n  /**\\n   * @notice Returns whether the provided account is go-listed for use of the SeniorPool on the Goldfinch protocol.\\n   * @param account The account whose go status to obtain\\n   * @return true if `account` is go listed\\n   */\\n  function goSeniorPool(address account) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x3d4e566ab6aa670da6526d3eaf090c7c4c4e1fae9e941c3dcba606f417051339\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchConfig {\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) external;\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) external;\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external;\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external;\\n\\n  function getNumber(uint256 index) external view returns (uint256);\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) external view returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external;\\n\\n  function setNumber(uint256 index, uint256 newNumber) external;\\n}\\n\",\"keccak256\":\"0xdedd4f8d4fe5f720a01aadf0d12535afcbc3cc1bceb1aab1761764e5999343b4\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ICallableLoan} from \\\"./ICallableLoan.sol\\\";\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\n\\ninterface IGoldfinchFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createCallableLoan(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (ICallableLoan);\\n}\\n\",\"keccak256\":\"0x11dc422e3a7ac354b3dfafbb3a24ab89714edf5927072ff0c98084baea79f3e2\",\"license\":\"MIT\"},\"contracts/interfaces/ILoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {ICreditLine} from \\\"./ICreditLine.sol\\\";\\n\\ninterface ILoan {\\n  /// @notice Pool's credit line, responsible for managing the loan's accounting variables\\n  function creditLine() external view returns (ICreditLine);\\n\\n  /// @notice Time when the pool was initialized. Zero if uninitialized\\n  function createdAt() external view returns (uint256);\\n\\n  /// @notice Pay down interest + principal. Excess payments are refunded to the caller\\n  /// @param amount USDC amount to pay\\n  /// @return PaymentAllocation info on how the payment was allocated\\n  /// @dev {this} must be approved by msg.sender to transfer {amount} of USDC\\n  function pay(uint256 amount) external returns (PaymentAllocation memory);\\n\\n  /// @notice Compute interest and principal owed on the current balance at a future timestamp\\n  /// @param timestamp time to calculate up to\\n  /// @return interestOwed amount of obligated interest owed at `timestamp`\\n  /// @return interestAccrued amount of accrued interest (not yet owed) that can be paid at `timestamp`\\n  /// @return principalOwed amount of principal owed at `timestamp`\\n  function getAmountsOwed(\\n    uint256 timestamp\\n  ) external view returns (uint256 interestOwed, uint256 interestAccrued, uint256 principalOwed);\\n\\n  function getAllowedUIDTypes() external view returns (uint256[] memory);\\n\\n  /// @notice Drawdown the loan. The credit line's balance should increase by the amount drawn down.\\n  ///   Junior capital must be locked before this function can be called. If senior capital isn't locked\\n  ///   then this function will lock it for you (convenience to avoid calling lockPool() separately).\\n  ///   This function should revert if the amount requested exceeds the the current slice's currentLimit\\n  ///   This function should revert if the caller is not the borrower.\\n  /// @param amount USDC to drawdown. This amount is transferred to the caller\\n  function drawdown(uint256 amount) external;\\n\\n  /// @notice Update `fundableAt` to a new timestamp. Only the borrower can call this.\\n  function setFundableAt(uint256 newFundableAt) external;\\n\\n  /// @notice Supply capital to this pool. Caller can't deposit to the junior tranche if the junior pool is locked.\\n  ///   Caller can't deposit to a senior tranche if the pool is locked. Caller can't deposit if they are missing the\\n  ///   required UID NFT.\\n  /// @param tranche id of tranche to supply capital to. Id must correspond to a tranche in the current slice.\\n  /// @param amount amount of capital to supply\\n  /// @return tokenId NFT representing your position in this pool\\n  function deposit(uint256 tranche, uint256 amount) external returns (uint256 tokenId);\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 tokenId);\\n\\n  /// @notice Query the max amount available to withdraw for tokenId's position\\n  /// @param tokenId position to query max amount withdrawable for\\n  /// @return interestRedeemable total interest withdrawable on the position\\n  /// @return principalRedeemable total principal redeemable on the position\\n  function availableToWithdraw(\\n    uint256 tokenId\\n  ) external view returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  /// @notice Withdraw an already deposited amount if the funds are available. Caller must be the owner or\\n  ///   approved by the owner on tokenId. Amount withdrawn is sent to the caller.\\n  /// @param tokenId the NFT representing the position\\n  /// @param amount amount to withdraw (must be <= interest+principal available to withdraw)\\n  /// @return interestWithdrawn interest withdrawn\\n  /// @return principalWithdrawn principal withdrawn\\n  function withdraw(\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  /// @notice Similar to withdraw but withdraw the max interest and principal available for `tokenId`\\n  function withdrawMax(\\n    uint256 tokenId\\n  ) external returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  /// @notice Withdraw from multiple tokens\\n  /// @param tokenIds NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array\\n  /// @param amounts amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n  /// @notice Result of applying a payment to a v2 pool\\n  /// @param owedInterestPayment payment portion of interest owed\\n  /// @param accruedInterestPayment payment portion of accrued (but not yet owed) interest\\n  /// @param principalPayment payment portion on principal owed\\n  /// @param additionalBalancePayment payment portion on any balance that is currently owed\\n  /// @param paymentRemaining payment amount leftover\\n  struct PaymentAllocation {\\n    uint256 owedInterestPayment;\\n    uint256 accruedInterestPayment;\\n    uint256 principalPayment;\\n    uint256 additionalBalancePayment;\\n    uint256 paymentRemaining;\\n  }\\n  /// @notice Event emitted on payment\\n  /// @param payer address that made the payment\\n  /// @param pool pool to which the payment was made\\n  /// @param interest amount of payment allocated to interest (obligated + additional)\\n  /// @param principal amount of payment allocated to principal owed and remaining balance\\n  /// @param remaining any excess payment amount that wasn't allocated to a debt owed\\n  /// @param reserve of payment that went to the protocol reserve\\n  event PaymentApplied(\\n    address indexed payer,\\n    address indexed pool,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 remaining,\\n    uint256 reserve\\n  );\\n  event DepositMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 amount\\n  );\\n  event WithdrawalMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 interestWithdrawn,\\n    uint256 principalWithdrawn\\n  );\\n  event ReserveFundsCollected(address indexed from, uint256 amount);\\n  event DrawdownMade(address indexed borrower, uint256 amount);\\n  event DrawdownsPaused(address indexed pool);\\n  event DrawdownsUnpaused(address indexed pool);\\n  event EmergencyShutdown(address indexed pool);\\n}\\n\",\"keccak256\":\"0x578cecc958a8d155955bc46417faba79d6a99412efa39e11cf499c50dd91af96\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./openzeppelin/IERC721.sol\\\";\\nimport \\\"./IGoldfinchConfig.sol\\\";\\n\\ninterface IPoolTokens is IERC721 {\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 totalMinted;\\n    uint256 totalPrincipalRedeemed;\\n    bool created;\\n  }\\n\\n  /**\\n   * @notice Called by pool to create a debt position in a particular tranche and amount\\n   * @param params Struct containing the tranche and the amount\\n   * @param to The address that should own the position\\n   * @return tokenId The token ID (auto-incrementing integer across all pools)\\n   */\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Redeem principal and interest on a pool token. Called by valid pools as part of their redemption\\n   *  flow\\n   * @param tokenId pool token id\\n   * @param principalRedeemed principal to redeem. This cannot exceed the token's principal amount, and\\n   *  the redemption cannot cause the pool's total principal redeemed to exceed the pool's total minted\\n   *  principal\\n   * @param interestRedeemed interest to redeem.\\n   */\\n  function redeem(uint256 tokenId, uint256 principalRedeemed, uint256 interestRedeemed) external;\\n\\n  /**\\n   * @notice Withdraw a pool token's principal up to the token's principalAmount. Called by valid pools\\n   *  as part of their withdraw flow before the pool is locked (i.e. before the principal is committed)\\n   * @param tokenId pool token id\\n   * @param principalAmount principal to withdraw\\n   */\\n  function withdrawPrincipal(uint256 tokenId, uint256 principalAmount) external;\\n\\n  /**\\n   * @notice Burns a specific ERC721 token and removes deletes the token metadata for PoolTokens, BackerReards,\\n   *  and BackerStakingRewards\\n   * @param tokenId uint256 id of the ERC721 token to be burned.\\n   */\\n  function burn(uint256 tokenId) external;\\n\\n  /**\\n   * @notice Called by the GoldfinchFactory to register the pool as a valid pool. Only valid pools can mint/redeem\\n   * tokens\\n   * @param newPool The address of the newly created pool\\n   */\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function getPoolInfo(address pool) external view returns (PoolInfo memory);\\n\\n  /// @notice Query if `pool` is a valid pool. A pool is valid if it was created by the Goldfinch Factory\\n  function validPool(address pool) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n  /**\\n   * @notice Splits a pool token into two smaller positions. The original token is burned and all\\n   * its associated data is deleted.\\n   * @param tokenId id of the token to split.\\n   * @param newPrincipal1 principal amount for the first token in the split. The principal amount for the\\n   *  second token in the split is implicitly the original token's principal amount less newPrincipal1\\n   * @return tokenId1 id of the first token in the split\\n   * @return tokenId2 id of the second token in the split\\n   */\\n  function splitToken(\\n    uint256 tokenId,\\n    uint256 newPrincipal1\\n  ) external returns (uint256 tokenId1, uint256 tokenId2);\\n\\n  /**\\n   * @notice Mint event emitted for a new TranchedPool deposit or when an existing pool token is\\n   *  split\\n   * @param owner address to which the token was minted\\n   * @param pool tranched pool that the deposit was in\\n   * @param tokenId ERC721 tokenId\\n   * @param amount the deposit amount\\n   * @param tranche id of the tranche of the deposit\\n   */\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  /**\\n   * @notice Redeem event emitted when interest and/or principal is redeemed in the token's pool\\n   * @param owner owner of the pool token\\n   * @param pool tranched pool that the token belongs to\\n   * @param principalRedeemed amount of principal redeemed from the pool\\n   * @param interestRedeemed amount of interest redeemed from the pool\\n   * @param tranche id of the tranche the token belongs to\\n   */\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n\\n  /**\\n   * @notice Burn event emitted when the token owner/operator manually burns the token or burns\\n   *  it implicitly by splitting it\\n   * @param owner owner of the pool token\\n   * @param pool tranched pool that the token belongs to\\n   */\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  /**\\n   * @notice Split event emitted when the token owner/operator splits the token\\n   * @param pool tranched pool to which the orginal and split tokens belong\\n   * @param tokenId id of the original token that was split\\n   * @param newTokenId1 id of the first split token\\n   * @param newPrincipal1 principalAmount of the first split token\\n   * @param newTokenId2 id of the second split token\\n   * @param newPrincipal2 principalAmount of the second split token\\n   */\\n  event TokenSplit(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 newTokenId1,\\n    uint256 newPrincipal1,\\n    uint256 newTokenId2,\\n    uint256 newPrincipal2\\n  );\\n\\n  /**\\n   * @notice Principal Withdrawn event emitted when a token's principal is withdrawn from the pool\\n   *  BEFORE the pool's drawdown period\\n   * @param pool tranched pool of the token\\n   * @param principalWithdrawn amount of principal withdrawn from the pool\\n   */\\n  event TokenPrincipalWithdrawn(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalWithdrawn,\\n    uint256 tranche\\n  );\\n}\\n\",\"keccak256\":\"0x2c6b45491f8b77483e2e809780cd79f5570865b31b7ef7904c099bbb1e306b43\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiresUID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRequiresUID {\\n  function hasAllowedUID(address sender) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdc1693ea2ef81d20c4f5c0c507f814671691959d6d177398159cfbfda90e08d7\",\"license\":\"MIT\"},\"contracts/interfaces/ISchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ISchedule {\\n  function periodsPerPrincipalPeriod() external view returns (uint256);\\n\\n  function periodsInTerm() external view returns (uint256);\\n\\n  function periodsPerInterestPeriod() external view returns (uint256);\\n\\n  function gracePrincipalPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the period that timestamp resides in\\n   */\\n  function periodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the principal period that timestamp resides in\\n   */\\n  function principalPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the interest period that timestamp resides in\\n   */\\n  function interestPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns true if the given timestamp resides in a principal grace period\\n   */\\n  function withinPrincipalGracePeriodAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (bool);\\n\\n  /**\\n   * Returns the next timestamp where either principal or interest will come due following `timestamp`\\n   */\\n  function nextDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where either principal or timestamp came due\\n   */\\n  function previousDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where new interest came due\\n   */\\n  function previousInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where new principal came due\\n   */\\n  function previousPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total number of principal periods\\n   */\\n  function totalPrincipalPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total number of interest periods\\n   */\\n  function totalInterestPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp that the term will end\\n   */\\n  function termEndTime(uint256 startTime) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp that the term began\\n   */\\n  function termStartTime(uint256 startTime) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next time principal will come due, or the termEndTime if there are no more due times\\n   */\\n  function nextPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next time interest will come due, or the termEndTime if there are no more due times\\n   */\\n  function nextInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the end time of the given period.\\n   */\\n  function periodEndTime(uint256 startTime, uint256 period) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd12234c42aeb8a91fb435196e0aa5f45568b9f16b44ce29ea70118393ae952b1\",\"license\":\"MIT\"},\"contracts/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title interface for implementers that have an arbitrary associated tag\\ninterface IVersioned {\\n  /// @notice Returns the version triplet `[major, minor, patch]`\\n  function getVersion() external pure returns (uint8[3] memory);\\n}\\n\",\"keccak256\":\"0xcfad0eb9092682c0634635007f727cdcb9b95046094ea6342612a96b4a26eded\",\"license\":\"MIT\"},\"contracts/interfaces/openzeppelin/IERC165.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\n// This file copied from OZ, but with the version pragma updated to use >=.\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbbdb8f6dfaecd47a0d65bee707877d6974a0e0da6c02403ad5ce00590bd97497\"},\"contracts/interfaces/openzeppelin/IERC721.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\n// This file copied from OZ, but with the version pragma updated to use >= & reference other >= pragma interfaces.\\n// NOTE: Modified to reference our updated pragma version of IERC165\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of NFTs in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the NFT specified by `tokenId`.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n   * another (`to`).\\n   *\\n   *\\n   *\\n   * Requirements:\\n   * - `from`, `to` cannot be zero.\\n   * - `tokenId` must be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this\\n   * NFT by either {approve} or {setApprovalForAll}.\\n   */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Requirements:\\n   * - If the caller is not `from`, it must be approved to move this NFT by\\n   * either {approve} or {setApprovalForAll}.\\n   */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x839a8ac86a7be93a842f708f7e41a5a56a6e44ee9dcc2559b99042122dd76048\"},\"contracts/library/SaturatingSub.sol\":{\"content\":\"pragma solidity >=0.8.17;\\n\\nlibrary SaturatingSub {\\n  /// @notice Do a - b but if that would result in underflow error, then just return 0\\n  function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return b > a ? 0 : a - b;\\n  }\\n}\\n\",\"keccak256\":\"0x0c9eb1e8dc9e1f10706587ab9d06af045db5f45dd10ecdb27171dfcf64765306\"},\"contracts/protocol/core/BaseUpgradeablePausable08x.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {PauserPausable} from \\\"./PauserPausable08x.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeable,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeable\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xe84ee89051258e2b3d31f9f8fca905683dfa10385e0304b01a2a1a7978dab1d7\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigNumbersHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ConfigOptions} from \\\"./ConfigOptions.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../interfaces/IGoldfinchConfig.sol\\\";\\n\\n/**\\n * @title ConfigNumbersHelper\\n * @notice A convenience library for getting easy access to configured numbers within the\\n *  protocol, through the use of the IGoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigNumbersHelper {\\n  function getReserveDenominator(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(\\n    IGoldfinchConfig config\\n  ) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n\\n  function getSeniorPoolWithdrawalCancelationFeeInBps(\\n    IGoldfinchConfig config\\n  ) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.SeniorPoolWithdrawalCancelationFeeInBps));\\n  }\\n}\\n\",\"keccak256\":\"0xb7530d2962c5485bc899dc881843ff03e4608f3fb3a2c6fc590aef149cffd71e\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    /// @dev: TotalFundsLimit used to represent a total cap on senior pool deposits\\n    /// but is now deprecated\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio,\\n    /// A number in the range [0, 10000] representing basis points of FIDU taken as a fee\\n    /// when a withdrawal request is canceled.\\n    SeniorPoolWithdrawalCancelationFeeInBps\\n  }\\n  /// @dev TrustedForwarder is deprecated because we no longer use GSN. CreditDesk\\n  ///   and Pool are deprecated because they are no longer used in the protocol.\\n  enum Addresses {\\n    Pool, // deprecated\\n    CreditLineImplementation,\\n    GoldfinchFactory,\\n    CreditDesk, // deprecated\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder, // deprecated\\n    CUSDCContract,\\n    GoldfinchConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation, // deprecated\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation,\\n    GFI,\\n    Go,\\n    BackerRewards,\\n    StakingRewards,\\n    FiduUSDCCurveLP,\\n    TranchedPoolImplementationRepository,\\n    WithdrawalRequestToken,\\n    MonthlyScheduleRepo,\\n    CallableLoanImplementationRepository\\n  }\\n}\\n\",\"keccak256\":\"0xc782f8613bfcb2b4709c7919ba175bd74335586dd6c43980b496337c5bf6d132\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable08x.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeable, PausableUpgradeable {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    /// @dev NA: not authorized\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd0797b1e279739ea547e01a5fd8a4000e95fad2fc18a3802ad6b08427bd0a18a\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/CallableLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable-next-line max-line-length\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20Upgradeable as SafeERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {ICallableLoan} from \\\"../../../interfaces/ICallableLoan.sol\\\";\\nimport {ILoan} from \\\"../../../interfaces/ILoan.sol\\\";\\nimport {IRequiresUID} from \\\"../../../interfaces/IRequiresUID.sol\\\";\\nimport {IERC20UpgradeableWithDec} from \\\"../../../interfaces/IERC20UpgradeableWithDec.sol\\\";\\nimport {ICreditLine} from \\\"../../../interfaces/ICreditLine.sol\\\";\\nimport {IPoolTokens} from \\\"../../../interfaces/IPoolTokens.sol\\\";\\nimport {IVersioned} from \\\"../../../interfaces/IVersioned.sol\\\";\\nimport {ISchedule} from \\\"../../../interfaces/ISchedule.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../../interfaces/IGoldfinchConfig.sol\\\";\\n\\nimport {BaseUpgradeablePausable} from \\\"../BaseUpgradeablePausable08x.sol\\\";\\n\\nimport {CallableLoanConfigHelper} from \\\"./CallableLoanConfigHelper.sol\\\";\\nimport {Waterfall} from \\\"./structs/Waterfall.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {CallableCreditLine, CallableCreditLineLogic, SettledTrancheInfo, LoanState} from \\\"./structs/CallableCreditLine.sol\\\";\\nimport {StaleCallableCreditLine, StaleCallableCreditLineLogic} from \\\"./structs/StaleCallableCreditLine.sol\\\";\\nimport {SaturatingSub} from \\\"../../../library/SaturatingSub.sol\\\";\\nimport {PaymentSchedule, PaymentScheduleLogic} from \\\"../schedule/PaymentSchedule.sol\\\";\\nimport {CallableLoanAccountant} from \\\"./CallableLoanAccountant.sol\\\";\\n\\n// import {console2 as console} from \\\"forge-std/console2.sol\\\";\\n\\n/// @title CallableLoan\\n/// @notice A loan that allows the lenders to call back capital from the borrower.\\n/// @author Warbler Labs\\ncontract CallableLoan is\\n  BaseUpgradeablePausable,\\n  ICallableLoan,\\n  ICreditLine,\\n  IRequiresUID,\\n  IVersioned\\n{\\n  using CallableLoanConfigHelper for IGoldfinchConfig;\\n  using SafeERC20 for IERC20UpgradeableWithDec;\\n  using SaturatingSub for uint256;\\n\\n  /*================================================================================\\n  Constants\\n  ================================================================================*/\\n  bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n  uint8 internal constant MAJOR_VERSION = 1;\\n  uint8 internal constant MINOR_VERSION = 0;\\n  uint8 internal constant PATCH_VERSION = 0;\\n\\n  /*================================================================================\\n  Storage State\\n  ================================================================================*/\\n  StaleCallableCreditLine private _staleCreditLine;\\n  uint256 public fundableAt;\\n  bool public drawdownsPaused;\\n  uint256[] public allowedUIDTypes;\\n\\n  /*================================================================================\\n  Storage Static Configuration\\n  ================================================================================*/\\n  IGoldfinchConfig public config;\\n  uint256 public override createdAt;\\n  address public override borrower;\\n\\n  /*================================================================================\\n  Initialization\\n  ================================================================================*/\\n  /// Unsupported - only included for compatibility with ICreditLine.\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr\\n  ) external override initializer {\\n    revert(\\\"US\\\");\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external initializer {\\n    // NOTE: This check can be replaced with an after deploy verification rather than\\n    //       a require statement which increases bytecode size.\\n    // require(address(_config) != address(0) && address(_borrower) != address(0), \\\"00\\\");\\n\\n    config = IGoldfinchConfig(_config);\\n    address owner = config.protocolAdminAddress();\\n    __BaseUpgradeablePausable__init(owner);\\n    _staleCreditLine.initialize(\\n      config,\\n      _interestApr,\\n      _numLockupPeriods,\\n      _schedule,\\n      _lateFeeApr,\\n      _limit\\n    );\\n    borrower = _borrower;\\n    createdAt = block.timestamp;\\n    allowedUIDTypes = _allowedUIDTypes;\\n\\n    _setupRole(LOCKER_ROLE, _borrower);\\n    _setupRole(LOCKER_ROLE, owner);\\n    _setRoleAdmin(LOCKER_ROLE, OWNER_ROLE);\\n  }\\n\\n  /*================================================================================\\n  Main Public/External Write functions\\n  ================================================================================*/\\n  /// @inheritdoc ICallableLoan\\n  /// @dev IA: Invalid amount - Call amount must be non-zero amount < than principal remaining.\\n  /// @dev IT: invalid tranche - must be uncalled capital tranche\\n  /// @dev NA: not authorized. Must have correct UID or be go listed\\n  /// @notice Supply capital to the loan.\\n  /// @param callAmount Amount of capital to call back\\n  /// @param poolTokenId Pool token id to be called back.\\n  function submitCall(\\n    uint256 callAmount,\\n    uint256 poolTokenId\\n  )\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 callRequestedTokenId, uint256 remainingTokenId)\\n  {\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(poolTokenId);\\n    require(\\n      poolTokens.isApprovedOrOwner(msg.sender, poolTokenId) &&\\n        hasAllowedUID(msg.sender) &&\\n        tokenInfo.tranche == cl.uncalledCapitalTrancheIndex(),\\n      \\\"NA\\\"\\n    );\\n\\n    // Pseudo-withdraw max while also caching the total amount of interest and principal withdrawable.\\n    // Total interest & principal withdrawable are useful for calculating how much will be redeemed on\\n    // the newly split pool tokens.\\n    (uint totalInterestWithdrawable, uint totalPrincipalWithdrawable) = cl\\n      .proportionalInterestAndPrincipalAvailable({\\n        trancheId: tokenInfo.tranche,\\n        principal: tokenInfo.principalAmount,\\n        feePercent: _reserveFundsFeePercent()\\n      });\\n\\n    {\\n      uint netWithdrawableAmount = totalPrincipalWithdrawable -\\n        tokenInfo.principalRedeemed +\\n        totalInterestWithdrawable -\\n        tokenInfo.interestRedeemed;\\n      if (netWithdrawableAmount > 0) {\\n        _withdraw(tokenInfo, poolTokenId, netWithdrawableAmount);\\n      }\\n    }\\n\\n    {\\n      uint256 callablePrincipal = cl.proportionalCallablePrincipal({\\n        trancheId: tokenInfo.tranche,\\n        principalDeposited: tokenInfo.principalAmount\\n      });\\n      require(callAmount > 0 && callablePrincipal >= callAmount, \\\"IA\\\");\\n    }\\n\\n    (uint principalDepositedMoved, uint principalPaidMoved, , uint interestRedeemable) = cl\\n      .submitCall(callAmount);\\n    interestRedeemable = (interestRedeemable * (100 - _reserveFundsFeePercent())) / 100;\\n\\n    {\\n      address owner = poolTokens.ownerOf(poolTokenId);\\n      callRequestedTokenId = poolTokens.mint(\\n        IPoolTokens.MintParams({\\n          principalAmount: principalDepositedMoved,\\n          tranche: cl.activeCallSubmissionTrancheIndex()\\n        }),\\n        owner\\n      );\\n\\n      poolTokens.redeem(callRequestedTokenId, principalPaidMoved, interestRedeemable);\\n\\n      // TODO: Determine \\\"dust\\\" threshold at which we should just not mint a remaining token.\\n      if (tokenInfo.principalAmount - principalDepositedMoved > 0) {\\n        remainingTokenId = poolTokens.mint(\\n          IPoolTokens.MintParams({\\n            principalAmount: tokenInfo.principalAmount - principalDepositedMoved,\\n            tranche: cl.uncalledCapitalTrancheIndex()\\n          }),\\n          owner\\n        );\\n        // TODO: Remove scaffolding\\n        //       Due to integer math, redeemeded amounts can be more than redeemable amounts after splitting.\\n        //       This scaffolding is to verify the error is within some reasonable margin.\\n        require(\\n          principalPaidMoved <= totalPrincipalWithdrawable,\\n          \\\"Principal withdrawable is less than principal move\\\"\\n        );\\n        require(\\n          interestRedeemable <= totalInterestWithdrawable,\\n          \\\"Interest withdrawable is less than interest moved\\\"\\n        );\\n        poolTokens.redeem(\\n          remainingTokenId,\\n          totalPrincipalWithdrawable - principalPaidMoved,\\n          totalInterestWithdrawable - interestRedeemable\\n        );\\n      } else {\\n        remainingTokenId = 0;\\n      }\\n    }\\n\\n    poolTokens.redeem(poolTokenId, tokenInfo.principalAmount - totalPrincipalWithdrawable, 0);\\n    poolTokens.burn(poolTokenId);\\n\\n    emit CallRequestSubmitted(poolTokenId, callRequestedTokenId, remainingTokenId, callAmount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @notice Supply capital to the loan.\\n  /// @param tranche *UNSUPPORTED* - Should always be uncalled capital tranche index.\\n  /// @param amount amount of capital to supply\\n  /// @return tokenId NFT representing your position in this pool\\n  function deposit(\\n    uint256 tranche,\\n    uint256 amount\\n  ) external override nonReentrant whenNotPaused returns (uint256) {\\n    return _deposit(tranche, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @notice Supply capital to the loan.\\n  /// @param tranche *UNSUPPORTED* -\\n  /// @param amount amount of capital to supply\\n  /// @param deadline deadline of permit operation\\n  /// @param v v portion of signature\\n  /// @param r r portion of signature\\n  /// @param s s portion of signature\\n  /// @return tokenId NFT representing your position in this pool\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override nonReentrant whenNotPaused returns (uint256 tokenId) {\\n    IERC20PermitUpgradeable(config.usdcAddress()).permit(\\n      msg.sender,\\n      address(this),\\n      amount,\\n      deadline,\\n      v,\\n      r,\\n      s\\n    );\\n    return _deposit(tranche, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function withdraw(\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external override nonReentrant whenNotPaused returns (uint256, uint256) {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    return _withdraw(tokenInfo, tokenId, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @dev LEN: argument length mismatch\\n  function withdrawMultiple(\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts\\n  ) external override nonReentrant whenNotPaused {\\n    require(tokenIds.length == amounts.length, \\\"LN\\\");\\n\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenIds[i]);\\n      _withdraw(tokenInfo, tokenIds[i], amounts[i]);\\n    }\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function withdrawMax(\\n    uint256 tokenId\\n  )\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\\n  {\\n    return _withdrawMax(tokenId);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @dev DP: drawdowns paused\\n  /// @dev ZA: Zero amount - must be greater than 0\\n  function drawdown(\\n    uint256 amount\\n  ) external override(ICreditLine, ILoan) nonReentrant onlyLocker whenNotPaused {\\n    require(!drawdownsPaused, \\\"DP\\\");\\n    require(amount > 0, \\\"ZA\\\");\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n\\n    cl.drawdown(amount);\\n\\n    config.getUSDC().safeTransfer(borrower, amount);\\n    emit DrawdownMade(borrower, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @dev ZA: zero amount\\n  function pay(\\n    uint256 amount\\n  )\\n    external\\n    override(ICreditLine, ILoan)\\n    nonReentrant\\n    whenNotPaused\\n    returns (PaymentAllocation memory)\\n  {\\n    return _pay(amount);\\n  }\\n\\n  /// @notice Pauses all drawdowns (but not deposits/withdraws)\\n  function pauseDrawdowns() external onlyAdmin {\\n    drawdownsPaused = true;\\n    emit DrawdownsPaused(address(this));\\n  }\\n\\n  /// @notice Unpause drawdowns\\n  function unpauseDrawdowns() external onlyAdmin {\\n    drawdownsPaused = false;\\n    emit DrawdownsUnpaused(address(this));\\n  }\\n\\n  /// Set accepted UID types for the loan.\\n  /// Requires that users have not already begun to deposit.\\n  function setAllowedUIDTypes(uint256[] calldata ids) external onlyLocker {\\n    require(_staleCreditLine.checkpoint().totalPrincipalDeposited() == 0, \\\"AF\\\");\\n    allowedUIDTypes = ids;\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function setFundableAt(uint256 newFundableAt) external override onlyLocker {\\n    fundableAt = newFundableAt;\\n  }\\n\\n  /*================================================================================\\n  Main Public/External View functions\\n  ================================================================================*/\\n  function getAllowedUIDTypes() external view override returns (uint256[] memory) {\\n    return allowedUIDTypes;\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @dev IT: invalid timestamp\\n  /// @dev LI: loan inactive\\n  function getAmountsOwed(\\n    uint256 timestamp\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 returnedInterestOwed,\\n      uint256 returnedInterestAccrued,\\n      uint256 returnedPrincipalOwed\\n    )\\n  {\\n    require(timestamp >= block.timestamp, \\\"IT\\\");\\n    // TODO: Verify this is the correct loan inactive condition.\\n    require(termEndTime() > 0, \\\"LI\\\");\\n\\n    return (interestOwedAt(timestamp), interestAccruedAt(timestamp), principalOwedAt(timestamp));\\n  }\\n\\n  function uncalledCapitalTrancheIndex() public view returns (uint256) {\\n    return _staleCreditLine.uncalledCapitalTrancheIndex();\\n  }\\n\\n  function getUncalledCapitalInfo() external view returns (UncalledCapitalInfo memory) {\\n    SettledTrancheInfo memory info = _staleCreditLine.getSettledTrancheInfo(\\n      uncalledCapitalTrancheIndex()\\n    );\\n    return\\n      UncalledCapitalInfo({\\n        interestPaid: info.interestPaid,\\n        principalDeposited: info.principalDeposited,\\n        principalPaid: info.principalPaid,\\n        principalReserved: info.principalReserved\\n      });\\n  }\\n\\n  function getCallRequestPeriod(\\n    uint callRequestPeriodIndex\\n  ) external view returns (CallRequestPeriod memory) {\\n    require(callRequestPeriodIndex < uncalledCapitalTrancheIndex());\\n    SettledTrancheInfo memory info = _staleCreditLine.getSettledTrancheInfo(callRequestPeriodIndex);\\n    return\\n      CallRequestPeriod({\\n        interestPaid: info.interestPaid,\\n        principalDeposited: info.principalDeposited,\\n        principalPaid: info.principalPaid,\\n        principalReserved: info.principalReserved\\n      });\\n  }\\n\\n  function interestBearingBalance() public view returns (uint256) {\\n    return _staleCreditLine.totalPrincipalOutstandingWithoutReserves();\\n  }\\n\\n  /// @dev OU: Only the uncalled tranche can call\\n  function availableToCall(uint256 tokenId) public view returns (uint256) {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    require(tokenInfo.tranche == uncalledCapitalTrancheIndex(), \\\"OU\\\");\\n    return\\n      _staleCreditLine.proportionalCallablePrincipal({\\n        trancheId: tokenInfo.tranche,\\n        principalDeposited: tokenInfo.principalAmount\\n      });\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function availableToWithdraw(uint256 tokenId) public view override returns (uint256, uint256) {\\n    return _availableToWithdraw(config.getPoolTokens().getTokenInfo(tokenId));\\n  }\\n\\n  function hasAllowedUID(address sender) public view override returns (bool) {\\n    return config.getGo().goOnlyIdTypes(sender, allowedUIDTypes);\\n  }\\n\\n  /*================================================================================\\n  Internal Write functions\\n  ================================================================================*/\\n  function _pay(uint256 amount) internal returns (ILoan.PaymentAllocation memory) {\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    require(amount > 0, \\\"ZA\\\");\\n\\n    uint interestOwedBeforePayment = cl.interestOwed();\\n    uint interestAccruedBeforePayment = cl.interestAccrued();\\n\\n    uint timeUntilNextPrincipalSettlemenet = cl\\n      .nextPrincipalDueTimeAt(block.timestamp)\\n      .saturatingSub(block.timestamp);\\n    ILoan.PaymentAllocation memory pa = CallableLoanAccountant.allocatePayment({\\n      paymentAmount: amount,\\n      interestOwed: interestOwedBeforePayment,\\n      interestAccrued: interestAccruedBeforePayment,\\n      principalOwed: cl.principalOwed(),\\n      interestRate: cl.interestApr(),\\n      timeUntilNextPrincipalSettlemenet: timeUntilNextPrincipalSettlemenet,\\n      balance: cl.totalPrincipalOutstanding()\\n    });\\n\\n    uint256 totalInterestPayment = pa.owedInterestPayment + pa.accruedInterestPayment;\\n    uint256 totalPrincipalPayment = pa.principalPayment + pa.additionalBalancePayment;\\n    uint256 totalPayment = totalInterestPayment + totalPrincipalPayment;\\n\\n    uint256 reserveFundsFee = (_reserveFundsFeePercent() * totalInterestPayment) / 100;\\n\\n    cl.pay(totalPrincipalPayment, totalInterestPayment);\\n    emit PaymentApplied({\\n      payer: msg.sender,\\n      pool: address(this),\\n      interest: totalInterestPayment,\\n      principal: totalPrincipalPayment,\\n      remaining: 0,\\n      reserve: reserveFundsFee\\n    });\\n\\n    config.getUSDC().safeTransferFrom(msg.sender, address(this), totalPayment);\\n    config.getUSDC().safeTransfer(config.reserveAddress(), reserveFundsFee);\\n    emit ReserveFundsCollected(address(this), reserveFundsFee);\\n    return pa;\\n  }\\n\\n  /// @dev ZA: zero amount - must be greater than 0.\\n  /// @dev IT: invalid tranche - must be uncalled capital tranche\\n  /// @dev NA: not authorized. Must have correct UID or be go listed\\n  /// @dev NF: not open for funding. Must be after fundableAt\\n  /// @notice Supply capital to the loan.\\n  /// @param tranche *UNSUPPORTED* - Should always be uncalled capital tranche index.\\n  /// @param amount amount of capital to supply\\n  /// @return tokenId NFT representing your position in this pool\\n  function _deposit(uint256 tranche, uint256 amount) internal returns (uint256) {\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    require(amount > 0, \\\"ZA\\\");\\n    require(tranche == cl.uncalledCapitalTrancheIndex(), \\\"IT\\\");\\n    require(hasAllowedUID(msg.sender), \\\"NA\\\");\\n    require(block.timestamp >= fundableAt, \\\"NF\\\");\\n\\n    cl.deposit(amount);\\n    uint256 tokenId = config.getPoolTokens().mint(\\n      IPoolTokens.MintParams({tranche: tranche, principalAmount: amount}),\\n      msg.sender\\n    );\\n    config.getUSDC().safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit DepositMade(msg.sender, tranche, tokenId, amount);\\n    return tokenId;\\n  }\\n\\n  /// @dev ZA: Zero amount\\n  /// @dev IA: Invalid amount - amount too large\\n  /// @dev DL: Deposits Locked\\n  function _withdraw(\\n    IPoolTokens.TokenInfo memory tokenInfo,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) internal returns (uint256, uint256) {\\n    require(amount > 0, \\\"ZA\\\");\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    /// @dev NA: not authorized\\n    require(poolTokens.isApprovedOrOwner(msg.sender, tokenId) && hasAllowedUID(msg.sender), \\\"NA\\\");\\n\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    // calculate the amount that will ever be redeemable\\n    (uint interestWithdrawable, uint principalWithdrawable) = _availableToWithdraw(tokenInfo);\\n\\n    require(amount <= interestWithdrawable + principalWithdrawable, \\\"IA\\\");\\n\\n    // prefer to withdraw interest first, then principal\\n    uint interestToRedeem = Math.min(interestWithdrawable, amount);\\n    uint amountAfterInterest = amount - interestToRedeem;\\n    uint principalToRedeem = Math.min(amountAfterInterest, principalWithdrawable);\\n\\n    {\\n      if (cl.loanState() == LoanState.InProgress) {\\n        poolTokens.redeem({\\n          tokenId: tokenId,\\n          principalRedeemed: principalToRedeem,\\n          interestRedeemed: interestToRedeem\\n        });\\n      } else if (cl.loanState() == LoanState.FundingPeriod) {\\n        // if the pool is still funding, we need to decrease the deposit rather than the amount redeemed\\n        assert(interestToRedeem == 0);\\n        cl.withdraw(tokenInfo.tranche, principalToRedeem);\\n        poolTokens.withdrawPrincipal({tokenId: tokenId, principalAmount: principalToRedeem});\\n      } else if (cl.loanState() == LoanState.DrawdownPeriod) {\\n        // Could currently just use a else statement, but this is more explicit and future-proof.\\n        revert(\\\"IS\\\");\\n      }\\n    }\\n\\n    config.getUSDC().safeTransfer(msg.sender, interestToRedeem + principalToRedeem);\\n\\n    emit WithdrawalMade({\\n      owner: msg.sender,\\n      tranche: tokenInfo.tranche,\\n      tokenId: tokenId,\\n      interestWithdrawn: interestToRedeem,\\n      principalWithdrawn: principalToRedeem\\n    });\\n\\n    return (interestToRedeem, principalToRedeem);\\n  }\\n\\n  function _withdrawMax(uint256 tokenId) internal returns (uint256, uint256) {\\n    /* CallableCreditLine storage cl = */ _staleCreditLine.checkpoint();\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    (uint256 interestWithdrawable, uint256 principalWithdrawable) = _availableToWithdraw(tokenInfo);\\n    uint totalWithdrawable = interestWithdrawable + principalWithdrawable;\\n    if (totalWithdrawable == 0) {\\n      return (0, 0);\\n    }\\n    return _withdraw(tokenInfo, tokenId, totalWithdrawable);\\n  }\\n\\n  /*================================================================================\\n  PaymentSchedule proxy functions\\n  ================================================================================*/\\n  function nextPrincipalDueTime() public view returns (uint) {\\n    return _staleCreditLine.nextPrincipalDueTime();\\n  }\\n\\n  function nextDueTimeAt(uint256 timestamp) public view returns (uint256) {\\n    return _staleCreditLine.nextDueTimeAt(timestamp);\\n  }\\n\\n  function nextInterestDueTimeAt(uint256 timestamp) public view returns (uint256) {\\n    return _staleCreditLine.nextInterestDueTimeAt(timestamp);\\n  }\\n\\n  function schedule() public view override returns (ISchedule) {\\n    return _staleCreditLine.schedule();\\n  }\\n\\n  /*================================================================================\\n  Internal View functions\\n  ================================================================================*/\\n  function _reserveFundsFeePercent() public view returns (uint256) {\\n    return uint256(100) / (config.getReserveDenominator());\\n  }\\n\\n  function _availableToWithdraw(\\n    IPoolTokens.TokenInfo memory tokenInfo\\n  ) internal view returns (uint interestAvailable, uint principalAvailable) {\\n    if (tokenInfo.principalAmount == 0) {\\n      // Bail out early to account for proportion of zero.\\n      return (0, 0);\\n    }\\n\\n    (uint totalInterestWithdrawable, uint totalPrincipalWithdrawable) = _staleCreditLine\\n      .proportionalInterestAndPrincipalAvailable({\\n        trancheId: tokenInfo.tranche,\\n        principal: tokenInfo.principalAmount,\\n        feePercent: _reserveFundsFeePercent()\\n      });\\n\\n    // TODO: Remove scaffolding\\n    //       Due to integer math, redeemeded amounts can be more than redeemable amounts after splitting.\\n    //       This scaffolding is to verify the error is within some reasonable margin.\\n    require(\\n      tokenInfo.principalRedeemed <= totalPrincipalWithdrawable + 1,\\n      \\\"Principal withdrawable is less than principal redeemed\\\"\\n    );\\n    require(\\n      tokenInfo.interestRedeemed <= totalInterestWithdrawable,\\n      \\\"Interest withdrawable is less than interest redeemed\\\"\\n    );\\n    return (\\n      totalInterestWithdrawable - tokenInfo.interestRedeemed,\\n      totalPrincipalWithdrawable.saturatingSub(tokenInfo.principalRedeemed)\\n    );\\n  }\\n\\n  /*================================================================================\\n  Legacy ICreditLine Conformance\\n  ================================================================================*/\\n  /// @inheritdoc ILoan\\n  function creditLine() external view override returns (ICreditLine) {\\n    return this;\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function balance() public view returns (uint256) {\\n    return _staleCreditLine.totalPrincipalOutstanding();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function interestOwed() public view override returns (uint256) {\\n    return _staleCreditLine.interestOwed();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function principalOwed() public view override returns (uint256) {\\n    return _staleCreditLine.principalOwed();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function termEndTime() public view override returns (uint256) {\\n    return _staleCreditLine.termEndTime();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function nextDueTime() public view override returns (uint256) {\\n    return _staleCreditLine.nextDueTime();\\n  }\\n\\n  /// @notice We keep this to conform to the ICreditLine interface, but it's redundant information\\n  ///   now that we have `checkpointedAsOf`\\n  function interestAccruedAsOf() public view override returns (uint256) {\\n    return _staleCreditLine.checkpointedAsOf();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function currentLimit() public view override returns (uint256) {\\n    return _staleCreditLine.limit();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function limit() public view override returns (uint256) {\\n    return _staleCreditLine.limit();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function interestApr() public view override returns (uint256) {\\n    return _staleCreditLine.interestApr();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function lateFeeApr() public view override returns (uint256) {\\n    return _staleCreditLine.lateFeeApr();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function isLate() public view override returns (bool) {\\n    return _staleCreditLine.isLate();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalInterestAccrued() public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestAccrued();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalInterestAccruedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestAccruedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalInterestPaid() public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestPaid();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalInterestOwed() public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestOwed();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalInterestOwedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestOwedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function interestOwedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.interestOwedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function interestAccrued() public view override returns (uint256) {\\n    return _staleCreditLine.interestAccrued();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function interestAccruedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.interestAccruedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function principalOwedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.principalOwedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalPrincipalPaid() public view override returns (uint256) {\\n    return _staleCreditLine.totalPrincipalPaid();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalPrincipalOwedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.totalPrincipalOwedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalPrincipalOwed() public view override returns (uint256) {\\n    return _staleCreditLine.totalPrincipalOwed();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function termStartTime() public view override returns (uint256) {\\n    return _staleCreditLine.termStartTime();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function withinPrincipalGracePeriod() public view override returns (bool) {\\n    return _staleCreditLine.withinPrincipalGracePeriod();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function lastFullPaymentTime() public view override returns (uint256) {\\n    return _staleCreditLine.lastFullPaymentTime();\\n  }\\n\\n  /// Unsupported in callable loans.\\n  function pay(\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) external override(ICreditLine) nonReentrant whenNotPaused returns (PaymentAllocation memory) {\\n    revert(\\\"US\\\");\\n  }\\n\\n  /// Unsupported in callable loans.\\n  function maxLimit() external view override returns (uint256) {\\n    revert(\\\"US\\\");\\n  }\\n\\n  /// Unsupported in callable loans.\\n  function setMaxLimit(uint256 newAmount) external override onlyAdmin {\\n    revert(\\\"US\\\");\\n  }\\n\\n  /// Unsupported ICreditLine method kept for ICreditLine conformance\\n  function setLimit(uint256 newAmount) external override onlyAdmin {\\n    revert(\\\"US\\\");\\n  }\\n\\n  /*================================================================================\\n  Modifiers\\n  ================================================================================*/\\n  /// @inheritdoc IVersioned\\n  function getVersion() external pure override returns (uint8[3] memory version) {\\n    (version[0], version[1], version[2]) = (MAJOR_VERSION, MINOR_VERSION, PATCH_VERSION);\\n  }\\n\\n  /// @dev NA: not authorized. not locker\\n  modifier onlyLocker() {\\n    require(hasRole(LOCKER_ROLE, msg.sender), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5cfd3f94501257f1f54a2aa6172fd1e8383a7192de369f5f81fa40f6a1f1c7e4\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/CallableLoanAccountant.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {SaturatingSub} from \\\"../../../library/SaturatingSub.sol\\\";\\nimport {ILoan} from \\\"../../../interfaces/ILoan.sol\\\";\\n\\n/**\\n * @title CallableLoanAccountant\\n * @notice Library for handling allocations of payments and interest calculations\\n *         for callable loans.\\n * @author Goldfinch\\n */\\nlibrary CallableLoanAccountant {\\n  using SaturatingSub for uint256;\\n\\n  uint256 internal constant INTEREST_DECIMALS = 1e18;\\n  uint256 internal constant SECONDS_PER_DAY = 60 * 60 * 24;\\n  uint256 internal constant SECONDS_PER_YEAR = SECONDS_PER_DAY * 365;\\n\\n  /// @notice Allocate a payment to proper balances according to the payment waterfall.\\n  /// @param paymentAmount amount to allocate\\n  /// @param balance Balance = Remaining principal outstanding\\n  /// @param interestOwed interest owed on the credit line up to the last due time\\n  /// @param interestAccrued interest accrued between the last due time and the present time\\n  /// @param interestRate interest which is guaranteed to accrue between now and\\n  ///                      the next time principal is settled\\n  /// @param timeUntilNextPrincipalSettlemenet time at which the next principal payment is due\\n  /// @param principalOwed principal owed on the credit line\\n  /// @return PaymentAllocation payment allocation\\n  function allocatePayment(\\n    uint256 paymentAmount,\\n    uint256 interestOwed,\\n    uint256 interestAccrued,\\n    uint256 principalOwed,\\n    uint256 interestRate,\\n    uint256 timeUntilNextPrincipalSettlemenet,\\n    uint256 balance\\n  ) internal pure returns (ILoan.PaymentAllocation memory) {\\n    uint256 paymentRemaining = paymentAmount;\\n    uint256 owedInterestPayment = MathUpgradeable.min(interestOwed, paymentRemaining);\\n\\n    paymentRemaining = paymentRemaining - owedInterestPayment;\\n\\n    uint256 principalPayment = MathUpgradeable.min(principalOwed, paymentRemaining);\\n    paymentRemaining = paymentRemaining - principalPayment;\\n\\n    uint256 accruedInterestPayment = MathUpgradeable.min(interestAccrued, paymentRemaining);\\n    paymentRemaining = paymentRemaining - accruedInterestPayment;\\n\\n    uint256 balanceRemaining = balance - principalPayment;\\n    uint256 guaranteedFutureInterest = calculateInterest({\\n      secondsElapsed: timeUntilNextPrincipalSettlemenet,\\n      principal: balanceRemaining,\\n      interestApr: interestRate\\n    });\\n    uint256 guaranteedFutureAccruedInterestPayment = MathUpgradeable.min(\\n      guaranteedFutureInterest,\\n      paymentRemaining\\n    );\\n    paymentRemaining = paymentRemaining - guaranteedFutureAccruedInterestPayment;\\n\\n    uint256 additionalBalancePayment = MathUpgradeable.min(paymentRemaining, balanceRemaining);\\n    paymentRemaining = paymentRemaining - additionalBalancePayment;\\n\\n    return\\n      ILoan.PaymentAllocation({\\n        owedInterestPayment: owedInterestPayment,\\n        accruedInterestPayment: accruedInterestPayment + guaranteedFutureAccruedInterestPayment,\\n        principalPayment: principalPayment,\\n        additionalBalancePayment: additionalBalancePayment,\\n        paymentRemaining: paymentRemaining\\n      });\\n  }\\n\\n  /**\\n   * Calculates flat interest accrued over a period of time given constant principal.\\n   */\\n  function calculateInterest(\\n    uint256 secondsElapsed,\\n    uint256 principal,\\n    uint256 interestApr\\n  ) internal pure returns (uint256 interest) {\\n    uint256 totalInterestPerYear = (principal * interestApr) / INTEREST_DECIMALS;\\n    interest = (totalInterestPerYear * secondsElapsed) / SECONDS_PER_YEAR;\\n  }\\n\\n  /**\\n   * Calculates interest accrued along with late interest over a given time period given constant principal\\n   *\\n   */\\n  function calculateInterest(\\n    uint256 start,\\n    uint256 end,\\n    uint256 lateFeesStartsAt,\\n    uint256 principal,\\n    uint256 interestApr,\\n    uint256 lateInterestApr\\n  ) internal pure returns (uint256 interest) {\\n    if (end <= start) return 0;\\n    uint256 totalDuration = end - start;\\n    interest = calculateInterest(totalDuration, principal, interestApr);\\n    if (lateFeesStartsAt < end) {\\n      uint256 lateDuration = end.saturatingSub(MathUpgradeable.max(lateFeesStartsAt, start));\\n      interest += calculateInterest(lateDuration, principal, lateInterestApr);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf173509c9f4d9530c75b3f4c8194a54fdbc1823f66ca515476ca09a06a2f75fb\"},\"contracts/protocol/core/callable/CallableLoanConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.17;\\npragma experimental ABIEncoderV2;\\n\\nimport {ConfigOptions} from \\\"../ConfigOptions.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../../interfaces/IGoldfinchConfig.sol\\\";\\nimport {IERC20UpgradeableWithDec} from \\\"../../../interfaces/IERC20UpgradeableWithDec.sol\\\";\\nimport {IPoolTokens} from \\\"../../../interfaces/IPoolTokens.sol\\\";\\nimport {IGoldfinchFactory} from \\\"../../../interfaces/IGoldfinchFactory.sol\\\";\\nimport {IGo} from \\\"../../../interfaces/IGo.sol\\\";\\nimport {ICurveLP} from \\\"../../../interfaces/ICurveLP.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the IGoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary CallableLoanConfigHelper {\\n  function getUSDC(IGoldfinchConfig config) internal view returns (IERC20UpgradeableWithDec) {\\n    return IERC20UpgradeableWithDec(usdcAddress(config));\\n  }\\n\\n  function getPoolTokens(IGoldfinchConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getGoldfinchFactory(IGoldfinchConfig config) internal view returns (IGoldfinchFactory) {\\n    return IGoldfinchFactory(goldfinchFactoryAddress(config));\\n  }\\n\\n  function getGo(IGoldfinchConfig config) internal view returns (IGo) {\\n    return IGo(goAddress(config));\\n  }\\n\\n  function creditLineImplementationAddress(\\n    IGoldfinchConfig config\\n  ) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  /// @dev deprecated because we no longer use GSN\\n  function trustedForwarderAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolTokensAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function goldfinchFactoryAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory));\\n  }\\n\\n  function gfiAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function cusdcContractAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function goAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Go));\\n  }\\n\\n  function stakingRewardsAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakingRewards));\\n  }\\n\\n  function getReserveDenominator(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(\\n    IGoldfinchConfig config\\n  ) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n}\\n\",\"keccak256\":\"0xc3ec0fb6d898af183ffa863890a31f8bc68586fa8b5250c112d53e1197e3a990\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/structs/CallableCreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\n\\n// import {console2 as console} from \\\"forge-std/console2.sol\\\";\\n\\nimport {ISchedule} from \\\"../../../../interfaces/ISchedule.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../../../interfaces/IGoldfinchConfig.sol\\\";\\nimport {SaturatingSub} from \\\"../../../../library/SaturatingSub.sol\\\";\\nimport {CallableLoanAccountant} from \\\"../CallableLoanAccountant.sol\\\";\\nimport {ILoan} from \\\"../../../../interfaces/ILoan.sol\\\";\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n\\nimport {Tranche} from \\\"./Tranche.sol\\\";\\nimport {Waterfall} from \\\"./Waterfall.sol\\\";\\nimport {PaymentSchedule, PaymentScheduleLogic} from \\\"../../schedule/PaymentSchedule.sol\\\";\\nimport {ConfigNumbersHelper} from \\\"../../ConfigNumbersHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n\\nusing CallableCreditLineLogic for CallableCreditLine global;\\n\\n// TODO: Add notes to fields to describe each (pseudo-natspec)\\n/// @param _numLockupPeriods Describes when newly submitted call requests are rolled over\\n///                          to the next call request period.\\n///                          Number of periods is relative to the end date of a call request period.\\n///                          e.g. if _numLockupPeriods is 2, then newly submitted call requests\\n///                          in the last two periods of a call request period will be rolled over\\n///                          to the next call request period.\\nstruct CallableCreditLine {\\n  IGoldfinchConfig _config;\\n  uint256 _limit;\\n  uint256 _interestApr;\\n  uint256 _lateAdditionalApr;\\n  //\\n  uint256 _numLockupPeriods;\\n  uint256 _checkpointedAsOf;\\n  uint256 _lastFullPaymentTime;\\n  // Similar idea to existing tranched pool credit lines\\n  uint256 _totalInterestOwedAtLastCheckpoint;\\n  // Similar idea to existing tranched pool credit lines\\n  uint256 _totalInterestAccruedAtLastCheckpoint;\\n  Waterfall _waterfall;\\n  PaymentSchedule _paymentSchedule;\\n  uint[50] __padding;\\n}\\n\\nstruct SettledTrancheInfo {\\n  uint principalDeposited;\\n  uint principalPaid;\\n  uint principalReserved;\\n  uint interestPaid;\\n}\\n\\nenum LoanState {\\n  FundingPeriod,\\n  DrawdownPeriod,\\n  InProgress\\n}\\n\\n/**\\n * Handles the accounting of borrower obligations in a callable loan.\\n * Allows\\n *  - Deposit of funds before the loan is drawn down.\\n *  - Drawdown of funds which should start the loan.\\n *  - Repayment of drawndown funds which should reduce the borrower's obligations according to the payment waterfall.\\n *  - Withdrawal of undrawndown funds whi\\n */\\nlibrary CallableCreditLineLogic {\\n  using SaturatingSub for uint256;\\n  using ConfigNumbersHelper for IGoldfinchConfig;\\n\\n  uint256 internal constant SECONDS_PER_DAY = 60 * 60 * 24;\\n\\n  function initialize(\\n    CallableCreditLine storage cl,\\n    IGoldfinchConfig _config,\\n    uint _interestApr,\\n    uint _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint _lateAdditionalApr,\\n    uint _limit\\n  ) internal {\\n    // NOTE: Acts as implicit initializer check - should not be able to reinitialize.\\n    require(cl._checkpointedAsOf == 0, \\\"NI\\\");\\n    cl._config = _config;\\n    cl._limit = _limit;\\n    cl._numLockupPeriods = _numLockupPeriods;\\n    cl._paymentSchedule = PaymentSchedule(_schedule, 0);\\n    cl._waterfall.initialize(_schedule.totalPrincipalPeriods());\\n    cl._interestApr = _interestApr;\\n    cl._lateAdditionalApr = _lateAdditionalApr;\\n    cl._checkpointedAsOf = block.timestamp;\\n\\n    // Initialize cumulative/settled values\\n    cl._lastFullPaymentTime = block.timestamp;\\n    cl._totalInterestAccruedAtLastCheckpoint = 0;\\n    cl._totalInterestOwedAtLastCheckpoint = 0;\\n    // MT - Waterfall must have at minimum 2 tranches in order to submit call requests\\n    require(cl._waterfall.numTranches() >= 2, \\\"MT\\\");\\n  }\\n\\n  /*================================================================================\\n  Main Write Functions\\n  ================================================================================*/\\n  /// @dev IS - Invalid loan state - Can only pay after drawdowns are disabled.\\n  function pay(\\n    CallableCreditLine storage cl,\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) internal {\\n    LoanState loanState = cl.loanState();\\n    require(loanState == LoanState.InProgress, \\\"IS\\\");\\n\\n    cl._waterfall.pay({\\n      principalAmount: principalPayment,\\n      interestAmount: interestPayment,\\n      reserveTranchesIndexStart: cl._paymentSchedule.currentPrincipalPeriod()\\n    });\\n\\n    if (cl.principalOwed() == 0 && cl.interestOwed() == 0) {\\n      cl._lastFullPaymentTime = block.timestamp;\\n    }\\n  }\\n\\n  /// @dev IS - Invalid loan state - Can only drawdown before first due date.\\n  /// @dev ED - Exceeds deposits - Can only drawdown as much as has been deposited.\\n  function drawdown(CallableCreditLine storage cl, uint256 amount) internal {\\n    LoanState loanState = cl.loanState();\\n    if (loanState == LoanState.FundingPeriod) {\\n      cl._paymentSchedule.startAt(block.timestamp);\\n      cl._lastFullPaymentTime = block.timestamp;\\n      loanState = cl.loanState();\\n      emit DepositsLocked(address(this));\\n      // Scaffolding: TODO: Remove - this invariant should always be true across all tests.\\n      require(\\n        loanState == LoanState.DrawdownPeriod,\\n        \\\"Scaffolding failure: Should be DrawdownPeriod\\\"\\n      );\\n    }\\n    require(loanState == LoanState.DrawdownPeriod, \\\"IS\\\");\\n\\n    require(\\n      amount + cl._waterfall.totalPrincipalOutstandingWithReserves() <=\\n        cl.totalPrincipalDeposited(),\\n      \\\"ED\\\"\\n    );\\n    cl._waterfall.drawdown(amount);\\n  }\\n\\n  /// @dev IS - Invalid loan state - Can only submit call requests after drawdown period has ended.\\n  /// @dev CL - In call request lockup period.\\n  /// @dev LC - In last call request period, cannot submit calls.\\n\\n  function submitCall(\\n    CallableCreditLine storage cl,\\n    uint256 amount\\n  )\\n    internal\\n    returns (\\n      uint principalDepositedMoved,\\n      uint principalPaidMoved,\\n      uint principalReservedMoved,\\n      uint interestMoved\\n    )\\n  {\\n    LoanState loanState = cl.loanState();\\n    require(loanState == LoanState.InProgress, \\\"IS\\\");\\n    uint currentPeriod = cl._paymentSchedule.currentPeriod();\\n    uint numPeriodsPerPrincipalPeriod = cl._paymentSchedule.periodsPerPrincipalPeriod();\\n    uint256 activeCallTranche = cl.activeCallSubmissionTrancheIndex();\\n    require(activeCallTranche < cl.uncalledCapitalTrancheIndex(), \\\"LC\\\");\\n    require(\\n      currentPeriod % numPeriodsPerPrincipalPeriod <\\n        numPeriodsPerPrincipalPeriod - cl._numLockupPeriods,\\n      \\\"CL\\\"\\n    );\\n\\n    return cl._waterfall.move(amount, cl.uncalledCapitalTrancheIndex(), activeCallTranche);\\n  }\\n\\n  /// @dev IS - Invalid loan state - Cannot deposit after first drawdown\\n  /// @dev EL - Exceeds limit - Total deposit cumulative amount more than limit\\n  function deposit(CallableCreditLine storage cl, uint256 amount) internal {\\n    LoanState loanState = cl.loanState();\\n    require(loanState == LoanState.FundingPeriod, \\\"IS\\\");\\n    require(amount + cl._waterfall.totalPrincipalDeposited() <= cl.limit(), \\\"EL\\\");\\n    cl._waterfall.deposit(cl.uncalledCapitalTrancheIndex(), amount);\\n  }\\n\\n  /// Withdraws funds from the specified tranche.\\n  /// @dev IS - Invalid loan state - Can only withdraw before first drawdown or when loan is in progress\\n  function withdraw(CallableCreditLine storage cl, uint256 trancheId, uint256 amount) internal {\\n    LoanState loanState = cl.loanState();\\n    require(loanState == LoanState.FundingPeriod, \\\"IS\\\");\\n    cl._waterfall.withdraw({trancheId: trancheId, principalAmount: amount});\\n  }\\n\\n  /// Settles payment reserves and updates the checkpointed values.\\n  function checkpoint(CallableCreditLine storage cl) internal {\\n    LoanState loanState = cl.loanState();\\n    if (loanState == LoanState.FundingPeriod) {\\n      return;\\n    }\\n\\n    uint256 currentlyActivePeriod = cl._paymentSchedule.currentPeriod();\\n    uint256 activePeriodAtLastCheckpoint = cl._paymentSchedule.periodAt(cl._checkpointedAsOf);\\n\\n    if (currentlyActivePeriod > activePeriodAtLastCheckpoint) {\\n      cl._waterfall.settleReserves(currentlyActivePeriod - 1);\\n    }\\n\\n    cl._lastFullPaymentTime = cl.lastFullPaymentTime();\\n\\n    uint totalInterestAccrued = cl.totalInterestAccrued();\\n    uint totalInterestOwed = cl.totalInterestOwed();\\n\\n    cl._totalInterestAccruedAtLastCheckpoint = totalInterestAccrued;\\n    cl._totalInterestOwedAtLastCheckpoint = totalInterestOwed;\\n    cl._checkpointedAsOf = block.timestamp;\\n  }\\n\\n  /*================================================================================\\n  Main View Functions\\n  ================================================================================*/\\n  function loanState(CallableCreditLine storage cl) internal view returns (LoanState) {\\n    if (\\n      cl._paymentSchedule.isActive() &&\\n      block.timestamp > cl.termStartTime() + cl._config.getDrawdownPeriodInSeconds()\\n    ) {\\n      return LoanState.InProgress;\\n    } else if (cl._paymentSchedule.isActive()) {\\n      return LoanState.DrawdownPeriod;\\n    } else {\\n      return LoanState.FundingPeriod;\\n    }\\n  }\\n\\n  function uncalledCapitalTrancheIndex(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint32) {\\n    return uint32(cl._waterfall.numTranches() - 1);\\n  }\\n\\n  function principalOwedAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint returnedPrincipalOwed) {\\n    return\\n      cl.totalPrincipalOwedAt(timestamp).saturatingSub(\\n        cl._waterfall.totalPrincipalPaidAfterSettlementUpToTranche(\\n          cl._paymentSchedule.principalPeriodAt(timestamp)\\n        )\\n      );\\n  }\\n\\n  function principalOwed(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl.principalOwedAt(block.timestamp);\\n  }\\n\\n  function totalPrincipalOwed(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.totalPrincipalOwedAt(block.timestamp);\\n  }\\n\\n  function totalPrincipalOwedAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    return\\n      cl._waterfall.totalPrincipalDepositedUpToTranche(\\n        cl._paymentSchedule.principalPeriodAt(timestamp)\\n      );\\n  }\\n\\n  function totalPrincipalPaid(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl.totalPrincipalPaidAt(block.timestamp);\\n  }\\n\\n  function totalInterestOwed(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl.totalInterestOwedAt(block.timestamp);\\n  }\\n\\n  /// Calculates total interest owed at a given timestamp.\\n  /// IT: Invalid timestamp - timestamp must be after the last checkpoint.\\n\\n  function totalInterestOwedAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    require(timestamp >= cl._checkpointedAsOf, \\\"IT\\\");\\n    // After loan maturity there is no concept of additional interest. All interest accrued\\n    // automatically becomes interest owed.\\n    if (timestamp > cl.termEndTime()) {\\n      return cl.totalInterestAccruedAt(timestamp);\\n    }\\n\\n    uint256 lastInterestDueTimeAtTimestamp = cl._paymentSchedule.previousInterestDueTimeAt(\\n      timestamp\\n    );\\n\\n    if (lastInterestDueTimeAtTimestamp <= cl._checkpointedAsOf) {\\n      return cl._totalInterestOwedAtLastCheckpoint;\\n    } else {\\n      return cl.totalInterestAccruedAt(lastInterestDueTimeAtTimestamp);\\n    }\\n  }\\n\\n  function interestOwed(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl.interestOwedAt(block.timestamp);\\n  }\\n\\n  /// Calculates total interest owed at a given timestamp.\\n  /// Assumes that principal outstanding is constant from now until the given `timestamp`.\\n  /// @notice IT: Invalid timestamp\\n  function interestOwedAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    require(timestamp >= cl._checkpointedAsOf, \\\"IT\\\");\\n    return cl.totalInterestOwedAt(timestamp).saturatingSub(cl.totalInterestPaid());\\n  }\\n\\n  /// Interest accrued up to `block.timestamp`\\n  function interestAccrued(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl.interestAccruedAt(block.timestamp);\\n  }\\n\\n  /// Interest accrued up to `timestamp`\\n  /// PT: Past timestamp - timestamp must be now or in the future.\\n  function interestAccruedAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    require(timestamp >= block.timestamp, \\\"PT\\\");\\n    return\\n      cl.totalInterestAccruedAt(timestamp).saturatingSub(\\n        MathUpgradeable.max(cl._waterfall.totalInterestPaid(), cl.totalInterestOwedAt(timestamp))\\n      );\\n  }\\n\\n  /* Test cases\\n   *S = Start B = Buffer Applied At L = Late Fees Start At E = End\\n   *SBLE\\n   *SBEL\\n   *SLEB\\n   *SLBE\\n   *SELB\\n   *SEBL\\n\\n   *LSEB\\n   *LSBE\\n   *LBSE(INVALID)\\n   *LBES(INVALID)\\n   *LESB(INVALID)\\n   *LEBS(INVALID) \\n\\n   *BSLE (INVALID)\\n   *BSEL (INVALID)\\n   *BLSE (INVALID)\\n   *BLES (INVALID)\\n   *BESL (INVALID)\\n   *BELS (INVALID)\\n   */\\n\\n  /// Calculates interest accrued over the duration bounded by the `cl._checkpointedAsOf` and `end` timestamps.\\n  /// Assumes cl._waterfall.totalPrincipalOutstanding() for the principal balance that the interest is applied to.\\n  function totalInterestAccruedAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256 totalInterestAccruedReturned) {\\n    require(timestamp >= cl._checkpointedAsOf, \\\"IT\\\");\\n    if (!cl._paymentSchedule.isActive()) {\\n      return 0;\\n    }\\n    totalInterestAccruedReturned = cl._totalInterestAccruedAtLastCheckpoint;\\n    uint firstInterestEndPoint = timestamp;\\n    if (cl._checkpointedAsOf > cl.termEndTime()) {} else {\\n      uint256 settleBalancesAt = cl._paymentSchedule.nextPrincipalDueTimeAt(cl._checkpointedAsOf);\\n      firstInterestEndPoint = MathUpgradeable.min(settleBalancesAt, timestamp);\\n    }\\n\\n    // TODO: Test scenario where cl._lastFullPaymentTime falls on due date.\\n    uint256 lateFeesStartAt = MathUpgradeable.max(\\n      cl._checkpointedAsOf,\\n      cl._paymentSchedule.nextDueTimeAt(cl._lastFullPaymentTime) +\\n        (cl._config.getLatenessGracePeriodInDays() * (SECONDS_PER_DAY))\\n    );\\n\\n    // Calculate interest accrued before balances are settled.\\n    totalInterestAccruedReturned += CallableLoanAccountant.calculateInterest(\\n      cl._checkpointedAsOf,\\n      firstInterestEndPoint,\\n      lateFeesStartAt,\\n      cl._waterfall.totalPrincipalOutstandingWithoutReserves(),\\n      cl._interestApr,\\n      cl._lateAdditionalApr\\n    );\\n\\n    if (firstInterestEndPoint < timestamp) {\\n      // Calculate interest accrued after balances are settled.\\n      totalInterestAccruedReturned += CallableLoanAccountant.calculateInterest(\\n        firstInterestEndPoint,\\n        timestamp,\\n        lateFeesStartAt,\\n        cl._waterfall.totalPrincipalOutstandingWithReserves(),\\n        cl._interestApr,\\n        cl._lateAdditionalApr\\n      );\\n    }\\n  }\\n\\n  function totalPrincipalPaidAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    uint alreadyPaidPrincipal = cl._waterfall.totalPrincipalPaid();\\n    if (!cl.isActive()) {\\n      return alreadyPaidPrincipal;\\n    }\\n\\n    uint activeCallRequestPeriodAtTimestamp = cl._paymentSchedule.principalPeriodAt(timestamp);\\n    uint activeCallRequestPeriodAtCheckpoint = cl._paymentSchedule.principalPeriodAt(\\n      cl._checkpointedAsOf\\n    );\\n\\n    // Unsettled principal from previous call request periods which will settle.\\n    uint reservedPrincipalWhichWillSettle = cl._waterfall.totalPrincipalReservedUpToTranche(\\n      activeCallRequestPeriodAtTimestamp\\n    );\\n\\n    /// If we entered a new principal period since checkpoint,\\n    /// we should settle reserved principal in the uncalled tranche,\\n    /// UNLESS\\n    /// Uncalled capital has already been counted due to principalPeriod being the uncalled tranche.\\n\\n    if (\\n      activeCallRequestPeriodAtTimestamp > activeCallRequestPeriodAtCheckpoint &&\\n      activeCallRequestPeriodAtTimestamp <= cl.uncalledCapitalTrancheIndex()\\n    ) {\\n      reservedPrincipalWhichWillSettle += cl\\n        ._waterfall\\n        .getTranche(cl.uncalledCapitalTrancheIndex())\\n        .principalReserved();\\n    }\\n\\n    return alreadyPaidPrincipal + reservedPrincipalWhichWillSettle;\\n  }\\n\\n  function isLate(CallableCreditLine storage cl) internal view returns (bool) {\\n    return cl.isLate(block.timestamp);\\n  }\\n\\n  function isLate(CallableCreditLine storage cl, uint256 timestamp) internal view returns (bool) {\\n    if (cl.loanState() != LoanState.InProgress) {\\n      return false;\\n    }\\n    uint256 gracePeriodInSeconds = cl._config.getLatenessGracePeriodInDays() * SECONDS_PER_DAY;\\n    uint256 oldestUnpaidDueTime = cl._paymentSchedule.nextDueTimeAt(cl.lastFullPaymentTime());\\n    return\\n      (cl.totalPrincipalOwedAt(timestamp) > 0 || cl.totalInterestOwedAt(timestamp) > 0) &&\\n      timestamp > oldestUnpaidDueTime + gracePeriodInSeconds;\\n  }\\n\\n  function totalPrincipalOutstandingWithoutReserves(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._waterfall.totalPrincipalOutstandingWithoutReserves();\\n  }\\n\\n  /// Returns the total amount of principal outstanding - including reserved principal.\\n  function totalPrincipalOutstanding(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._waterfall.totalPrincipalOutstandingWithReserves();\\n  }\\n\\n  function totalInterestAccrued(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.totalInterestAccruedAt(block.timestamp);\\n  }\\n\\n  function lastFullPaymentTime(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint fullPaymentTime) {\\n    fullPaymentTime = cl._lastFullPaymentTime;\\n    // Similarly if !isActive(), we should bail out early since loan has not begun &&\\n    // paymentSchedule calls will revert.\\n    if (cl.loanState() != LoanState.InProgress) {\\n      return block.timestamp;\\n    }\\n    uint256 startPeriod = cl._paymentSchedule.periodAt(cl._checkpointedAsOf);\\n    uint256 currentlyActivePeriod = cl._paymentSchedule.currentPeriod();\\n\\n    for (uint256 periodIndex = startPeriod; periodIndex < currentlyActivePeriod; periodIndex++) {\\n      uint256 periodEndTime = cl._paymentSchedule.periodEndTime(periodIndex);\\n\\n      if (cl.principalOwedAt(periodEndTime) == 0 && cl.interestOwedAt(periodEndTime) == 0) {\\n        fullPaymentTime = periodEndTime;\\n      } else {\\n        // If we hit a period where there is still principal or interest owed, we can stop.\\n        break;\\n      }\\n    }\\n  }\\n\\n  function proportionalCallablePrincipal(\\n    CallableCreditLine storage cl,\\n    uint256 trancheId,\\n    uint256 principalDeposited\\n  ) internal view returns (uint256) {\\n    return\\n      cl._waterfall.getTranche(trancheId).proportionalPrincipalOutstandingWithoutReserves(\\n        principalDeposited\\n      );\\n  }\\n\\n  /// Returns the index of the tranche which current call requests should be submitted to.\\n  function activeCallSubmissionTrancheIndex(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint activeTrancheIndex) {\\n    uint callSubmissionPeriod = cl._paymentSchedule.currentPeriod() + cl._numLockupPeriods;\\n    uint callSubmissionPeriodEnd = cl._paymentSchedule.periodEndTime(callSubmissionPeriod) - 1;\\n    return cl._paymentSchedule.principalPeriodAt(callSubmissionPeriodEnd);\\n  }\\n\\n  function proportionalInterestAndPrincipalAvailable(\\n    CallableCreditLine storage cl,\\n    uint trancheId,\\n    uint256 principal,\\n    uint feePercent\\n  ) internal view returns (uint, uint) {\\n    if (cl.loanState() != LoanState.InProgress) {\\n      return\\n        cl._waterfall.proportionalInterestAndPrincipalAvailable(trancheId, principal, feePercent);\\n    }\\n    bool uncalledTrancheAndNeedsSettling = trancheId == cl.uncalledCapitalTrancheIndex() &&\\n      cl._paymentSchedule.principalPeriodAt(cl._checkpointedAsOf) <\\n      cl._paymentSchedule.currentPrincipalPeriod();\\n    bool callRequestTrancheAndNeedsSettling = trancheId < cl.uncalledCapitalTrancheIndex() &&\\n      trancheId < cl._paymentSchedule.currentPrincipalPeriod();\\n    bool needsSettling = uncalledTrancheAndNeedsSettling || callRequestTrancheAndNeedsSettling;\\n\\n    return\\n      needsSettling\\n        ? cl._waterfall.proportionalInterestAndPrincipalAvailableAfterApplyReserves(\\n          trancheId,\\n          principal,\\n          feePercent\\n        )\\n        : cl._waterfall.proportionalInterestAndPrincipalAvailable(trancheId, principal, feePercent);\\n  }\\n\\n  /// Returns the balances of the given tranche - only settling principal if the tranche should be settled.\\n  function getSettledTrancheInfo(\\n    CallableCreditLine storage cl,\\n    uint trancheId\\n  ) internal view returns (SettledTrancheInfo memory settledTrancheInfo) {\\n    Tranche storage tranche = cl._waterfall.getTranche(trancheId);\\n    settledTrancheInfo.interestPaid = tranche.interestPaid();\\n    settledTrancheInfo.principalDeposited = tranche.principalDeposited();\\n\\n    if (cl.isActive() && trancheId < cl._paymentSchedule.currentPrincipalPeriod()) {\\n      settledTrancheInfo.principalPaid = tranche.principalPaid() + tranche.principalReserved();\\n      settledTrancheInfo.principalReserved = 0;\\n    } else {\\n      settledTrancheInfo.principalPaid = tranche.principalPaid();\\n      settledTrancheInfo.principalReserved = tranche.principalReserved();\\n    }\\n  }\\n\\n  function totalInterestPaid(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._waterfall.totalInterestPaid();\\n  }\\n\\n  function totalPrincipalDeposited(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._waterfall.totalPrincipalDeposited();\\n  }\\n\\n  /*================================================================================\\n  Payment Schedule Proxy Functions\\n  ================================================================================*/\\n\\n  function isActive(CallableCreditLine storage cl) internal view returns (bool) {\\n    return cl._paymentSchedule.isActive();\\n  }\\n\\n  function withinPrincipalGracePeriod(CallableCreditLine storage cl) internal view returns (bool) {\\n    return cl._paymentSchedule.withinPrincipalGracePeriodAt(block.timestamp);\\n  }\\n\\n  function principalPeriodAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    return cl._paymentSchedule.principalPeriodAt(timestamp);\\n  }\\n\\n  function nextPrincipalDueTime(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl.nextPrincipalDueTimeAt(block.timestamp);\\n  }\\n\\n  function nextPrincipalDueTimeAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    return cl._paymentSchedule.nextPrincipalDueTimeAt(timestamp);\\n  }\\n\\n  function nextInterestDueTimeAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    return cl._paymentSchedule.nextInterestDueTimeAt(timestamp);\\n  }\\n\\n  function nextDueTime(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl.nextDueTimeAt(block.timestamp);\\n  }\\n\\n  function nextDueTimeAt(\\n    CallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    return cl._paymentSchedule.nextDueTimeAt(timestamp);\\n  }\\n\\n  function termStartTime(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._paymentSchedule.termStartTime();\\n  }\\n\\n  function termEndTime(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._paymentSchedule.termEndTime();\\n  }\\n\\n  /*================================================================================\\n  Static Struct Config Getters\\n  ================================================================================*/\\n  function interestApr(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._interestApr;\\n  }\\n\\n  function lateFeeAdditionalApr(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._lateAdditionalApr;\\n  }\\n\\n  function limit(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._limit;\\n  }\\n\\n  function checkpointedAsOf(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._checkpointedAsOf;\\n  }\\n\\n  function lateFeeApr(CallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._lateAdditionalApr;\\n  }\\n\\n  event DepositsLocked(address indexed loan);\\n}\\n\",\"keccak256\":\"0xa45ff38813ca8fd356cdd553b0110e8025e651776d439e6218c3823cc7605342\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/structs/StaleCallableCreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISchedule} from \\\"../../../../interfaces/ISchedule.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../../../interfaces/IGoldfinchConfig.sol\\\";\\n\\nimport {Waterfall} from \\\"./Waterfall.sol\\\";\\nimport {CallableCreditLine, CallableCreditLineLogic, SettledTrancheInfo} from \\\"./CallableCreditLine.sol\\\";\\nimport {PaymentSchedule, PaymentScheduleLogic} from \\\"../../schedule/PaymentSchedule.sol\\\";\\n\\nstruct StaleCallableCreditLine {\\n  CallableCreditLine _cl;\\n}\\n\\nusing StaleCallableCreditLineLogic for StaleCallableCreditLine global;\\n\\n/**\\n * Simple wrapper around CallableCreditLine which returns a checkpointed\\n * CallableCreditLine after checkpoint() is called.\\n */\\nlibrary StaleCallableCreditLineLogic {\\n  function initialize(\\n    StaleCallableCreditLine storage cl,\\n    IGoldfinchConfig _config,\\n    uint _interestApr,\\n    uint _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint _lateAdditionalApr,\\n    uint _limit\\n  ) internal {\\n    cl._cl.initialize(\\n      _config,\\n      _interestApr,\\n      _numLockupPeriods,\\n      _schedule,\\n      _lateAdditionalApr,\\n      _limit\\n    );\\n  }\\n\\n  function checkpoint(\\n    StaleCallableCreditLine storage cl\\n  ) internal returns (CallableCreditLine storage) {\\n    cl._cl.checkpoint();\\n    return cl._cl;\\n  }\\n\\n  function schedule(StaleCallableCreditLine storage cl) internal view returns (ISchedule) {\\n    return cl._cl._paymentSchedule.schedule;\\n  }\\n\\n  function termStartTime(StaleCallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._cl.termStartTime();\\n  }\\n\\n  function lastFullPaymentTime(StaleCallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._cl.lastFullPaymentTime();\\n  }\\n\\n  function limit(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.limit();\\n  }\\n\\n  function interestApr(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.interestApr();\\n  }\\n\\n  function lateFeeApr(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.lateFeeApr();\\n  }\\n\\n  function isLate(StaleCallableCreditLine storage cl) internal view returns (bool) {\\n    return cl._cl.isLate();\\n  }\\n\\n  function checkpointedAsOf(StaleCallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._cl.checkpointedAsOf();\\n  }\\n\\n  function interestOwed(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.interestOwed();\\n  }\\n\\n  function principalOwed(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.principalOwed();\\n  }\\n\\n  function interestOwedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.interestOwedAt(timestamp);\\n  }\\n\\n  function principalOwedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.principalOwedAt(timestamp);\\n  }\\n\\n  function totalInterestOwedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalInterestOwedAt(timestamp);\\n  }\\n\\n  function totalPrincipalOwedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalOwedAt(timestamp);\\n  }\\n\\n  function totalInterestOwed(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.totalInterestOwed();\\n  }\\n\\n  function totalPrincipalOwed(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalOwed();\\n  }\\n\\n  function totalPrincipalOutstanding(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalOutstanding();\\n  }\\n\\n  function totalPrincipalOutstandingWithoutReserves(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalOutstandingWithoutReserves();\\n  }\\n\\n  function nextInterestDueTimeAt(\\n    StaleCallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    return cl._cl.nextInterestDueTimeAt(timestamp);\\n  }\\n\\n  function nextPrincipalDueTime(StaleCallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._cl.nextPrincipalDueTime();\\n  }\\n\\n  function nextPrincipalDueTimeAt(\\n    StaleCallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    return cl._cl.nextPrincipalDueTimeAt(timestamp);\\n  }\\n\\n  function nextDueTimeAt(\\n    StaleCallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint) {\\n    return cl._cl.nextDueTimeAt(timestamp);\\n  }\\n\\n  function nextDueTime(StaleCallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._cl.nextDueTime();\\n  }\\n\\n  function termEndTime(StaleCallableCreditLine storage cl) internal view returns (uint) {\\n    return cl._cl.termEndTime();\\n  }\\n\\n  function proportionalCallablePrincipal(\\n    StaleCallableCreditLine storage cl,\\n    uint trancheId,\\n    uint principalDeposited\\n  ) internal view returns (uint) {\\n    return cl._cl.proportionalCallablePrincipal(trancheId, principalDeposited);\\n  }\\n\\n  function proportionalInterestAndPrincipalAvailable(\\n    StaleCallableCreditLine storage cl,\\n    uint trancheId,\\n    uint principal,\\n    uint feePercent\\n  ) internal view returns (uint, uint) {\\n    return\\n      cl._cl.proportionalInterestAndPrincipalAvailable({\\n        trancheId: trancheId,\\n        principal: principal,\\n        feePercent: feePercent\\n      });\\n  }\\n\\n  function totalInterestAccrued(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalInterestAccrued();\\n  }\\n\\n  function totalInterestAccruedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalInterestAccruedAt(timestamp);\\n  }\\n\\n  function interestAccrued(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.interestAccrued();\\n  }\\n\\n  function interestAccruedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.interestAccruedAt(timestamp);\\n  }\\n\\n  function totalInterestPaid(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.totalInterestPaid();\\n  }\\n\\n  function totalPrincipalPaidAt(\\n    StaleCallableCreditLine storage cl,\\n    uint timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalPaidAt(timestamp);\\n  }\\n\\n  function totalPrincipalPaid(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalPaid();\\n  }\\n\\n  function withinPrincipalGracePeriod(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (bool) {\\n    return cl._cl.withinPrincipalGracePeriod();\\n  }\\n\\n  function uncalledCapitalTrancheIndex(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.uncalledCapitalTrancheIndex();\\n  }\\n\\n  function getSettledTrancheInfo(\\n    StaleCallableCreditLine storage cl,\\n    uint256 trancheId\\n  ) internal view returns (SettledTrancheInfo memory) {\\n    return cl._cl.getSettledTrancheInfo(trancheId);\\n  }\\n}\\n\",\"keccak256\":\"0x8d6575c9906b2c454e3a0b75376f0b52d6a07e98d1b35d9f2aab064ca24151ff\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/structs/Tranche.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n\\nusing TrancheLogic for Tranche global;\\n\\nstruct Tranche {\\n  uint _principalDeposited;\\n  uint _principalPaid;\\n  uint _principalReserved;\\n  uint _interestPaid;\\n  // TODO: verify that this works for upgradeability\\n  uint[50] __padding;\\n}\\n\\nlibrary TrancheLogic {\\n  function settleReserves(Tranche storage t) internal {\\n    t._principalPaid += t._principalReserved;\\n    t._principalReserved = 0;\\n  }\\n\\n  function pay(Tranche storage t, uint principalAmount, uint interestAmount) internal {\\n    assert(t._principalPaid + t._principalReserved + principalAmount <= t.principalDeposited());\\n\\n    t._interestPaid += interestAmount;\\n    t._principalPaid += principalAmount;\\n  }\\n\\n  function reserve(Tranche storage t, uint principalAmount, uint interestAmount) internal {\\n    assert(t._principalPaid + t._principalReserved + principalAmount <= t.principalDeposited());\\n\\n    t._interestPaid += interestAmount;\\n    t._principalReserved += principalAmount;\\n  }\\n\\n  /**\\n   * Returns principal outstanding, omitting _principalReserve.\\n   */\\n  function principalOutstandingWithoutReserves(Tranche storage t) internal view returns (uint) {\\n    return t._principalDeposited - t._principalPaid;\\n  }\\n\\n  /**\\n   * Returns principal outstanding, taking into account any _principalReserve.\\n   */\\n  function principalOutstandingWithReserves(Tranche storage t) internal view returns (uint) {\\n    return t._principalDeposited - t._principalPaid - t._principalReserved;\\n  }\\n\\n  /**\\n   * @notice Withdraw principal from tranche - effectively nullifying the deposit.\\n   * @dev reverts if interest has been paid to tranche\\n   */\\n  function withdraw(Tranche storage t, uint principal) internal {\\n    assert(t._interestPaid == 0);\\n    t._principalDeposited -= principal;\\n    t._principalPaid -= principal;\\n  }\\n\\n  ///@notice remove `principalOutstanding` from the Tranche and its corresponding interest.\\n  ///        Take as much reserved principal as possible.\\n  ///        Only applicable to the uncalled tranche.\\n  ///@dev    IT: Invalid take - principal depositeed must always be larger than principalPaid + principalReserved\\n  function take(\\n    Tranche storage t,\\n    uint principalOutstandingToTake\\n  )\\n    internal\\n    returns (\\n      uint principalDepositedTaken,\\n      uint principalPaidTaken,\\n      uint principalReservedTaken,\\n      uint interestTaken\\n    )\\n  {\\n    require(principalOutstandingToTake <= t._principalDeposited - t._principalPaid, \\\"TOO_MUCH\\\");\\n    principalReservedTaken = Math.min(t._principalReserved, principalOutstandingToTake);\\n    principalPaidTaken =\\n      (t._principalPaid * principalOutstandingToTake) /\\n      (t._principalDeposited - t._principalPaid);\\n\\n    principalDepositedTaken = principalOutstandingToTake + principalPaidTaken;\\n    interestTaken = (t._interestPaid * principalDepositedTaken) / t._principalDeposited;\\n\\n    t._principalPaid -= principalPaidTaken;\\n    t._interestPaid -= interestTaken;\\n    t._principalDeposited -= principalDepositedTaken;\\n    t._principalReserved -= principalReservedTaken;\\n    require(t._principalDeposited >= t._principalPaid + t._principalReserved, \\\"IT\\\");\\n  }\\n\\n  // depositing into the tranche for the first time(uncalled)\\n  function deposit(Tranche storage t, uint principal) internal {\\n    // SAFETY but gas cost\\n    assert(t._interestPaid == 0);\\n    t._principalDeposited += principal;\\n    // NOTE: this is so that principalOutstanding = 0 before drawdown\\n    t._principalPaid += principal;\\n  }\\n\\n  function addToBalances(\\n    Tranche storage t,\\n    uint addToPrincipalDeposited,\\n    uint addToPrincipalPaid,\\n    uint addToPrincipalReserved,\\n    uint addToInterestPaid\\n  ) internal {\\n    t._principalDeposited += addToPrincipalDeposited;\\n    t._principalPaid += addToPrincipalPaid;\\n    t._principalReserved += addToPrincipalReserved;\\n    t._interestPaid += addToInterestPaid;\\n  }\\n\\n  function principalDeposited(Tranche storage t) internal view returns (uint) {\\n    return t._principalDeposited;\\n  }\\n\\n  /// @notice Returns the amount of principal paid to the tranche\\n  function principalPaid(Tranche storage t) internal view returns (uint) {\\n    return t._principalPaid;\\n  }\\n\\n  /// @notice Returns the amount of principal paid to the tranche\\n  function principalReserved(Tranche storage t) internal view returns (uint) {\\n    return t._principalReserved;\\n  }\\n\\n  /// @notice Returns the amount of principal paid + principal reserved\\n  function principalPaidAfterSettlement(Tranche storage t) internal view returns (uint) {\\n    return t._principalPaid + t._principalReserved;\\n  }\\n\\n  function interestPaid(Tranche storage t) internal view returns (uint) {\\n    return t._interestPaid;\\n  }\\n\\n  // returns principal, interest withdrawable\\n  function proportionalInterestAndPrincipalAvailableAfterApplyingReserves(\\n    Tranche storage t,\\n    uint256 principalAmount,\\n    uint feePercent\\n  ) internal view returns (uint, uint) {\\n    return (\\n      t.proportionalInterestWithdrawable(principalAmount, feePercent),\\n      t.proportionalPrincipalAvailableAfterApplyingReserves(principalAmount)\\n    );\\n  }\\n\\n  function proportionalInterestAndPrincipalAvailable(\\n    Tranche storage t,\\n    uint256 principalAmount,\\n    uint feePercent\\n  ) internal view returns (uint, uint) {\\n    return (\\n      t.proportionalInterestWithdrawable(principalAmount, feePercent),\\n      t.proportionalPrincipalWithdrawable(principalAmount)\\n    );\\n  }\\n\\n  function proportionalPrincipalAvailableAfterApplyingReserves(\\n    Tranche storage t,\\n    uint256 principalAmount\\n  ) internal view returns (uint) {\\n    return ((t.principalPaid() + t._principalReserved) * principalAmount) / t.principalDeposited();\\n  }\\n\\n  function proportionalPrincipalWithdrawable(\\n    Tranche storage t,\\n    uint256 principalAmount\\n  ) internal view returns (uint) {\\n    return (t.principalPaid() * principalAmount) / t.principalDeposited();\\n  }\\n\\n  function proportionalPrincipalOutstandingWithoutReserves(\\n    Tranche storage t,\\n    uint256 principalAmount\\n  ) internal view returns (uint) {\\n    return (t.principalOutstandingWithoutReserves() * principalAmount) / t.principalDeposited();\\n  }\\n\\n  function proportionalInterestWithdrawable(\\n    Tranche storage t,\\n    uint256 principalAmount,\\n    uint feePercent\\n  ) internal view returns (uint) {\\n    return\\n      (t.interestPaid() * principalAmount * percentLessFee(feePercent)) /\\n      (t.principalDeposited() * 100);\\n  }\\n\\n  /// Updates the tranche as the result of a drawdown\\n  /// @dev DP: drawdown principal amount exceeds principal paid\\n  function drawdown(Tranche storage t, uint principalAmount) internal {\\n    require(principalAmount <= t._principalPaid, \\\"EP\\\");\\n    t._principalPaid -= principalAmount;\\n  }\\n\\n  function percentLessFee(uint feePercent) private pure returns (uint) {\\n    return 100 - feePercent;\\n  }\\n}\\n\",\"keccak256\":\"0x9cd291334de463e45ecd05137393f78b0d14c0b15bb68bc476114c9dba0eea73\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/structs/Waterfall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\n\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n// import {console2 as console} from \\\"forge-std/console2.sol\\\";\\nimport {Tranche} from \\\"./Tranche.sol\\\";\\n\\nusing Math for uint256;\\n\\nstruct Waterfall {\\n  Tranche[] _tranches;\\n  uint[50] __padding;\\n}\\n\\nusing WaterfallLogic for Waterfall global;\\n\\nlibrary WaterfallLogic {\\n  function initialize(Waterfall storage w, uint nTranches) internal returns (Waterfall storage) {\\n    for (uint i = 0; i < nTranches; i++) {\\n      Tranche memory t;\\n      w._tranches.push(t);\\n    }\\n    return w;\\n  }\\n\\n  function getTranche(Waterfall storage w, uint trancheId) internal view returns (Tranche storage) {\\n    return w._tranches[trancheId];\\n  }\\n\\n  function numTranches(Waterfall storage w) internal view returns (uint) {\\n    return w._tranches.length;\\n  }\\n\\n  /// @notice apply a payment to tranches in the waterfall.\\n  ///         The principal payment is applied to the tranches in order of priority\\n  ///         The interest payment is applied to the tranches pro rata\\n  /// @param principalAmount: the amount of principal to apply to the tranches\\n  /// @param interestAmount: the amount of interest to apply to the tranches\\n  /// @param reserveTranchesIndexStart: After this index (inclusive), tranches will reserve principal\\n  /// @dev OP: overpayment\\n  /// @dev NB: no balance\\n  function pay(\\n    Waterfall storage w,\\n    uint principalAmount,\\n    uint interestAmount,\\n    uint reserveTranchesIndexStart\\n  ) internal {\\n    uint existingPrincipalOutstandingWithoutReserves = w.totalPrincipalOutstandingWithoutReserves();\\n    require(existingPrincipalOutstandingWithoutReserves > 0, \\\"NB\\\");\\n\\n    // assume that tranches are ordered in priority. First is highest priority\\n    // NOTE: if we start i at the earliest unpaid tranche/quarter and end at the current quarter\\n    //        then we skip iterations that would result in a no-op\\n\\n    for (uint i = 0; i < w._tranches.length; i++) {\\n      Tranche storage tranche = w._tranches[i];\\n      uint proRataInterestPayment = (interestAmount *\\n        tranche.principalOutstandingWithoutReserves()) /\\n        existingPrincipalOutstandingWithoutReserves;\\n      uint principalPayment = tranche.principalOutstandingWithReserves().min(principalAmount);\\n      // subtract so that future iterations can't re-allocate a principal payment\\n      principalAmount -= principalPayment;\\n      if (i < reserveTranchesIndexStart) {\\n        tranche.pay({principalAmount: principalPayment, interestAmount: proRataInterestPayment});\\n      } else {\\n        tranche.reserve({\\n          principalAmount: principalPayment,\\n          interestAmount: proRataInterestPayment\\n        });\\n      }\\n    }\\n    require(principalAmount == 0, \\\"OP\\\");\\n  }\\n\\n  function drawdown(Waterfall storage w, uint principalAmount) internal {\\n    Tranche storage tranche = w.getTranche(w.numTranches() - 1);\\n    tranche.drawdown(principalAmount);\\n  }\\n\\n  /**\\n   * @notice Move principal and paid interest from one tranche to another\\n   */\\n  function move(\\n    Waterfall storage w,\\n    uint principalOutstanding,\\n    uint fromTrancheId,\\n    uint toTrancheId\\n  )\\n    internal\\n    returns (uint principalDeposited, uint principalPaid, uint principalReserved, uint interestPaid)\\n  {\\n    (principalDeposited, principalPaid, principalReserved, interestPaid) = w\\n      .getTranche(fromTrancheId)\\n      .take(principalOutstanding);\\n\\n    w.getTranche(toTrancheId).addToBalances(\\n      principalDeposited,\\n      principalPaid,\\n      principalReserved,\\n      interestPaid\\n    );\\n  }\\n\\n  /**\\n   * @notice Withdraw principal when the tranche is not locked\\n            Assumes that the caller is allowed to withdraw\\n   */\\n  function withdraw(Waterfall storage w, uint trancheId, uint principalAmount) internal {\\n    return w._tranches[trancheId].withdraw(principalAmount);\\n  }\\n\\n  function deposit(Waterfall storage w, uint trancheId, uint principalAmount) internal {\\n    return w._tranches[trancheId].deposit(principalAmount);\\n  }\\n\\n  /// Settle all past due tranches as well as the last tranche.\\n  /// @param dueTrancheIndex - Index of the tranche that is due. All previous tranches are also due.\\n  function settleReserves(Waterfall storage w, uint dueTrancheIndex) internal {\\n    uint lastTrancheIndex = w.numTranches() - 1;\\n    Tranche storage lastTranche = w._tranches[lastTrancheIndex];\\n    lastTranche.settleReserves();\\n    for (uint i = 0; i <= dueTrancheIndex && i < lastTrancheIndex; i++) {\\n      w._tranches[i].settleReserves();\\n    }\\n  }\\n\\n  function proportionalPrincipalOutstandingWithoutReserves(\\n    Waterfall storage w,\\n    uint256 trancheId,\\n    uint256 principalDeposited\\n  ) internal view returns (uint256) {\\n    return\\n      w.getTranche(trancheId).proportionalPrincipalOutstandingWithoutReserves(principalDeposited);\\n  }\\n\\n  function proportionalInterestAndPrincipalAvailableAfterApplyReserves(\\n    Waterfall storage w,\\n    uint256 trancheId,\\n    uint256 principalDeposited,\\n    uint feePercent\\n  ) internal view returns (uint256, uint) {\\n    return\\n      w.getTranche(trancheId).proportionalInterestAndPrincipalAvailableAfterApplyingReserves(\\n        principalDeposited,\\n        feePercent\\n      );\\n  }\\n\\n  /**\\n   * Returns the lifetime amount withdrawable\\n   */\\n  function proportionalInterestAndPrincipalAvailable(\\n    Waterfall storage w,\\n    uint trancheId,\\n    uint256 principal,\\n    uint feePercent\\n  ) internal view returns (uint, uint) {\\n    return w.getTranche(trancheId).proportionalInterestAndPrincipalAvailable(principal, feePercent);\\n  }\\n\\n  /// @notice Returns the total amount of principal paid to all tranches\\n  function totalPrincipalDeposited(Waterfall storage w) internal view returns (uint) {\\n    // TODO(will): this can be optimized by storing the aggregate amount paid\\n    //       as a storage var and updating when the tranches are paid\\n    uint totalPrincipalDeposited;\\n    for (uint i = 0; i < w.numTranches(); i++) {\\n      totalPrincipalDeposited += w.getTranche(i).principalDeposited();\\n    }\\n    return totalPrincipalDeposited;\\n  }\\n\\n  /// @notice Returns the total amount of interest paid to all tranches\\n  function totalInterestPaid(Waterfall storage w) internal view returns (uint) {\\n    // TODO(will): this can be optimized by storing the aggregate amount paid\\n    //       as a storage var and updating when the tranches are paid\\n    uint totalInterestPaid;\\n    for (uint i = 0; i < w.numTranches(); i++) {\\n      totalInterestPaid += w.getTranche(i).interestPaid();\\n    }\\n    return totalInterestPaid;\\n  }\\n\\n  /// @notice Returns the total amount of principal paid to all tranches\\n  function totalPrincipalPaidAfterSettlementUpToTranche(\\n    Waterfall storage w,\\n    uint256 trancheIndex\\n  ) internal view returns (uint totalPrincipalPaid) {\\n    for (uint i = 0; i < trancheIndex; i++) {\\n      totalPrincipalPaid += w.getTranche(i).principalPaidAfterSettlement();\\n    }\\n  }\\n\\n  /// @notice Returns the total amount of principal paid to all tranches\\n  function totalPrincipalPaid(Waterfall storage w) internal view returns (uint) {\\n    // TODO(will): this can be optimized by storing the aggregate amount paid\\n    //       as a storage var and updating when the tranches are paid\\n    uint totalPrincipalPaid;\\n    for (uint i = 0; i < w.numTranches(); i++) {\\n      totalPrincipalPaid += w.getTranche(i).principalPaid();\\n    }\\n    return totalPrincipalPaid;\\n  }\\n\\n  function totalPrincipalOutstandingWithoutReserves(\\n    Waterfall storage w\\n  ) internal view returns (uint sum) {\\n    uint sum;\\n    for (uint i = 0; i < w._tranches.length; i++) {\\n      sum += w._tranches[i].principalOutstandingWithoutReserves();\\n    }\\n    return sum;\\n  }\\n\\n  function totalPrincipalOutstandingWithReserves(\\n    Waterfall storage w\\n  ) internal view returns (uint sum) {\\n    uint sum;\\n    for (uint i = 0; i < w._tranches.length; i++) {\\n      sum += w._tranches[i].principalOutstandingWithReserves();\\n    }\\n    return sum;\\n  }\\n\\n  /**\\n   *\\n   * @param trancheIndex Exclusive upper bound (i.e. the tranche at this index is not included)\\n   */\\n  function totalPrincipalReservedUpToTranche(\\n    Waterfall storage w,\\n    uint256 trancheIndex\\n  ) internal view returns (uint sum) {\\n    for (uint i = 0; i < trancheIndex; i++) {\\n      sum += w._tranches[i].principalReserved();\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @param trancheIndex Exclusive upper bound (i.e. the tranche at this index is not included)\\n   */\\n  function totalPrincipalDepositedUpToTranche(\\n    Waterfall storage w,\\n    uint256 trancheIndex\\n  ) internal view returns (uint sum) {\\n    for (uint i = 0; i < trancheIndex; i++) {\\n      sum += w._tranches[i].principalDeposited();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf4ba42024f98f4001538ae1b88d21f043ae7a74127572d6cc7f8341dd70e0ca0\",\"license\":\"MIT\"},\"contracts/protocol/core/schedule/PaymentSchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISchedule} from \\\"../../../interfaces/ISchedule.sol\\\";\\n// import {console2 as console} from \\\"forge-std/console2.sol\\\";\\n\\n/// @notice Convenience struct for passing startTime to all Schedule methods\\nstruct PaymentSchedule {\\n  ISchedule schedule;\\n  uint64 startTime;\\n}\\n\\nusing PaymentScheduleLogic for PaymentSchedule global;\\n\\nlibrary PaymentScheduleLogic {\\n  using PaymentScheduleLogic for PaymentSchedule;\\n\\n  function startAt(PaymentSchedule storage s, uint256 timestamp) internal {\\n    assert(s.startTime == 0);\\n    s.startTime = uint64(timestamp);\\n  }\\n\\n  function previousDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.previousDueTimeAt(s.startTime, timestamp);\\n  }\\n\\n  function previousInterestDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.previousInterestDueTimeAt(s.startTime, timestamp);\\n  }\\n\\n  function nextInterestDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.nextInterestDueTimeAt(s.startTime, timestamp);\\n  }\\n\\n  function nextPrincipalDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.nextPrincipalDueTimeAt(s.startTime, timestamp);\\n  }\\n\\n  function principalPeriodAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.principalPeriodAt(s.startTime, timestamp);\\n  }\\n\\n  function currentPrincipalPeriod(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.principalPeriodAt(block.timestamp);\\n  }\\n\\n  function currentPeriod(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.periodAt(block.timestamp);\\n  }\\n\\n  function periodEndTime(\\n    PaymentSchedule storage s,\\n    uint256 period\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.periodEndTime(s.startTime, period);\\n  }\\n\\n  function periodAt(\\n    PaymentSchedule storage s,\\n    uint timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.periodAt(s.startTime, timestamp);\\n  }\\n\\n  function totalPrincipalPeriods(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.schedule.totalPrincipalPeriods();\\n  }\\n\\n  function isActive(PaymentSchedule storage s) internal view returns (bool) {\\n    return s.startTime != 0;\\n  }\\n\\n  function termEndTime(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.isActive() ? s.schedule.termEndTime(s.startTime) : 0;\\n  }\\n\\n  function termStartTime(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.isActive() ? s.schedule.termStartTime(s.startTime) : 0;\\n  }\\n\\n  function periodsPerPrincipalPeriod(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.schedule.periodsPerPrincipalPeriod();\\n  }\\n\\n  function nextDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return s.isActive() ? s.schedule.nextDueTimeAt(s.startTime, timestamp) : 0;\\n  }\\n\\n  function withinPrincipalGracePeriodAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view returns (bool) {\\n    return !s.isActive() || s.schedule.withinPrincipalGracePeriodAt(s.startTime, timestamp);\\n  }\\n\\n  modifier isActiveMod(PaymentSchedule storage s) {\\n    // @dev: NA: not active\\n    require(s.isActive(), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x84d475b94cf8f59929c228a7d54120d8e28f085d8abed8bba78deab53232eb5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104955760003560e01c80638456cb5911610262578063bf8bcee411610151578063e2b02ce8116100ce578063eabd0ce111610092578063eabd0ce1146107ad578063eb07f4e614610986578063ef48eee61461098e578063f0b25bde146109a1578063f3621367146109a9578063f94f5a12146109be57600080fd5b8063e2b02ce81461092e578063e2bbb15814610936578063e58378bb14610949578063e63ab1e91461095e578063e7aa8a921461097357600080fd5b8063d284597711610115578063d2845977146108da578063d547741f146108e2578063d60efcb8146108f5578063daaa3a6214610908578063e2a657f91461091b57600080fd5b8063bf8bcee4146105bf578063c290d6911461085e578063c78bed86146108b3578063ce78290d146108c8578063cf09e0d0146108d057600080fd5b8063aa2a7c4c116101df578063b69ef8a8116101a3578063b69ef8a81461082b578063b6db75a014610833578063b9317d861461083b578063bbafcb401461084e578063bf6c87c71461085657600080fd5b8063aa2a7c4c146107bd578063aae932fe146107d0578063ae6c857a146107fe578063b0604a2614610811578063b39699921461082357600080fd5b8063a03c5cf011610226578063a03c5cf01461078a578063a079a4dd14610792578063a217fddf146107a5578063a4d66daf146107ad578063a8f9c4fe146107b557600080fd5b80638456cb591461074c5780638c0243e7146107545780638f168c931461075c57806391d14854146107645780639d1105301461077757600080fd5b80633f4ba83a11610389578063526d81f61161030657806364fb2d95116102ca57806364fb2d95146106f957806365973a1114610701578063729cf22f1461071457806379502c551461071c5780637df1f1b91461073057806381c17a151461074457600080fd5b8063526d81f6146106c157806352f555ba146106c95780635c975abb146106dc5780635eb185a2146106e7578063645d6225146106f157600080fd5b80634af75d351161034d5780634af75d351461066d5780634d02fe6f146106805780634d90a5391461069357806350b22fcf146106a6578063515bc323146106ae57600080fd5b80633f4ba83a14610608578063441a3e7014610610578063457147a71461063857806347195e131461064057806348eef1df1461065a57600080fd5b806320dcc3421161041757806327ea6f2b116103db57806327ea6f2b146105bf57806328b55c97146105d25780632ba443d2146105da5780632f2ff15d146105e257806336568abe146105f557600080fd5b806320dcc3421461055957806321506ebe1461056157806321856b3614610581578063248a9ca31461058957806324bb4b15146105ac57600080fd5b806311daef071161045e57806311daef071461052057806317f769411461053357806319350114146105415780631a861d26146105495780631cd724ac1461055157600080fd5b8062ae88e01461049a578063019c37e6146104c057806301ffc9a7146104d3578063097616a3146104f65780630d8e6e2c1461050b575b600080fd5b6104ad6104a8366004615b22565b6109d1565b6040519081526020015b60405180910390f35b6104ad6104ce366004615b22565b6109e5565b6104e66104e1366004615b3b565b6109f3565b60405190151581526020016104b7565b610509610504366004615b7a565b610a28565b005b610513610b7a565b6040516104b79190615b97565b6104ad61052e366004615b22565b610b97565b610233546104e69060ff1681565b6104ad610ba5565b6104ad610bb7565b6104ad610bd1565b6104ad610bde565b61057461056f366004615b22565b610beb565b6040516104b79190615bcb565b6104ad610c72565b6104ad610597366004615b22565b60009081526065602052604090206001015490565b6104ad6105ba366004615b22565b610c7f565b6105096105cd366004615b22565b610c8d565b6104ad610cc9565b6104ad610cd6565b6105096105f0366004615bf6565b610ce3565b610509610603366004615bf6565b610d0e565b610509610d88565b61062361061e366004615c26565b610dc6565b604080519283526020830191909152016104b7565b6104e6610eb8565b305b6040516001600160a01b0390911681526020016104b7565b610623610668366004615c26565b610ec5565b6104ad61067b366004615b22565b61160a565b61062361068e366004615b22565b611618565b6104ad6106a1366004615b22565b6116b3565b6104ad6116c1565b6104ad6106bc366004615c48565b6116ce565b6105096117d0565b6105096106d7366004615ca1565b611844565b60975460ff166104e6565b6104ad6102325481565b6104ad6118b2565b6104ad6118bf565b6104ad61070f366004615b22565b6118cc565b6105746119b4565b61023554610642906001600160a01b031681565b61023754610642906001600160a01b031681565b6104e6611a2e565b610509611a3b565b6104ad611a77565b6104ad611a84565b6104e6610772366004615bf6565b611a91565b610509610785366004615d67565b611abc565b6104ad611c43565b6105096107a0366004615b22565b611c50565b6104ad600081565b6104ad611dc0565b610509611dcd565b6106236107cb366004615b22565b611e2c565b6107e36107de366004615b22565b611e91565b604080519384526020840192909252908201526060016104b7565b61050961080c366004615b22565b611f1a565b6101ff546001600160a01b0316610642565b6104ad611f54565b6104ad611f61565b6104e6611f6e565b610509610849366004615dd2565b611f88565b6104ad61200e565b61050961201b565b61087161086c366004615b22565b612077565b6040516104b79190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6108bb6120dd565b6040516104b79190615e13565b6104ad612136565b6104ad6102365481565b6104ad612143565b6105096108f0366004615bf6565b612150565b6104ad610903366004615b22565b612176565b6104ad610916366004615b22565b612184565b6104ad610929366004615b22565b612192565b6104ad6121b4565b6104ad610944366004615c26565b6121c1565b6104ad60008051602061643483398151915281565b6104ad60008051602061645483398151915281565b610509610981366004615e57565b612223565b6104ad61238a565b61087161099c366004615c26565b6123ae565b6104ad612400565b6104ad60008051602061647483398151915281565b6104e66109cc366004615b7a565b61240d565b60006109df6101c383612496565b92915050565b60006109df6101c3836124a2565b60006001600160e01b03198216637965db0b60e01b14806109df57506301ffc9a760e01b6001600160e01b03198316146109df565b600054610100900460ff1680610a41575060005460ff16155b610a665760405162461bcd60e51b8152600401610a5d90615f06565b60405180910390fd5b600054610100900460ff16158015610a88576000805461ffff19166101011790555b6001600160a01b038216610ade5760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f20616464726573736044820152606401610a5d565b610ae66124ae565b610aee612518565b610af661258d565b610b0e600080516020616434833981519152836125fd565b610b26600080516020616454833981519152836125fd565b610b4c600080516020616454833981519152600080516020616434833981519152612607565b610b6460008051602061643483398151915280612607565b8015610b76576000805461ff00191690555b5050565b610b826159f8565b60006040820181905260208201526001815290565b60006109df6101c383612652565b6000610bb26101c361265e565b905090565b600060405162461bcd60e51b8152600401610a5d90615f6a565b6000610bb26101c3612669565b6000610bb26101c3612674565b610c166040518060800160405280600081526020016000815260200160008152602001600081525090565b610c1e610cd6565b8210610c2957600080fd5b6000610c376101c38461267f565b905060405180608001604052808260000151815260200182602001518152602001826040015181526020018260600151815250915050919050565b6000610bb26101c36126b4565b60006109df6101c3836126bf565b610c95611f6e565b610cb15760405162461bcd60e51b8152600401610a5d90615f86565b60405162461bcd60e51b8152600401610a5d90615f6a565b6000610bb26101c36126cb565b6000610bb26101c36126d6565b600082815260656020526040902060010154610cff81336126ed565b610d098383612751565b505050565b6001600160a01b0381163314610d7e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a5d565b610b7682826127d7565b610da060008051602061645483398151915233611a91565b610dbc5760405162461bcd60e51b8152600401610a5d90615fd1565b610dc461283e565b565b600080600260c95403610deb5760405162461bcd60e51b8152600401610a5d90615fed565b600260c95560975460ff1615610e135760405162461bcd60e51b8152600401610a5d90616024565b61023554600090610e2c906001600160a01b03166128d1565b6001600160a01b0316638c7a63ae866040518263ffffffff1660e01b8152600401610e5991815260200190565b60a060405180830381865afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a9190616064565b9050610ea78186866128dc565b600160c95590969095509350505050565b6000610bb26101c3612bdd565b600080600260c95403610eea5760405162461bcd60e51b8152600401610a5d90615fed565b600260c95560975460ff1615610f125760405162461bcd60e51b8152600401610a5d90616024565b6000610f1f6101c3612be8565b61023554909150600090610f3b906001600160a01b03166128d1565b60405163463d31d760e11b8152600481018790529091506000906001600160a01b03831690638c7a63ae9060240160a060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa9190616064565b60405163430c208160e01b81529091506001600160a01b0383169063430c208190610fdb9033908a906004016160ea565b602060405180830381865afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c9190616103565b801561102c575061102c3361240d565b8015611049575061103c83612bf7565b63ffffffff168160200151145b6110655760405162461bcd60e51b8152600401610a5d90615fd1565b6000806110868360200151846040015161107d61238a565b88929190612c10565b9150915060008360800151838560600151846110a2919061613b565b6110ac919061614e565b6110b6919061613b565b905080156110cc576110c9848a836128dc565b50505b5060006110ec8460200151856040015188612cfa9092919063ffffffff16565b905060008a1180156110fe5750898110155b61111a5760405162461bcd60e51b8152600401610a5d90616161565b5060008080611129888d612d1b565b93505092509250606461113a61238a565b61114590606461613b565b61114f908361617d565b61115991906161aa565b6040516331a9108f60e11b8152600481018d90529091506000906001600160a01b03891690636352211e90602401602060405180830381865afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c891906161be565b9050876001600160a01b0316635be57b6a60405180604001604052808781526020016111f38d612e57565b815250836040518363ffffffff1660e01b81526004016112149291906161db565b6020604051808303816000875af1158015611233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112579190616200565b60405163b819220560e01b8152600481018290526024810185905260448101849052909b506001600160a01b0389169063b819220590606401600060405180830381600087803b1580156112aa57600080fd5b505af11580156112be573d6000803e3d6000fd5b5050505060008488604001516112d4919061613b565b11156114da57876001600160a01b0316635be57b6a6040518060400160405280878b60400151611304919061613b565b81526020016113128d612bf7565b63ffffffff16815250836040518363ffffffff1660e01b81526004016113399291906161db565b6020604051808303816000875af1158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c9190616200565b9950848311156113e95760405162461bcd60e51b815260206004820152603260248201527f5072696e636970616c20776974686472617761626c65206973206c657373207460448201527168616e207072696e636970616c206d6f766560701b6064820152608401610a5d565b858211156114535760405162461bcd60e51b815260206004820152603160248201527f496e74657265737420776974686472617761626c65206973206c657373207468604482015270185b881a5b9d195c995cdd081b5bdd9959607a1b6064820152608401610a5d565b6001600160a01b03881663b81922058b61146d868961613b565b611477868b61613b565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401600060405180830381600087803b1580156114bd57600080fd5b505af11580156114d1573d6000803e3d6000fd5b505050506114df565b600099505b50866001600160a01b031663b81922058c868960400151611500919061613b565b6040516001600160e01b031960e085901b1681526004810192909252602482015260006044820152606401600060405180830381600087803b15801561154557600080fd5b505af1158015611559573d6000803e3d6000fd5b5050604051630852cd8d60e31b8152600481018e90526001600160a01b038a1692506342966c689150602401600060405180830381600087803b15801561159f57600080fd5b505af11580156115b3573d6000803e3d6000fd5b50505050888a8c7f5df84d720403cf4728bc2d21f8e1c46f0427db198f152e92a243a66172a2fbae8f6040516115eb91815260200190565b60405180910390a45050505050505050600160c9819055509250929050565b60006109df6101c383612ea1565b6102355460009081906116aa90611637906001600160a01b03166128d1565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b815260040161166491815260200190565b60a060405180830381865afa158015611681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a59190616064565b612ead565b91509150915091565b60006109df6101c383613007565b6000610bb26101c3613013565b6000600260c954036116f25760405162461bcd60e51b8152600401610a5d90615fed565b600260c95560975460ff161561171a5760405162461bcd60e51b8152600401610a5d90616024565b61023554611730906001600160a01b031661301e565b60405163d505accf60e01b8152336004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c481018490526001600160a01b03919091169063d505accf9060e401600060405180830381600087803b15801561179e57600080fd5b505af11580156117b2573d6000803e3d6000fd5b505050506117c08787613091565b600160c955979650505050505050565b600054610100900460ff16806117e9575060005460ff16155b6118055760405162461bcd60e51b8152600401610a5d90615f06565b600054610100900460ff16158015611827576000805461ffff19166101011790555b61182f612518565b8015611841576000805461ff00191690555b50565b600054610100900460ff168061185d575060005460ff16155b6118795760405162461bcd60e51b8152600401610a5d90615f06565b600054610100900460ff16158015610cb1576000805461ffff191661010117905560405162461bcd60e51b8152610a5d90600401615f6a565b6000610bb26101c3613273565b6000610bb26101c361327e565b6102355460009081906118e7906001600160a01b03166128d1565b6001600160a01b0316638c7a63ae846040518263ffffffff1660e01b815260040161191491815260200190565b60a060405180830381865afa158015611931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119559190616064565b905061195f610cd6565b8160200151146119965760405162461bcd60e51b81526020600482015260026024820152614f5560f01b6044820152606401610a5d565b602081015160408201516119ad916101c391613289565b9392505050565b6119df6040518060800160405280600081526020016000815260200160008152602001600081525090565b60006119f56119ec610cd6565b6101c39061267f565b90506040518060800160405280826000015181526020018260200151815260200182604001518152602001826060015181525091505090565b6000610bb26101c3613296565b611a5360008051602061645483398151915233611a91565b611a6f5760405162461bcd60e51b8152600401610a5d90615fd1565b610dc46132a1565b6000610bb26101c36132f9565b6000610bb26101c3613304565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600260c95403611ade5760405162461bcd60e51b8152600401610a5d90615fed565b600260c95560975460ff1615611b065760405162461bcd60e51b8152600401610a5d90616024565b828114611b3a5760405162461bcd60e51b8152602060048201526002602482015261262760f11b6044820152606401610a5d565b60005b81811015611c375761023554600090611b5e906001600160a01b03166128d1565b6001600160a01b0316638c7a63ae878785818110611b7e57611b7e615f54565b905060200201356040518263ffffffff1660e01b8152600401611ba391815260200190565b60a060405180830381865afa158015611bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be49190616064565b9050611c2181878785818110611bfc57611bfc615f54565b90506020020135868686818110611c1557611c15615f54565b905060200201356128dc565b5050508080611c2f90616219565b915050611b3d565b5050600160c955505050565b6000610bb26101c361330f565b600260c95403611c725760405162461bcd60e51b8152600401610a5d90615fed565b600260c955611c8f60008051602061647483398151915233611a91565b611cab5760405162461bcd60e51b8152600401610a5d90615fd1565b60975460ff1615611cce5760405162461bcd60e51b8152600401610a5d90616024565b6102335460ff1615611d075760405162461bcd60e51b8152602060048201526002602482015261044560f41b6044820152606401610a5d565b60008111611d275760405162461bcd60e51b8152600401610a5d90616232565b6000611d346101c3612be8565b9050611d40818361331a565b6102375461023554611d74916001600160a01b03908116918591611d649116613491565b6001600160a01b0316919061349c565b610237546040518381526001600160a01b03909116907f7411b87a3c039bdfd8f3510b21e8bd0736265f53513735e1f4aa7b4f306b728d9060200160405180910390a25050600160c955565b6000610bb26101c36134f2565b611dd5611f6e565b611df15760405162461bcd60e51b8152600401610a5d90615f86565b610233805460ff1916600117905560405130907f90d9b09c68a7e1312ce22801552b47265d77db9496383d51374b4058545447d790600090a2565b600080600260c95403611e515760405162461bcd60e51b8152600401610a5d90615fed565b600260c95560975460ff1615611e795760405162461bcd60e51b8152600401610a5d90616024565b611e82836134ff565b600160c9559094909350915050565b600080600042841015611eb65760405162461bcd60e51b8152600401610a5d9061624e565b6000611ec06118bf565b11611ef25760405162461bcd60e51b81526020600482015260026024820152614c4960f01b6044820152606401610a5d565b611efb84612176565b611f04856116b3565b611f0d86610b97565b9250925092509193909250565b611f3260008051602061647483398151915233611a91565b611f4e5760405162461bcd60e51b8152600401610a5d90615fd1565b61023255565b6000610bb26101c36135e5565b6000610bb26101c36135f2565b6000610bb260008051602061643483398151915233611a91565b611fa060008051602061647483398151915233611a91565b611fbc5760405162461bcd60e51b8152600401610a5d90615fd1565b611fcf611fca6101c3612be8565b6135fd565b156120015760405162461bcd60e51b815260206004820152600260248201526120a360f11b6044820152606401610a5d565b610d096102348383615a16565b6000610bb26101c361360b565b612023611f6e565b61203f5760405162461bcd60e51b8152600401610a5d90615f86565b610233805460ff1916905560405130907f7184039938737267597232635b117c924371ac877d4329f2dfa5ca674c5cc4a590600090a2565b61207f615a5d565b600260c954036120a15760405162461bcd60e51b8152600401610a5d90615fed565b600260c95560975460ff16156120c95760405162461bcd60e51b8152600401610a5d90616024565b6120d282613618565b600160c95592915050565b606061023480548060200260200160405190810160405280929190818152602001828054801561212c57602002820191906000526020600020905b815481526020019060010190808311612118575b5050505050905090565b6000610bb26101c36137f5565b6000610bb26101c3613800565b60008281526065602052604090206001015461216c81336126ed565b610d0983836127d7565b60006109df6101c38361380b565b60006109df6101c383613817565b61023481815481106121a357600080fd5b600091825260209091200154905081565b6000610bb26101c3613823565b6000600260c954036121e55760405162461bcd60e51b8152600401610a5d90615fed565b600260c95560975460ff161561220d5760405162461bcd60e51b8152600401610a5d90616024565b6122178383613091565b600160c9559392505050565b600054610100900460ff168061223c575060005460ff16155b6122585760405162461bcd60e51b8152600401610a5d90615f06565b600054610100900460ff1615801561227a576000805461ffff19166101011790555b61023580546001600160a01b0319166001600160a01b038d169081179091556000906122a59061382e565b90506122b081610a28565b6122e561023560009054906101000a90046001600160a01b03168a8a8a8a8f6101c3613846909695949392919063ffffffff16565b61023780546001600160a01b0319166001600160a01b038d1617905542610236556123136102348585615a16565b5061232c6000805160206164748339815191528c6125fd565b612344600080516020616474833981519152826125fd565b61236a600080516020616474833981519152600080516020616434833981519152612607565b50801561237d576000805461ff00191690555b5050505050505050505050565b610235546000906123a3906001600160a01b031661385e565b610bb29060646161aa565b6123b6615a5d565b600260c954036123d85760405162461bcd60e51b8152600401610a5d90615fed565b600260c95560975460ff1615610cb15760405162461bcd60e51b8152600401610a5d90616024565b6000610bb26101c36138d1565b61023554600090612426906001600160a01b03166138de565b6001600160a01b0316631852f200836102346040518363ffffffff1660e01b815260040161245592919061626a565b602060405180830381865afa158015612472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df9190616103565b60006119ad83836138e9565b60006119ad83836138f8565b600054610100900460ff16806124c7575060005460ff16155b6124e35760405162461bcd60e51b8152600401610a5d90615f06565b600054610100900460ff1615801561182f576000805461ffff19166101011790558015611841576000805461ff001916905550565b600054610100900460ff1680612531575060005460ff16155b61254d5760405162461bcd60e51b8152600401610a5d90615f06565b600054610100900460ff1615801561256f576000805461ffff19166101011790555b6097805460ff191690558015611841576000805461ff001916905550565b600054610100900460ff16806125a6575060005460ff16155b6125c25760405162461bcd60e51b8152600401610a5d90615f06565b600054610100900460ff161580156125e4576000805461ffff19166101011790555b600160c9558015611841576000805461ff001916905550565b610b768282612751565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006119ad8383613914565b60006109df8261393d565b60006109df82613949565b60006109df82613955565b6126aa6040518060800160405280600081526020016000815260200160008152602001600081525090565b6119ad8383613961565b60006109df82613a16565b60006119ad8383613a22565b60006109df82613a31565b60006126e182612bf7565b63ffffffff1692915050565b6126f78282611a91565b610b765761270f816001600160a01b03166014613a3d565b61271a836020613a3d565b60405160200161272b9291906162e9565b60408051601f198184030181529082905262461bcd60e51b8252610a5d91600401616358565b61275b8282611a91565b610b765760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556127933390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6127e18282611a91565b15610b765760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff166128875760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a5d565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006109df82613bd8565b600080600083116128ff5760405162461bcd60e51b8152600401610a5d90616232565b61023554600090612918906001600160a01b03166128d1565b60405163430c208160e01b81529091506001600160a01b0382169063430c20819061294990339089906004016160ea565b602060405180830381865afa158015612966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298a9190616103565b801561299a575061299a3361240d565b6129b65760405162461bcd60e51b8152600401610a5d90615fd1565b60006129c36101c3612be8565b90506000806129d189612ead565b90925090506129e0818361614e565b8711156129ff5760405162461bcd60e51b8152600401610a5d90616161565b6000612a0b8389613bf0565b90506000612a19828a61613b565b90506000612a278285613bf0565b90506002612a3487613c06565b6002811115612a4557612a4561638b565b03612ab85760405163b819220560e01b8152600481018c905260248101829052604481018490526001600160a01b0388169063b8192205906064015b600060405180830381600087803b158015612a9b57600080fd5b505af1158015612aaf573d6000803e3d6000fd5b50505050612b65565b6000612ac387613c06565b6002811115612ad457612ad461638b565b03612b2c578215612ae757612ae76163a1565b60208c0151612af890879083613c73565b6040516366cbb03760e01b8152600481018c9052602481018290526001600160a01b038816906366cbb03790604401612a81565b6001612b3787613c06565b6002811115612b4857612b4861638b565b03612b655760405162461bcd60e51b8152600401610a5d906163b7565b612b8933612b73838661614e565b61023554611d64906001600160a01b0316613491565b6020808d0151604080518681529283018490528d9233917f92f2787b755dae547f1701582fe74c7abf277ec14db316dd01abc69cacf7a259910160405180910390a4919b919a509098505050505050505050565b60006109df82613cc5565b6000612bf382613cd4565b5090565b60006001612c06836009015490565b6109df919061613b565b6000806002612c1e87613c06565b6002811115612c2f57612c2f61638b565b14612c4c57612c4360098701868686613d8f565b91509150612cf1565b6000612c5787612bf7565b63ffffffff1686148015612c875750612c7287603c01613db5565b6005880154612c8590603c8a0190613dbd565b105b90506000612c9488612bf7565b63ffffffff1687108015612cb25750612caf88603c01613db5565b87105b905060008280612cbf5750815b905080612cda57612cd560098a01898989613d8f565b612ce9565b612ce960098a01898989613e65565b945094505050505b94509492505050565b6000612d1382612d0d6009870186613e7e565b90613eab565b949350505050565b6000806000806000612d2c87613c06565b90506002816002811115612d4257612d4261638b565b14612d5f5760405162461bcd60e51b8152600401610a5d906163b7565b6000612d6d88603c01613ed3565b90506000612d7d89603c01613edf565b90506000612d8a8a612e57565b9050612d958a612bf7565b63ffffffff168110612dce5760405162461bcd60e51b81526020600482015260026024820152614c4360f01b6044820152606401610a5d565b60048a0154612ddd908361613b565b612de783856163d3565b10612e195760405162461bcd60e51b815260206004820152600260248201526110d360f21b6044820152606401610a5d565b612e4189612e268c612bf7565b63ffffffff16838d600901613f27909392919063ffffffff16565b9750975097509750505050505b92959194509250565b6000808260040154612e6b84603c01613ed3565b612e75919061614e565b905060006001612e88603c860184613f6f565b612e92919061613b565b9050612d13603c850182613dbd565b60006119ad8383613fd6565b6000808260400151600003612ec757506000928392509050565b600080612eea85602001518660400151612edf61238a565b6101c392919061410d565b9092509050612efa81600161614e565b85606001511115612f6c5760405162461bcd60e51b815260206004820152603660248201527f5072696e636970616c20776974686472617761626c65206973206c65737320746044820152751a185b881c1c9a5b98da5c185b081c995919595b595960521b6064820152608401610a5d565b8185608001511115612fdd5760405162461bcd60e51b815260206004820152603460248201527f496e74657265737420776974686472617761626c65206973206c657373207468604482015273185b881a5b9d195c995cdd081c995919595b595960621b6064820152608401610a5d565b6080850151612fec908361613b565b6060860151612ffc90839061411c565b935093505050915091565b60006119ad838361413d565b60006109df8261419a565b60006001600160a01b03821663b93f9b0a60055b6040518263ffffffff1660e01b815260040161305091815260200190565b602060405180830381865afa15801561306d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df91906161be565b60008061309f6101c3612be8565b9050600083116130c15760405162461bcd60e51b8152600401610a5d90616232565b6130ca81612bf7565b63ffffffff1684146130ee5760405162461bcd60e51b8152600401610a5d9061624e565b6130f73361240d565b6131135760405162461bcd60e51b8152600401610a5d90615fd1565b6102325442101561314b5760405162461bcd60e51b8152602060048201526002602482015261272360f11b6044820152606401610a5d565b61315581846141a6565b6102355460009061316e906001600160a01b03166128d1565b6001600160a01b0316635be57b6a604051806040016040528087815260200188815250336040518363ffffffff1660e01b81526004016131af9291906161db565b6020604051808303816000875af11580156131ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f29190616200565b6102355490915061322690339030908790613215906001600160a01b0316613491565b6001600160a01b0316929190614258565b8085336001600160a01b03167fcb3ef4109dcd006671348924f00aac8398190a5ff283d6e470d74581513e10368760405161326391815260200190565b60405180910390a4949350505050565b60006109df82614290565b60006109df8261429e565b6000612d13848484612cfa565b60006109df826142ac565b60975460ff16156132c45760405162461bcd60e51b8152600401610a5d90616024565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586128b43390565b60006109df826142b8565b60006109df826142c6565b60006109df826142d2565b600061332583613c06565b9050600081600281111561333b5761333b61638b565b036134015761334d603c8401426142e0565b42600684015561335c83613c06565b60405190915030907f139a6829bb850b4fb0d6617ac9f9d32e48c2dbe13e158829fa64f326fafe8e1890600090a2600181600281111561339e5761339e61638b565b146134015760405162461bcd60e51b815260206004820152602d60248201527f53636166666f6c64696e67206661696c7572653a2053686f756c64206265204460448201526c1c985dd91bdddb94195c9a5bd9609a1b6064820152608401610a5d565b60018160028111156134155761341561638b565b146134325760405162461bcd60e51b8152600401610a5d906163b7565b61343b836135fd565b61344784600901614327565b613451908461614e565b11156134845760405162461bcd60e51b8152602060048201526002602482015261115160f21b6044820152606401610a5d565b610d09600984018361437f565b60006109df8261301e565b610d098363a9059cbb60e01b84846040516024016134bb9291906160ea565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143ab565b60006109df826001015490565b60008061350d6101c3612be8565b5061023554600090613527906001600160a01b03166128d1565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b815260040161355491815260200190565b60a060405180830381865afa158015613571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135959190616064565b90506000806135a383612ead565b909250905060006135b4828461614e565b9050806000036135cd5750600096879650945050505050565b6135d88488836128dc565b9550955050505050915091565b60006109df826002015490565b60006109df8261447d565b60006109df8260090161448b565b60006109df826005015490565b613620615a5d565b600061362d6101c3612be8565b90506000831161364f5760405162461bcd60e51b8152600401610a5d90616232565b600061365a82613a16565b9050600061366783613955565b9050600061367f4261367986826144c9565b9061411c565b905060006136a68785856136928961393d565b60028a0154876136a18c61447d565b6144d8565b90506000816020015182600001516136be919061614e565b90506000826060015183604001516136d6919061614e565b905060006136e4828461614e565b905060006064846136f361238a565b6136fd919061617d565b61370791906161aa565b90506137148984866145c7565b6040805185815260208101859052600081830152606081018390529051309133917fd1055dc2c2a003a83dfacb1c38db776eab5ef89d77a8f05a3512e8cf57f953ce9181900360800190a36102355461377f90339030908590613215906001600160a01b0316613491565b610235546137b190613799906001600160a01b031661464f565b610235548390611d64906001600160a01b0316613491565b60405181815230907ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb9060200160405180910390a250929998505050505050505050565b60006109df82614667565b60006109df82614729565b60006119ad8383614735565b60006119ad838361476d565b60006109df826147ee565b60006001600160a01b03821663b93f9b0a6007613032565b613855878787878787876147fa565b50505050505050565b60006001600160a01b03821663fc56365860035b6040518263ffffffff1660e01b815260040161389091815260200190565b602060405180830381865afa1580156138ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df9190616200565b60006109df826003015490565b60006109df82614953565b60006119ad603c84018361496b565b60006119ad61390a603c850184613dbd565b60098501906149d2565b60006119ad613933613929603c860185613dbd565b6009860190614a26565b61367985856138f8565b60006109df8242613914565b60006109df8242613fd6565b60006109df824261413d565b61398c6040518060800160405280600081526020016000815260200160008152602001600081525090565b600061399b6009850184613e7e565b90506139a8816003015490565b6060830152805482526139ba84614a62565b80156139d057506139cd84603c01613db5565b83105b156139fa57600281015460018201546139e9919061614e565b602083015260006040830152613a0f565b60018101546020830152600281015460408301525b5092915050565b60006109df8242614735565b60006119ad603c840183614a70565b60006109df8242614b06565b60606000613a4c83600261617d565b613a5790600261614e565b6001600160401b03811115613a6e57613a6e61604e565b6040519080825280601f01601f191660200182016040528015613a98576020820181803683370190505b509050600360fc1b81600081518110613ab357613ab3615f54565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613ae257613ae2615f54565b60200101906001600160f81b031916908160001a9053506000613b0684600261617d565b613b1190600161614e565b90505b6001811115613b89576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b4557613b45615f54565b1a60f81b828281518110613b5b57613b5b615f54565b60200101906001600160f81b031916908160001a90535060049490941c93613b82816163e7565b9050613b14565b5083156119ad5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a5d565b60006001600160a01b03821663b93f9b0a600c613032565b6000818310613bff57816119ad565b5090919050565b6000613c1482603c01614bdd565b8015613c4557508154613c2f906001600160a01b0316614bf3565b613c3883614290565b613c42919061614e565b42115b15613c5257506002919050565b613c5e82603c01614bdd565b15613c6b57506001919050565b506000919050565b6000613c7e84613c06565b90506000816002811115613c9457613c9461638b565b14613cb15760405162461bcd60e51b8152600401610a5d906163b7565b613cbf600985018484614c0b565b50505050565b60006109df603c830142614c40565b6000613cdf82613c06565b90506000816002811115613cf557613cf561638b565b03613cfe575050565b6000613d0c83603c01613ed3565b90506000613d2a846005015485603c01614cd290919063ffffffff16565b905080821115613d4c57613d4c613d4260018461613b565b6009860190614d39565b613d5584614667565b60068501556000613d6585613949565b90506000613d72866142c6565b600887019290925550600785015550504260059092019190915550565b600080613da88484613da18989613e7e565b9190614ddc565b9150915094509492505050565b60006109df82425b600082613dc981614bdd565b613de55760405162461bcd60e51b8152600401610a5d90615fd1565b83546040516356bd011960e01b81526001600160a01b038216916356bd011991613e2491600160a01b90046001600160401b03169087906004016163fe565b602060405180830381865afa158015613e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d139190616200565b600080613da88484613e778989613e7e565b9190614e00565b6000826000018281548110613e9557613e95615f54565b9060005260206000209060360201905092915050565b6000613eb5835490565b82613ebf85614e18565b613ec9919061617d565b6119ad91906161aa565b60006109df8242614cd2565b805460408051620f755f60ec1b815290516000926001600160a01b03169163f755f0009160048083019260209291908290030181865afa1580156138ad573d6000803e3d6000fd5b6000808080613f4087613f3a8a89613e7e565b90614e2b565b92965090945092509050613f6484848484613f5b8d8b613e7e565b93929190614f85565b945094509450949050565b600082613f7b81614bdd565b613f975760405162461bcd60e51b8152600401610a5d90615fd1565b8354604051638dfdc69560e01b81526001600160a01b03821691638dfdc69591613e2491600160a01b90046001600160401b03169087906004016163fe565b60008260050154821015613ffc5760405162461bcd60e51b8152600401610a5d9061624e565b61400883603c01614bdd565b614014575060006109df565b506008820154816140248461429e565b84600501541161405a57600061404a856005015486603c01614ff690919063ffffffff16565b90506140568185613bf0565b9150505b600584015484546000916140ab91620151809061407f906001600160a01b031661505d565b614089919061617d565b600688015461409c90603c8a0190614a70565b6140a6919061614e565b615075565b90506140d2856005015483836140c389600901615085565b89600201548a600301546150dd565b6140dc908461614e565b925083821015614105576140f88285836140c389600901614327565b614102908461614e565b92505b505092915050565b600080613da886868686612c10565b60008282116141345761412f828461613b565b6119ad565b50600092915050565b6000428210156141745760405162461bcd60e51b8152602060048201526002602482015261141560f21b6044820152606401610a5d565b6119ad6141906141868560090161514e565b6140a6868661476d565b6136798585613fd6565b60006109df82426138f8565b60006141b183613c06565b905060008160028111156141c7576141c761638b565b146141e45760405162461bcd60e51b8152600401610a5d906163b7565b60018301546141f58460090161448b565b6141ff908461614e565b11156142325760405162461bcd60e51b8152602060048201526002602482015261115360f21b6044820152606401610a5d565b610d0961423e84612bf7565b63ffffffff16838560090161518f9092919063ffffffff16565b6040516001600160a01b0380851660248301528316604482015260648101829052613cbf9085906323b872dd60e01b906084016134bb565b60006109df82603c016151c4565b60006109df82603c01615218565b60006109df824261526c565b60006109df8260090161514e565b60006109df824261476d565b60006109df82600901615085565b8154600160a01b90046001600160401b0316156142ff576142ff6163a1565b81546001600160401b03909116600160a01b0267ffffffffffffffff60a01b19909116179055565b60008060005b8354811015613a0f5761436184600001828154811061434e5761434e615f54565b9060005260206000209060360201615316565b61436b908361614e565b91508061437781616219565b91505061432d565b600061439f600161438e855490565b614398919061613b565b8490613e7e565b9050610d09818361532f565b6000614400826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166153859092919063ffffffff16565b805190915015610d09578080602001905181019061441e9190616103565b610d095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a5d565b60006109df82600901614327565b60008060005b8354811015613a0f576144ab6144a78583613e7e565b5490565b6144b5908361614e565b9150806144c181616219565b915050614491565b60006119ad603c840183614ff6565b6144e0615a5d565b8760006144ed8983613bf0565b90506144f9818361613b565b915060006145078884613bf0565b9050614513818461613b565b925060006145218a85613bf0565b905061452d818561613b565b9350600061453b838861613b565b9050600061454a89838c615394565b905060006145588288613bf0565b9050614564818861613b565b965060006145728885613bf0565b905061457e818961613b565b97506040518060a00160405280888152602001838761459d919061614e565b81526020018781526020018281526020018981525098505050505050505050979650505050505050565b60006145d284613c06565b905060028160028111156145e8576145e861638b565b146146055760405162461bcd60e51b8152600401610a5d906163b7565b614622838361461687603c01613db5565b600988019291906153e2565b61462b8461393d565b15801561463e575061463c84613a16565b155b15613cbf5742600685015550505050565b60006001600160a01b03821663b93f9b0a6006613032565b6006810154600261467783613c06565b60028111156146885761468861638b565b14614694575042919050565b60006146b0836005015484603c01614cd290919063ffffffff16565b905060006146c084603c01613ed3565b9050815b818110156147215760006146db603c870183613f6f565b90506146e78682613914565b1580156146fb57506146f98682614735565b155b156147085780945061470e565b50614721565b508061471981616219565b9150506146c4565b505050919050565b60006109df8242613a22565b6000826005015482101561475b5760405162461bcd60e51b8152600401610a5d9061624e565b6119ad614767846142b8565b61367985855b600082600501548210156147935760405162461bcd60e51b8152600401610a5d9061624e565b61479c8361429e565b8211156147b4576147ad8383613fd6565b90506109df565b60006147c3603c850184615509565b9050836005015481116147dc57505060078201546109df565b6147e68482613fd6565b9150506109df565b60006109df82426144c9565b6005870154156148315760405162461bcd60e51b81526020600482015260026024820152614e4960f01b6044820152606401610a5d565b86546001600160a01b0319166001600160a01b038781169190911788556001880182905560048089018690556040805180820182529286168084526000602094850152603c8b0180546001600160e01b03191682179055815163e08cf88360e01b815291516148f094919363e08cf88393808201939291908290030181865afa1580156148c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148e69190616200565b6009890190615570565b50600287810186905560038801839055426005890181905560068901556000600889018190556007890155600988015410156138555760405162461bcd60e51b8152602060048201526002602482015261135560f21b6044820152606401610a5d565b60006001600160a01b03821663b93f9b0a6013613032565b60008261497781614bdd565b6149935760405162461bcd60e51b8152600401610a5d90615fd1565b83546040516347487c0160e01b81526001600160a01b038216916347487c0191613e2491600160a01b90046001600160401b03169087906004016163fe565b6000805b82811015613a0f57614a088460000182815481106149f6576149f6615f54565b90600052602060002090603602015490565b614a12908361614e565b915080614a1e81616219565b9150506149d6565b6000805b82811015613a0f57614a44614a3f8583613e7e565b6155f5565b614a4e908361614e565b915080614a5a81616219565b915050614a2a565b60006109df82603c01614bdd565b6000614a7b83614bdd565b614a865760006119ad565b82546040516308ba6bcb60e41b81526001600160a01b03821691638ba6bcb091614ac591600160a01b90046001600160401b03169086906004016163fe565b602060405180830381865afa158015614ae2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190616200565b600080614b158460090161560b565b9050614b2084614a62565b614b2b5790506109df565b6000614b3a603c860185613dbd565b90506000614b58866005015487603c01613dbd90919063ffffffff16565b90506000614b69600988018461564c565b90508183118015614b885750614b7e87612bf7565b63ffffffff168311155b15614bc857614bbb614bb4614b9c89612bf7565b63ffffffff1689600901613e7e90919063ffffffff16565b6002015490565b614bc5908261614e565b90505b614bd2818561614e565b979650505050505050565b54600160a01b90046001600160401b0316151590565b60006001600160a01b03821663fc5636586007613872565b610d0981846000018481548110614c2457614c24615f54565b90600052602060002090603602016156a390919063ffffffff16565b6000614c4b83614bdd565b15806119ad57508254604051634922ed6b60e11b81526001600160a01b03821691639245dad691614c9191600160a01b90046001600160401b03169086906004016163fe565b602060405180830381865afa158015614cae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190616103565b600082614cde81614bdd565b614cfa5760405162461bcd60e51b8152600401610a5d90615fd1565b8354604051636a3d374160e11b81526001600160a01b0382169163d47a6e8291613e2491600160a01b90046001600160401b03169087906004016163fe565b60006001614d45845490565b614d4f919061613b565b90506000836000018281548110614d6857614d68615f54565b90600052602060002090603602019050614d81816156e4565b60005b838111158015614d9357508281105b15614dd557614dc3856000018281548110614db057614db0615f54565b90600052602060002090603602016156e4565b80614dcd81616219565b915050614d84565b5050505050565b600080614dea85858561570b565b614df48686615753565b91509150935093915050565b600080614e0e85858561570b565b614df48686615769565b600181015481546000916109df9161613b565b60008060008085600101548660000154614e45919061613b565b851115614e7f5760405162461bcd60e51b81526020600482015260086024820152670a89e9ebe9aaa86960c31b6044820152606401610a5d565b614e8d866002015486613bf0565b60018701548754919350614ea09161613b565b858760010154614eb0919061617d565b614eba91906161aa565b9250614ec6838661614e565b93508560000154848760030154614edd919061617d565b614ee791906161aa565b905082866001016000828254614efd919061613b565b9250508190555080866003016000828254614f18919061613b565b9091555050855484908790600090614f3190849061613b565b9250508190555081866002016000828254614f4c919061613b565b909155505060028601546001870154614f65919061614e565b86541015612e4e5760405162461bcd60e51b8152600401610a5d9061624e565b83856000016000828254614f99919061614e565b9250508190555082856001016000828254614fb4919061614e565b9250508190555081856002016000828254614fcf919061614e565b9250508190555080856003016000828254614fea919061614e565b90915550505050505050565b60008261500281614bdd565b61501e5760405162461bcd60e51b8152600401610a5d90615fd1565b8354604051635c16b67360e11b81526001600160a01b0382169163b82d6ce691613e2491600160a01b90046001600160401b03169087906004016163fe565b60006001600160a01b03821663fc5636586005613872565b600081831015613bff57816119ad565b60008060005b8354811015613a0f576150bf8460000182815481106150ac576150ac615f54565b9060005260206000209060360201614e18565b6150c9908361614e565b9150806150d581616219565b91505061508b565b60008686116150ee57506000615144565b60006150fa888861613b565b9050615107818686615394565b915086861015615142576000615127615120888b615075565b899061411c565b9050615134818786615394565b61513e908461614e565b9250505b505b9695505050505050565b60008060005b8354811015613a0f5761517161516a8583613e7e565b6003015490565b61517b908361614e565b91508061518781616219565b915050615154565b610d09818460000184815481106151a8576151a8615f54565b906000526020600020906036020161578e90919063ffffffff16565b60006151cf82614bdd565b6151da5760006109df565b815460405163df3dc09160e01b8152600160a01b82046001600160401b031660048201526001600160a01b039091169063df3dc09190602401613890565b600061522382614bdd565b61522e5760006109df565b81546040516334a88f4360e01b8152600160a01b82046001600160401b031660048201526001600160a01b03909116906334a88f4390602401613890565b6000600261527984613c06565b600281111561528a5761528a61638b565b14615297575060006109df565b825460009062015180906152b3906001600160a01b031661505d565b6152bd919061617d565b905060006152d76152cd86614667565b603c870190614a70565b905060006152e586866138f8565b11806152fa575060006152f8868661476d565b115b8015614102575061530b828261614e565b909311949350505050565b60028101546001820154825460009291612c069161613b565b81600101548111156153685760405162461bcd60e51b8152602060048201526002602482015261045560f41b6044820152606401610a5d565b8082600101600082825461537c919061613b565b90915550505050565b6060612d1384846000856157cf565b600080670de0b6b3a76400006153aa848661617d565b6153b491906161aa565b90506153c56201518061016d61617d565b6153cf868361617d565b6153d991906161aa565b95945050505050565b60006153ed85615085565b9050600081116154245760405162461bcd60e51b8152602060048201526002602482015261272160f11b6044820152606401610a5d565b60005b85548110156154d557600086600001828154811061544757615447615f54565b9060005260206000209060360201905060008361546383614e18565b61546d908861617d565b61547791906161aa565b9050600061548e8861548885615316565b90613bf0565b905061549a818961613b565b9750858410156154b4576154af8382846158ec565b6154bf565b6154bf838284615954565b50505080806154cd90616219565b915050615427565b508315614dd55760405162461bcd60e51b815260206004820152600260248201526104f560f41b6044820152606401610a5d565b60008261551581614bdd565b6155315760405162461bcd60e51b8152600401610a5d90615fd1565b8354604051630103299960e31b81526001600160a01b038216916308194cc891613e2491600160a01b90046001600160401b03169087906004016163fe565b6000805b828110156155ed57615584615a8c565b8454600181810187556000878152602090819020845160369094020192835583015190820155604082015160028201556060820151600382015560808201518291906155d69060048301906032615ac0565b5050505080806155e590616219565b915050615574565b509192915050565b6000816002015482600101546109df919061614e565b60008060005b8354811015613a0f5761562e6156278583613e7e565b6001015490565b615638908361614e565b91508061564481616219565b915050615611565b6000805b82811015613a0f5761568584600001828154811061567057615670615f54565b90600052602060002090603602016002015490565b61568f908361614e565b91508061569b81616219565b915050615650565b6003820154156156b5576156b56163a1565b808260000160008282546156c9919061613b565b925050819055508082600101600082825461537c919061613b565b80600201548160010160008282546156fc919061614e565b90915550506000600290910155565b6000615715845490565b61572090606461617d565b615729836159b2565b84615735876003015490565b61573f919061617d565b615749919061617d565b612d1391906161aa565b600061575d835490565b82613ebf856001015490565b6000615773835490565b828460020154615784866001015490565b613ebf919061614e565b6003820154156157a0576157a06163a1565b808260000160008282546157b4919061614e565b925050819055508082600101600082825461537c919061614e565b6060824710156158305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a5d565b843b61587e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a5d565b600080866001600160a01b0316858760405161589a9190616417565b60006040518083038185875af1925050503d80600081146158d7576040519150601f19603f3d011682016040523d82523d6000602084013e6158dc565b606091505b5091509150614bd28282866159bf565b82548284600201548560010154615903919061614e565b61590d919061614e565b111561591b5761591b6163a1565b8083600301600082825461592f919061614e565b925050819055508183600101600082825461594a919061614e565b9091555050505050565b8254828460020154856001015461596b919061614e565b615975919061614e565b1115615983576159836163a1565b80836003016000828254615997919061614e565b925050819055508183600201600082825461594a919061614e565b60006109df82606461613b565b606083156159ce5750816119ad565b8251156159de5782518084602001fd5b8160405162461bcd60e51b8152600401610a5d9190616358565b60405180606001604052806003906020820280368337509192915050565b828054828255906000526020600020908101928215615a51579160200282015b82811115615a51578235825591602001919060010190615a36565b50612bf3929150615aee565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001615abb615b03565b905290565b8260328101928215615a51579160200282015b82811115615a51578251825591602001919060010190615ad3565b5b80821115612bf35760008155600101615aef565b6040518061064001604052806032906020820280368337509192915050565b600060208284031215615b3457600080fd5b5035919050565b600060208284031215615b4d57600080fd5b81356001600160e01b0319811681146119ad57600080fd5b6001600160a01b038116811461184157600080fd5b600060208284031215615b8c57600080fd5b81356119ad81615b65565b60608101818360005b6003811015615bc257815160ff16835260209283019290910190600101615ba0565b50505092915050565b81518152602080830151908201526040808301519082015260608083015190820152608081016109df565b60008060408385031215615c0957600080fd5b823591506020830135615c1b81615b65565b809150509250929050565b60008060408385031215615c3957600080fd5b50508035926020909101359150565b60008060008060008060c08789031215615c6157600080fd5b863595506020870135945060408701359350606087013560ff81168114615c8757600080fd5b9598949750929560808101359460a0909101359350915050565b600080600080600080600060e0888a031215615cbc57600080fd5b8735615cc781615b65565b96506020880135615cd781615b65565b95506040880135615ce781615b65565b9450606088013593506080880135925060a0880135615d0581615b65565b8092505060c0880135905092959891949750929550565b60008083601f840112615d2e57600080fd5b5081356001600160401b03811115615d4557600080fd5b6020830191508360208260051b8501011115615d6057600080fd5b9250929050565b60008060008060408587031215615d7d57600080fd5b84356001600160401b0380821115615d9457600080fd5b615da088838901615d1c565b90965094506020870135915080821115615db957600080fd5b50615dc687828801615d1c565b95989497509550505050565b60008060208385031215615de557600080fd5b82356001600160401b03811115615dfb57600080fd5b615e0785828601615d1c565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015615e4b57835183529284019291840191600101615e2f565b50909695505050505050565b6000806000806000806000806000806101208b8d031215615e7757600080fd5b8a35615e8281615b65565b995060208b0135615e9281615b65565b985060408b0135975060608b0135965060808b0135955060a08b0135615eb781615b65565b945060c08b0135935060e08b013592506101008b01356001600160401b03811115615ee157600080fd5b615eed8d828e01615d1c565b915080935050809150509295989b9194979a5092959850565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b602080825260029082015261555360f01b604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252600290820152614e4160f01b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b600060a0828403121561607657600080fd5b60405160a081018181106001600160401b03821117156160a657634e487b7160e01b600052604160045260246000fd5b60405282516160b481615b65565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561611557600080fd5b815180151581146119ad57600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156109df576109df616125565b808201808211156109df576109df616125565b602080825260029082015261494160f01b604082015260600190565b80820281158282048414176109df576109df616125565b634e487b7160e01b600052601260045260246000fd5b6000826161b9576161b9616194565b500490565b6000602082840312156161d057600080fd5b81516119ad81615b65565b82518152602092830151928101929092526001600160a01b0316604082015260600190565b60006020828403121561621257600080fd5b5051919050565b60006001820161622b5761622b616125565b5060010190565b6020808252600290820152615a4160f01b604082015260600190565b602080825260029082015261125560f21b604082015260600190565b6001600160a01b0383168152604060208083018290528354918301829052600084815281812090929091906060850190845b818110156162b85784548352600194850194928401920161629c565b5090979650505050505050565b60005b838110156162e05781810151838201526020016162c8565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161631b8160178501602088016162c5565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161634c8160288401602088016162c5565b01602801949350505050565b60208152600082518060208401526163778160408501602087016162c5565b601f01601f19169190910160400192915050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b602080825260029082015261495360f01b604082015260600190565b6000826163e2576163e2616194565b500690565b6000816163f6576163f6616125565b506000190190565b6001600160401b03929092168252602082015260400190565b600082516164298184602087016162c5565b919091019291505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aaf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a90279a264697066735822122022d66f48ca7f0518ce6122eb201b443dfc2691bd6403950b4b9db6e12687e90e64736f6c63430008110033",
  "devdoc": {
    "author": "Warbler Labs",
    "kind": "dev",
    "methods": {
      "availableToCall(uint256)": {
        "details": "OU: Only the uncalled tranche can call"
      },
      "availableToWithdraw(uint256)": {
        "params": {
          "tokenId": "position to query max amount withdrawable for"
        },
        "returns": {
          "_0": "total interest withdrawable on the position",
          "_1": "total principal redeemable on the position"
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "amount of capital to supply",
          "tranche": "*UNSUPPORTED* - Should always be uncalled capital tranche index."
        },
        "returns": {
          "_0": "tokenId NFT representing your position in this pool"
        }
      },
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "amount of capital to supply",
          "deadline": "deadline of permit operation",
          "r": "r portion of signature",
          "s": "s portion of signature",
          "tranche": "*UNSUPPORTED* -",
          "v": "v portion of signature"
        },
        "returns": {
          "tokenId": "NFT representing your position in this pool"
        }
      },
      "drawdown(uint256)": {
        "details": "DP: drawdowns pausedZA: Zero amount - must be greater than 0",
        "params": {
          "amount": "USDC to drawdown. This amount is transferred to the caller"
        }
      },
      "getAmountsOwed(uint256)": {
        "details": "IT: invalid timestampLI: loan inactive",
        "params": {
          "timestamp": "time to calculate up to"
        },
        "returns": {
          "returnedInterestAccrued": "amount of accrued interest (not yet owed) that can be paid at `timestamp`",
          "returnedInterestOwed": "amount of obligated interest owed at `timestamp`",
          "returnedPrincipalOwed": "amount of principal owed at `timestamp`"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])": {
        "params": {
          "_borrower": "address of borrower, a non-transferrable role for performing privileged actions like   drawdown",
          "_config": "address of GoldfinchConfig",
          "_fundableAt": "earliest time at which the first slice can be funded",
          "_interestApr": "interest rate for the loan",
          "_lateFeeApr": "late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a   payment becomes late",
          "_limit": "the number of periods at the tail end of a principal period during which call requests rollover   to the next principal period."
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay(uint256)": {
        "details": "ZA: zero amount",
        "params": {
          "amount": "USDC amount to pay"
        },
        "returns": {
          "_0": "PaymentAllocation info on how the payment was allocated"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "submitCall(uint256,uint256)": {
        "details": "IA: Invalid amount - Call amount must be non-zero amount < than principal remaining.IT: invalid tranche - must be uncalled capital trancheNA: not authorized. Must have correct UID or be go listed",
        "params": {
          "callAmount": "Amount of capital to call back",
          "poolTokenId": "Pool token id to be called back."
        },
        "returns": {
          "callRequestedTokenId": " Token id of the call requested token.",
          "remainingTokenId": "Token id of the remaining token."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "amount to withdraw (must be <= interest+principal available to withdraw)",
          "tokenId": "the NFT representing the position"
        },
        "returns": {
          "_0": "interest withdrawn",
          "_1": "principal withdrawn"
        }
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "details": "LEN: argument length mismatch",
        "params": {
          "amounts": "amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]",
          "tokenIds": "NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array"
        }
      }
    },
    "title": "CallableLoan",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PaymentApplied(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted on payment"
      }
    },
    "kind": "user",
    "methods": {
      "availableToWithdraw(uint256)": {
        "notice": "Query the max amount available to withdraw for tokenId's position"
      },
      "createdAt()": {
        "notice": "Time when the pool was initialized. Zero if uninitialized"
      },
      "creditLine()": {
        "notice": "Pool's credit line, responsible for managing the loan's accounting variables"
      },
      "deposit(uint256,uint256)": {
        "notice": "Supply capital to the loan."
      },
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Supply capital to the loan."
      },
      "drawdown(uint256)": {
        "notice": "Drawdown the loan. The credit line's balance should increase by the amount drawn down.   Junior capital must be locked before this function can be called. If senior capital isn't locked   then this function will lock it for you (convenience to avoid calling lockPool() separately).   This function should revert if the amount requested exceeds the the current slice's currentLimit   This function should revert if the caller is not the borrower."
      },
      "getAmountsOwed(uint256)": {
        "notice": "Compute interest and principal owed on the current balance at a future timestamp"
      },
      "getVersion()": {
        "notice": "Returns the version triplet `[major, minor, patch]`"
      },
      "initialize(address,address,address,uint256,uint256,address,uint256)": {
        "notice": "Unsupported - only included for compatibility with ICreditLine."
      },
      "initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])": {
        "notice": "Initialize the pool. Can only be called once, and should be called in the same transaction as   contract creation to avoid initialization front-running"
      },
      "interestAccrued()": {
        "notice": "Interest accrued in the current payment period up to now. Converted to   owed interest once we cross into the next payment period. Is 0 if the   current time is after loan maturity (all interest accrued immediately becomes   interest owed)."
      },
      "interestAccruedAsOf()": {
        "notice": "We keep this to conform to the ICreditLine interface, but it's redundant information   now that we have `checkpointedAsOf`"
      },
      "interestAccruedAt(uint256)": {
        "notice": "Interest accrued in the current payment period for `timestamp`. Coverted to   owed interest once we cross into the payment period after `timestamp`. Is 0   if `timestamp` is after loan maturity (all interest accrued immediately becomes   interest owed)."
      },
      "interestOwedAt(uint256)": {
        "notice": "Interest that would be owed at `timestamp`"
      },
      "maxLimit()": {
        "notice": "Unsupported in callable loans."
      },
      "pauseDrawdowns()": {
        "notice": "Pauses all drawdowns (but not deposits/withdraws)"
      },
      "pay(uint256)": {
        "notice": "Pay down interest + principal. Excess payments are refunded to the caller"
      },
      "pay(uint256,uint256)": {
        "notice": "Unsupported in callable loans."
      },
      "principalOwedAt(uint256)": {
        "notice": "Principal owed up to `timestamp`"
      },
      "setAllowedUIDTypes(uint256[])": {
        "notice": "Set accepted UID types for the loan. Requires that users have not already begun to deposit."
      },
      "setFundableAt(uint256)": {
        "notice": "Update `fundableAt` to a new timestamp. Only the borrower can call this."
      },
      "setLimit(uint256)": {
        "notice": "Unsupported ICreditLine method kept for ICreditLine conformance"
      },
      "setMaxLimit(uint256)": {
        "notice": "Unsupported in callable loans."
      },
      "submitCall(uint256,uint256)": {
        "notice": "Supply capital to the loan."
      },
      "termStartTime()": {
        "notice": "Time of first drawdown"
      },
      "totalInterestAccrued()": {
        "notice": "Cumulative interest accrued up to now"
      },
      "totalInterestAccruedAt(uint256)": {
        "notice": "Cumulative interest accrued up to `timestamp`"
      },
      "totalInterestOwed()": {
        "notice": "Cumulative interest owed up to now"
      },
      "totalInterestOwedAt(uint256)": {
        "notice": "Cumulative interest owed up to `timestamp`"
      },
      "totalInterestPaid()": {
        "notice": "Cumulative interest paid back up to now"
      },
      "totalPrincipalOwed()": {
        "notice": "Cumulative principal owed at current timestamp"
      },
      "totalPrincipalOwedAt(uint256)": {
        "notice": "Cumulative principal owed at timestamp"
      },
      "totalPrincipalPaid()": {
        "notice": "Returns the total amount of principal thats been paid"
      },
      "unpauseDrawdowns()": {
        "notice": "Unpause drawdowns"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw an already deposited amount if the funds are available. Caller must be the owner or   approved by the owner on tokenId. Amount withdrawn is sent to the caller."
      },
      "withdrawMax(uint256)": {
        "notice": "Similar to withdraw but withdraw the max interest and principal available for `tokenId`"
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "notice": "Withdraw from multiple tokens"
      }
    },
    "notice": "A loan that allows the lenders to call back capital from the borrower.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 663,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 666,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3057,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3673,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 258,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)"
      },
      {
        "astId": 543,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 724,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 815,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 830,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 873,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11558,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11562,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11566,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11570,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12104,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_staleCreditLine",
        "offset": 0,
        "slot": "451",
        "type": "t_struct(StaleCallableCreditLine)16641_storage"
      },
      {
        "astId": 12106,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "fundableAt",
        "offset": 0,
        "slot": "562",
        "type": "t_uint256"
      },
      {
        "astId": 12108,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "drawdownsPaused",
        "offset": 0,
        "slot": "563",
        "type": "t_bool"
      },
      {
        "astId": 12111,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "allowedUIDTypes",
        "offset": 0,
        "slot": "564",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12114,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "config",
        "offset": 0,
        "slot": "565",
        "type": "t_contract(IGoldfinchConfig)8658"
      },
      {
        "astId": 12117,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "createdAt",
        "offset": 0,
        "slot": "566",
        "type": "t_uint256"
      },
      {
        "astId": 12120,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "borrower",
        "offset": 0,
        "slot": "567",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Tranche)17279_storage)dyn_storage": {
        "base": "t_struct(Tranche)17279_storage",
        "encoding": "dynamic_array",
        "label": "struct Tranche[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGoldfinchConfig)8658": {
        "encoding": "inplace",
        "label": "contract IGoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_contract(ISchedule)10347": {
        "encoding": "inplace",
        "label": "contract ISchedule",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)253_storage"
      },
      "t_struct(CallableCreditLine)14852_storage": {
        "encoding": "inplace",
        "label": "struct CallableCreditLine",
        "members": [
          {
            "astId": 14825,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_config",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IGoldfinchConfig)8658"
          },
          {
            "astId": 14827,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_limit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14829,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_interestApr",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14831,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_lateAdditionalApr",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14833,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_numLockupPeriods",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14835,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_checkpointedAsOf",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 14837,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_lastFullPaymentTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 14839,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_totalInterestOwedAtLastCheckpoint",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 14841,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_totalInterestAccruedAtLastCheckpoint",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 14844,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_waterfall",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(Waterfall)17885_storage"
          },
          {
            "astId": 14847,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_paymentSchedule",
            "offset": 0,
            "slot": "60",
            "type": "t_struct(PaymentSchedule)22641_storage"
          },
          {
            "astId": 14851,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "__padding",
            "offset": 0,
            "slot": "61",
            "type": "t_array(t_uint256)50_storage"
          }
        ],
        "numberOfBytes": "3552"
      },
      "t_struct(PaymentSchedule)22641_storage": {
        "encoding": "inplace",
        "label": "struct PaymentSchedule",
        "members": [
          {
            "astId": 22638,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "schedule",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ISchedule)10347"
          },
          {
            "astId": 22640,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "startTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)253_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 250,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 252,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StaleCallableCreditLine)16641_storage": {
        "encoding": "inplace",
        "label": "struct StaleCallableCreditLine",
        "members": [
          {
            "astId": 16640,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_cl",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(CallableCreditLine)14852_storage"
          }
        ],
        "numberOfBytes": "3552"
      },
      "t_struct(Tranche)17279_storage": {
        "encoding": "inplace",
        "label": "struct Tranche",
        "members": [
          {
            "astId": 17268,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_principalDeposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17270,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_principalPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17272,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_principalReserved",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17274,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_interestPaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 17278,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "__padding",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)50_storage"
          }
        ],
        "numberOfBytes": "1728"
      },
      "t_struct(Waterfall)17885_storage": {
        "encoding": "inplace",
        "label": "struct Waterfall",
        "members": [
          {
            "astId": 17880,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_tranches",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Tranche)17279_storage)dyn_storage"
          },
          {
            "astId": 17884,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "__padding",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage"
          }
        ],
        "numberOfBytes": "1632"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}