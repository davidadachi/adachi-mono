// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SeniorPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("capitalProviders", Value.fromStringArray(new Array(0)));
    this.set("lastestPoolStatus", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SeniorPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SeniorPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SeniorPool", id.toString(), this);
    }
  }

  static load(id: string): SeniorPool | null {
    return changetype<SeniorPool | null>(store.get("SeniorPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get capitalProviders(): Array<string> {
    let value = this.get("capitalProviders");
    return value!.toStringArray();
  }

  set capitalProviders(value: Array<string>) {
    this.set("capitalProviders", Value.fromStringArray(value));
  }

  get lastestPoolStatus(): string {
    let value = this.get("lastestPoolStatus");
    return value!.toString();
  }

  set lastestPoolStatus(value: string) {
    this.set("lastestPoolStatus", Value.fromString(value));
  }
}

export class SeniorPoolStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rawBalance", Value.fromBigInt(BigInt.zero()));
    this.set("compoundBalance", Value.fromBigInt(BigInt.zero()));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
    this.set("sharePrice", Value.fromBigInt(BigInt.zero()));
    this.set("totalShares", Value.fromBigInt(BigInt.zero()));
    this.set("totalPoolAssets", Value.fromBigInt(BigInt.zero()));
    this.set("totalLoansOutstanding", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeWritedowns", Value.fromBigInt(BigInt.zero()));
    this.set("cumulativeDrawdowns", Value.fromBigInt(BigInt.zero()));
    this.set("estimatedTotalInterest", Value.fromBigInt(BigInt.zero()));
    this.set("estimatedApy", Value.fromBigInt(BigInt.zero()));
    this.set("defaultRate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SeniorPoolStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SeniorPoolStatus entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SeniorPoolStatus", id.toString(), this);
    }
  }

  static load(id: string): SeniorPoolStatus | null {
    return changetype<SeniorPoolStatus | null>(
      store.get("SeniorPoolStatus", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rawBalance(): BigInt {
    let value = this.get("rawBalance");
    return value!.toBigInt();
  }

  set rawBalance(value: BigInt) {
    this.set("rawBalance", Value.fromBigInt(value));
  }

  get compoundBalance(): BigInt {
    let value = this.get("compoundBalance");
    return value!.toBigInt();
  }

  set compoundBalance(value: BigInt) {
    this.set("compoundBalance", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get sharePrice(): BigInt {
    let value = this.get("sharePrice");
    return value!.toBigInt();
  }

  set sharePrice(value: BigInt) {
    this.set("sharePrice", Value.fromBigInt(value));
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    return value!.toBigInt();
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }

  get totalPoolAssets(): BigInt {
    let value = this.get("totalPoolAssets");
    return value!.toBigInt();
  }

  set totalPoolAssets(value: BigInt) {
    this.set("totalPoolAssets", Value.fromBigInt(value));
  }

  get totalLoansOutstanding(): BigInt {
    let value = this.get("totalLoansOutstanding");
    return value!.toBigInt();
  }

  set totalLoansOutstanding(value: BigInt) {
    this.set("totalLoansOutstanding", Value.fromBigInt(value));
  }

  get cumulativeWritedowns(): BigInt {
    let value = this.get("cumulativeWritedowns");
    return value!.toBigInt();
  }

  set cumulativeWritedowns(value: BigInt) {
    this.set("cumulativeWritedowns", Value.fromBigInt(value));
  }

  get cumulativeDrawdowns(): BigInt {
    let value = this.get("cumulativeDrawdowns");
    return value!.toBigInt();
  }

  set cumulativeDrawdowns(value: BigInt) {
    this.set("cumulativeDrawdowns", Value.fromBigInt(value));
  }

  get estimatedTotalInterest(): BigInt {
    let value = this.get("estimatedTotalInterest");
    return value!.toBigInt();
  }

  set estimatedTotalInterest(value: BigInt) {
    this.set("estimatedTotalInterest", Value.fromBigInt(value));
  }

  get estimatedApy(): BigInt {
    let value = this.get("estimatedApy");
    return value!.toBigInt();
  }

  set estimatedApy(value: BigInt) {
    this.set("estimatedApy", Value.fromBigInt(value));
  }

  get defaultRate(): BigInt {
    let value = this.get("defaultRate");
    return value!.toBigInt();
  }

  set defaultRate(value: BigInt) {
    this.set("defaultRate", Value.fromBigInt(value));
  }

  get remainingCapacity(): BigInt | null {
    let value = this.get("remainingCapacity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set remainingCapacity(value: BigInt | null) {
    if (!value) {
      this.unset("remainingCapacity");
    } else {
      this.set("remainingCapacity", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class CapitalProviderStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("numShares", Value.fromBigInt(BigInt.zero()));
    this.set("availableToWithdraw", Value.fromBigInt(BigInt.zero()));
    this.set("allowance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CapitalProviderStatus entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CapitalProviderStatus entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CapitalProviderStatus", id.toString(), this);
    }
  }

  static load(id: string): CapitalProviderStatus | null {
    return changetype<CapitalProviderStatus | null>(
      store.get("CapitalProviderStatus", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get numShares(): BigInt {
    let value = this.get("numShares");
    return value!.toBigInt();
  }

  set numShares(value: BigInt) {
    this.set("numShares", Value.fromBigInt(value));
  }

  get availableToWithdraw(): BigInt {
    let value = this.get("availableToWithdraw");
    return value!.toBigInt();
  }

  set availableToWithdraw(value: BigInt) {
    this.set("availableToWithdraw", Value.fromBigInt(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    return value!.toBigInt();
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get weightedAverageSharePrice(): BigDecimal | null {
    let value = this.get("weightedAverageSharePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set weightedAverageSharePrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("weightedAverageSharePrice");
    } else {
      this.set(
        "weightedAverageSharePrice",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get unrealizedGains(): BigDecimal | null {
    let value = this.get("unrealizedGains");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set unrealizedGains(value: BigDecimal | null) {
    if (!value) {
      this.unset("unrealizedGains");
    } else {
      this.set("unrealizedGains", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get unrealizedGainsPercentage(): BigDecimal | null {
    let value = this.get("unrealizedGainsPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set unrealizedGainsPercentage(value: BigDecimal | null) {
    if (!value) {
      this.unset("unrealizedGainsPercentage");
    } else {
      this.set(
        "unrealizedGainsPercentage",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get availableToWithdrawInDollars(): BigInt | null {
    let value = this.get("availableToWithdrawInDollars");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set availableToWithdrawInDollars(value: BigInt | null) {
    if (!value) {
      this.unset("availableToWithdrawInDollars");
    } else {
      this.set("availableToWithdrawInDollars", Value.fromBigInt(<BigInt>value));
    }
  }

  get unrealizedGainsInDollars(): BigInt | null {
    let value = this.get("unrealizedGainsInDollars");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set unrealizedGainsInDollars(value: BigInt | null) {
    if (!value) {
      this.unset("unrealizedGainsInDollars");
    } else {
      this.set("unrealizedGainsInDollars", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SeniorPoolDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("shares", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SeniorPoolDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SeniorPoolDeposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SeniorPoolDeposit", id.toString(), this);
    }
  }

  static load(id: string): SeniorPoolDeposit | null {
    return changetype<SeniorPoolDeposit | null>(
      store.get("SeniorPoolDeposit", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("goListed", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get capitalProviderStatus(): string | null {
    let value = this.get("capitalProviderStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set capitalProviderStatus(value: string | null) {
    if (!value) {
      this.unset("capitalProviderStatus");
    } else {
      this.set("capitalProviderStatus", Value.fromString(<string>value));
    }
  }

  get goListed(): boolean {
    let value = this.get("goListed");
    return value!.toBoolean();
  }

  set goListed(value: boolean) {
    this.set("goListed", Value.fromBoolean(value));
  }

  get seniorPoolDeposits(): Array<string> {
    let value = this.get("seniorPoolDeposits");
    return value!.toStringArray();
  }

  set seniorPoolDeposits(value: Array<string>) {
    this.set("seniorPoolDeposits", Value.fromStringArray(value));
  }
}
