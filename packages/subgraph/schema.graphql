"""
Notes
- address are mapped as IDs
- We are using reverse lookups to create virtual fields:
  https://thegraph.com/docs/developer/create-subgraph-hosted#reverse-lookups
"""
type SeniorPool @entity {
  id: ID!
  latestPoolStatus: SeniorPoolStatus!
  investmentsMade: [TranchedPool!]!
}

type SeniorPoolStakedPosition @entity {
  id: ID!
  user: User!
  amount: BigInt!
  """
  Beginning of vesting schedule.
  """
  startTime: BigInt
  """
  End of vesting schedule.
  """
  endTime: BigInt
}

type SeniorPoolStatus @entity {
  """
  This entity is a singleton, so the id is always "1"
  """
  id: ID!
  rawBalance: BigInt!
  compoundBalance: BigInt!
  balance: BigInt!
  """
  The actual amount of USDC associated with the Senior Pool contract, can also be thought of as the Senior Pool's liquidity in USDC
  """
  usdcBalance: BigInt!
  sharePrice: BigInt!
  totalShares: BigInt!
  totalPoolAssets: BigInt!
  totalPoolAssetsUsdc: BigInt!
  totalLoansOutstanding: BigInt!
  cumulativeWritedowns: BigInt!
  tranchedPools: [TranchedPool!]!
  cumulativeDrawdowns: BigInt! # TODO requries tranched pool data
  estimatedTotalInterest: BigDecimal!
  estimatedApy: BigDecimal!
  estimatedApyFromGfiRaw: BigDecimal!
  defaultRate: BigInt! # TODO requires cumulativeDrawdowns
  remainingCapacity: BigInt # TODO requires goldfinchConfig.totalFundsLimit
}

type SeniorPoolDeposit @entity {
  """
  tx hash
  """
  id: ID!
  user: User!
  shares: BigInt!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

enum UserType {
  BACKER
  CAPITAL_PROVIDER
  BORROWER
}

type User @entity {
  id: ID!
  type: UserType
  """
  This includes the amount staked in the senior pool. Doesn't count senior pool shares obtained through a secondary market.
  """
  seniorPoolBalance: BigInt!
  """
  Amount of FIDU the user has staked
  """
  stakedSeniorPoolBalance: BigInt!
  seniorPoolDeposits: [SeniorPoolDeposit!]! @derivedFrom(field: "user")
  seniorPoolStakedPositions: [SeniorPoolStakedPosition!]! @derivedFrom(field: "user")

  tranchedPoolsDeposits: [TranchedPoolDeposit!]! @derivedFrom(field: "user")
  poolBackers: [PoolBacker!]! @derivedFrom(field: "user")
  tokens: [TranchedPoolToken!]! @derivedFrom(field: "user")
  zaps: [Zap!]! @derivedFrom(field: "user")

  isNonUsIndividual: Boolean!
  isUsAccreditedIndividual: Boolean!
  isUsNonAccreditedIndividual: Boolean!
  isUsEntity: Boolean!
  isNonUsEntity: Boolean!
  isGoListed: Boolean!

  transactions: [Transaction!]! @derivedFrom(field: "user")
}

type SeniorTrancheInfo @entity {
  id: ID!
  trancheId: BigInt!
  tranchedPool: TranchedPool!
  lockedUntil: BigInt!
  principalDeposited: BigInt!
  principalSharePrice: BigInt!
  interestSharePrice: BigInt!
}

type JuniorTrancheInfo @entity {
  id: ID!
  trancheId: BigInt!
  tranchedPool: TranchedPool!
  lockedUntil: BigInt!
  principalDeposited: BigInt!
  principalSharePrice: BigInt!
  interestSharePrice: BigInt!
}

type TranchedPoolDeposit @entity {
  id: ID! # Set to transaction hash
  user: User!
  tranchedPool: TranchedPool!
  tranche: BigInt!
  tokenId: BigInt!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type PoolBacker @entity {
  id: ID! # Set to `${tranchedPool.id}-${user.id}`
  user: User!
  tranchedPool: TranchedPool!
  balance: BigInt!
  unrealizedGains: BigInt!
  principalAmount: BigInt!
  principalRedeemed: BigInt!
  interestRedeemed: BigInt!
  principalAtRisk: BigInt!
  principalRedeemable: BigInt!
  interestRedeemable: BigInt!
  availableToWithdraw: BigInt!

  rewardsClaimable: BigInt!
  rewardsClaimed: BigInt!
}

type CreditLine @entity {
  id: ID!
  borrower: Bytes!
  tranchedPool: TranchedPool!
  limit: BigInt!
  maxLimit: BigInt!
  interestApr: BigInt!
  balance: BigInt!
  remainingPeriodDueAmount: BigInt!
  remainingTotalDueAmount: BigInt!
  availableCredit: BigInt!
  interestAccruedAsOf: BigInt!
  paymentPeriodInDays: BigInt!
  termInDays: BigInt!
  nextDueTime: BigInt!
  interestOwed: BigInt!
  termEndTime: BigInt!
  termStartTime: BigInt!
  lastFullPaymentTime: BigInt!
  version: TranchedPoolCreditLineVersion!
  lateFeeApr: BigDecimal!
  # These fields are marked as nullable as they
  # either require information not yet available on the subgraph,
  # or are not used on the pages we are integrating.
  periodDueAmount: BigInt
  interestAprDecimal: BigDecimal!
  collectedPaymentBalance: BigInt
  totalDueAmount: BigInt
  dueDate: String
  isEligibleForRewards: Boolean!
  name: String
}

enum TranchedPoolCreditLineVersion {
  BEFORE_V2_2
  V2_2
}

enum UidType {
  NON_US_INDIVIDUAL
  US_ACCREDITED_INDIVIDUAL
  US_NON_ACCREDITED_INDIVIDUAL
  US_ENTITY
  NON_US_ENTITY
}

type TranchedPool @entity {
  id: ID!
  estimatedJuniorApy: BigDecimal!
  estimatedJuniorApyFromGfiRaw: BigDecimal!
  estimatedTotalAssets: BigInt!
  estimatedLeverageRatio: BigInt
  remainingCapacity: BigInt!
  """
  Note that this is just an estimate based on the fixed leverage ratio. If leverage ratio was not fixed, it would be much harder to estimate the remaining junior capacity
  """
  remainingJuniorCapacity: BigInt!
  creditLine: CreditLine!
  isPaused: Boolean!
  """
  Set to true for tranched pools that were created before the advent of junior/senior tranches. These pools have junior investment only, and they are considered legacy
  """
  isV1StyleDeal: Boolean!
  juniorFeePercent: BigInt!
  reserveFeePercent: BigInt!
  totalDeposited: BigInt!
  juniorDeposited: BigInt!
  totalDeployed: BigInt!
  fundableAt: BigInt!
  """
  This number is only becomes non-zero after the senior pool invests in a pool, which happens after the junior portion is locked
  """
  estimatedSeniorPoolContribution: BigInt!
  backers: [PoolBacker!]!
  numBackers: Int!
  tokens: [TranchedPoolToken!]!
  deposits: [TranchedPoolDeposit!]! @derivedFrom(field: "tranchedPool")
  seniorTranches: [SeniorTrancheInfo!]! @derivedFrom(field: "tranchedPool")
  juniorTranches: [JuniorTrancheInfo!]! @derivedFrom(field: "tranchedPool")
  version: TranchedPoolCreditLineVersion!
  createdAt: BigInt!
  allowedUidTypes: [UidType!]!

  transactions: [Transaction!]! @derivedFrom(field: "tranchedPool")

  principalAmountRepaid: BigInt!
  interestAmountRepaid: BigInt!
  """
  Includes principal amount and compounded interest over the entire loan term.
  """
  totalAmountOwed: BigInt!
}

type TranchedPoolToken @entity {
  id: ID! # Set to tokenId
  user: User!
  tranchedPool: TranchedPool!
  tranche: BigInt!
  principalAmount: BigInt!
  principalRedeemed: BigInt!
  interestRedeemed: BigInt!
  interestRedeemable: BigInt!
  principalRedeemable: BigInt!

  rewardsClaimable: BigInt!
  rewardsClaimed: BigInt!
}

type StakingRewardsData @entity {
  id: ID! # Set to "1" because this is a singleton
  """
  The earn rate is a measure per second
  """
  currentEarnRatePerToken: BigInt!
}

type BackerRewardsData @entity {
  id: ID! # Set to "1" because this is a singleton
  contractAddress: String!
  totalRewards: BigInt!
  totalRewardPercentOfTotalGFI: BigDecimal!
  """
  Note that this value is measured in GFI, not dollars
  """
  maxInterestDollarsEligible: BigInt!
}

enum TransactionCategory {
  SENIOR_POOL_DEPOSIT
  SENIOR_POOL_DEPOSIT_AND_STAKE
  SENIOR_POOL_WITHDRAWAL
  SENIOR_POOL_UNSTAKE_AND_WITHDRAWAL
  SENIOR_POOL_REDEMPTION
  TRANCHED_POOL_DEPOSIT
  TRANCHED_POOL_WITHDRAWAL
  TRANCHED_POOL_REPAYMENT
  TRANCHED_POOL_DRAWDOWN
  UID_MINTED
}

type Transaction @entity(immutable: true) {
  """
  This is a concatenation of transaction hash with log index. One transaction can result in more than one of this entity.
  """
  id: Bytes!
  transactionHash: Bytes!
  category: TransactionCategory!
  user: User!
  timestamp: Int!
  blockNumber: Int!
  amount: BigInt!
  tranchedPool: TranchedPool
}

type Zap @entity {
  """
  Note that the ID of a Zap is the same as the ID of the (tranched) pool token it's tied to. Makes it easy to find a Zap corresponding to a pool token.
  """
  id: ID!
  amount: BigInt!
  user: User!
  seniorPoolStakedPosition: SeniorPoolStakedPosition!
  poolToken: TranchedPoolToken!
  tranchedPool: TranchedPool!
}

enum GfiGrantSource {
  MERKLE_DISTRIBUTOR
  BACKER_MERKLE_DISTRIBUTOR
}

type GfiGrant @entity {
  id: ID!
  source: GfiGrantSource!
  index: Int!
  user: User!
  totalGranted: BigInt!
  totalClaimed: BigInt!
  cliffLength: BigInt!
  vestingInterval: BigInt!
  grantedAt: BigInt!
  revokedAt: BigInt!
}
