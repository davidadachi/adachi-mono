{
  "address": "0x98F462B34f2687EBb359f971aB2DC24B84dE66f5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditLine",
          "type": "address"
        }
      ],
      "name": "CreditLineCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditLine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "drawdownAmount",
          "type": "uint256"
        }
      ],
      "name": "DrawdownMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underwriter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "GovernanceUpdatedUnderwriterLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditLine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditLine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditLineAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "applyPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditLineAddress",
          "type": "address"
        }
      ],
      "name": "assessCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditLineAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        }
      ],
      "name": "getBorrowerCreditLines",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditLineAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "asOf",
          "type": "uint256"
        }
      ],
      "name": "getNextPaymentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underwriterAddress",
          "type": "address"
        }
      ],
      "name": "getUnderwriterCreditLines",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract GoldfinchConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_clToMigrate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextDueTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAccruedAsOf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastFullPaymentTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalInterestPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrincipalPaid",
          "type": "uint256"
        }
      ],
      "name": "migrateV1CreditLine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditLineAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underwriterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "setUnderwriterGovernanceLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLoansOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWritedowns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "underwriters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "governanceLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateGoldfinchConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffe6b0d0c6efb8aad0875b14bfe0e5ac5e538772dc92f2c570479171316550a9",
  "receipt": {
    "to": null,
    "from": "0xf3c9B38c155410456b5A98fD8bBf5E35B87F6d96",
    "contractAddress": "0x6C117c26a48d797BEBE367D28768751FA9CD102d",
    "transactionIndex": 13,
    "gasUsed": "3940676",
    "logsBloom": "0x
    "blockHash": "0x4e7f6cad1752df43a9e3210df405156fea5b81145a868514b71de41901997360",
    "transactionHash": "0xffe6b0d0c6efb8aad0875b14bfe0e5ac5e538772dc92f2c570479171316550a9",
    "logs": [],
    "blockNumber": 9121396,
    "cumulativeGasUsed": "6171927",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6810fd0fbb39f4621f6dd945b08843ee",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditLine\",\"type\":\"address\"}],\"name\":\"CreditLineCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditLine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drawdownAmount\",\"type\":\"uint256\"}],\"name\":\"DrawdownMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"GovernanceUpdatedUnderwriterLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditLine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditLine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditLineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"applyPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditLineAddress\",\"type\":\"address\"}],\"name\":\"assessCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditLineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"}],\"name\":\"getBorrowerCreditLines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditLineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"asOf\",\"type\":\"uint256\"}],\"name\":\"getNextPaymentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underwriterAddress\",\"type\":\"address\"}],\"name\":\"getUnderwriterCreditLines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clToMigrate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextDueTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAccruedAsOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFullPaymentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipalPaid\",\"type\":\"uint256\"}],\"name\":\"migrateV1CreditLine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditLineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underwriterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setUnderwriterGovernanceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoansOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWritedowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underwriters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"governanceLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateGoldfinchConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Goldfinch\",\"kind\":\"dev\",\"methods\":{\"assessCreditLine(address)\":{\"params\":{\"creditLineAddress\":\"The creditline that should be assessed.\"}},\"drawdown(address,uint256)\":{\"params\":{\"amount\":\"The amount, in USDC atomic units, that a borrower wishes to drawdown Requirements: - the caller must be the borrower on the creditLine\",\"creditLineAddress\":\"The creditline from which they would like to drawdown\"}},\"getBorrowerCreditLines(address)\":{\"params\":{\"borrowerAddress\":\"The borrower address you would like to see the credit lines of.\"}},\"getNextPaymentAmount(address,uint256)\":{\"params\":{\"asOf\":\"The timestamp to use for the payment calculation, if it is set to 0, uses the current time\",\"creditLineAddress\":\"The creditLine to calculate the payment for\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getUnderwriterCreditLines(address)\":{\"params\":{\"underwriterAddress\":\"The underwriter address you would like to see the credit lines of.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"_config\":\"The address of the GoldfinchConfig contract\",\"owner\":\"The address of who should have the \\\"OWNER_ROLE\\\" of this contract\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay(address,uint256)\":{\"params\":{\"amount\":\"The amount, in USDC atomic units, that a borrower wishes to pay\",\"creditLineAddress\":\"The credit line to be paid back\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setUnderwriterGovernanceLimit(address,uint256)\":{\"params\":{\"limit\":\"What the new limit will be set to Requirements: - the caller must have the `OWNER_ROLE`.\",\"underwriterAddress\":\"The address of the underwriter for whom the limit shall change\"}},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"}},\"title\":\"Goldfinch's CreditDesk contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assessCreditLine(address)\":{\"notice\":\"Assesses a particular creditLine. This will apply payments, which will update accounting and  distribute gains or losses back to the pool accordingly. This function is idempotent, and anyone  is allowed to call it.\"},\"drawdown(address,uint256)\":{\"notice\":\"Allows a borrower to drawdown on their creditline.  `amount` USDC is sent to the borrower, and the credit line accounting is updated.\"},\"getBorrowerCreditLines(address)\":{\"notice\":\"Simple getter for the creditlines of a given borrower\"},\"getNextPaymentAmount(address,uint256)\":{\"notice\":\"This function is only meant to be used by frontends. It returns the total payment due for a given creditLine as of the provided timestamp. Returns 0 if no payment is due (e.g. asOf is before the nextDueTime)\"},\"getUnderwriterCreditLines(address)\":{\"notice\":\"Simple getter for the creditlines of a given underwriter\"},\"initialize(address,address)\":{\"notice\":\"Run only once, on initialization\"},\"pay(address,uint256)\":{\"notice\":\"Allows a borrower to repay their loan. Payment is *collected* immediately (by sending it to  the individual CreditLine), but it is not *applied* unless it is after the nextDueTime, or until we assess  the credit line (ie. payment period end).  Any amounts over the minimum payment will be applied to outstanding principal (reducing the effective  interest rate). If there is still any left over, it will remain in the USDC Balance  of the CreditLine, which is held distinct from the Pool amounts, and can not be withdrawn by LP's.\"},\"setUnderwriterGovernanceLimit(address,uint256)\":{\"notice\":\"Sets a particular underwriter's limit of how much credit the DAO will allow them to \\\"create\\\"\"}},\"notice\":\"Main entry point for borrowers and underwriters.  Handles key logic for creating CreditLine's, borrowing money, repayment, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/CreditDesk.sol\":\"CreditDesk\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x50280546205978ca6573541955e15453b4c07a19e6c8ec4f6785a5ae0d7343fb\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x734b5bedb78074a59bca6aff9e5a1801c9c7e9c5314daf32e14857161fb36932\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"contracts/external/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n// solhint-disable\\n// Imported from https://github.com/UMAprotocol/protocol/blob/4d1c8cc47a4df5e79f978cb05647a7432e111a3d/packages/core/contracts/common/implementation/FixedPoint.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5**18`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5**18`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0380f13c21a3895d847fe584d12bb61b4ec90b2e5fee1c248c6a259764fd1977\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IBorrower.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBorrower {\\n  function initialize(address owner, address _config) external;\\n}\\n\",\"keccak256\":\"0xd83222d12cfc0173d8c07b7ef1645aede0c450f76f4fa7cce2e1ad4cd1f80c56\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d2cc9d84c55c0aa2f766aa3cc6371cdc7cf040e88e4f6a34ba1f6d40e2e0b5a\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function drawdown(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n\\n  function applyPayment(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOfBLock) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x11f2741210ea8aeb0b94f56e9418d856be1f235cc18dadd7ea2945506c9b4aa1\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x10d9a993c2288e311e544532ade9e69f7a8c876f8c2fac92da7b5dd2a2a1dafa\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7b5fb02e023b6006a5199992f242caf23f64240c91e625f1390d6ca421b59531\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x130a7bd2ddca4f9da2f9090cbcc1d63c1e21e152baca4779f18939977a5f6c04\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchConfig {\\n  function getNumber(uint256 index) external returns (uint256);\\n\\n  function getAddress(uint256 index) external returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external returns (address);\\n\\n  function setNumber(uint256 index, uint256 newNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4df9680fa1db27f4204d24cd15af68a73c81b62f83c2ca6d3ee6b0a98bc7da9\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) external returns (address);\\n\\n  function updateGoldfinchConfig() external;\\n}\\n\",\"keccak256\":\"0x56767f0afaa74fb42c6e6be43ca846348580145cb455f3dbc6ccd6ed7c762a29\",\"license\":\"MIT\"},\"contracts/interfaces/IMigratedTranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\nimport \\\"./IV1CreditLine.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract IMigratedTranchedPool is ITranchedPool {\\n  function migrateCreditLine(\\n    IV1CreditLine clToMigrate,\\n    uint256 termEndTime,\\n    uint256 nextDueTime,\\n    uint256 interestAccruedAsOf,\\n    uint256 lastFullPaymentTime,\\n    uint256 totalInterestPaid,\\n    uint256 totalPrincipalPaid\\n  ) external virtual returns (IV2CreditLine);\\n}\\n\",\"keccak256\":\"0x9809d12279ff39a6878e0bea4372485f801daa6802340210e7a0cc815cdad802\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 usdcAmount) external virtual;\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual;\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) public virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function drawdown(address to, uint256 amount) public virtual returns (bool);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n\\n  function assets() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc113de25b7c7e2ac0180d32fab63d0eab1f9f6198ebc006e414f4fbd309026c4\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPoolTokens is IERC721 {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdbb1f3480d9d61b5afef1d47d3d5675450e857fd6ade0e48eda5c9e81b2be551\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe514d470a9cb73449976c92844c4a587eea90980153af70e223bc9d6854c2497\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ISeniorPool.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPoolStrategy {\\n  function invest(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256 amount);\\n\\n  function estimateInvestment(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x01dddfa37160df25b52bc4f7dabd6c02e9a0805852bea5f2fa7499b2a7ffa00f\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {Reserved, Senior, Junior}\\n\\n  struct TrancheInfo {\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n}\\n\",\"keccak256\":\"0xd61fffe888e1e32a3af6db55bdb9732fe93903e2fc04dfbda1c2bc44dc39345a\",\"license\":\"MIT\"},\"contracts/interfaces/IV1CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IV1CreditLine {\\n  address public borrower;\\n  address public underwriter;\\n  uint256 public limit;\\n  uint256 public interestApr;\\n  uint256 public paymentPeriodInDays;\\n  uint256 public termInDays;\\n  uint256 public lateFeeApr;\\n\\n  uint256 public balance;\\n  uint256 public interestOwed;\\n  uint256 public principalOwed;\\n  uint256 public termEndBlock;\\n  uint256 public nextDueBlock;\\n  uint256 public interestAccruedAsOfBlock;\\n  uint256 public writedownAmount;\\n  uint256 public lastFullPaymentBlock;\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n}\\n\",\"keccak256\":\"0x36381b8122bb178b87905250b131d8a1209b535f6fd9d079c53560cbe9be3882\",\"license\":\"MIT\"},\"contracts/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xded4213a74e160a0539f6020736604fdc14f432a57665280c3dbc8e7b690d40a\",\"license\":\"MIT\"},\"contracts/protocol/core/Accountant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./CreditLine.sol\\\";\\nimport \\\"../../interfaces/ICreditLine.sol\\\";\\nimport \\\"../../external/FixedPoint.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title The Accountant\\n * @notice Library for handling key financial calculations, such as interest and principal accrual.\\n * @author Goldfinch\\n */\\n\\nlibrary Accountant {\\n  using SafeMath for uint256;\\n  using FixedPoint for FixedPoint.Signed;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FixedPoint for int256;\\n  using FixedPoint for uint256;\\n\\n  // Scaling factor used by FixedPoint.sol. We need this to convert the fixed point raw values back to unscaled\\n  uint256 public constant FP_SCALING_FACTOR = 10**18;\\n  uint256 public constant INTEREST_DECIMALS = 1e18;\\n  uint256 public constant SECONDS_PER_DAY = 60 * 60 * 24;\\n  uint256 public constant SECONDS_PER_YEAR = (SECONDS_PER_DAY * 365);\\n\\n  struct PaymentAllocation {\\n    uint256 interestPayment;\\n    uint256 principalPayment;\\n    uint256 additionalBalancePayment;\\n  }\\n\\n  function calculateInterestAndPrincipalAccrued(\\n    CreditLine cl,\\n    uint256 timestamp,\\n    uint256 lateFeeGracePeriod\\n  ) public view returns (uint256, uint256) {\\n    uint256 balance = cl.balance(); // gas optimization\\n    uint256 interestAccrued = calculateInterestAccrued(cl, balance, timestamp, lateFeeGracePeriod);\\n    uint256 principalAccrued = calculatePrincipalAccrued(cl, balance, timestamp);\\n    return (interestAccrued, principalAccrued);\\n  }\\n\\n  function calculateInterestAndPrincipalAccruedOverPeriod(\\n    CreditLine cl,\\n    uint256 balance,\\n    uint256 startTime,\\n    uint256 endTime,\\n    uint256 lateFeeGracePeriod\\n  ) public view returns (uint256, uint256) {\\n    uint256 interestAccrued = calculateInterestAccruedOverPeriod(cl, balance, startTime, endTime, lateFeeGracePeriod);\\n    uint256 principalAccrued = calculatePrincipalAccrued(cl, balance, endTime);\\n    return (interestAccrued, principalAccrued);\\n  }\\n\\n  function calculatePrincipalAccrued(\\n    ICreditLine cl,\\n    uint256 balance,\\n    uint256 timestamp\\n  ) public view returns (uint256) {\\n    // If we've already accrued principal as of the term end time, then don't accrue more principal\\n    uint256 termEndTime = cl.termEndTime();\\n    if (cl.interestAccruedAsOf() >= termEndTime) {\\n      return 0;\\n    }\\n    if (timestamp >= termEndTime) {\\n      return balance;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function calculateWritedownFor(\\n    ICreditLine cl,\\n    uint256 timestamp,\\n    uint256 gracePeriodInDays,\\n    uint256 maxDaysLate\\n  ) public view returns (uint256, uint256) {\\n    return calculateWritedownForPrincipal(cl, cl.balance(), timestamp, gracePeriodInDays, maxDaysLate);\\n  }\\n\\n  function calculateWritedownForPrincipal(\\n    ICreditLine cl,\\n    uint256 principal,\\n    uint256 timestamp,\\n    uint256 gracePeriodInDays,\\n    uint256 maxDaysLate\\n  ) public view returns (uint256, uint256) {\\n    FixedPoint.Unsigned memory amountOwedPerDay = calculateAmountOwedForOneDay(cl);\\n    if (amountOwedPerDay.isEqual(0)) {\\n      return (0, 0);\\n    }\\n    FixedPoint.Unsigned memory fpGracePeriod = FixedPoint.fromUnscaledUint(gracePeriodInDays);\\n    FixedPoint.Unsigned memory daysLate;\\n\\n    // Excel math: =min(1,max(0,periods_late_in_days-graceperiod_in_days)/MAX_ALLOWED_DAYS_LATE) grace_period = 30,\\n    // Before the term end date, we use the interestOwed to calculate the periods late. However, after the loan term\\n    // has ended, since the interest is a much smaller fraction of the principal, we cannot reliably use interest to\\n    // calculate the periods later.\\n    uint256 totalOwed = cl.interestOwed().add(cl.principalOwed());\\n    daysLate = FixedPoint.fromUnscaledUint(totalOwed).div(amountOwedPerDay);\\n    if (timestamp > cl.termEndTime()) {\\n      uint256 secondsLate = timestamp.sub(cl.termEndTime());\\n      daysLate = daysLate.add(FixedPoint.fromUnscaledUint(secondsLate).div(SECONDS_PER_DAY));\\n    }\\n\\n    FixedPoint.Unsigned memory maxLate = FixedPoint.fromUnscaledUint(maxDaysLate);\\n    FixedPoint.Unsigned memory writedownPercent;\\n    if (daysLate.isLessThanOrEqual(fpGracePeriod)) {\\n      // Within the grace period, we don't have to write down, so assume 0%\\n      writedownPercent = FixedPoint.fromUnscaledUint(0);\\n    } else {\\n      writedownPercent = FixedPoint.min(FixedPoint.fromUnscaledUint(1), (daysLate.sub(fpGracePeriod)).div(maxLate));\\n    }\\n\\n    FixedPoint.Unsigned memory writedownAmount = writedownPercent.mul(principal).div(FP_SCALING_FACTOR);\\n    // This will return a number between 0-100 representing the write down percent with no decimals\\n    uint256 unscaledWritedownPercent = writedownPercent.mul(100).div(FP_SCALING_FACTOR).rawValue;\\n    return (unscaledWritedownPercent, writedownAmount.rawValue);\\n  }\\n\\n  function calculateAmountOwedForOneDay(ICreditLine cl) public view returns (FixedPoint.Unsigned memory interestOwed) {\\n    // Determine theoretical interestOwed for one full day\\n    uint256 totalInterestPerYear = cl.balance().mul(cl.interestApr()).div(INTEREST_DECIMALS);\\n    interestOwed = FixedPoint.fromUnscaledUint(totalInterestPerYear).div(365);\\n    return interestOwed;\\n  }\\n\\n  function calculateInterestAccrued(\\n    CreditLine cl,\\n    uint256 balance,\\n    uint256 timestamp,\\n    uint256 lateFeeGracePeriodInDays\\n  ) public view returns (uint256) {\\n    // We use Math.min here to prevent integer overflow (ie. go negative) when calculating\\n    // numSecondsElapsed. Typically this shouldn't be possible, because\\n    // the interestAccruedAsOf couldn't be *after* the current timestamp. However, when assessing\\n    // we allow this function to be called with a past timestamp, which raises the possibility\\n    // of overflow.\\n    // This use of min should not generate incorrect interest calculations, since\\n    // this function's purpose is just to normalize balances, and handing in a past timestamp\\n    // will necessarily return zero interest accrued (because zero elapsed time), which is correct.\\n    uint256 startTime = Math.min(timestamp, cl.interestAccruedAsOf());\\n    return calculateInterestAccruedOverPeriod(cl, balance, startTime, timestamp, lateFeeGracePeriodInDays);\\n  }\\n\\n  function calculateInterestAccruedOverPeriod(\\n    CreditLine cl,\\n    uint256 balance,\\n    uint256 startTime,\\n    uint256 endTime,\\n    uint256 lateFeeGracePeriodInDays\\n  ) public view returns (uint256 interestOwed) {\\n    uint256 secondsElapsed = endTime.sub(startTime);\\n    uint256 totalInterestPerYear = balance.mul(cl.interestApr()).div(INTEREST_DECIMALS);\\n    interestOwed = totalInterestPerYear.mul(secondsElapsed).div(SECONDS_PER_YEAR);\\n\\n    if (lateFeeApplicable(cl, endTime, lateFeeGracePeriodInDays)) {\\n      uint256 lateFeeInterestPerYear = balance.mul(cl.lateFeeApr()).div(INTEREST_DECIMALS);\\n      uint256 additionalLateFeeInterest = lateFeeInterestPerYear.mul(secondsElapsed).div(SECONDS_PER_YEAR);\\n      interestOwed = interestOwed.add(additionalLateFeeInterest);\\n    }\\n\\n    return interestOwed;\\n  }\\n\\n  function lateFeeApplicable(\\n    CreditLine cl,\\n    uint256 timestamp,\\n    uint256 gracePeriodInDays\\n  ) public view returns (bool) {\\n    uint256 secondsLate = timestamp.sub(cl.lastFullPaymentTime());\\n    return cl.lateFeeApr() > 0 && secondsLate > gracePeriodInDays.mul(SECONDS_PER_DAY);\\n  }\\n\\n  function allocatePayment(\\n    uint256 paymentAmount,\\n    uint256 balance,\\n    uint256 interestOwed,\\n    uint256 principalOwed\\n  ) public pure returns (PaymentAllocation memory) {\\n    uint256 paymentRemaining = paymentAmount;\\n    uint256 interestPayment = Math.min(interestOwed, paymentRemaining);\\n    paymentRemaining = paymentRemaining.sub(interestPayment);\\n\\n    uint256 principalPayment = Math.min(principalOwed, paymentRemaining);\\n    paymentRemaining = paymentRemaining.sub(principalPayment);\\n\\n    uint256 balanceRemaining = balance.sub(principalPayment);\\n    uint256 additionalBalancePayment = Math.min(paymentRemaining, balanceRemaining);\\n\\n    return\\n      PaymentAllocation({\\n        interestPayment: interestPayment,\\n        principalPayment: principalPayment,\\n        additionalBalancePayment: additionalBalancePayment\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0xa5469afa157e3e45c6477705559d53a0ab27c97ece841add74f8cb10cd69466e\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like ugpradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x7506f4edde679faa1260af6e090c4d090a6c39c6d9420d3b1712822219a60b2c\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IFidu.sol\\\";\\nimport \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../../interfaces/ISeniorPoolStrategy.sol\\\";\\nimport \\\"../../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/ICUSDCContract.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchFactory.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(GoldfinchConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getSeniorPool(GoldfinchConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getSeniorPoolStrategy(GoldfinchConfig config) internal view returns (ISeniorPoolStrategy) {\\n    return ISeniorPoolStrategy(seniorPoolStrategyAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getCreditDesk(GoldfinchConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getCUSDCContract(GoldfinchConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function getPoolTokens(GoldfinchConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getGoldfinchFactory(GoldfinchConfig config) internal view returns (IGoldfinchFactory) {\\n    return IGoldfinchFactory(goldfinchFactoryAddress(config));\\n  }\\n\\n  function oneInchAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function creditLineImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  function trustedForwarderAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function poolTokensAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function seniorPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function seniorPoolStrategyAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPoolStrategy));\\n  }\\n\\n  function creditDeskAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function goldfinchFactoryAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function cusdcContractAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function migratedTranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.MigratedTranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n}\\n\",\"keccak256\":\"0x0cdec64089d6644b314c44c48cd2fcee9ecc7e6667520e4f0b77ca865aa514a4\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    GoldfinchFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder,\\n    CUSDCContract,\\n    GoldfinchConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation,\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation\\n  }\\n\\n  function getNumberName(uint256 number) public pure returns (string memory) {\\n    Numbers numberName = Numbers(number);\\n    if (Numbers.TransactionLimit == numberName) {\\n      return \\\"TransactionLimit\\\";\\n    }\\n    if (Numbers.TotalFundsLimit == numberName) {\\n      return \\\"TotalFundsLimit\\\";\\n    }\\n    if (Numbers.MaxUnderwriterLimit == numberName) {\\n      return \\\"MaxUnderwriterLimit\\\";\\n    }\\n    if (Numbers.ReserveDenominator == numberName) {\\n      return \\\"ReserveDenominator\\\";\\n    }\\n    if (Numbers.WithdrawFeeDenominator == numberName) {\\n      return \\\"WithdrawFeeDenominator\\\";\\n    }\\n    if (Numbers.LatenessGracePeriodInDays == numberName) {\\n      return \\\"LatenessGracePeriodInDays\\\";\\n    }\\n    if (Numbers.LatenessMaxDays == numberName) {\\n      return \\\"LatenessMaxDays\\\";\\n    }\\n    if (Numbers.DrawdownPeriodInSeconds == numberName) {\\n      return \\\"DrawdownPeriodInSeconds\\\";\\n    }\\n    if (Numbers.TransferRestrictionPeriodInDays == numberName) {\\n      return \\\"TransferRestrictionPeriodInDays\\\";\\n    }\\n    if (Numbers.LeverageRatio == numberName) {\\n      return \\\"LeverageRatio\\\";\\n    }\\n    revert(\\\"Unknown value passed to getNumberName\\\");\\n  }\\n\\n  function getAddressName(uint256 addressKey) public pure returns (string memory) {\\n    Addresses addressName = Addresses(addressKey);\\n    if (Addresses.Pool == addressName) {\\n      return \\\"Pool\\\";\\n    }\\n    if (Addresses.CreditLineImplementation == addressName) {\\n      return \\\"CreditLineImplementation\\\";\\n    }\\n    if (Addresses.GoldfinchFactory == addressName) {\\n      return \\\"GoldfinchFactory\\\";\\n    }\\n    if (Addresses.CreditDesk == addressName) {\\n      return \\\"CreditDesk\\\";\\n    }\\n    if (Addresses.Fidu == addressName) {\\n      return \\\"Fidu\\\";\\n    }\\n    if (Addresses.USDC == addressName) {\\n      return \\\"USDC\\\";\\n    }\\n    if (Addresses.TreasuryReserve == addressName) {\\n      return \\\"TreasuryReserve\\\";\\n    }\\n    if (Addresses.ProtocolAdmin == addressName) {\\n      return \\\"ProtocolAdmin\\\";\\n    }\\n    if (Addresses.OneInch == addressName) {\\n      return \\\"OneInch\\\";\\n    }\\n    if (Addresses.TrustedForwarder == addressName) {\\n      return \\\"TrustedForwarder\\\";\\n    }\\n    if (Addresses.CUSDCContract == addressName) {\\n      return \\\"CUSDCContract\\\";\\n    }\\n    if (Addresses.PoolTokens == addressName) {\\n      return \\\"PoolTokens\\\";\\n    }\\n    if (Addresses.TranchedPoolImplementation == addressName) {\\n      return \\\"TranchedPoolImplementation\\\";\\n    }\\n    if (Addresses.SeniorPool == addressName) {\\n      return \\\"SeniorPool\\\";\\n    }\\n    if (Addresses.SeniorPoolStrategy == addressName) {\\n      return \\\"SeniorPoolStrategy\\\";\\n    }\\n    if (Addresses.MigratedTranchedPoolImplementation == addressName) {\\n      return \\\"MigratedTranchedPoolImplementation\\\";\\n    }\\n    if (Addresses.BorrowerImplementation == addressName) {\\n      return \\\"BorrowerImplementation\\\";\\n    }\\n    revert(\\\"Unknown value passed to getAddressName\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xc9dffd140d1176a3e90fae9a1fbc703b068e01b6d235b35ad19cced08111f790\",\"license\":\"MIT\"},\"contracts/protocol/core/CreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./ConfigHelper.sol\\\";\\nimport \\\"./Accountant.sol\\\";\\nimport \\\"./CreditLine.sol\\\";\\nimport \\\"./GoldfinchFactory.sol\\\";\\nimport \\\"../../interfaces/IV1CreditLine.sol\\\";\\nimport \\\"../../interfaces/IMigratedTranchedPool.sol\\\";\\n\\n/**\\n * @title Goldfinch's CreditDesk contract\\n * @notice Main entry point for borrowers and underwriters.\\n *  Handles key logic for creating CreditLine's, borrowing money, repayment, etc.\\n * @author Goldfinch\\n */\\n\\ncontract CreditDesk is BaseUpgradeablePausable, ICreditDesk {\\n  uint256 public constant SECONDS_PER_DAY = 60 * 60 * 24;\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  struct Underwriter {\\n    uint256 governanceLimit;\\n    address[] creditLines;\\n  }\\n\\n  struct Borrower {\\n    address[] creditLines;\\n  }\\n\\n  event PaymentApplied(\\n    address indexed payer,\\n    address indexed creditLine,\\n    uint256 interestAmount,\\n    uint256 principalAmount,\\n    uint256 remainingAmount\\n  );\\n  event PaymentCollected(address indexed payer, address indexed creditLine, uint256 paymentAmount);\\n  event DrawdownMade(address indexed borrower, address indexed creditLine, uint256 drawdownAmount);\\n  event CreditLineCreated(address indexed borrower, address indexed creditLine);\\n  event GovernanceUpdatedUnderwriterLimit(address indexed underwriter, uint256 newLimit);\\n\\n  mapping(address => Underwriter) public underwriters;\\n  mapping(address => Borrower) private borrowers;\\n  mapping(address => address) private creditLines;\\n\\n  /**\\n   * @notice Run only once, on initialization\\n   * @param owner The address of who should have the \\\"OWNER_ROLE\\\" of this contract\\n   * @param _config The address of the GoldfinchConfig contract\\n   */\\n  function initialize(address owner, GoldfinchConfig _config) public initializer {\\n    require(owner != address(0) && address(_config) != address(0), \\\"Owner and config addresses cannot be empty\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    config = _config;\\n  }\\n\\n  /**\\n   * @notice Sets a particular underwriter's limit of how much credit the DAO will allow them to \\\"create\\\"\\n   * @param underwriterAddress The address of the underwriter for whom the limit shall change\\n   * @param limit What the new limit will be set to\\n   * Requirements:\\n   *\\n   * - the caller must have the `OWNER_ROLE`.\\n   */\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit)\\n    external\\n    override\\n    onlyAdmin\\n    whenNotPaused\\n  {\\n    require(withinMaxUnderwriterLimit(limit), \\\"This limit is greater than the max allowed by the protocol\\\");\\n    underwriters[underwriterAddress].governanceLimit = limit;\\n    emit GovernanceUpdatedUnderwriterLimit(underwriterAddress, limit);\\n  }\\n\\n  /**\\n   * @notice Allows a borrower to drawdown on their creditline.\\n   *  `amount` USDC is sent to the borrower, and the credit line accounting is updated.\\n   * @param creditLineAddress The creditline from which they would like to drawdown\\n   * @param amount The amount, in USDC atomic units, that a borrower wishes to drawdown\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be the borrower on the creditLine\\n   */\\n  function drawdown(address creditLineAddress, uint256 amount)\\n    external\\n    override\\n    whenNotPaused\\n    onlyValidCreditLine(creditLineAddress)\\n  {\\n    CreditLine cl = CreditLine(creditLineAddress);\\n    Borrower storage borrower = borrowers[msg.sender];\\n    require(borrower.creditLines.length > 0, \\\"No credit lines exist for this borrower\\\");\\n    require(amount > 0, \\\"Must drawdown more than zero\\\");\\n    require(cl.borrower() == msg.sender, \\\"You are not the borrower of this credit line\\\");\\n    require(withinTransactionLimit(amount), \\\"Amount is over the per-transaction limit\\\");\\n    uint256 unappliedBalance = getUSDCBalance(creditLineAddress);\\n    require(\\n      withinCreditLimit(amount, unappliedBalance, cl),\\n      \\\"The borrower does not have enough credit limit for this drawdown\\\"\\n    );\\n\\n    uint256 balance = cl.balance();\\n\\n    if (balance == 0) {\\n      cl.setInterestAccruedAsOf(currentTime());\\n      cl.setLastFullPaymentTime(currentTime());\\n    }\\n\\n    IPool pool = config.getPool();\\n\\n    // If there is any balance on the creditline that has not been applied yet, then use that first before\\n    // drawing down from the pool. This is to support cases where the borrower partially pays back the\\n    // principal before the due date, but then decides to drawdown again\\n    uint256 amountToTransferFromCL;\\n    if (unappliedBalance > 0) {\\n      if (amount > unappliedBalance) {\\n        amountToTransferFromCL = unappliedBalance;\\n        amount = amount.sub(unappliedBalance);\\n      } else {\\n        amountToTransferFromCL = amount;\\n        amount = 0;\\n      }\\n      bool success = pool.transferFrom(creditLineAddress, msg.sender, amountToTransferFromCL);\\n      require(success, \\\"Failed to drawdown\\\");\\n    }\\n\\n    (uint256 interestOwed, uint256 principalOwed) = updateAndGetInterestAndPrincipalOwedAsOf(cl, currentTime());\\n    balance = balance.add(amount);\\n\\n    updateCreditLineAccounting(cl, balance, interestOwed, principalOwed);\\n\\n    // Must put this after we update the credit line accounting, so we're using the latest\\n    // interestOwed\\n    require(!isLate(cl, currentTime()), \\\"Cannot drawdown when payments are past due\\\");\\n    emit DrawdownMade(msg.sender, address(cl), amount.add(amountToTransferFromCL));\\n\\n    if (amount > 0) {\\n      bool success = pool.drawdown(msg.sender, amount);\\n      require(success, \\\"Failed to drawdown\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows a borrower to repay their loan. Payment is *collected* immediately (by sending it to\\n   *  the individual CreditLine), but it is not *applied* unless it is after the nextDueTime, or until we assess\\n   *  the credit line (ie. payment period end).\\n   *  Any amounts over the minimum payment will be applied to outstanding principal (reducing the effective\\n   *  interest rate). If there is still any left over, it will remain in the USDC Balance\\n   *  of the CreditLine, which is held distinct from the Pool amounts, and can not be withdrawn by LP's.\\n   * @param creditLineAddress The credit line to be paid back\\n   * @param amount The amount, in USDC atomic units, that a borrower wishes to pay\\n   */\\n  function pay(address creditLineAddress, uint256 amount)\\n    external\\n    override\\n    whenNotPaused\\n    onlyValidCreditLine(creditLineAddress)\\n  {\\n    require(amount > 0, \\\"Must pay more than zero\\\");\\n    CreditLine cl = CreditLine(creditLineAddress);\\n\\n    collectPayment(cl, amount);\\n    assessCreditLine(creditLineAddress);\\n  }\\n\\n  /**\\n   * @notice Assesses a particular creditLine. This will apply payments, which will update accounting and\\n   *  distribute gains or losses back to the pool accordingly. This function is idempotent, and anyone\\n   *  is allowed to call it.\\n   * @param creditLineAddress The creditline that should be assessed.\\n   */\\n  function assessCreditLine(address creditLineAddress)\\n    public\\n    override\\n    whenNotPaused\\n    onlyValidCreditLine(creditLineAddress)\\n  {\\n    CreditLine cl = CreditLine(creditLineAddress);\\n    // Do not assess until a full period has elapsed or past due\\n    require(cl.balance() > 0, \\\"Must have balance to assess credit line\\\");\\n\\n    // Don't assess credit lines early!\\n    if (currentTime() < cl.nextDueTime() && !isLate(cl, currentTime())) {\\n      return;\\n    }\\n\\n    uint256 timeToAssess = calculateNextDueTime(cl);\\n    cl.setNextDueTime(timeToAssess);\\n\\n    // We always want to assess for the most recently *past* nextDueTime.\\n    // So if the recalculation above sets the nextDueTime into the future,\\n    // then ensure we pass in the one just before this.\\n    if (timeToAssess > currentTime()) {\\n      uint256 secondsPerPeriod = cl.paymentPeriodInDays().mul(SECONDS_PER_DAY);\\n      timeToAssess = timeToAssess.sub(secondsPerPeriod);\\n    }\\n    _applyPayment(cl, getUSDCBalance(address(cl)), timeToAssess);\\n  }\\n\\n  function applyPayment(address creditLineAddress, uint256 amount)\\n    external\\n    override\\n    whenNotPaused\\n    onlyValidCreditLine(creditLineAddress)\\n  {\\n    CreditLine cl = CreditLine(creditLineAddress);\\n    require(cl.borrower() == msg.sender, \\\"You do not belong to this credit line\\\");\\n    _applyPayment(cl, amount, currentTime());\\n  }\\n\\n  function migrateV1CreditLine(\\n    address _clToMigrate,\\n    address borrower,\\n    uint256 termEndTime,\\n    uint256 nextDueTime,\\n    uint256 interestAccruedAsOf,\\n    uint256 lastFullPaymentTime,\\n    uint256 totalInterestPaid,\\n    uint256 totalPrincipalPaid\\n  ) public onlyAdmin returns (address, address) {\\n    IV1CreditLine clToMigrate = IV1CreditLine(_clToMigrate);\\n    uint256 originalBalance = clToMigrate.balance();\\n    require(clToMigrate.limit() > 0, \\\"Can't migrate empty credit line\\\");\\n    require(originalBalance > 0, \\\"Can't migrate credit line that's currently paid off\\\");\\n    // Ensure it is a v1 creditline by calling a function that only exists on v1\\n    require(clToMigrate.nextDueBlock() > 0, \\\"Invalid creditline\\\");\\n    if (borrower == address(0)) {\\n      borrower = clToMigrate.borrower();\\n    }\\n    // We're migrating from 1e8 decimal precision of interest rates to 1e18\\n    // So multiply the legacy rates by 1e10 to normalize them.\\n    uint256 interestMigrationFactor = 1e10;\\n    address pool = getGoldfinchFactory().createMigratedPool(\\n      borrower,\\n      20, // junior fee percent\\n      clToMigrate.limit(),\\n      clToMigrate.interestApr().mul(interestMigrationFactor),\\n      clToMigrate.paymentPeriodInDays(),\\n      clToMigrate.termInDays(),\\n      clToMigrate.lateFeeApr()\\n    );\\n\\n    IV2CreditLine newCl = IMigratedTranchedPool(pool).migrateCreditLine(\\n      clToMigrate,\\n      termEndTime,\\n      nextDueTime,\\n      interestAccruedAsOf,\\n      lastFullPaymentTime,\\n      totalInterestPaid,\\n      totalPrincipalPaid\\n    );\\n\\n    // Close out the original credit line\\n    clToMigrate.setLimit(0);\\n    clToMigrate.setBalance(0);\\n    IERC20withDec usdc = config.getUSDC();\\n    bool success = usdc.transferFrom(address(clToMigrate), address(newCl), usdc.balanceOf(address(clToMigrate)));\\n    require(success, \\\"Failed to transfer funds\\\");\\n\\n    // Some sanity checks on the migration\\n    require(newCl.balance() == originalBalance, \\\"Balance did not migrate properly\\\");\\n    require(newCl.interestAccruedAsOf() == interestAccruedAsOf, \\\"Interest accrued as of did not migrate properly\\\");\\n    return (address(newCl), pool);\\n  }\\n\\n  /**\\n   * @notice Simple getter for the creditlines of a given underwriter\\n   * @param underwriterAddress The underwriter address you would like to see the credit lines of.\\n   */\\n  function getUnderwriterCreditLines(address underwriterAddress) public view returns (address[] memory) {\\n    return underwriters[underwriterAddress].creditLines;\\n  }\\n\\n  /**\\n   * @notice Simple getter for the creditlines of a given borrower\\n   * @param borrowerAddress The borrower address you would like to see the credit lines of.\\n   */\\n  function getBorrowerCreditLines(address borrowerAddress) public view returns (address[] memory) {\\n    return borrowers[borrowerAddress].creditLines;\\n  }\\n\\n  /**\\n   * @notice This function is only meant to be used by frontends. It returns the total\\n   * payment due for a given creditLine as of the provided timestamp. Returns 0 if no\\n   * payment is due (e.g. asOf is before the nextDueTime)\\n   * @param creditLineAddress The creditLine to calculate the payment for\\n   * @param asOf The timestamp to use for the payment calculation, if it is set to 0, uses the current time\\n   */\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOf)\\n    external\\n    view\\n    override\\n    onlyValidCreditLine(creditLineAddress)\\n    returns (uint256)\\n  {\\n    if (asOf == 0) {\\n      asOf = currentTime();\\n    }\\n    CreditLine cl = CreditLine(creditLineAddress);\\n\\n    if (asOf < cl.nextDueTime() && !isLate(cl, currentTime())) {\\n      return 0;\\n    }\\n\\n    (uint256 interestAccrued, uint256 principalAccrued) = Accountant.calculateInterestAndPrincipalAccrued(\\n      cl,\\n      asOf,\\n      config.getLatenessGracePeriodInDays()\\n    );\\n    return cl.interestOwed().add(interestAccrued).add(cl.principalOwed().add(principalAccrued));\\n  }\\n\\n  function updateGoldfinchConfig() external onlyAdmin {\\n    config = GoldfinchConfig(config.configAddress());\\n  }\\n\\n  /*\\n   * Internal Functions\\n   */\\n\\n  /**\\n   * @notice Collects `amount` of payment for a given credit line. This sends money from the payer to the credit line.\\n   *  Note that payment is not *applied* when calling this function. Only collected (ie. held) for later application.\\n   * @param cl The CreditLine the payment will be collected for.\\n   * @param amount The amount, in USDC atomic units, to be collected\\n   */\\n  function collectPayment(CreditLine cl, uint256 amount) internal {\\n    require(withinTransactionLimit(amount), \\\"Amount is over the per-transaction limit\\\");\\n\\n    emit PaymentCollected(msg.sender, address(cl), amount);\\n\\n    bool success = config.getPool().transferFrom(msg.sender, address(cl), amount);\\n    require(success, \\\"Failed to collect payment\\\");\\n  }\\n\\n  /**\\n   * @notice Applies `amount` of payment for a given credit line. This moves already collected money into the Pool.\\n   *  It also updates all the accounting variables. Note that interest is always paid back first, then principal.\\n   *  Any extra after paying the minimum will go towards existing principal (reducing the\\n   *  effective interest rate). Any extra after the full loan has been paid off will remain in the\\n   *  USDC Balance of the creditLine, where it will be automatically used for the next drawdown.\\n   * @param cl The CreditLine the payment will be collected for.\\n   * @param amount The amount, in USDC atomic units, to be applied\\n   * @param timestamp The timestamp on which accrual calculations should be based. This allows us\\n   *  to be precise when we assess a Credit Line\\n   */\\n  function _applyPayment(\\n    CreditLine cl,\\n    uint256 amount,\\n    uint256 timestamp\\n  ) internal {\\n    (uint256 paymentRemaining, uint256 interestPayment, uint256 principalPayment) = handlePayment(\\n      cl,\\n      amount,\\n      timestamp\\n    );\\n\\n    IPool pool = config.getPool();\\n\\n    if (interestPayment > 0 || principalPayment > 0) {\\n      emit PaymentApplied(cl.borrower(), address(cl), interestPayment, principalPayment, paymentRemaining);\\n      pool.collectInterestAndPrincipal(address(cl), interestPayment, principalPayment);\\n    }\\n  }\\n\\n  function handlePayment(\\n    CreditLine cl,\\n    uint256 paymentAmount,\\n    uint256 timestamp\\n  )\\n    internal\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    (uint256 interestOwed, uint256 principalOwed) = updateAndGetInterestAndPrincipalOwedAsOf(cl, timestamp);\\n    Accountant.PaymentAllocation memory pa = Accountant.allocatePayment(\\n      paymentAmount,\\n      cl.balance(),\\n      interestOwed,\\n      principalOwed\\n    );\\n\\n    uint256 newBalance = cl.balance().sub(pa.principalPayment);\\n    // Apply any additional payment towards the balance\\n    newBalance = newBalance.sub(pa.additionalBalancePayment);\\n    uint256 totalPrincipalPayment = cl.balance().sub(newBalance);\\n    uint256 paymentRemaining = paymentAmount.sub(pa.interestPayment).sub(totalPrincipalPayment);\\n\\n    updateCreditLineAccounting(\\n      cl,\\n      newBalance,\\n      interestOwed.sub(pa.interestPayment),\\n      principalOwed.sub(pa.principalPayment)\\n    );\\n\\n    assert(paymentRemaining.add(pa.interestPayment).add(totalPrincipalPayment) == paymentAmount);\\n\\n    return (paymentRemaining, pa.interestPayment, totalPrincipalPayment);\\n  }\\n\\n  function isLate(CreditLine cl, uint256 timestamp) internal view returns (bool) {\\n    uint256 secondsElapsedSinceFullPayment = timestamp.sub(cl.lastFullPaymentTime());\\n    return secondsElapsedSinceFullPayment > cl.paymentPeriodInDays().mul(SECONDS_PER_DAY);\\n  }\\n\\n  function getGoldfinchFactory() internal view returns (GoldfinchFactory) {\\n    return GoldfinchFactory(config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory)));\\n  }\\n\\n  function updateAndGetInterestAndPrincipalOwedAsOf(CreditLine cl, uint256 timestamp)\\n    internal\\n    returns (uint256, uint256)\\n  {\\n    (uint256 interestAccrued, uint256 principalAccrued) = Accountant.calculateInterestAndPrincipalAccrued(\\n      cl,\\n      timestamp,\\n      config.getLatenessGracePeriodInDays()\\n    );\\n    if (interestAccrued > 0) {\\n      // If we've accrued any interest, update interestAccruedAsOf to the time that we've\\n      // calculated interest for. If we've not accrued any interest, then we keep the old value so the next\\n      // time the entire period is taken into account.\\n      cl.setInterestAccruedAsOf(timestamp);\\n    }\\n    return (cl.interestOwed().add(interestAccrued), cl.principalOwed().add(principalAccrued));\\n  }\\n\\n  function withinCreditLimit(\\n    uint256 amount,\\n    uint256 unappliedBalance,\\n    CreditLine cl\\n  ) internal view returns (bool) {\\n    return cl.balance().add(amount).sub(unappliedBalance) <= cl.limit();\\n  }\\n\\n  function withinTransactionLimit(uint256 amount) internal view returns (bool) {\\n    return amount <= config.getNumber(uint256(ConfigOptions.Numbers.TransactionLimit));\\n  }\\n\\n  function calculateNewTermEndTime(CreditLine cl, uint256 balance) internal view returns (uint256) {\\n    // If there's no balance, there's no loan, so there's no term end time\\n    if (balance == 0) {\\n      return 0;\\n    }\\n    // Don't allow any weird bugs where we add to your current end time. This\\n    // function should only be used on new credit lines, when we are setting them up\\n    if (cl.termEndTime() != 0) {\\n      return cl.termEndTime();\\n    }\\n    return currentTime().add(SECONDS_PER_DAY.mul(cl.termInDays()));\\n  }\\n\\n  function calculateNextDueTime(CreditLine cl) internal view returns (uint256) {\\n    uint256 secondsPerPeriod = cl.paymentPeriodInDays().mul(SECONDS_PER_DAY);\\n    uint256 balance = cl.balance();\\n    uint256 nextDueTime = cl.nextDueTime();\\n    uint256 curTimestamp = currentTime();\\n    // You must have just done your first drawdown\\n    if (nextDueTime == 0 && balance > 0) {\\n      return curTimestamp.add(secondsPerPeriod);\\n    }\\n\\n    // Active loan that has entered a new period, so return the *next* nextDueTime.\\n    // But never return something after the termEndTime\\n    if (balance > 0 && curTimestamp >= nextDueTime) {\\n      uint256 secondsToAdvance = (curTimestamp.sub(nextDueTime).div(secondsPerPeriod)).add(1).mul(secondsPerPeriod);\\n      nextDueTime = nextDueTime.add(secondsToAdvance);\\n      return Math.min(nextDueTime, cl.termEndTime());\\n    }\\n\\n    // Your paid off, or have not taken out a loan yet, so no next due time.\\n    if (balance == 0 && nextDueTime != 0) {\\n      return 0;\\n    }\\n    // Active loan in current period, where we've already set the nextDueTime correctly, so should not change.\\n    if (balance > 0 && curTimestamp < nextDueTime) {\\n      return nextDueTime;\\n    }\\n    revert(\\\"Error: could not calculate next due time.\\\");\\n  }\\n\\n  function currentTime() internal view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function underwriterCanCreateThisCreditLine(uint256 newAmount, Underwriter storage underwriter)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    uint256 underwriterLimit = underwriter.governanceLimit;\\n    require(underwriterLimit != 0, \\\"underwriter does not have governance limit\\\");\\n    uint256 creditCurrentlyExtended = getCreditCurrentlyExtended(underwriter);\\n    uint256 totalToBeExtended = creditCurrentlyExtended.add(newAmount);\\n    return totalToBeExtended <= underwriterLimit;\\n  }\\n\\n  function withinMaxUnderwriterLimit(uint256 amount) internal view returns (bool) {\\n    return amount <= config.getNumber(uint256(ConfigOptions.Numbers.MaxUnderwriterLimit));\\n  }\\n\\n  function getCreditCurrentlyExtended(Underwriter storage underwriter) internal view returns (uint256) {\\n    uint256 creditExtended;\\n    uint256 length = underwriter.creditLines.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      CreditLine cl = CreditLine(underwriter.creditLines[i]);\\n      creditExtended = creditExtended.add(cl.limit());\\n    }\\n    return creditExtended;\\n  }\\n\\n  function updateCreditLineAccounting(\\n    CreditLine cl,\\n    uint256 balance,\\n    uint256 interestOwed,\\n    uint256 principalOwed\\n  ) internal nonReentrant {\\n    // subtract cl from total loans outstanding\\n    totalLoansOutstanding = totalLoansOutstanding.sub(cl.balance());\\n\\n    cl.setBalance(balance);\\n    cl.setInterestOwed(interestOwed);\\n    cl.setPrincipalOwed(principalOwed);\\n\\n    // This resets lastFullPaymentTime. These conditions assure that they have\\n    // indeed paid off all their interest and they have a real nextDueTime. (ie. creditline isn't pre-drawdown)\\n    uint256 nextDueTime = cl.nextDueTime();\\n    if (interestOwed == 0 && nextDueTime != 0) {\\n      // If interest was fully paid off, then set the last full payment as the previous due time\\n      uint256 mostRecentLastDueTime;\\n      if (currentTime() < nextDueTime) {\\n        uint256 secondsPerPeriod = cl.paymentPeriodInDays().mul(SECONDS_PER_DAY);\\n        mostRecentLastDueTime = nextDueTime.sub(secondsPerPeriod);\\n      } else {\\n        mostRecentLastDueTime = nextDueTime;\\n      }\\n      cl.setLastFullPaymentTime(mostRecentLastDueTime);\\n    }\\n\\n    // Add new amount back to total loans outstanding\\n    totalLoansOutstanding = totalLoansOutstanding.add(balance);\\n\\n    cl.setTermEndTime(calculateNewTermEndTime(cl, balance)); // pass in balance as a gas optimization\\n    cl.setNextDueTime(calculateNextDueTime(cl));\\n  }\\n\\n  function getUSDCBalance(address _address) internal view returns (uint256) {\\n    return config.getUSDC().balanceOf(_address);\\n  }\\n\\n  modifier onlyValidCreditLine(address clAddress) {\\n    require(creditLines[clAddress] != address(0), \\\"Unknown credit line\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x10dcdf2daaa16f8a7d22df19a1e449749a9fddcbb9698871d3ddf2ddfcf80a30\",\"license\":\"MIT\"},\"contracts/protocol/core/CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"./ConfigHelper.sol\\\";\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./Accountant.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/ICreditLine.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\n\\n/**\\n * @title CreditLine\\n * @notice A contract that represents the agreement between Backers and\\n *  a Borrower. Includes the terms of the loan, as well as the current accounting state, such as interest owed.\\n *  A CreditLine belongs to a TranchedPool, and is fully controlled by that TranchedPool. It does not\\n *  operate in any standalone capacity. It should generally be considered internal to the TranchedPool.\\n * @author Goldfinch\\n */\\n\\n// solhint-disable-next-line max-states-count\\ncontract CreditLine is BaseUpgradeablePausable, ICreditLine {\\n  uint256 public constant SECONDS_PER_DAY = 60 * 60 * 24;\\n\\n  // Credit line terms\\n  address public override borrower;\\n  uint256 public override limit;\\n  uint256 public override interestApr;\\n  uint256 public override paymentPeriodInDays;\\n  uint256 public override termInDays;\\n  uint256 public override lateFeeApr;\\n\\n  // Accounting variables\\n  uint256 public override balance;\\n  uint256 public override interestOwed;\\n  uint256 public override principalOwed;\\n  uint256 public override termEndTime;\\n  uint256 public override nextDueTime;\\n  uint256 public override interestAccruedAsOf;\\n  uint256 public override lastFullPaymentTime;\\n  uint256 public totalInterestAccrued;\\n\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public initializer {\\n    require(_config != address(0) && owner != address(0) && _borrower != address(0), \\\"Zero address passed in\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    config = GoldfinchConfig(_config);\\n    borrower = _borrower;\\n    limit = _limit;\\n    interestApr = _interestApr;\\n    paymentPeriodInDays = _paymentPeriodInDays;\\n    termInDays = _termInDays;\\n    lateFeeApr = _lateFeeApr;\\n    interestAccruedAsOf = block.timestamp;\\n\\n    // Unlock owner, which is a TranchedPool, for infinite amount\\n    bool success = config.getUSDC().approve(owner, uint256(-1));\\n    require(success, \\\"Failed to approve USDC\\\");\\n  }\\n\\n  /**\\n   * @notice Updates the internal accounting to track a drawdown as of current block timestamp.\\n   * Does not move any money\\n   * @param amount The amount in USDC that has been drawndown\\n   */\\n  function drawdown(uint256 amount) external onlyAdmin {\\n    require(amount.add(balance) <= limit, \\\"Cannot drawdown more than the limit\\\");\\n    uint256 timestamp = currentTime();\\n\\n    if (balance == 0) {\\n      setInterestAccruedAsOf(timestamp);\\n      setLastFullPaymentTime(timestamp);\\n      setTotalInterestAccrued(0);\\n      setTermEndTime(timestamp.add(SECONDS_PER_DAY.mul(termInDays)));\\n    }\\n\\n    (uint256 _interestOwed, uint256 _principalOwed) = updateAndGetInterestAndPrincipalOwedAsOf(timestamp);\\n    balance = balance.add(amount);\\n\\n    updateCreditLineAccounting(balance, _interestOwed, _principalOwed);\\n    require(!isLate(timestamp), \\\"Cannot drawdown when payments are past due\\\");\\n  }\\n\\n  /**\\n   * @notice Migrates to a new goldfinch config address\\n   */\\n  function updateGoldfinchConfig() external onlyAdmin {\\n    config = GoldfinchConfig(config.configAddress());\\n  }\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external onlyAdmin {\\n    lateFeeApr = newLateFeeApr;\\n  }\\n\\n  function setLimit(uint256 newAmount) external onlyAdmin {\\n    limit = newAmount;\\n  }\\n\\n  function termStartTime() external view returns (uint256) {\\n    return termEndTime.sub(SECONDS_PER_DAY.mul(termInDays));\\n  }\\n\\n  function setTermEndTime(uint256 newTermEndTime) public onlyAdmin {\\n    termEndTime = newTermEndTime;\\n  }\\n\\n  function setNextDueTime(uint256 newNextDueTime) public onlyAdmin {\\n    nextDueTime = newNextDueTime;\\n  }\\n\\n  function setBalance(uint256 newBalance) public onlyAdmin {\\n    balance = newBalance;\\n  }\\n\\n  function setTotalInterestAccrued(uint256 _totalInterestAccrued) public onlyAdmin {\\n    totalInterestAccrued = _totalInterestAccrued;\\n  }\\n\\n  function setInterestOwed(uint256 newInterestOwed) public onlyAdmin {\\n    interestOwed = newInterestOwed;\\n  }\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) public onlyAdmin {\\n    principalOwed = newPrincipalOwed;\\n  }\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) public onlyAdmin {\\n    interestAccruedAsOf = newInterestAccruedAsOf;\\n  }\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) public onlyAdmin {\\n    lastFullPaymentTime = newLastFullPaymentTime;\\n  }\\n\\n  /**\\n   * @notice Triggers an assessment of the creditline. Any USDC balance available in the creditline is applied\\n   * towards the interest and principal.\\n   * @return Any amount remaining after applying payments towards the interest and principal\\n   * @return Amount applied towards interest\\n   * @return Amount applied towards principal\\n   */\\n  function assess()\\n    public\\n    onlyAdmin\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    // Do not assess until a full period has elapsed or past due\\n    require(balance > 0, \\\"Must have balance to assess credit line\\\");\\n\\n    // Don't assess credit lines early!\\n    if (currentTime() < nextDueTime && !isLate(currentTime())) {\\n      return (0, 0, 0);\\n    }\\n    uint256 timeToAssess = calculateNextDueTime();\\n    setNextDueTime(timeToAssess);\\n\\n    // We always want to assess for the most recently *past* nextDueTime.\\n    // So if the recalculation above sets the nextDueTime into the future,\\n    // then ensure we pass in the one just before this.\\n    if (timeToAssess > currentTime()) {\\n      uint256 secondsPerPeriod = paymentPeriodInDays.mul(SECONDS_PER_DAY);\\n      timeToAssess = timeToAssess.sub(secondsPerPeriod);\\n    }\\n    return handlePayment(getUSDCBalance(address(this)), timeToAssess);\\n  }\\n\\n  function calculateNextDueTime() internal view returns (uint256) {\\n    uint256 newNextDueTime = nextDueTime;\\n    uint256 secondsPerPeriod = paymentPeriodInDays.mul(SECONDS_PER_DAY);\\n    uint256 curTimestamp = currentTime();\\n    // You must have just done your first drawdown\\n    if (newNextDueTime == 0 && balance > 0) {\\n      return curTimestamp.add(secondsPerPeriod);\\n    }\\n\\n    // Active loan that has entered a new period, so return the *next* newNextDueTime.\\n    // But never return something after the termEndTime\\n    if (balance > 0 && curTimestamp >= newNextDueTime) {\\n      uint256 secondsToAdvance = (curTimestamp.sub(newNextDueTime).div(secondsPerPeriod)).add(1).mul(secondsPerPeriod);\\n      newNextDueTime = newNextDueTime.add(secondsToAdvance);\\n      return Math.min(newNextDueTime, termEndTime);\\n    }\\n\\n    // You're paid off, or have not taken out a loan yet, so no next due time.\\n    if (balance == 0 && newNextDueTime != 0) {\\n      return 0;\\n    }\\n    // Active loan in current period, where we've already set the newNextDueTime correctly, so should not change.\\n    if (balance > 0 && curTimestamp < newNextDueTime) {\\n      return newNextDueTime;\\n    }\\n    revert(\\\"Error: could not calculate next due time.\\\");\\n  }\\n\\n  function currentTime() internal view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function isLate(uint256 timestamp) internal view returns (bool) {\\n    uint256 secondsElapsedSinceFullPayment = timestamp.sub(lastFullPaymentTime);\\n    return secondsElapsedSinceFullPayment > paymentPeriodInDays.mul(SECONDS_PER_DAY);\\n  }\\n\\n  /**\\n   * @notice Applies `amount` of payment for a given credit line. This moves already collected money into the Pool.\\n   *  It also updates all the accounting variables. Note that interest is always paid back first, then principal.\\n   *  Any extra after paying the minimum will go towards existing principal (reducing the\\n   *  effective interest rate). Any extra after the full loan has been paid off will remain in the\\n   *  USDC Balance of the creditLine, where it will be automatically used for the next drawdown.\\n   * @param paymentAmount The amount, in USDC atomic units, to be applied\\n   * @param timestamp The timestamp on which accrual calculations should be based. This allows us\\n   *  to be precise when we assess a Credit Line\\n   */\\n  function handlePayment(uint256 paymentAmount, uint256 timestamp)\\n    internal\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    (uint256 newInterestOwed, uint256 newPrincipalOwed) = updateAndGetInterestAndPrincipalOwedAsOf(timestamp);\\n\\n    Accountant.PaymentAllocation memory pa = Accountant.allocatePayment(\\n      paymentAmount,\\n      balance,\\n      newInterestOwed,\\n      newPrincipalOwed\\n    );\\n\\n    uint256 newBalance = balance.sub(pa.principalPayment);\\n    // Apply any additional payment towards the balance\\n    newBalance = newBalance.sub(pa.additionalBalancePayment);\\n    uint256 totalPrincipalPayment = balance.sub(newBalance);\\n    uint256 paymentRemaining = paymentAmount.sub(pa.interestPayment).sub(totalPrincipalPayment);\\n\\n    updateCreditLineAccounting(\\n      newBalance,\\n      newInterestOwed.sub(pa.interestPayment),\\n      newPrincipalOwed.sub(pa.principalPayment)\\n    );\\n\\n    assert(paymentRemaining.add(pa.interestPayment).add(totalPrincipalPayment) == paymentAmount);\\n\\n    return (paymentRemaining, pa.interestPayment, totalPrincipalPayment);\\n  }\\n\\n  function updateAndGetInterestAndPrincipalOwedAsOf(uint256 timestamp) internal returns (uint256, uint256) {\\n    (uint256 interestAccrued, uint256 principalAccrued) = Accountant.calculateInterestAndPrincipalAccrued(\\n      this,\\n      timestamp,\\n      config.getLatenessGracePeriodInDays()\\n    );\\n    if (interestAccrued > 0) {\\n      // If we've accrued any interest, update interestAccruedAsOf to the time that we've\\n      // calculated interest for. If we've not accrued any interest, then we keep the old value so the next\\n      // time the entire period is taken into account.\\n      setInterestAccruedAsOf(timestamp);\\n      totalInterestAccrued = totalInterestAccrued.add(interestAccrued);\\n    }\\n    return (interestOwed.add(interestAccrued), principalOwed.add(principalAccrued));\\n  }\\n\\n  function updateCreditLineAccounting(\\n    uint256 newBalance,\\n    uint256 newInterestOwed,\\n    uint256 newPrincipalOwed\\n  ) internal nonReentrant {\\n    setBalance(newBalance);\\n    setInterestOwed(newInterestOwed);\\n    setPrincipalOwed(newPrincipalOwed);\\n\\n    // This resets lastFullPaymentTime. These conditions assure that they have\\n    // indeed paid off all their interest and they have a real nextDueTime. (ie. creditline isn't pre-drawdown)\\n    uint256 _nextDueTime = nextDueTime;\\n    if (newInterestOwed == 0 && _nextDueTime != 0) {\\n      // If interest was fully paid off, then set the last full payment as the previous due time\\n      uint256 mostRecentLastDueTime;\\n      if (currentTime() < _nextDueTime) {\\n        uint256 secondsPerPeriod = paymentPeriodInDays.mul(SECONDS_PER_DAY);\\n        mostRecentLastDueTime = _nextDueTime.sub(secondsPerPeriod);\\n      } else {\\n        mostRecentLastDueTime = _nextDueTime;\\n      }\\n      setLastFullPaymentTime(mostRecentLastDueTime);\\n    }\\n\\n    setNextDueTime(calculateNextDueTime());\\n  }\\n\\n  function getUSDCBalance(address _address) internal view returns (uint256) {\\n    return config.getUSDC().balanceOf(_address);\\n  }\\n}\\n\",\"keccak256\":\"0xcc16aff83449336244c90e279e739e10f7be4b9497a9771ef1eaac2fd7224f0e\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchConfig.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n *  Note: While this inherits from BaseUpgradeablePausable, it is not deployed as an upgradeable contract (this\\n *    is mostly to save gas costs of having each call go through a proxy)\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable {\\n  bytes32 public constant GO_LISTER_ROLE = keccak256(\\\"GO_LISTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n  mapping(address => bool) public goList;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  event GoListed(address indexed member);\\n  event NoListed(address indexed member);\\n\\n  bool public valuesInitialized;\\n\\n  function initialize(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    _setupRole(GO_LISTER_ROLE, owner);\\n\\n    _setRoleAdmin(GO_LISTER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function setAddress(uint256 addressIndex, address newAddress) public onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  function setNumber(uint256 index, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  function setSeniorPoolStrategy(address newStrategy) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.SeniorPoolStrategy);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newStrategy);\\n    addresses[key] = newStrategy;\\n  }\\n\\n  function setCreditLineImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setBorrowerImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.BorrowerImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setGoldfinchConfig(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.GoldfinchConfig);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function initializeFromOtherConfig(address _initialConfig) public onlyAdmin {\\n    require(!valuesInitialized, \\\"Already initialized values\\\");\\n    IGoldfinchConfig initialConfig = IGoldfinchConfig(_initialConfig);\\n    for (uint256 i = 0; i < 10; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < 11; i++) {\\n      if (getAddress(i) == address(0)) {\\n        setAddress(i, initialConfig.getAddress(i));\\n      }\\n    }\\n    valuesInitialized = true;\\n  }\\n\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = true;\\n    emit GoListed(_member);\\n  }\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = false;\\n    emit NoListed(_member);\\n  }\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      addToGoList(_members[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      removeFromGoList(_members[i]);\\n    }\\n  }\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) public view returns (address) {\\n    return addresses[index];\\n  }\\n\\n  function getNumber(uint256 index) public view returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  modifier onlyGoListerRole() {\\n    require(hasRole(GO_LISTER_ROLE, _msgSender()), \\\"Must have go-lister role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x97211d3657e688fdd6708da08e6c082084a00d25ec4d77f9fdf1af3d26af2e18\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IBorrower.sol\\\";\\nimport \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport \\\"./ConfigHelper.sol\\\";\\n\\n/**\\n * @title GoldfinchFactory\\n * @notice Contract that allows us to create other contracts, such as CreditLines and BorrowerContracts\\n *  Note GoldfinchFactory is a legacy name. More properly this can be considered simply the GoldfinchFactory\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchFactory is BaseUpgradeablePausable {\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  event BorrowerCreated(address indexed borrower, address indexed owner);\\n  event PoolCreated(address indexed pool, address indexed borrower);\\n\\n  function initialize(address owner, GoldfinchConfig _config) public initializer {\\n    require(owner != address(0) && address(_config) != address(0), \\\"Owner and config addresses cannot be empty\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    config = _config;\\n  }\\n\\n  /**\\n   * @notice Allows anyone to create a CreditLine contract instance\\n   * @dev There is no value to calling this function directly. It is only meant to be called\\n   *  by a TranchedPool during it's creation process.\\n   */\\n  function createCreditLine() external returns (address) {\\n    return deployMinimal(config.creditLineImplementationAddress());\\n  }\\n\\n  /**\\n   * @notice Allows anyone to create a Borrower contract instance\\n   * @param owner The address that will own the new Borrower instance\\n   */\\n  function createBorrower(address owner) external returns (address) {\\n    address _borrower = deployMinimal(config.borrowerImplementationAddress());\\n    IBorrower borrower = IBorrower(_borrower);\\n    borrower.initialize(owner, address(config));\\n    emit BorrowerCreated(address(borrower), owner);\\n    return address(borrower);\\n  }\\n\\n  /**\\n   * @notice Allows anyone to create a new TranchedPool for a single borrower\\n   * @param _borrower The borrower for whom the CreditLine will be created\\n   * @param _juniorFeePercent The percent of senior interest allocated to junior investors, expressed as\\n   *  integer percents. eg. 20% is simply 20\\n   * @param _limit The maximum amount a borrower can drawdown from this CreditLine\\n   * @param _interestApr The interest amount, on an annualized basis (APR, so non-compounding), expressed as an integer.\\n   *  We assume 18 digits of precision. For example, to submit 15.34%, you would pass up 153400000000000000,\\n   *  and 5.34% would be 53400000000000000\\n   * @param _paymentPeriodInDays How many days in each payment period.\\n   *  ie. the frequency with which they need to make payments.\\n   * @param _termInDays Number of days in the credit term. It is used to set the `termEndTime` upon first drawdown.\\n   *  ie. The credit line should be fully paid off {_termIndays} days after the first drawdown.\\n   * @param _lateFeeApr The additional interest you will pay if you are late. For example, if this is 3%, and your\\n   *  normal rate is 15%, then you will pay 18% while you are late. Also expressed as an 18 decimal precision integer\\n   *\\n   * Requirements:\\n   *  You are the admin\\n   */\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) external onlyAdmin returns (address pool) {\\n    address tranchedPoolImplAddress = config.tranchedPoolAddress();\\n    pool = deployMinimal(tranchedPoolImplAddress);\\n    ITranchedPool(pool).initialize(\\n      address(config),\\n      _borrower,\\n      _juniorFeePercent,\\n      _limit,\\n      _interestApr,\\n      _paymentPeriodInDays,\\n      _termInDays,\\n      _lateFeeApr\\n    );\\n    emit PoolCreated(pool, _borrower);\\n    config.getPoolTokens().onPoolCreated(pool);\\n    return pool;\\n  }\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) external onlyCreditDesk returns (address pool) {\\n    address tranchedPoolImplAddress = config.migratedTranchedPoolAddress();\\n    pool = deployMinimal(tranchedPoolImplAddress);\\n    ITranchedPool(pool).initialize(\\n      address(config),\\n      _borrower,\\n      _juniorFeePercent,\\n      _limit,\\n      _interestApr,\\n      _paymentPeriodInDays,\\n      _termInDays,\\n      _lateFeeApr\\n    );\\n    emit PoolCreated(pool, _borrower);\\n    config.getPoolTokens().onPoolCreated(pool);\\n    return pool;\\n  }\\n\\n  function updateGoldfinchConfig() external onlyAdmin {\\n    config = GoldfinchConfig(config.configAddress());\\n  }\\n\\n  // Stolen from:\\n  // https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/upgradeability/ProxyFactory.sol\\n  function deployMinimal(address _logic) internal returns (address proxy) {\\n    bytes20 targetBytes = bytes20(_logic);\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n    return proxy;\\n  }\\n\\n  modifier onlyCreditDesk() {\\n    require(msg.sender == config.creditDeskAddress(), \\\"Only the CreditDesk can call this\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x6c40dffedd70e6ab79e0885aff8f10dda2713853ca3e10ef066ca9e99cd374cd\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x855f5027a20c77b500dd8618a4881c64e8b63a62168fed0abf3be01a6e8e8a4d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614656806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638456cb591161010f578063c26ff936116100a2578063e58378bb11610071578063e58378bb146103e8578063e63ab1e9146103f0578063ed80c850146103f8578063f5c7e0e214610400576101f0565b8063c26ff9361461039c578063c4076876146103af578063ca15c873146103c2578063d547741f146103d5576101f0565b80639cb93fe7116100de5780639cb93fe714610363578063a217fddf14610384578063a6f4487e1461038c578063b6db75a014610394576101f0565b80638456cb59146103225780639010d07c1461032a57806391d148541461033d57806394a3fcad14610350576101f0565b80634f92a7281161018757806374f0314f1161015657806374f0314f146102d257806379502c55146102da5780637d533642146102ef578063844a28c314610302576101f0565b80634f92a7281461029a578063526d81f6146102a25780635c975abb146102aa5780636acab9da146102bf576101f0565b80632f2ff15d116101c35780632f2ff15d1461025957806336568abe1461026c5780633f4ba83a1461027f578063485cc95514610287576101f0565b8063097616a3146101f55780630e4645ef1461020a578063248a9ca31461021d5780632e0c6cfe14610246575b600080fd5b61020861020336600461394c565b610413565b005b610208610218366004613a26565b61054c565b61023061022b366004613a71565b610610565b60405161023d9190613c7f565b60405180910390f35b610208610254366004613a26565b610628565b610208610267366004613a89565b610743565b61020861027a366004613a89565b610787565b6102086107c9565b6102086102953660046139ee565b610809565b6102086108ef565b61020861094c565b6102b26109d7565b60405161023d9190613c74565b6102086102cd366004613a26565b6109e0565b610230610f17565b6102e2610f1e565b60405161023d9190613b60565b6102306102fd36600461394c565b610f2e565b61031561031036600461394c565b610f41565b60405161023d9190613c27565b610208610fbb565b6102e2610338366004613aad565b610ff9565b6102b261034b366004613a89565b61101a565b61023061035e366004613a26565b611032565b610376610371366004613984565b61128e565b60405161023d929190613bb1565b610230611b82565b610230611b87565b6102b2611b8e565b6103156103aa36600461394c565b611baf565b6102086103bd366004613a26565b611c24565b6102306103d0366004613a71565b611cb5565b6102086103e3366004613a89565b611ccc565b610230611d06565b610230611d18565b610230611d2a565b61020861040e36600461394c565b611d31565b600054610100900460ff168061042c575061042c611f9d565b8061043a575060005460ff16155b61045f5760405162461bcd60e51b8152600401610456906142ef565b60405180910390fd5b600054610100900460ff1615801561048a576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166104b05760405162461bcd60e51b815260040161045690614174565b6104b8611fa3565b6104c0612024565b6104c86120b0565b6104e06000805160206145e18339815191528361077d565b6104f86000805160206146018339815191528361077d565b61051e6000805160206146018339815191526000805160206145e183398151915261213f565b6105366000805160206145e18339815191528061213f565b8015610548576000805461ff00191690555b5050565b610554611b8e565b6105705760405162461bcd60e51b815260040161045690614500565b60975460ff16156105935760405162461bcd60e51b8152600401610456906140cb565b61059c81612154565b6105b85760405162461bcd60e51b815260040161045690614374565b6001600160a01b03821660008181526101c6602052604090819020839055517f7be5403eca163f383a39c2d1f65a8fee2c9e41e7e6b150f4abfe16eaaf1d907690610604908490613c7f565b60405180910390a25050565b6000818152606560205260409020600201545b919050565b60975460ff161561064b5760405162461bcd60e51b8152600401610456906140cb565b6001600160a01b0380831660009081526101c860205260409020548391166106855760405162461bcd60e51b8152600401610456906141a9565b6000839050336001600160a01b0316816001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190613968565b6001600160a01b03161461072b5760405162461bcd60e51b8152600401610456906141d6565b61073d81846107386121e1565b6121e5565b50505050565b6000828152606560205260409020600201546107619061034b612352565b61077d5760405162461bcd60e51b815260040161045690613d1d565b6105488282612356565b61078f612352565b6001600160a01b0316816001600160a01b0316146107bf5760405162461bcd60e51b81526004016104569061454b565b61054882826123bf565b6107e360008051602061460183398151915261034b612352565b6107ff5760405162461bcd60e51b815260040161045690613eb8565b610807612428565b565b600054610100900460ff16806108225750610822611f9d565b80610830575060005460ff16155b61084c5760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff16158015610877576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383161580159061089757506001600160a01b03821615155b6108b35760405162461bcd60e51b815260040161045690613d9a565b6108bc83610413565b6101c580546001600160a01b0319166001600160a01b03841617905580156108ea576000805461ff00191690555b505050565b6108f7611b8e565b6109135760405162461bcd60e51b815260040161045690614500565b6101c554610929906001600160a01b0316612494565b6101c580546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16806109655750610965611f9d565b80610973575060005460ff16155b61098f5760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff161580156109ba576000805460ff1961ff0019909116610100171660011790555b6109c2612024565b80156109d4576000805461ff00191690555b50565b60975460ff1690565b60975460ff1615610a035760405162461bcd60e51b8152600401610456906140cb565b6001600160a01b0380831660009081526101c86020526040902054839116610a3d5760405162461bcd60e51b8152600401610456906141a9565b3360009081526101c7602052604090208054849190610a6e5760405162461bcd60e51b815260040161045690614034565b60008411610a8e5760405162461bcd60e51b8152600401610456906143d1565b336001600160a01b0316826001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190613968565b6001600160a01b031614610b2f5760405162461bcd60e51b8152600401610456906142a3565b610b3884612514565b610b545760405162461bcd60e51b8152600401610456906140f5565b6000610b5f8661252f565b9050610b6c8582856125c3565b610b885760405162461bcd60e51b815260040161045690614408565b6000836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb9190613b25565b905080610ccd57836001600160a01b031663a6b1ae0d610c196121e1565b6040518263ffffffff1660e01b8152600401610c359190613c7f565b600060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b50505050836001600160a01b03166336d91494610c7e6121e1565b6040518263ffffffff1660e01b8152600401610c9a9190613c7f565b600060405180830381600087803b158015610cb457600080fd5b505af1158015610cc8573d6000803e3d6000fd5b505050505b6101c554600090610ce6906001600160a01b0316612687565b905060008315610db65783881115610d0b575082610d048882612692565b9750610d10565b506000965b6040516323b872dd60e01b81526000906001600160a01b038416906323b872dd90610d43908d9033908790600401613b74565b602060405180830381600087803b158015610d5d57600080fd5b505af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d959190613a51565b905080610db45760405162461bcd60e51b815260040161045690613f3b565b505b600080610dca88610dc56121e1565b6126d4565b9092509050610dd9858b61287c565b9450610de7888684846128a1565b610df888610df36121e1565b612cb6565b15610e155760405162461bcd60e51b815260040161045690613de4565b6001600160a01b038816337f7ec4669c579321a5cf5a6b525637eb0924a93e2e11eab9d14be8b44de1116b1b610e4b8d8761287c565b604051610e589190613c7f565b60405180910390a38915610f0a576040516335655ced60e11b81526000906001600160a01b03861690636acab9da90610e979033908f90600401613b98565b602060405180830381600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee99190613a51565b905080610f085760405162461bcd60e51b815260040161045690613f3b565b505b5050505050505050505050565b6201518081565b6101c5546001600160a01b031681565b6101c66020526000908152604090205481565b6001600160a01b03811660009081526101c66020908152604091829020600101805483518184028101840190945280845260609392830182828015610faf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f91575b50505050509050919050565b610fd560008051602061460183398151915261034b612352565b610ff15760405162461bcd60e51b815260040161045690613eb8565b610807612d7e565b60008281526065602052604081206110119083612dd7565b90505b92915050565b60008281526065602052604081206110119083612de3565b6001600160a01b0380831660009081526101c86020526040812054909184911661106e5760405162461bcd60e51b8152600401610456906141a9565b8261107e5761107b6121e1565b92505b6000849050806001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f49190613b25565b8410801561110b575061110981610df36121e1565b155b1561111a576000925050611287565b6101c55460009081907337CF6E5D79034D253C6DF9f6fa095510AA196F129063101c84309085908990611155906001600160a01b0316612df8565b6040518463ffffffff1660e01b815260040161117393929190613c06565b604080518083038186803b15801561118a57600080fd5b505af415801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c29190613b3d565b9150915061128161124482856001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e9190613b25565b9061287c565b61123e84866001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b94505050505b5092915050565b600080611299611b8e565b6112b55760405162461bcd60e51b815260040161045690614500565b60008a90506000816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156112f557600080fd5b505afa158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d9190613b25565b90506000826001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561136a57600080fd5b505afa15801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a29190613b25565b116113bf5760405162461bcd60e51b81526004016104569061413d565b600081116113df5760405162461bcd60e51b815260040161045690613e2e565b6000826001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141a57600080fd5b505afa15801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190613b25565b1161146f5760405162461bcd60e51b815260040161045690614466565b6001600160a01b038b166114f157816001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b657600080fd5b505afa1580156114ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ee9190613968565b9a505b6402540be4006000611501612e28565b6001600160a01b031663bc38f1bf8e6014876001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561154b57600080fd5b505afa15801561155f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115839190613b25565b6115fe878a6001600160a01b031663b39699926040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b505afa1580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f89190613b25565b90612eab565b896001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b15801561163757600080fd5b505afa15801561164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166f9190613b25565b8a6001600160a01b03166348e6f2966040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a857600080fd5b505afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190613b25565b8b6001600160a01b031663f0b25bde6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171957600080fd5b505afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190613b25565b6040518863ffffffff1660e01b81526004016117739796959493929190613bcb565b602060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c59190613968565b90506000816001600160a01b0316631fe032be868f8f8f8f8f8f6040518863ffffffff1660e01b81526004016118019796959493929190613bcb565b602060405180830381600087803b15801561181b57600080fd5b505af115801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190613968565b6040516327ea6f2b60e01b81529091506001600160a01b038616906327ea6f2b9061188390600090600401613c7f565b600060405180830381600087803b15801561189d57600080fd5b505af11580156118b1573d6000803e3d6000fd5b5050604051637d8b34e560e11b81526001600160a01b038816925063fb1669ca91506118e290600090600401613c7f565b600060405180830381600087803b1580156118fc57600080fd5b505af1158015611910573d6000803e3d6000fd5b50506101c5546000925061192d91506001600160a01b0316612ee5565b90506000816001600160a01b03166323b872dd8885856001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040161196e9190613b60565b60206040518083038186803b15801561198657600080fd5b505afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190613b25565b6040518463ffffffff1660e01b81526004016119dc93929190613b74565b602060405180830381600087803b1580156119f657600080fd5b505af1158015611a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2e9190613a51565b905080611a4d5760405162461bcd60e51b815260040161045690613e81565b85836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8757600080fd5b505afa158015611a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abf9190613b25565b14611adc5760405162461bcd60e51b815260040161045690613fb0565b8c836001600160a01b031663bbafcb406040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1657600080fd5b505afa158015611b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4e9190613b25565b14611b6b5760405162461bcd60e51b815260040161045690613fe5565b50909f919e50909c50505050505050505050505050565b600081565b6101c35481565b6000611baa6000805160206145e183398151915261034b612352565b905090565b6001600160a01b03811660009081526101c76020908152604091829020805483518184028101840190945280845260609392830182828015610faf576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f915750505050509050919050565b60975460ff1615611c475760405162461bcd60e51b8152600401610456906140cb565b6001600160a01b0380831660009081526101c86020526040902054839116611c815760405162461bcd60e51b8152600401610456906141a9565b60008211611ca15760405162461bcd60e51b815260040161045690614492565b82611cac8184612ef0565b61073d84611d31565b600081815260656020526040812061101490613019565b600082815260656020526040902060020154611cea9061034b612352565b6107bf5760405162461bcd60e51b81526004016104569061407b565b6000805160206145e183398151915281565b60008051602061460183398151915281565b6101c45481565b60975460ff1615611d545760405162461bcd60e51b8152600401610456906140cb565b6001600160a01b0380821660009081526101c86020526040902054829116611d8e5760405162461bcd60e51b8152600401610456906141a9565b60008290506000816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611dce57600080fd5b505afa158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e069190613b25565b11611e235760405162461bcd60e51b81526004016104569061421b565b806001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b158015611e5c57600080fd5b505afa158015611e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e949190613b25565b611e9c6121e1565b108015611eb25750611eb081610df36121e1565b155b15611ebd5750610548565b6000611ec882613024565b604051631352074160e11b81529091506001600160a01b038316906326a40e8290611ef7908490600401613c7f565b600060405180830381600087803b158015611f1157600080fd5b505af1158015611f25573d6000803e3d6000fd5b50505050611f316121e1565b811115611f8a576000611f7a62015180846001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b9050611f868282612692565b9150505b61073d82611f978461252f565b836121e5565b303b1590565b600054610100900460ff1680611fbc5750611fbc611f9d565b80611fca575060005460ff16155b611fe65760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff161580156109c2576000805460ff1961ff00199091166101001716600117905580156109d4576000805461ff001916905550565b600054610100900460ff168061203d575061203d611f9d565b8061204b575060005460ff16155b6120675760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff16158015612092576000805460ff1961ff0019909116610100171660011790555b6097805460ff1916905580156109d4576000805461ff001916905550565b600054610100900460ff16806120c957506120c9611f9d565b806120d7575060005460ff16155b6120f35760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff1615801561211e576000805460ff1961ff0019909116610100171660011790555b60c9805460ff1916600117905580156109d4576000805461ff001916905550565b60009182526065602052604090912060020155565b6101c5546000906001600160a01b031663fc56365860025b6040518263ffffffff1660e01b81526004016121889190613c7f565b60206040518083038186803b1580156121a057600080fd5b505afa1580156121b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d89190613b25565b90911115919050565b4290565b60008060006121f58686866132a5565b6101c5549295509093509150600090612216906001600160a01b0316612687565b905060008311806122275750600082115b1561234957866001600160a01b0316876001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561226f57600080fd5b505afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a79190613968565b6001600160a01b03167f724fe786cff62c97ff230e98a332f95c5a11990e44123a00c2b8e76b0566e4118585886040516122e39392919061459a565b60405180910390a36040516371bb0bab60e01b81526001600160a01b038216906371bb0bab9061231b908a9087908790600401613c06565b600060405180830381600087803b15801561233557600080fd5b505af1158015610f0a573d6000803e3d6000fd5b50505050505050565b3390565b600082815260656020526040902061236e9082613520565b156105485761237b612352565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206123d79082613535565b15610548576123e4612352565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff1661244a5760405162461bcd60e51b815260040161045690613d6c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61247d612352565b60405161248a9190613b60565b60405180910390a1565b60006001600160a01b03821663b93f9b0a600b5b6040518263ffffffff1660e01b81526004016124c49190613c7f565b60206040518083038186803b1580156124dc57600080fd5b505afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190613968565b6101c5546000906001600160a01b031663fc5636588261216c565b6101c554600090612548906001600160a01b0316612ee5565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016125739190613b60565b60206040518083038186803b15801561258b57600080fd5b505afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190613b25565b6000816001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125fe57600080fd5b505afa158015612612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126369190613b25565b61267d8461267787866001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b90612692565b1115949350505050565b60006110148261354a565b600061101183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613561565b6000806000807337CF6E5D79034D253C6DF9f6fa095510AA196F1263101c8430878761271e6101c560009054906101000a90046001600160a01b03166001600160a01b0316612df8565b6040518463ffffffff1660e01b815260040161273c93929190613c06565b604080518083038186803b15801561275357600080fd5b505af4158015612767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278b9190613b3d565b909250905081156127f55760405163a6b1ae0d60e01b81526001600160a01b0387169063a6b1ae0d906127c2908890600401613c7f565b600060405180830381600087803b1580156127dc57600080fd5b505af11580156127f0573d6000803e3d6000fd5b505050505b61283282876001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b61286f82886001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b9350935050509250929050565b6000828201838110156110115760405162461bcd60e51b815260040161045690613f04565b60c95460ff166128c35760405162461bcd60e51b8152600401610456906144c9565b60c9805460ff19169055604080516316d3df1560e31b81529051612954916001600160a01b0387169163b69ef8a891600480820192602092909190829003018186803b15801561291257600080fd5b505afa158015612926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294a9190613b25565b6101c45490612692565b6101c455604051637d8b34e560e11b81526001600160a01b0385169063fb1669ca90612984908690600401613c7f565b600060405180830381600087803b15801561299e57600080fd5b505af11580156129b2573d6000803e3d6000fd5b50506040516396c8df3760e01b81526001600160a01b03871692506396c8df3791506129e2908590600401613c7f565b600060405180830381600087803b1580156129fc57600080fd5b505af1158015612a10573d6000803e3d6000fd5b505060405163b3b8a9c760e01b81526001600160a01b038716925063b3b8a9c79150612a40908490600401613c7f565b600060405180830381600087803b158015612a5a57600080fd5b505af1158015612a6e573d6000803e3d6000fd5b505050506000846001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b158015612aad57600080fd5b505afa158015612ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae59190613b25565b905082158015612af457508015155b15612bc357600081612b046121e1565b1015612b60576000612b4c62015180886001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b9050612b588382612692565b915050612b63565b50805b604051630db6452560e21b81526001600160a01b038716906336d9149490612b8f908490600401613c7f565b600060405180830381600087803b158015612ba957600080fd5b505af1158015612bbd573d6000803e3d6000fd5b50505050505b6101c454612bd1908561287c565b6101c4556001600160a01b038516637ae14b09612bee878761358d565b6040518263ffffffff1660e01b8152600401612c0a9190613c7f565b600060405180830381600087803b158015612c2457600080fd5b505af1158015612c38573d6000803e3d6000fd5b50505050846001600160a01b03166326a40e82612c5487613024565b6040518263ffffffff1660e01b8152600401612c709190613c7f565b600060405180830381600087803b158015612c8a57600080fd5b505af1158015612c9e573d6000803e3d6000fd5b505060c9805460ff1916600117905550505050505050565b600080612d34846001600160a01b031663ce78290d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cf557600080fd5b505afa158015612d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2d9190613b25565b8490612692565b9050612d7662015180856001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b109392505050565b60975460ff1615612da15760405162461bcd60e51b8152600401610456906140cb565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861247d612352565b60006110118383613713565b6000611011836001600160a01b038416613758565b604051631f8ac6cb60e31b81526000906001600160a01b0383169063fc5636589061257390600590600401613c7f565b6101c554604051635c9fcd8560e11b81526000916001600160a01b03169063b93f9b0a90612e5b90600290600401613c7f565b60206040518083038186803b158015612e7357600080fd5b505afa158015612e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baa9190613968565b600082612eba57506000611014565b82820282848281612ec757fe5b04146110115760405162461bcd60e51b815260040161045690614262565b600061101482613770565b612ef981612514565b612f155760405162461bcd60e51b8152600401610456906140f5565b816001600160a01b0316336001600160a01b03167fc4036209c61f1d5aad789d2b8fa9ca23bf8b1516748d2e0be7227bf3fce67d2d83604051612f589190613c7f565b60405180910390a36101c554600090612f79906001600160a01b0316612687565b6001600160a01b03166323b872dd3385856040518463ffffffff1660e01b8152600401612fa893929190613b74565b602060405180830381600087803b158015612fc257600080fd5b505af1158015612fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffa9190613a51565b9050806108ea5760405162461bcd60e51b81526004016104569061433d565b600061101482613788565b60008061306762015180846001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b90506000836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156130a457600080fd5b505afa1580156130b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130dc9190613b25565b90506000846001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b15801561311957600080fd5b505afa15801561312d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131519190613b25565b9050600061315d6121e1565b90508115801561316d5750600083115b156131875761317c818561287c565b945050505050610623565b6000831180156131975750818110155b1561324f5760006131bb856115f8600161123e836131b5888a612692565b9061378c565b90506131c7838261287c565b925061324383886001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b15801561320657600080fd5b505afa15801561321a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323e9190613b25565b6137ce565b95505050505050610623565b8215801561325c57508115155b1561326e576000945050505050610623565b60008311801561327d57508181105b1561328d57509250610623915050565b60405162461bcd60e51b815260040161045690613f67565b60008060008060006132b788876126d4565b915091506132c361392b565b7337CF6E5D79034D253C6DF9f6fa095510AA196F1263d7cc2a03898b6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561331757600080fd5b505afa15801561332b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334f9190613b25565b86866040518563ffffffff1660e01b815260040161337094939291906145b0565b60606040518083038186803b15801561338857600080fd5b505af415801561339c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c09190613ace565b9050600061343d82602001518b6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561340557600080fd5b505afa158015613419573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126779190613b25565b905061345682604001518261269290919063ffffffff16565b90506000613497828c6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561340557600080fd5b905060006134b68261267786600001518e61269290919063ffffffff16565b90506134e98c846134d487600001518a61269290919063ffffffff16565b60208801516134e4908a90612692565b6128a1565b8a6135058361123e87600001518561287c90919063ffffffff16565b1461350c57fe5b9251929b929a509850909650505050505050565b6000611011836001600160a01b0384166137e4565b6000611011836001600160a01b03841661382e565b60006001600160a01b03821663b93f9b0a826124a8565b600081848411156135855760405162461bcd60e51b81526004016104569190613c88565b505050900390565b60008161359c57506000611014565b826001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b1580156135d557600080fd5b505afa1580156135e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360d9190613b25565b1561368a57826001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b15801561364b57600080fd5b505afa15801561365f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136839190613b25565b9050611014565b61101161370b846001600160a01b03166348e6f2966040518163ffffffff1660e01b815260040160206040518083038186803b1580156136c957600080fd5b505afa1580156136dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137019190613b25565b6201518090612eab565b61123e6121e1565b815460009082106137365760405162461bcd60e51b815260040161045690613cdb565b82600001828154811061374557fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60006001600160a01b03821663b93f9b0a60056124a8565b5490565b600061101183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506138f4565b60008183106137dd5781611011565b5090919050565b60006137f08383613758565b61382657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611014565b506000611014565b600081815260018301602052604081205480156138ea578354600019808301919081019060009087908390811061386157fe5b906000526020600020015490508087600001848154811061387e57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806138ae57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611014565b6000915050611014565b600081836139155760405162461bcd60e51b81526004016104569190613c88565b50600083858161392157fe5b0495945050505050565b60405180606001604052806000815260200160008152602001600081525090565b60006020828403121561395d578081fd5b8135611011816145cb565b600060208284031215613979578081fd5b8151611011816145cb565b600080600080600080600080610100898b0312156139a0578384fd5b88356139ab816145cb565b975060208901356139bb816145cb565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b60008060408385031215613a00578182fd5b8235613a0b816145cb565b91506020830135613a1b816145cb565b809150509250929050565b60008060408385031215613a38578182fd5b8235613a43816145cb565b946020939093013593505050565b600060208284031215613a62578081fd5b81518015158114611011578182fd5b600060208284031215613a82578081fd5b5035919050565b60008060408385031215613a9b578182fd5b823591506020830135613a1b816145cb565b60008060408385031215613abf578182fd5b50508035926020909101359150565b600060608284031215613adf578081fd5b6040516060810181811067ffffffffffffffff82111715613afe578283fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060208284031215613b36578081fd5b5051919050565b60008060408385031215613b4f578182fd5b505080516020909101519092909150565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03979097168752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015613c685783516001600160a01b031683529284019291840191600101613c43565b50909695505050505050565b901515815260200190565b90815260200190565b6000602080835283518082850152825b81811015613cb457858101830151858201604001528201613c98565b81811115613cc55783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602a908201527f4f776e657220616e6420636f6e666967206164647265737365732063616e6e6f6040820152697420626520656d70747960b01b606082015260800190565b6020808252602a908201527f43616e6e6f742064726177646f776e207768656e207061796d656e74732061726040820152696520706173742064756560b01b606082015260800190565b60208082526033908201527f43616e2774206d69677261746520637265646974206c696e65207468617427736040820152721031bab93932b73a363c903830b4b21037b33360691b606082015260800190565b60208082526018908201527f4661696c656420746f207472616e736665722066756e64730000000000000000604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601290820152712330b4b632b2103a3790323930bbb237bbb760711b604082015260600190565b60208082526029908201527f4572726f723a20636f756c64206e6f742063616c63756c617465206e65787420604082015268323ab2903a34b6b29760b91b606082015260800190565b6020808252818101527f42616c616e636520646964206e6f74206d6967726174652070726f7065726c79604082015260600190565b6020808252602f908201527f496e7465726573742061636372756564206173206f6620646964206e6f74206d60408201526e6967726174652070726f7065726c7960881b606082015260800190565b60208082526027908201527f4e6f20637265646974206c696e657320657869737420666f722074686973206260408201526637b93937bbb2b960c91b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526028908201527f416d6f756e74206973206f76657220746865207065722d7472616e73616374696040820152671bdb881b1a5b5a5d60c21b606082015260800190565b6020808252601f908201527f43616e2774206d69677261746520656d70747920637265646974206c696e6500604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b602080825260139082015272556e6b6e6f776e20637265646974206c696e6560681b604082015260600190565b60208082526025908201527f596f7520646f206e6f742062656c6f6e6720746f207468697320637265646974604082015264206c696e6560d81b606082015260800190565b60208082526027908201527f4d75737420686176652062616c616e636520746f2061737365737320637265646040820152666974206c696e6560c81b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602c908201527f596f7520617265206e6f742074686520626f72726f776572206f66207468697360408201526b20637265646974206c696e6560a01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f4661696c656420746f20636f6c6c656374207061796d656e7400000000000000604082015260600190565b6020808252603a908201527f54686973206c696d69742069732067726561746572207468616e20746865206d60408201527f617820616c6c6f776564206279207468652070726f746f636f6c000000000000606082015260800190565b6020808252601c908201527f4d7573742064726177646f776e206d6f7265207468616e207a65726f00000000604082015260600190565b602080825260409082018190527f54686520626f72726f77657220646f6573206e6f74206861766520656e6f7567908201527f6820637265646974206c696d697420666f7220746869732064726177646f776e606082015260800190565b602080825260129082015271496e76616c6964206372656469746c696e6560701b604082015260600190565b60208082526017908201527f4d75737420706179206d6f7265207468616e207a65726f000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6001600160a01b03811681146109d457600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212201a39e6cc2bab0e5e97c467fc2529a7c423b86a0ec54a9ab88d3e2052f04e3a3164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80638456cb591161010f578063c26ff936116100a2578063e58378bb11610071578063e58378bb146103e8578063e63ab1e9146103f0578063ed80c850146103f8578063f5c7e0e214610400576101f0565b8063c26ff9361461039c578063c4076876146103af578063ca15c873146103c2578063d547741f146103d5576101f0565b80639cb93fe7116100de5780639cb93fe714610363578063a217fddf14610384578063a6f4487e1461038c578063b6db75a014610394576101f0565b80638456cb59146103225780639010d07c1461032a57806391d148541461033d57806394a3fcad14610350576101f0565b80634f92a7281161018757806374f0314f1161015657806374f0314f146102d257806379502c55146102da5780637d533642146102ef578063844a28c314610302576101f0565b80634f92a7281461029a578063526d81f6146102a25780635c975abb146102aa5780636acab9da146102bf576101f0565b80632f2ff15d116101c35780632f2ff15d1461025957806336568abe1461026c5780633f4ba83a1461027f578063485cc95514610287576101f0565b8063097616a3146101f55780630e4645ef1461020a578063248a9ca31461021d5780632e0c6cfe14610246575b600080fd5b61020861020336600461394c565b610413565b005b610208610218366004613a26565b61054c565b61023061022b366004613a71565b610610565b60405161023d9190613c7f565b60405180910390f35b610208610254366004613a26565b610628565b610208610267366004613a89565b610743565b61020861027a366004613a89565b610787565b6102086107c9565b6102086102953660046139ee565b610809565b6102086108ef565b61020861094c565b6102b26109d7565b60405161023d9190613c74565b6102086102cd366004613a26565b6109e0565b610230610f17565b6102e2610f1e565b60405161023d9190613b60565b6102306102fd36600461394c565b610f2e565b61031561031036600461394c565b610f41565b60405161023d9190613c27565b610208610fbb565b6102e2610338366004613aad565b610ff9565b6102b261034b366004613a89565b61101a565b61023061035e366004613a26565b611032565b610376610371366004613984565b61128e565b60405161023d929190613bb1565b610230611b82565b610230611b87565b6102b2611b8e565b6103156103aa36600461394c565b611baf565b6102086103bd366004613a26565b611c24565b6102306103d0366004613a71565b611cb5565b6102086103e3366004613a89565b611ccc565b610230611d06565b610230611d18565b610230611d2a565b61020861040e36600461394c565b611d31565b600054610100900460ff168061042c575061042c611f9d565b8061043a575060005460ff16155b61045f5760405162461bcd60e51b8152600401610456906142ef565b60405180910390fd5b600054610100900460ff1615801561048a576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166104b05760405162461bcd60e51b815260040161045690614174565b6104b8611fa3565b6104c0612024565b6104c86120b0565b6104e06000805160206145e18339815191528361077d565b6104f86000805160206146018339815191528361077d565b61051e6000805160206146018339815191526000805160206145e183398151915261213f565b6105366000805160206145e18339815191528061213f565b8015610548576000805461ff00191690555b5050565b610554611b8e565b6105705760405162461bcd60e51b815260040161045690614500565b60975460ff16156105935760405162461bcd60e51b8152600401610456906140cb565b61059c81612154565b6105b85760405162461bcd60e51b815260040161045690614374565b6001600160a01b03821660008181526101c6602052604090819020839055517f7be5403eca163f383a39c2d1f65a8fee2c9e41e7e6b150f4abfe16eaaf1d907690610604908490613c7f565b60405180910390a25050565b6000818152606560205260409020600201545b919050565b60975460ff161561064b5760405162461bcd60e51b8152600401610456906140cb565b6001600160a01b0380831660009081526101c860205260409020548391166106855760405162461bcd60e51b8152600401610456906141a9565b6000839050336001600160a01b0316816001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190613968565b6001600160a01b03161461072b5760405162461bcd60e51b8152600401610456906141d6565b61073d81846107386121e1565b6121e5565b50505050565b6000828152606560205260409020600201546107619061034b612352565b61077d5760405162461bcd60e51b815260040161045690613d1d565b6105488282612356565b61078f612352565b6001600160a01b0316816001600160a01b0316146107bf5760405162461bcd60e51b81526004016104569061454b565b61054882826123bf565b6107e360008051602061460183398151915261034b612352565b6107ff5760405162461bcd60e51b815260040161045690613eb8565b610807612428565b565b600054610100900460ff16806108225750610822611f9d565b80610830575060005460ff16155b61084c5760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff16158015610877576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383161580159061089757506001600160a01b03821615155b6108b35760405162461bcd60e51b815260040161045690613d9a565b6108bc83610413565b6101c580546001600160a01b0319166001600160a01b03841617905580156108ea576000805461ff00191690555b505050565b6108f7611b8e565b6109135760405162461bcd60e51b815260040161045690614500565b6101c554610929906001600160a01b0316612494565b6101c580546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16806109655750610965611f9d565b80610973575060005460ff16155b61098f5760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff161580156109ba576000805460ff1961ff0019909116610100171660011790555b6109c2612024565b80156109d4576000805461ff00191690555b50565b60975460ff1690565b60975460ff1615610a035760405162461bcd60e51b8152600401610456906140cb565b6001600160a01b0380831660009081526101c86020526040902054839116610a3d5760405162461bcd60e51b8152600401610456906141a9565b3360009081526101c7602052604090208054849190610a6e5760405162461bcd60e51b815260040161045690614034565b60008411610a8e5760405162461bcd60e51b8152600401610456906143d1565b336001600160a01b0316826001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190613968565b6001600160a01b031614610b2f5760405162461bcd60e51b8152600401610456906142a3565b610b3884612514565b610b545760405162461bcd60e51b8152600401610456906140f5565b6000610b5f8661252f565b9050610b6c8582856125c3565b610b885760405162461bcd60e51b815260040161045690614408565b6000836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb9190613b25565b905080610ccd57836001600160a01b031663a6b1ae0d610c196121e1565b6040518263ffffffff1660e01b8152600401610c359190613c7f565b600060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b50505050836001600160a01b03166336d91494610c7e6121e1565b6040518263ffffffff1660e01b8152600401610c9a9190613c7f565b600060405180830381600087803b158015610cb457600080fd5b505af1158015610cc8573d6000803e3d6000fd5b505050505b6101c554600090610ce6906001600160a01b0316612687565b905060008315610db65783881115610d0b575082610d048882612692565b9750610d10565b506000965b6040516323b872dd60e01b81526000906001600160a01b038416906323b872dd90610d43908d9033908790600401613b74565b602060405180830381600087803b158015610d5d57600080fd5b505af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d959190613a51565b905080610db45760405162461bcd60e51b815260040161045690613f3b565b505b600080610dca88610dc56121e1565b6126d4565b9092509050610dd9858b61287c565b9450610de7888684846128a1565b610df888610df36121e1565b612cb6565b15610e155760405162461bcd60e51b815260040161045690613de4565b6001600160a01b038816337f7ec4669c579321a5cf5a6b525637eb0924a93e2e11eab9d14be8b44de1116b1b610e4b8d8761287c565b604051610e589190613c7f565b60405180910390a38915610f0a576040516335655ced60e11b81526000906001600160a01b03861690636acab9da90610e979033908f90600401613b98565b602060405180830381600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee99190613a51565b905080610f085760405162461bcd60e51b815260040161045690613f3b565b505b5050505050505050505050565b6201518081565b6101c5546001600160a01b031681565b6101c66020526000908152604090205481565b6001600160a01b03811660009081526101c66020908152604091829020600101805483518184028101840190945280845260609392830182828015610faf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f91575b50505050509050919050565b610fd560008051602061460183398151915261034b612352565b610ff15760405162461bcd60e51b815260040161045690613eb8565b610807612d7e565b60008281526065602052604081206110119083612dd7565b90505b92915050565b60008281526065602052604081206110119083612de3565b6001600160a01b0380831660009081526101c86020526040812054909184911661106e5760405162461bcd60e51b8152600401610456906141a9565b8261107e5761107b6121e1565b92505b6000849050806001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f49190613b25565b8410801561110b575061110981610df36121e1565b155b1561111a576000925050611287565b6101c554600090819073__$1dcd660c042b25ef260537b13a3f0ede49$__9063101c84309085908990611155906001600160a01b0316612df8565b6040518463ffffffff1660e01b815260040161117393929190613c06565b604080518083038186803b15801561118a57600080fd5b505af415801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c29190613b3d565b9150915061128161124482856001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e9190613b25565b9061287c565b61123e84866001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b94505050505b5092915050565b600080611299611b8e565b6112b55760405162461bcd60e51b815260040161045690614500565b60008a90506000816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156112f557600080fd5b505afa158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d9190613b25565b90506000826001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561136a57600080fd5b505afa15801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a29190613b25565b116113bf5760405162461bcd60e51b81526004016104569061413d565b600081116113df5760405162461bcd60e51b815260040161045690613e2e565b6000826001600160a01b031663500b245e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141a57600080fd5b505afa15801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190613b25565b1161146f5760405162461bcd60e51b815260040161045690614466565b6001600160a01b038b166114f157816001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b657600080fd5b505afa1580156114ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ee9190613968565b9a505b6402540be4006000611501612e28565b6001600160a01b031663bc38f1bf8e6014876001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561154b57600080fd5b505afa15801561155f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115839190613b25565b6115fe878a6001600160a01b031663b39699926040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b505afa1580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f89190613b25565b90612eab565b896001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b15801561163757600080fd5b505afa15801561164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166f9190613b25565b8a6001600160a01b03166348e6f2966040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a857600080fd5b505afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190613b25565b8b6001600160a01b031663f0b25bde6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171957600080fd5b505afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190613b25565b6040518863ffffffff1660e01b81526004016117739796959493929190613bcb565b602060405180830381600087803b15801561178d57600080fd5b505af11580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c59190613968565b90506000816001600160a01b0316631fe032be868f8f8f8f8f8f6040518863ffffffff1660e01b81526004016118019796959493929190613bcb565b602060405180830381600087803b15801561181b57600080fd5b505af115801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190613968565b6040516327ea6f2b60e01b81529091506001600160a01b038616906327ea6f2b9061188390600090600401613c7f565b600060405180830381600087803b15801561189d57600080fd5b505af11580156118b1573d6000803e3d6000fd5b5050604051637d8b34e560e11b81526001600160a01b038816925063fb1669ca91506118e290600090600401613c7f565b600060405180830381600087803b1580156118fc57600080fd5b505af1158015611910573d6000803e3d6000fd5b50506101c5546000925061192d91506001600160a01b0316612ee5565b90506000816001600160a01b03166323b872dd8885856001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040161196e9190613b60565b60206040518083038186803b15801561198657600080fd5b505afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190613b25565b6040518463ffffffff1660e01b81526004016119dc93929190613b74565b602060405180830381600087803b1580156119f657600080fd5b505af1158015611a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2e9190613a51565b905080611a4d5760405162461bcd60e51b815260040161045690613e81565b85836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8757600080fd5b505afa158015611a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abf9190613b25565b14611adc5760405162461bcd60e51b815260040161045690613fb0565b8c836001600160a01b031663bbafcb406040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1657600080fd5b505afa158015611b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4e9190613b25565b14611b6b5760405162461bcd60e51b815260040161045690613fe5565b50909f919e50909c50505050505050505050505050565b600081565b6101c35481565b6000611baa6000805160206145e183398151915261034b612352565b905090565b6001600160a01b03811660009081526101c76020908152604091829020805483518184028101840190945280845260609392830182828015610faf576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f915750505050509050919050565b60975460ff1615611c475760405162461bcd60e51b8152600401610456906140cb565b6001600160a01b0380831660009081526101c86020526040902054839116611c815760405162461bcd60e51b8152600401610456906141a9565b60008211611ca15760405162461bcd60e51b815260040161045690614492565b82611cac8184612ef0565b61073d84611d31565b600081815260656020526040812061101490613019565b600082815260656020526040902060020154611cea9061034b612352565b6107bf5760405162461bcd60e51b81526004016104569061407b565b6000805160206145e183398151915281565b60008051602061460183398151915281565b6101c45481565b60975460ff1615611d545760405162461bcd60e51b8152600401610456906140cb565b6001600160a01b0380821660009081526101c86020526040902054829116611d8e5760405162461bcd60e51b8152600401610456906141a9565b60008290506000816001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611dce57600080fd5b505afa158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e069190613b25565b11611e235760405162461bcd60e51b81526004016104569061421b565b806001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b158015611e5c57600080fd5b505afa158015611e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e949190613b25565b611e9c6121e1565b108015611eb25750611eb081610df36121e1565b155b15611ebd5750610548565b6000611ec882613024565b604051631352074160e11b81529091506001600160a01b038316906326a40e8290611ef7908490600401613c7f565b600060405180830381600087803b158015611f1157600080fd5b505af1158015611f25573d6000803e3d6000fd5b50505050611f316121e1565b811115611f8a576000611f7a62015180846001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b9050611f868282612692565b9150505b61073d82611f978461252f565b836121e5565b303b1590565b600054610100900460ff1680611fbc5750611fbc611f9d565b80611fca575060005460ff16155b611fe65760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff161580156109c2576000805460ff1961ff00199091166101001716600117905580156109d4576000805461ff001916905550565b600054610100900460ff168061203d575061203d611f9d565b8061204b575060005460ff16155b6120675760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff16158015612092576000805460ff1961ff0019909116610100171660011790555b6097805460ff1916905580156109d4576000805461ff001916905550565b600054610100900460ff16806120c957506120c9611f9d565b806120d7575060005460ff16155b6120f35760405162461bcd60e51b8152600401610456906142ef565b600054610100900460ff1615801561211e576000805460ff1961ff0019909116610100171660011790555b60c9805460ff1916600117905580156109d4576000805461ff001916905550565b60009182526065602052604090912060020155565b6101c5546000906001600160a01b031663fc56365860025b6040518263ffffffff1660e01b81526004016121889190613c7f565b60206040518083038186803b1580156121a057600080fd5b505afa1580156121b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d89190613b25565b90911115919050565b4290565b60008060006121f58686866132a5565b6101c5549295509093509150600090612216906001600160a01b0316612687565b905060008311806122275750600082115b1561234957866001600160a01b0316876001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561226f57600080fd5b505afa158015612283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a79190613968565b6001600160a01b03167f724fe786cff62c97ff230e98a332f95c5a11990e44123a00c2b8e76b0566e4118585886040516122e39392919061459a565b60405180910390a36040516371bb0bab60e01b81526001600160a01b038216906371bb0bab9061231b908a9087908790600401613c06565b600060405180830381600087803b15801561233557600080fd5b505af1158015610f0a573d6000803e3d6000fd5b50505050505050565b3390565b600082815260656020526040902061236e9082613520565b156105485761237b612352565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206123d79082613535565b15610548576123e4612352565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff1661244a5760405162461bcd60e51b815260040161045690613d6c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61247d612352565b60405161248a9190613b60565b60405180910390a1565b60006001600160a01b03821663b93f9b0a600b5b6040518263ffffffff1660e01b81526004016124c49190613c7f565b60206040518083038186803b1580156124dc57600080fd5b505afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190613968565b6101c5546000906001600160a01b031663fc5636588261216c565b6101c554600090612548906001600160a01b0316612ee5565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016125739190613b60565b60206040518083038186803b15801561258b57600080fd5b505afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190613b25565b6000816001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125fe57600080fd5b505afa158015612612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126369190613b25565b61267d8461267787866001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b90612692565b1115949350505050565b60006110148261354a565b600061101183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613561565b60008060008073__$1dcd660c042b25ef260537b13a3f0ede49$__63101c8430878761271e6101c560009054906101000a90046001600160a01b03166001600160a01b0316612df8565b6040518463ffffffff1660e01b815260040161273c93929190613c06565b604080518083038186803b15801561275357600080fd5b505af4158015612767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278b9190613b3d565b909250905081156127f55760405163a6b1ae0d60e01b81526001600160a01b0387169063a6b1ae0d906127c2908890600401613c7f565b600060405180830381600087803b1580156127dc57600080fd5b505af11580156127f0573d6000803e3d6000fd5b505050505b61283282876001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b61286f82886001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b15801561120657600080fd5b9350935050509250929050565b6000828201838110156110115760405162461bcd60e51b815260040161045690613f04565b60c95460ff166128c35760405162461bcd60e51b8152600401610456906144c9565b60c9805460ff19169055604080516316d3df1560e31b81529051612954916001600160a01b0387169163b69ef8a891600480820192602092909190829003018186803b15801561291257600080fd5b505afa158015612926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294a9190613b25565b6101c45490612692565b6101c455604051637d8b34e560e11b81526001600160a01b0385169063fb1669ca90612984908690600401613c7f565b600060405180830381600087803b15801561299e57600080fd5b505af11580156129b2573d6000803e3d6000fd5b50506040516396c8df3760e01b81526001600160a01b03871692506396c8df3791506129e2908590600401613c7f565b600060405180830381600087803b1580156129fc57600080fd5b505af1158015612a10573d6000803e3d6000fd5b505060405163b3b8a9c760e01b81526001600160a01b038716925063b3b8a9c79150612a40908490600401613c7f565b600060405180830381600087803b158015612a5a57600080fd5b505af1158015612a6e573d6000803e3d6000fd5b505050506000846001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b158015612aad57600080fd5b505afa158015612ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae59190613b25565b905082158015612af457508015155b15612bc357600081612b046121e1565b1015612b60576000612b4c62015180886001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b9050612b588382612692565b915050612b63565b50805b604051630db6452560e21b81526001600160a01b038716906336d9149490612b8f908490600401613c7f565b600060405180830381600087803b158015612ba957600080fd5b505af1158015612bbd573d6000803e3d6000fd5b50505050505b6101c454612bd1908561287c565b6101c4556001600160a01b038516637ae14b09612bee878761358d565b6040518263ffffffff1660e01b8152600401612c0a9190613c7f565b600060405180830381600087803b158015612c2457600080fd5b505af1158015612c38573d6000803e3d6000fd5b50505050846001600160a01b03166326a40e82612c5487613024565b6040518263ffffffff1660e01b8152600401612c709190613c7f565b600060405180830381600087803b158015612c8a57600080fd5b505af1158015612c9e573d6000803e3d6000fd5b505060c9805460ff1916600117905550505050505050565b600080612d34846001600160a01b031663ce78290d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cf557600080fd5b505afa158015612d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2d9190613b25565b8490612692565b9050612d7662015180856001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b109392505050565b60975460ff1615612da15760405162461bcd60e51b8152600401610456906140cb565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861247d612352565b60006110118383613713565b6000611011836001600160a01b038416613758565b604051631f8ac6cb60e31b81526000906001600160a01b0383169063fc5636589061257390600590600401613c7f565b6101c554604051635c9fcd8560e11b81526000916001600160a01b03169063b93f9b0a90612e5b90600290600401613c7f565b60206040518083038186803b158015612e7357600080fd5b505afa158015612e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baa9190613968565b600082612eba57506000611014565b82820282848281612ec757fe5b04146110115760405162461bcd60e51b815260040161045690614262565b600061101482613770565b612ef981612514565b612f155760405162461bcd60e51b8152600401610456906140f5565b816001600160a01b0316336001600160a01b03167fc4036209c61f1d5aad789d2b8fa9ca23bf8b1516748d2e0be7227bf3fce67d2d83604051612f589190613c7f565b60405180910390a36101c554600090612f79906001600160a01b0316612687565b6001600160a01b03166323b872dd3385856040518463ffffffff1660e01b8152600401612fa893929190613b74565b602060405180830381600087803b158015612fc257600080fd5b505af1158015612fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffa9190613a51565b9050806108ea5760405162461bcd60e51b81526004016104569061433d565b600061101482613788565b60008061306762015180846001600160a01b03166399dd8df36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115c057600080fd5b90506000836001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156130a457600080fd5b505afa1580156130b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130dc9190613b25565b90506000846001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b15801561311957600080fd5b505afa15801561312d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131519190613b25565b9050600061315d6121e1565b90508115801561316d5750600083115b156131875761317c818561287c565b945050505050610623565b6000831180156131975750818110155b1561324f5760006131bb856115f8600161123e836131b5888a612692565b9061378c565b90506131c7838261287c565b925061324383886001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b15801561320657600080fd5b505afa15801561321a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323e9190613b25565b6137ce565b95505050505050610623565b8215801561325c57508115155b1561326e576000945050505050610623565b60008311801561327d57508181105b1561328d57509250610623915050565b60405162461bcd60e51b815260040161045690613f67565b60008060008060006132b788876126d4565b915091506132c361392b565b73__$1dcd660c042b25ef260537b13a3f0ede49$__63d7cc2a03898b6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561331757600080fd5b505afa15801561332b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334f9190613b25565b86866040518563ffffffff1660e01b815260040161337094939291906145b0565b60606040518083038186803b15801561338857600080fd5b505af415801561339c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c09190613ace565b9050600061343d82602001518b6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561340557600080fd5b505afa158015613419573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126779190613b25565b905061345682604001518261269290919063ffffffff16565b90506000613497828c6001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561340557600080fd5b905060006134b68261267786600001518e61269290919063ffffffff16565b90506134e98c846134d487600001518a61269290919063ffffffff16565b60208801516134e4908a90612692565b6128a1565b8a6135058361123e87600001518561287c90919063ffffffff16565b1461350c57fe5b9251929b929a509850909650505050505050565b6000611011836001600160a01b0384166137e4565b6000611011836001600160a01b03841661382e565b60006001600160a01b03821663b93f9b0a826124a8565b600081848411156135855760405162461bcd60e51b81526004016104569190613c88565b505050900390565b60008161359c57506000611014565b826001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b1580156135d557600080fd5b505afa1580156135e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360d9190613b25565b1561368a57826001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b15801561364b57600080fd5b505afa15801561365f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136839190613b25565b9050611014565b61101161370b846001600160a01b03166348e6f2966040518163ffffffff1660e01b815260040160206040518083038186803b1580156136c957600080fd5b505afa1580156136dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137019190613b25565b6201518090612eab565b61123e6121e1565b815460009082106137365760405162461bcd60e51b815260040161045690613cdb565b82600001828154811061374557fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60006001600160a01b03821663b93f9b0a60056124a8565b5490565b600061101183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506138f4565b60008183106137dd5781611011565b5090919050565b60006137f08383613758565b61382657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611014565b506000611014565b600081815260018301602052604081205480156138ea578354600019808301919081019060009087908390811061386157fe5b906000526020600020015490508087600001848154811061387e57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806138ae57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611014565b6000915050611014565b600081836139155760405162461bcd60e51b81526004016104569190613c88565b50600083858161392157fe5b0495945050505050565b60405180606001604052806000815260200160008152602001600081525090565b60006020828403121561395d578081fd5b8135611011816145cb565b600060208284031215613979578081fd5b8151611011816145cb565b600080600080600080600080610100898b0312156139a0578384fd5b88356139ab816145cb565b975060208901356139bb816145cb565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b60008060408385031215613a00578182fd5b8235613a0b816145cb565b91506020830135613a1b816145cb565b809150509250929050565b60008060408385031215613a38578182fd5b8235613a43816145cb565b946020939093013593505050565b600060208284031215613a62578081fd5b81518015158114611011578182fd5b600060208284031215613a82578081fd5b5035919050565b60008060408385031215613a9b578182fd5b823591506020830135613a1b816145cb565b60008060408385031215613abf578182fd5b50508035926020909101359150565b600060608284031215613adf578081fd5b6040516060810181811067ffffffffffffffff82111715613afe578283fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060208284031215613b36578081fd5b5051919050565b60008060408385031215613b4f578182fd5b505080516020909101519092909150565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03979097168752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015613c685783516001600160a01b031683529284019291840191600101613c43565b50909695505050505050565b901515815260200190565b90815260200190565b6000602080835283518082850152825b81811015613cb457858101830151858201604001528201613c98565b81811115613cc55783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602a908201527f4f776e657220616e6420636f6e666967206164647265737365732063616e6e6f6040820152697420626520656d70747960b01b606082015260800190565b6020808252602a908201527f43616e6e6f742064726177646f776e207768656e207061796d656e74732061726040820152696520706173742064756560b01b606082015260800190565b60208082526033908201527f43616e2774206d69677261746520637265646974206c696e65207468617427736040820152721031bab93932b73a363c903830b4b21037b33360691b606082015260800190565b60208082526018908201527f4661696c656420746f207472616e736665722066756e64730000000000000000604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601290820152712330b4b632b2103a3790323930bbb237bbb760711b604082015260600190565b60208082526029908201527f4572726f723a20636f756c64206e6f742063616c63756c617465206e65787420604082015268323ab2903a34b6b29760b91b606082015260800190565b6020808252818101527f42616c616e636520646964206e6f74206d6967726174652070726f7065726c79604082015260600190565b6020808252602f908201527f496e7465726573742061636372756564206173206f6620646964206e6f74206d60408201526e6967726174652070726f7065726c7960881b606082015260800190565b60208082526027908201527f4e6f20637265646974206c696e657320657869737420666f722074686973206260408201526637b93937bbb2b960c91b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526028908201527f416d6f756e74206973206f76657220746865207065722d7472616e73616374696040820152671bdb881b1a5b5a5d60c21b606082015260800190565b6020808252601f908201527f43616e2774206d69677261746520656d70747920637265646974206c696e6500604082015260600190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b602080825260139082015272556e6b6e6f776e20637265646974206c696e6560681b604082015260600190565b60208082526025908201527f596f7520646f206e6f742062656c6f6e6720746f207468697320637265646974604082015264206c696e6560d81b606082015260800190565b60208082526027908201527f4d75737420686176652062616c616e636520746f2061737365737320637265646040820152666974206c696e6560c81b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602c908201527f596f7520617265206e6f742074686520626f72726f776572206f66207468697360408201526b20637265646974206c696e6560a01b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526019908201527f4661696c656420746f20636f6c6c656374207061796d656e7400000000000000604082015260600190565b6020808252603a908201527f54686973206c696d69742069732067726561746572207468616e20746865206d60408201527f617820616c6c6f776564206279207468652070726f746f636f6c000000000000606082015260800190565b6020808252601c908201527f4d7573742064726177646f776e206d6f7265207468616e207a65726f00000000604082015260600190565b602080825260409082018190527f54686520626f72726f77657220646f6573206e6f74206861766520656e6f7567908201527f6820637265646974206c696d697420666f7220746869732064726177646f776e606082015260800190565b602080825260129082015271496e76616c6964206372656469746c696e6560701b604082015260600190565b60208082526017908201527f4d75737420706179206d6f7265207468616e207a65726f000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6001600160a01b03811681146109d457600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212201a39e6cc2bab0e5e97c467fc2529a7c423b86a0ec54a9ab88d3e2052f04e3a3164736f6c634300060c0033",
  "libraries": {
    "Accountant": "0x37CF6E5D79034D253C6DF9f6fa095510AA196F12"
  },
  "devdoc": {
    "author": "Goldfinch",
    "kind": "dev",
    "methods": {
      "assessCreditLine(address)": {
        "params": {
          "creditLineAddress": "The creditline that should be assessed."
        }
      },
      "drawdown(address,uint256)": {
        "params": {
          "amount": "The amount, in USDC atomic units, that a borrower wishes to drawdown Requirements: - the caller must be the borrower on the creditLine",
          "creditLineAddress": "The creditline from which they would like to drawdown"
        }
      },
      "getBorrowerCreditLines(address)": {
        "params": {
          "borrowerAddress": "The borrower address you would like to see the credit lines of."
        }
      },
      "getNextPaymentAmount(address,uint256)": {
        "params": {
          "asOf": "The timestamp to use for the payment calculation, if it is set to 0, uses the current time",
          "creditLineAddress": "The creditLine to calculate the payment for"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getUnderwriterCreditLines(address)": {
        "params": {
          "underwriterAddress": "The underwriter address you would like to see the credit lines of."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address)": {
        "params": {
          "_config": "The address of the GoldfinchConfig contract",
          "owner": "The address of who should have the \"OWNER_ROLE\" of this contract"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay(address,uint256)": {
        "params": {
          "amount": "The amount, in USDC atomic units, that a borrower wishes to pay",
          "creditLineAddress": "The credit line to be paid back"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setUnderwriterGovernanceLimit(address,uint256)": {
        "params": {
          "limit": "What the new limit will be set to Requirements: - the caller must have the `OWNER_ROLE`.",
          "underwriterAddress": "The address of the underwriter for whom the limit shall change"
        }
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      }
    },
    "title": "Goldfinch's CreditDesk contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assessCreditLine(address)": {
        "notice": "Assesses a particular creditLine. This will apply payments, which will update accounting and  distribute gains or losses back to the pool accordingly. This function is idempotent, and anyone  is allowed to call it."
      },
      "drawdown(address,uint256)": {
        "notice": "Allows a borrower to drawdown on their creditline.  `amount` USDC is sent to the borrower, and the credit line accounting is updated."
      },
      "getBorrowerCreditLines(address)": {
        "notice": "Simple getter for the creditlines of a given borrower"
      },
      "getNextPaymentAmount(address,uint256)": {
        "notice": "This function is only meant to be used by frontends. It returns the total payment due for a given creditLine as of the provided timestamp. Returns 0 if no payment is due (e.g. asOf is before the nextDueTime)"
      },
      "getUnderwriterCreditLines(address)": {
        "notice": "Simple getter for the creditlines of a given underwriter"
      },
      "initialize(address,address)": {
        "notice": "Run only once, on initialization"
      },
      "pay(address,uint256)": {
        "notice": "Allows a borrower to repay their loan. Payment is *collected* immediately (by sending it to  the individual CreditLine), but it is not *applied* unless it is after the nextDueTime, or until we assess  the credit line (ie. payment period end).  Any amounts over the minimum payment will be applied to outstanding principal (reducing the effective  interest rate). If there is still any left over, it will remain in the USDC Balance  of the CreditLine, which is held distinct from the Pool amounts, and can not be withdrawn by LP's."
      },
      "setUnderwriterGovernanceLimit(address,uint256)": {
        "notice": "Sets a particular underwriter's limit of how much credit the DAO will allow them to \"create\""
      }
    },
    "notice": "Main entry point for borrowers and underwriters.  Handles key logic for creating CreditLine's, borrowing money, repayment, etc.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 264,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)"
      },
      {
        "astId": 509,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4201,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 4290,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4299,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 4340,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9355,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9359,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9363,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9367,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7682,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "totalWritedowns",
        "offset": 0,
        "slot": "451",
        "type": "t_uint256"
      },
      {
        "astId": 7684,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "totalLoansOutstanding",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 10339,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "config",
        "offset": 0,
        "slot": "453",
        "type": "t_contract(GoldfinchConfig)13893"
      },
      {
        "astId": 10396,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "underwriters",
        "offset": 0,
        "slot": "454",
        "type": "t_mapping(t_address,t_struct(Underwriter)10348_storage)"
      },
      {
        "astId": 10400,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "borrowers",
        "offset": 0,
        "slot": "455",
        "type": "t_mapping(t_address,t_struct(Borrower)10352_storage)"
      },
      {
        "astId": 10404,
        "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
        "label": "creditLines",
        "offset": 0,
        "slot": "456",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GoldfinchConfig)13893": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Borrower)10352_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CreditDesk.Borrower)",
        "numberOfBytes": "32",
        "value": "t_struct(Borrower)10352_storage"
      },
      "t_mapping(t_address,t_struct(Underwriter)10348_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CreditDesk.Underwriter)",
        "numberOfBytes": "32",
        "value": "t_struct(Underwriter)10348_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)260_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3976_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3975,
            "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3796_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Borrower)10352_storage": {
        "encoding": "inplace",
        "label": "struct CreditDesk.Borrower",
        "members": [
          {
            "astId": 10351,
            "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
            "label": "creditLines",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)260_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3976_storage"
          },
          {
            "astId": 259,
            "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)3796_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3791,
            "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3795,
            "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Underwriter)10348_storage": {
        "encoding": "inplace",
        "label": "struct CreditDesk.Underwriter",
        "members": [
          {
            "astId": 10344,
            "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
            "label": "governanceLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10347,
            "contract": "contracts/protocol/core/CreditDesk.sol:CreditDesk",
            "label": "creditLines",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
