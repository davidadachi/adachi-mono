{
  "address": "0x5B06A5aA7fea5EE270E495e1418E6FdDa29766c5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositedAndStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fiduAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        }
      ],
      "name": "DepositedToCurve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fiduAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositedToCurveAndStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StakingRewards.StakedPositionType",
          "name": "positionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "EffectiveMultiplierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "configAddress",
          "type": "address"
        }
      ],
      "name": "GoldfinchConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRateAtPercent",
          "type": "uint256"
        }
      ],
      "name": "MaxRateAtPercentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRate",
          "type": "uint256"
        }
      ],
      "name": "MaxRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRateAtPercent",
          "type": "uint256"
        }
      ],
      "name": "MinRateAtPercentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRate",
          "type": "uint256"
        }
      ],
      "name": "MinRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetCapacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRateAtPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRateAtPercent",
          "type": "uint256"
        }
      ],
      "name": "RewardsParametersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StakingRewards.StakedPositionType",
          "name": "positionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenExchangeRate",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetCapacity",
          "type": "uint256"
        }
      ],
      "name": "TargetCapacityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StakingRewards.StakedPositionType",
          "name": "positionType",
          "type": "uint8"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcReceivedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnstakedAndWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcReceivedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "UnstakedAndWithdrewMultiple",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "UnstakedMultiple",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingLength",
          "type": "uint256"
        }
      ],
      "name": "VestingScheduleUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZAPPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract GoldfinchConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "__initialize__",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_tokenIdTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulatedRewardsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addToStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEarnRatePerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "depositAndStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fiduAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "depositToCurve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fiduAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "depositToCurveAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fiduAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "depositToCurveAndStakeFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermitAndStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "earnedSinceLastCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingRewards.StakedPositionType",
          "name": "positionType",
          "type": "uint8"
        }
      ],
      "name": "getBaseTokenExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingRewards.StakedPositionType",
          "name": "positionType",
          "type": "uint8"
        }
      ],
      "name": "getEffectiveMultiplierForPositionType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initZapperRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "kick",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "loadRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRateAtPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRateAtPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "optimisticClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "positionCurrentEarnRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positionToAccumulatedRewardsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalUnvested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPreviouslyVested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingRewardsVesting.Rewards",
          "name": "rewards",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "leverageMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "internalType": "enum StakingRewards.StakedPositionType",
          "name": "positionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "unsafeEffectiveMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unsafeBaseTokenExchangeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "internalType": "enum StakingRewards.StakedPositionType",
          "name": "positionType",
          "type": "uint8"
        }
      ],
      "name": "setEffectiveMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minRateAtPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxRateAtPercent",
          "type": "uint256"
        }
      ],
      "name": "setRewardsParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vestingLength",
          "type": "uint256"
        }
      ],
      "name": "setVestingSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum StakingRewards.StakedPositionType",
          "name": "positionType",
          "type": "uint8"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "totalOptimisticClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "grantedAmount",
          "type": "uint256"
        }
      ],
      "name": "totalVestedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "unstakeAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fiduAmount",
          "type": "uint256"
        }
      ],
      "name": "unstakeAndWithdrawInFidu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "usdcAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeAndWithdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fiduAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeAndWithdrawMultipleInFidu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "updatePositionEffectiveMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7948ca8eacf3580df722d590e3227f91544f4ca8de85f43c6b98c397677b25e5",
  "receipt": {
    "to": null,
    "from": "0xb72d9B5A2f58Db05D8F7E241248Faf2C7cdbFD0E",
    "contractAddress": "0x5B06A5aA7fea5EE270E495e1418E6FdDa29766c5",
    "transactionIndex": 52,
    "gasUsed": "5354654",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8c6610551298be3ae5bd0f755342ec892e68fdacba0bbdc97aea80180fc7c446",
    "transactionHash": "0x7948ca8eacf3580df722d590e3227f91544f4ca8de85f43c6b98c397677b25e5",
    "logs": [],
    "blockNumber": 14916600,
    "cumulativeGasUsed": "8805076",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c52586186129beb1f69c2d802aa3ecb5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositedAndStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fiduAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"DepositedToCurve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fiduAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositedToCurveAndStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StakingRewards.StakedPositionType\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"EffectiveMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"configAddress\",\"type\":\"address\"}],\"name\":\"GoldfinchConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRateAtPercent\",\"type\":\"uint256\"}],\"name\":\"MaxRateAtPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"}],\"name\":\"MaxRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRateAtPercent\",\"type\":\"uint256\"}],\"name\":\"MinRateAtPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"MinRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRateAtPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRateAtPercent\",\"type\":\"uint256\"}],\"name\":\"RewardsParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StakingRewards.StakedPositionType\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenExchangeRate\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetCapacity\",\"type\":\"uint256\"}],\"name\":\"TargetCapacityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StakingRewards.StakedPositionType\",\"name\":\"positionType\",\"type\":\"uint8\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcReceivedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakedAndWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcReceivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"UnstakedAndWithdrewMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"UnstakedMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingLength\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZAPPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"__initialize__\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenIdTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEarnRatePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"depositAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fiduAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"depositToCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fiduAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"depositToCurveAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fiduAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"depositToCurveAndStakeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermitAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"earnedSinceLastCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingRewards.StakedPositionType\",\"name\":\"positionType\",\"type\":\"uint8\"}],\"name\":\"getBaseTokenExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingRewards.StakedPositionType\",\"name\":\"positionType\",\"type\":\"uint8\"}],\"name\":\"getEffectiveMultiplierForPositionType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initZapperRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"kick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"loadRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRateAtPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRateAtPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"optimisticClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positionCurrentEarnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionToAccumulatedRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalUnvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPreviouslyVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingRewardsVesting.Rewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"leverageMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"enum StakingRewards.StakedPositionType\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unsafeEffectiveMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unsafeBaseTokenExchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"enum StakingRewards.StakedPositionType\",\"name\":\"positionType\",\"type\":\"uint8\"}],\"name\":\"setEffectiveMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRateAtPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRateAtPercent\",\"type\":\"uint256\"}],\"name\":\"setRewardsParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingLength\",\"type\":\"uint256\"}],\"name\":\"setVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum StakingRewards.StakedPositionType\",\"name\":\"positionType\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"totalOptimisticClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grantedAmount\",\"type\":\"uint256\"}],\"name\":\"totalVestedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"unstakeAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fiduAmount\",\"type\":\"uint256\"}],\"name\":\"unstakeAndWithdrawInFidu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"usdcAmounts\",\"type\":\"uint256[]\"}],\"name\":\"unstakeAndWithdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fiduAmounts\",\"type\":\"uint256[]\"}],\"name\":\"unstakeAndWithdrawMultipleInFidu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updatePositionEffectiveMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToStake(uint256,uint256)\":{\"details\":\"This function checkpoints rewards and is only callable by an approved address with ZAPPER_ROLE. This   function enables the Zapper to unwind \\\"in-progress\\\" positions initiated by `Zapper.zapStakeToTranchedPool`.   That is, funds that were moved from this contract into a TranchedPool can be \\\"unwound\\\" back to their original   staked position by the Zapper as part of `Zapper.unzapToStakingRewards`.\",\"params\":{\"amount\":\"Amount of `stakingToken()` to be added to tokenId's position\",\"tokenId\":\"A staking position token ID\"}},\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"claimableRewards(uint256)\":{\"returns\":{\"rewards\":\"Amount of rewards denominated in `rewardsToken()`\"}},\"currentEarnRatePerToken()\":{\"returns\":{\"_0\":\"Amount of rewards denominated in `rewardsToken().decimals()`.\"}},\"depositAndStake(uint256)\":{\"params\":{\"usdcAmount\":\"The amount of USDC to deposit into the senior pool. All shares from deposit   will be staked.\"}},\"depositToCurve(uint256,uint256)\":{\"params\":{\"fiduAmount\":\"The amount of FIDU to deposit\",\"usdcAmount\":\"The amount of USDC to deposit\"}},\"depositToCurveAndStakeFrom(address,uint256,uint256)\":{\"params\":{\"fiduAmount\":\"The amount of FIDU to deposit\",\"usdcAmount\":\"The amount of USDC to deposit\"}},\"depositWithPermitAndStake(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"r\":\"secp256k1 signature component\",\"s\":\"secp256k1 signature component\",\"usdcAmount\":\"The amount of USDC to deposit\",\"v\":\"secp256k1 signature component\"}},\"earnedSinceLastCheckpoint(uint256)\":{\"params\":{\"tokenId\":\"A staking position token ID\"},\"returns\":{\"_0\":\"Amount of rewards denominated in `rewardsToken().decimals()`\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for the given token ID\"}},\"getBaseTokenExchangeRate(uint8)\":{\"params\":{\"positionType\":\"Type of the staked postion\"}},\"getReward(uint256)\":{\"params\":{\"tokenId\":\"A staking position token ID\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"kick(uint256)\":{\"details\":\"This will also checkpoint their rewards up to the current time.\"},\"name()\":{\"details\":\"Gets the token name.\",\"returns\":{\"_0\":\"string representing the token name\"}},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"positionCurrentEarnRate(uint256)\":{\"returns\":{\"_0\":\"Amount of rewards denominated in `rewardsToken().decimals()`.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"rewardPerToken()\":{\"returns\":{\"_0\":\"Amount of rewards denominated in `rewardsToken().decimals()`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"operator address to set the approval\"}},\"setEffectiveMultiplier(uint256,uint8)\":{\"params\":{\"multiplier\":\"the new multiplier, denominated in `MULTIPLIER_DECIMALS`\",\"positionType\":\"the type of the position\"}},\"stake(uint256,uint8)\":{\"details\":\"This function checkpoints rewards.\",\"params\":{\"amount\":\"The amount of `stakingToken()` to stake\",\"positionType\":\"The type of the staked position\"},\"returns\":{\"_0\":\"Id of the NFT representing the staked position\"}},\"stakedBalanceOf(uint256)\":{\"details\":\"The value returned is the bare amount, not the effective amount. The bare amount represents   the number of tokens the user has staked for a given position.\",\"params\":{\"tokenId\":\"A staking position token ID\"},\"returns\":{\"_0\":\"Amount of staked tokens denominated in `stakingToken().decimals()`\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"returns\":{\"_0\":\"string representing the token symbol\"}},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the URI for a given token ID. May return an empty string. If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}). If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings. .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"token.uri/123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"\\\" | \\\"token.uri/<tokenId>\\\" |=== Requirements: - `tokenId` must exist.\"},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract.\",\"returns\":{\"_0\":\"uint256 representing the total amount of tokens\"}},\"totalVestedAt(uint256,uint256,uint256,uint256)\":{\"returns\":{\"rewards\":\"Amount of rewards denominated in `rewardsToken()`\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"unstake(uint256,uint256)\":{\"details\":\"This function checkpoints rewards\",\"params\":{\"amount\":\"Amount of `stakingToken()` to be unstaked from the position\",\"tokenId\":\"A staking position token ID\"}},\"unstakeMultiple(uint256[],uint256[])\":{\"details\":\"This function checkpoints rewards\",\"params\":{\"amounts\":\"A list of amounts of `stakingToken()` to be unstaked from the position\",\"tokenIds\":\"A list of position token IDs\"}},\"updatePositionEffectiveMultiplier(uint256)\":{\"details\":\"This will also checkpoint their rewards up to the current time.\"}},\"stateVariables\":{\"effectiveMultipliers\":{\"details\":\"A mapping of staked position types to multipliers used to denominate positions   in `baseStakingToken()`. Represented with `MULTIPLIER_DECIMALS`.\"},\"leverageMultipliers\":{\"details\":\"UNUSED (definition kept for storage slot)\"},\"positions\":{\"details\":\"NFT tokenId => staked position\"},\"totalLeveragedStakedSupply\":{\"details\":\"UNUSED (definition kept for storage slot)\"},\"totalStakedSupply\":{\"details\":\"Supply of staked tokens, denominated in `stakingToken().decimals()`Note that due to the use of `unsafeBaseTokenExchangeRate` and `unsafeEffectiveMultiplier` on a StakedPosition, the sum of `amount` across all staked positions will not necessarily equal this `totalStakedSupply` value; the purpose of the base token exchange rate and the effective multiplier is to enable calculation of an \\\"effective amount\\\" -- which is what this `totalStakedSupply` represents the sum of.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accumulatedRewardsPerToken()\":{\"notice\":\"Accumulated rewards per token at the last checkpoint\"},\"addToStake(uint256,uint256)\":{\"notice\":\"Add to an existing position without affecting vesting schedule\"},\"claimableRewards(uint256)\":{\"notice\":\"Returns the rewards claimable by a given position token at the most recent checkpoint, taking into   account vesting schedule.\"},\"currentEarnRatePerToken()\":{\"notice\":\"The amount of rewards currently being earned per token per second. This amount takes into   account how many rewards are actually available for disbursal -- unlike `rewardRate()` which does not.   This function is intended for public consumption, to know the rate at which rewards are being   earned, and not as an input to the mutative calculations in this contract.\"},\"depositAndStake(uint256)\":{\"notice\":\"Deposit to SeniorPool and stake your shares in the same transaction.\"},\"depositToCurve(uint256,uint256)\":{\"notice\":\"Deposits FIDU and USDC to Curve on behalf of the user. The Curve LP tokens will be minted   directly to the user's address\"},\"depositToCurveAndStakeFrom(address,uint256,uint256)\":{\"notice\":\"Deposit to FIDU and USDC into the Curve LP, and stake your Curve LP tokens in the same transaction.\"},\"depositWithPermitAndStake(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Identical to `depositAndStake`, except it allows for a signature to be passed that permits   this contract to move funds on behalf of the user.\"},\"earnedSinceLastCheckpoint(uint256)\":{\"notice\":\"Returns rewards earned by a given position token from its last checkpoint up to the   current block timestamp.\"},\"getBaseTokenExchangeRate(uint8)\":{\"notice\":\"Calculate the exchange rate that will be used to convert the original staked token amount to the   `baseStakingToken()` amount. The exchange rate is denominated in `MULTIPLIER_DECIMALS`.\"},\"getEffectiveMultiplierForPositionType(uint8)\":{\"notice\":\"The effective multiplier to use with new staked positions of the provided `positionType`,   for denominating them in terms of `baseStakingToken()`. This value is denominated in `MULTIPLIER_DECIMALS`.\"},\"getReward(uint256)\":{\"notice\":\"Claim rewards for a given staked position\"},\"kick(uint256)\":{\"notice\":\"\\\"Kick\\\" a user's reward multiplier. If they are past their lock-up period, their reward   multiplier will be reset to 1x.\"},\"lastUpdateTime()\":{\"notice\":\"The block timestamp when rewards were last checkpointed\"},\"loadRewards(uint256)\":{\"notice\":\"Transfer rewards from msg.sender, to be used for reward distribution\"},\"maxRate()\":{\"notice\":\"The maximum total disbursed rewards per second, denominated in `rewardsToken()`\"},\"maxRateAtPercent()\":{\"notice\":\"The percent of `targetCapacity` at which the reward rate reaches `maxRate`.  Represented with `MULTIPLIER_DECIMALS`.\"},\"minRate()\":{\"notice\":\"The minimum total disbursed rewards per second, denominated in `rewardsToken()`\"},\"minRateAtPercent()\":{\"notice\":\"The percent of `targetCapacity` at which the reward rate reaches `minRate`.  Represented with `MULTIPLIER_DECIMALS`.\"},\"positionCurrentEarnRate(uint256)\":{\"notice\":\"The amount of rewards currently being earned per second, for a given position. This function   is intended for public consumption, to know the rate at which rewards are being earned   for a given position, and not as an input to the mutative calculations in this contract.\"},\"positionToAccumulatedRewardsPerToken(uint256)\":{\"notice\":\"StakedPosition tokenId => accumulatedRewardsPerToken at the position's last checkpoint\"},\"rewardPerToken()\":{\"notice\":\"Returns accumulated rewards per token up to the current block timestamp\"},\"rewardsAvailable()\":{\"notice\":\"Total rewards available for disbursement at the last checkpoint, denominated in `rewardsToken()`\"},\"setEffectiveMultiplier(uint256,uint8)\":{\"notice\":\"Set the effective multiplier for a given staked position type. The effective multipler  is used to denominate a staked position to `baseStakingToken()`. The multiplier is represented in  `MULTIPLIER_DECIMALS`\"},\"stake(uint256,uint8)\":{\"notice\":\"Stake `stakingToken()` to earn rewards. When you call this function, you'll receive an   an NFT representing your staked position. You can present your NFT to `getReward` or `unstake`   to claim rewards or unstake your tokens respectively. Rewards vest over a schedule.\"},\"stakedBalanceOf(uint256)\":{\"notice\":\"Returns the staked balance of a given position token.\"},\"targetCapacity()\":{\"notice\":\"Desired supply of staked tokens. The reward rate adjusts in a range   around this value to incentivize staking or unstaking to maintain it.\"},\"totalVestedAt(uint256,uint256,uint256,uint256)\":{\"notice\":\"Returns the rewards that will have vested for some position with the given params.\"},\"unstake(uint256,uint256)\":{\"notice\":\"Unstake an amount of `stakingToken()` associated with a given position and transfer to msg.sender.   Unvested rewards will be forfeited, but remaining staked amount will continue to accrue rewards.\"},\"unstakeMultiple(uint256[],uint256[])\":{\"notice\":\"Unstake multiple positions and transfer to msg.sender.\"},\"updatePositionEffectiveMultiplier(uint256)\":{\"notice\":\"Updates a user's effective multiplier to the prevailing multiplier. This function gives   users an option to get on a higher multiplier without needing to unstake and lose their unvested tokens.\"},\"vestingLength()\":{\"notice\":\"The duration in seconds over which rewards vest\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x50280546205978ca6573541955e15453b4c07a19e6c8ec4f6785a5ae0d7343fb\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x734b5bedb78074a59bca6aff9e5a1801c9c7e9c5314daf32e14857161fb36932\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    function totalSupply() external view returns (uint256);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf81dbd00ad4a1e4795df72759e33872c2599ea6c060be5898ed5d6fcd8ee9a11\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa17f4147965ceccd9f2017b14fcf8ef142346ec69c7e0424fd5c99f5ffeed8fa\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa0237f846362c88efa0b2a5815e5cf95cf58c1f9acf654fa6e57f62090fdc92d\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x4f3a00edb976e97943fe0a620ea2948955a75eff2a9231c202d50d1e062d8da5\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\",\"keccak256\":\"0xfd5cf8319cb84ca04ea407d6fba686d53ad7f5d2bf476f41678f5a751d12a7ea\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xd1d78b1c8534fbcf8fdc8fbfec9133df142ef8cae9ae820929dfe6d80d2c790a\"},\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\"},\"contracts/external/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable\\n/*\\n  Vendored from @openzeppelin/contracts-ethereum-package@3.0.0\\n  Alterations:\\n   * Make supportsInterface virtual so it can be overriden by inheriting contracts\\n*/\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165UpgradeSafe is Initializable, IERC165 {\\n  /*\\n   * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n  /**\\n   * @dev Mapping of interface ids to whether or not it's supported.\\n   */\\n  mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n  function __ERC165_init() internal initializer {\\n    __ERC165_init_unchained();\\n  }\\n\\n  function __ERC165_init_unchained() internal initializer {\\n    // Derived contracts need only register support for their own interfaces,\\n    // we register support for ERC165 itself here\\n    _registerInterface(_INTERFACE_ID_ERC165);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   *\\n   * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return _supportedInterfaces[interfaceId];\\n  }\\n\\n  /**\\n   * @dev Registers the contract as an implementer of the interface defined by\\n   * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n   * registering its interface id is not required.\\n   *\\n   * See {IERC165-supportsInterface}.\\n   *\\n   * Requirements:\\n   *\\n   * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n   */\\n  function _registerInterface(bytes4 interfaceId) internal virtual {\\n    require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n    _supportedInterfaces[interfaceId] = true;\\n  }\\n\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd1066fe485768d933b170c9367a9f3a7a74b0bbbd52c28bb937fd93370d0d48b\",\"license\":\"MIT\"},\"contracts/external/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable\\n/*\\n  Vendored from @openzeppelin/contracts-ethereum-package@3.0.0\\n  Alterations:\\n   * Use vendored ERC165 with virtual supportsInterface\\n*/\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721UpgradeSafe is\\n  Initializable,\\n  ContextUpgradeSafe,\\n  ERC165UpgradeSafe,\\n  IERC721,\\n  IERC721Metadata,\\n  IERC721Enumerable\\n{\\n  using SafeMath for uint256;\\n  using Address for address;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n  using Strings for uint256;\\n\\n  // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n  // Mapping from holder address to their (enumerable) set of owned tokens\\n  mapping(address => EnumerableSet.UintSet) private _holderTokens;\\n\\n  // Enumerable mapping from token ids to their owners\\n  EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Optional mapping for token URIs\\n  mapping(uint256 => string) private _tokenURIs;\\n\\n  // Base URI\\n  string private _baseURI;\\n\\n  /*\\n   *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n   *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n   *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n   *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n   *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n   *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n   *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n   *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n   *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n   *\\n   *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n   *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n  /*\\n   *     bytes4(keccak256('name()')) == 0x06fdde03\\n   *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n   *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n   *\\n   *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n  /*\\n   *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n   *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n   *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n   *\\n   *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n   */\\n  bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n  function __ERC721_init(string memory name, string memory symbol) internal initializer {\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __ERC721_init_unchained(name, symbol);\\n  }\\n\\n  function __ERC721_init_unchained(string memory name, string memory symbol) internal initializer {\\n    _name = name;\\n    _symbol = symbol;\\n\\n    // register the supported interfaces to conform to ERC721 via ERC165\\n    _registerInterface(_INTERFACE_ID_ERC721);\\n    _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n    _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n  }\\n\\n  /**\\n   * @dev Gets the balance of the specified address.\\n   * @param owner address to query the balance of\\n   * @return uint256 representing the amount owned by the passed address\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n    return _holderTokens[owner].length();\\n  }\\n\\n  /**\\n   * @dev Gets the owner of the specified token ID.\\n   * @param tokenId uint256 ID of the token to query the owner of\\n   * @return address currently marked as the owner of the given token ID\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n  }\\n\\n  /**\\n   * @dev Gets the token name.\\n   * @return string representing the token name\\n   */\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Gets the token symbol.\\n   * @return string representing the token symbol\\n   */\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the URI for a given token ID. May return an empty string.\\n   *\\n   * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the\\n   * token's own URI (via {_setTokenURI}).\\n   *\\n   * If there is a base URI but no token URI, the token's ID will be used as\\n   * its URI when appending it to the base URI. This pattern for autogenerated\\n   * token URIs can lead to large gas savings.\\n   *\\n   * .Examples\\n   * |===\\n   * |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()`\\n   * | \\\"\\\"\\n   * | \\\"\\\"\\n   * | \\\"\\\"\\n   * | \\\"\\\"\\n   * | \\\"token.uri/123\\\"\\n   * | \\\"token.uri/123\\\"\\n   * | \\\"token.uri/\\\"\\n   * | \\\"123\\\"\\n   * | \\\"token.uri/123\\\"\\n   * | \\\"token.uri/\\\"\\n   * | \\\"\\\"\\n   * | \\\"token.uri/<tokenId>\\\"\\n   * |===\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n    string memory _tokenURI = _tokenURIs[tokenId];\\n\\n    // If there is no base URI, return the token URI.\\n    if (bytes(_baseURI).length == 0) {\\n      return _tokenURI;\\n    }\\n    // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n    if (bytes(_tokenURI).length > 0) {\\n      return string(abi.encodePacked(_baseURI, _tokenURI));\\n    }\\n    // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n    return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n  }\\n\\n  /**\\n   * @dev Returns the base URI set via {_setBaseURI}. This will be\\n   * automatically added as a prefix in {tokenURI} to each token's URI, or\\n   * to the token ID if no specific URI is set for that token ID.\\n   */\\n  function baseURI() public view returns (string memory) {\\n    return _baseURI;\\n  }\\n\\n  /**\\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner.\\n   * @param owner address owning the tokens list to be accessed\\n   * @param index uint256 representing the index to be accessed of the requested tokens list\\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n    return _holderTokens[owner].at(index);\\n  }\\n\\n  /**\\n   * @dev Gets the total amount of tokens stored by the contract.\\n   * @return uint256 representing the total amount of tokens\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n    return _tokenOwners.length();\\n  }\\n\\n  /**\\n   * @dev Gets the token ID at a given index of all the tokens in this contract\\n   * Reverts if the index is greater or equal to the total number of tokens.\\n   * @param index uint256 representing the index to be accessed of the tokens list\\n   * @return uint256 token ID at the given index of the tokens list\\n   */\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\n    (uint256 tokenId, ) = _tokenOwners.at(index);\\n    return tokenId;\\n  }\\n\\n  /**\\n   * @dev Approves another address to transfer the given token ID\\n   * The zero address indicates there is no approved address.\\n   * There can only be one approved address per token at a given time.\\n   * Can only be called by the token owner or an approved operator.\\n   * @param to address to be approved for the given token ID\\n   * @param tokenId uint256 ID of the token to be approved\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    address owner = ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Gets the approved address for a token ID, or zero if no address set\\n   * Reverts if the token ID does not exist.\\n   * @param tokenId uint256 ID of the token to query the approval of\\n   * @return address currently approved for the given token ID\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf.\\n   * @param operator operator address to set the approval\\n   * @param approved representing the status of the approval to be set\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev Tells whether an operator is approved by a given owner.\\n   * @param owner owner address which you want to query the approval of\\n   * @param operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev Transfers the ownership of a given token ID to another address.\\n   * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n   * Requires the msg.sender to be the owner, approved, or operator.\\n   * @param from current owner of the token\\n   * @param to address to receive the ownership of the given token ID\\n   * @param tokenId uint256 ID of the token to be transferred\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    //solhint-disable-next-line max-line-length\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Safely transfers the ownership of a given token ID to another address\\n   * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n   * which is called upon a safe transfer, and return the magic value\\n   * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n   * the transfer is reverted.\\n   * Requires the msg.sender to be the owner, approved, or operator\\n   * @param from current owner of the token\\n   * @param to address to receive the ownership of the given token ID\\n   * @param tokenId uint256 ID of the token to be transferred\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Safely transfers the ownership of a given token ID to another address\\n   * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\\n   * which is called upon a safe transfer, and return the magic value\\n   * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n   * the transfer is reverted.\\n   * Requires the _msgSender() to be the owner, approved, or operator\\n   * @param from current owner of the token\\n   * @param to address to receive the ownership of the given token ID\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes data to send along with a safe transfer check\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override {\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Safely transfers the ownership of a given token ID to another address\\n   * If the target address is a contract, it must implement `onERC721Received`,\\n   * which is called upon a safe transfer, and return the magic value\\n   * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n   * the transfer is reverted.\\n   * Requires the msg.sender to be the owner, approved, or operator\\n   * @param from current owner of the token\\n   * @param to address to receive the ownership of the given token ID\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes data to send along with a safe transfer check\\n   */\\n  function _safeTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) internal virtual {\\n    _transfer(from, to, tokenId);\\n    require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n  }\\n\\n  /**\\n   * @dev Returns whether the specified token exists.\\n   * @param tokenId uint256 ID of the token to query the existence of\\n   * @return bool whether the token exists\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return _tokenOwners.contains(tokenId);\\n  }\\n\\n  /**\\n   * @dev Returns whether the given spender can transfer a given token ID.\\n   * @param spender address of the spender to query\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @return bool whether the msg.sender is approved for the given token ID,\\n   * is an operator of the owner, or is the owner of the token\\n   */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n    require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n    address owner = ownerOf(tokenId);\\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n  }\\n\\n  /**\\n   * @dev Internal function to safely mint a new token.\\n   * Reverts if the given token ID already exists.\\n   * If the target address is a contract, it must implement `onERC721Received`,\\n   * which is called upon a safe transfer, and return the magic value\\n   * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n   * the transfer is reverted.\\n   * @param to The address that will own the minted token\\n   * @param tokenId uint256 ID of the token to be minted\\n   */\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\n    _safeMint(to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Internal function to safely mint a new token.\\n   * Reverts if the given token ID already exists.\\n   * If the target address is a contract, it must implement `onERC721Received`,\\n   * which is called upon a safe transfer, and return the magic value\\n   * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n   * the transfer is reverted.\\n   * @param to The address that will own the minted token\\n   * @param tokenId uint256 ID of the token to be minted\\n   * @param _data bytes data to send along with a safe transfer check\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) internal virtual {\\n    _mint(to, tokenId);\\n    require(\\n      _checkOnERC721Received(address(0), to, tokenId, _data),\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal function to mint a new token.\\n   * Reverts if the given token ID already exists.\\n   * @param to The address that will own the minted token\\n   * @param tokenId uint256 ID of the token to be minted\\n   */\\n  function _mint(address to, uint256 tokenId) internal virtual {\\n    require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    _beforeTokenTransfer(address(0), to, tokenId);\\n\\n    _holderTokens[to].add(tokenId);\\n\\n    _tokenOwners.set(tokenId, to);\\n\\n    emit Transfer(address(0), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to burn a specific token.\\n   * Reverts if the token does not exist.\\n   * @param tokenId uint256 ID of the token being burned\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = ownerOf(tokenId);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n    // Clear approvals\\n    _approve(address(0), tokenId);\\n\\n    // Clear metadata (if any)\\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\\n      delete _tokenURIs[tokenId];\\n    }\\n\\n    _holderTokens[owner].remove(tokenId);\\n\\n    _tokenOwners.remove(tokenId);\\n\\n    emit Transfer(owner, address(0), tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to transfer ownership of a given token ID to another address.\\n   * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n   * @param from current owner of the token\\n   * @param to address to receive the ownership of the given token ID\\n   * @param tokenId uint256 ID of the token to be transferred\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {\\n    require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n    require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    _holderTokens[from].remove(tokenId);\\n    _holderTokens[to].add(tokenId);\\n\\n    _tokenOwners.set(tokenId, to);\\n\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the token URI for a given token.\\n   *\\n   * Reverts if the token ID does not exist.\\n   *\\n   * TIP: If all token IDs share a prefix (for example, if your URIs look like\\n   * `https://api.myproject.com/token/<id>`), use {_setBaseURI} to store\\n   * it and save gas.\\n   */\\n  function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n    _tokenURIs[tokenId] = _tokenURI;\\n  }\\n\\n  /**\\n   * @dev Internal function to set the base URI for all token IDs. It is\\n   * automatically added as a prefix to the value returned in {tokenURI},\\n   * or to the token ID if {tokenURI} is empty.\\n   */\\n  function _setBaseURI(string memory baseURI_) internal virtual {\\n    _baseURI = baseURI_;\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (!to.isContract()) {\\n      return true;\\n    }\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = to.call(\\n      abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data)\\n    );\\n    if (!success) {\\n      if (returndata.length > 0) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n      }\\n    } else {\\n      bytes4 retval = abi.decode(returndata, (bytes4));\\n      return (retval == _ERC721_RECEIVED);\\n    }\\n  }\\n\\n  function _approve(address to, uint256 tokenId) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - when `from` is zero, `tokenId` will be minted for `to`.\\n   * - when `to` is zero, ``from``'s `tokenId` will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {}\\n\\n  uint256[41] private __gap;\\n}\\n\",\"keccak256\":\"0xc40a92deef2ce11ac8d1f6095db836a1b7f5b1db52eaa4aabe1505624366bd2e\",\"license\":\"MIT\"},\"contracts/external/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable\\n/*\\n  Vendored from @openzeppelin/contracts-ethereum-package@3.0.0\\n  Alterations:\\n   * Use vendored ERC721, which inherits from vendored ERC165 with virtual supportsInterface\\n*/\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721PausableUpgradeSafe is Initializable, ERC721UpgradeSafe, PausableUpgradeSafe {\\n  function __ERC721Pausable_init() internal initializer {\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __Pausable_init_unchained();\\n    __ERC721Pausable_init_unchained();\\n  }\\n\\n  function __ERC721Pausable_init_unchained() internal initializer {}\\n\\n  /**\\n   * @dev See {ERC721-_beforeTokenTransfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - the contract must not be paused.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n\\n    require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1af714d722de24b40462b49a1ab17d8adfdbb9117d6d41d442057648d2103f7f\",\"license\":\"MIT\"},\"contracts/external/ERC721PresetMinterPauserAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable\\n/*\\n  This is copied from OZ preset: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v3.0.0/contracts/presets/ERC721PresetMinterPauserAutoId.sol\\n  Alterations:\\n   * Make the counter public, so that we can use it in our custom mint function\\n   * Removed ERC721Burnable parent contract, but added our own custom burn function.\\n   * Removed original \\\"mint\\\" function, because we have a custom one.\\n   * Removed default initialization functions, because they set msg.sender as the owner, which\\n     we do not want, because we use a deployer account, which is separate from the protocol owner.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Counters.sol\\\";\\nimport \\\"./ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to aother accounts\\n */\\ncontract ERC721PresetMinterPauserAutoIdUpgradeSafe is\\n  Initializable,\\n  ContextUpgradeSafe,\\n  AccessControlUpgradeSafe,\\n  ERC721PausableUpgradeSafe\\n{\\n  using Counters for Counters.Counter;\\n\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  Counters.Counter public _tokenIdTracker;\\n\\n  /**\\n   * @dev Pauses all token transfers.\\n   *\\n   * See {ERC721Pausable} and {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `PAUSER_ROLE`.\\n   */\\n  function pause() public {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses all token transfers.\\n   *\\n   * See {ERC721Pausable} and {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `PAUSER_ROLE`.\\n   */\\n  function unpause() public {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n    _unpause();\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual override(ERC721PausableUpgradeSafe) {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x904272fe6cc6a5b2b475ad8055650b127582e0840b6db12aeefd1b1214b06251\",\"license\":\"MIT\"},\"contracts/interfaces/IBackerRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBackerRewards {\\n  function allocateRewards(uint256 _interestPaymentAmount) external;\\n\\n  function onTranchedPoolDrawdown(uint256 sliceIndex) external;\\n\\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(address poolAddress, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x6d315e4b40e24250078fd1ef037a50bb248dbaf955be2270246ccfb3c886964f\",\"license\":\"MIT\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d2cc9d84c55c0aa2f766aa3cc6371cdc7cf040e88e4f6a34ba1f6d40e2e0b5a\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function drawdown(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n\\n  function applyPayment(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOfBLock) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x11f2741210ea8aeb0b94f56e9418d856be1f235cc18dadd7ea2945506c9b4aa1\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x09e43bbbca3f80c1c1dfc588dfe365792b89e9267026b01408b7ddf6b035c21a\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurveLP {\\n  function token() external view returns (address);\\n\\n  function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\\n\\n  function lp_price() external view returns (uint256);\\n\\n  function get_virtual_price() external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] calldata amounts,\\n    uint256 min_mint_amount,\\n    bool use_eth,\\n    address receiver\\n  ) external returns (uint256);\\n\\n  function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function get_dy(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function balances(uint256 arg0) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd0363aba765f165e535a64be8d8b38464908fe9ce5e2966373743b502648b11\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7b5fb02e023b6006a5199992f242caf23f64240c91e625f1390d6ca421b59531\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x130a7bd2ddca4f9da2f9090cbcc1d63c1e21e152baca4779f18939977a5f6c04\",\"license\":\"MIT\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IGo {\\n  uint256 public constant ID_TYPE_0 = 0;\\n  uint256 public constant ID_TYPE_1 = 1;\\n  uint256 public constant ID_TYPE_2 = 2;\\n  uint256 public constant ID_TYPE_3 = 3;\\n  uint256 public constant ID_TYPE_4 = 4;\\n  uint256 public constant ID_TYPE_5 = 5;\\n  uint256 public constant ID_TYPE_6 = 6;\\n  uint256 public constant ID_TYPE_7 = 7;\\n  uint256 public constant ID_TYPE_8 = 8;\\n  uint256 public constant ID_TYPE_9 = 9;\\n  uint256 public constant ID_TYPE_10 = 10;\\n\\n  /// @notice Returns the address of the UniqueIdentity contract.\\n  function uniqueIdentity() external virtual returns (address);\\n\\n  function go(address account) public view virtual returns (bool);\\n\\n  function goOnlyIdTypes(address account, uint256[] calldata onlyIdTypes) public view virtual returns (bool);\\n\\n  function goSeniorPool(address account) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x74776a808df49bd56fd25ea8d6983865e6d17519b542f4d58e44e1a71a720b6d\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchConfig {\\n  function getNumber(uint256 index) external returns (uint256);\\n\\n  function getAddress(uint256 index) external returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external returns (address);\\n\\n  function setNumber(uint256 index, uint256 newNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4df9680fa1db27f4204d24cd15af68a73c81b62f83c2ca6d3ee6b0a98bc7da9\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x162686cd6edb6fbfd9f50549cc6d12dcfce0dfc97c4c6a9d134d742d3de193d9\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 usdcAmount) external virtual;\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual;\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) public virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function drawdown(address to, uint256 amount) public virtual returns (bool);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n\\n  function assets() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc113de25b7c7e2ac0180d32fab63d0eab1f9f6198ebc006e414f4fbd309026c4\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPoolTokens is IERC721 {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function withdrawPrincipal(uint256 tokenId, uint256 principalAmount) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xde447b1c8018dae988b90f93aeba62fe203a6aa822bf524c916233ce81d4ed04\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe514d470a9cb73449976c92844c4a587eea90980153af70e223bc9d6854c2497\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ISeniorPool.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPoolStrategy {\\n  function getLeverageRatio(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function invest(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256 amount);\\n\\n  function estimateInvestment(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x96897152c52e299397a50aeb6aefe5af19fb1152d7dd15a1b29fb21faecb45d7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStakingRewards {\\n  function unstake(uint256 tokenId, uint256 amount) external;\\n\\n  function addToStake(uint256 tokenId, uint256 amount) external;\\n\\n  function stakedBalanceOf(uint256 tokenId) external view returns (uint256);\\n\\n  function depositToCurveAndStakeFrom(\\n    address nftRecipient,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount\\n  ) external;\\n\\n  function kick(uint256 tokenId) external;\\n\\n  function accumulatedRewardsPerToken() external view returns (uint256);\\n\\n  function lastUpdateTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xffd8c1e22a3ce4259fd547ecdfba4082b60cdb0fa902a322e6d18a9d7c842e00\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n\\n  function numSlices() external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x575480005a216f68c9856ba9381095cd50e324668c3a6bc55a52f11036bed4b7\",\"license\":\"MIT\"},\"contracts/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n}\\n\",\"keccak256\":\"0x494c72e18454bd0fc38793849f904e8c7ebe6ce9e6693c1ebf7691a1dcd0a50a\",\"license\":\"MIT\"},\"contracts/library/StakingRewardsVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\n\\nlibrary StakingRewardsVesting {\\n  using SafeMath for uint256;\\n  using StakingRewardsVesting for Rewards;\\n\\n  uint256 internal constant PERCENTAGE_DECIMALS = 1e18;\\n\\n  struct Rewards {\\n    uint256 totalUnvested;\\n    uint256 totalVested;\\n    uint256 totalPreviouslyVested;\\n    uint256 totalClaimed;\\n    uint256 startTime;\\n    uint256 endTime;\\n  }\\n\\n  function claim(Rewards storage rewards, uint256 reward) internal {\\n    rewards.totalClaimed = rewards.totalClaimed.add(reward);\\n  }\\n\\n  function claimable(Rewards storage rewards) internal view returns (uint256) {\\n    return rewards.totalVested.add(rewards.totalPreviouslyVested).sub(rewards.totalClaimed);\\n  }\\n\\n  function currentGrant(Rewards storage rewards) internal view returns (uint256) {\\n    return rewards.totalUnvested.add(rewards.totalVested);\\n  }\\n\\n  /// @notice Slash the vesting rewards by `percentage`. `percentage` of the unvested portion\\n  ///   of the grant is forfeited. The remaining unvested portion continues to vest over the rest\\n  ///   of the vesting schedule. The already vested portion continues to be claimable.\\n  ///\\n  ///   A motivating example:\\n  ///\\n  ///   Let's say we're 50% through vesting, with 100 tokens granted. Thus, 50 tokens are vested and 50 are unvested.\\n  ///   Now let's say the grant is slashed by 90% (e.g. for StakingRewards, because the user unstaked 90% of their\\n  ///   position). 45 of the unvested tokens will be forfeited. 5 of the unvested tokens and 5 of the vested tokens\\n  ///   will be considered as the \\\"new grant\\\", which is 50% through vesting. The remaining 45 vested tokens will be\\n  ///   still be claimable at any time.\\n  function slash(Rewards storage rewards, uint256 percentage) internal {\\n    require(percentage <= PERCENTAGE_DECIMALS, \\\"slashing percentage cannot be greater than 100%\\\");\\n\\n    uint256 unvestedToSlash = rewards.totalUnvested.mul(percentage).div(PERCENTAGE_DECIMALS);\\n    uint256 vestedToMove = rewards.totalVested.mul(percentage).div(PERCENTAGE_DECIMALS);\\n\\n    rewards.totalUnvested = rewards.totalUnvested.sub(unvestedToSlash);\\n    rewards.totalVested = rewards.totalVested.sub(vestedToMove);\\n    rewards.totalPreviouslyVested = rewards.totalPreviouslyVested.add(vestedToMove);\\n  }\\n\\n  function checkpoint(Rewards storage rewards) internal {\\n    uint256 newTotalVested = totalVestedAt(rewards.startTime, rewards.endTime, block.timestamp, rewards.currentGrant());\\n\\n    if (newTotalVested > rewards.totalVested) {\\n      uint256 difference = newTotalVested.sub(rewards.totalVested);\\n      rewards.totalUnvested = rewards.totalUnvested.sub(difference);\\n      rewards.totalVested = newTotalVested;\\n    }\\n  }\\n\\n  function totalVestedAt(\\n    uint256 start,\\n    uint256 end,\\n    uint256 time,\\n    uint256 grantedAmount\\n  ) internal pure returns (uint256) {\\n    if (end <= start) {\\n      return grantedAmount;\\n    }\\n\\n    return Math.min(grantedAmount.mul(time.sub(start)).div(end.sub(start)), grantedAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x4ed40424979fa485e4d1d32c65e34ee060aeed7829d663210a17c250f1e3d977\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x555f6b770e8c9abbf90aa2d51f7f4c10161aa9f6ab6c3f0f4647cdbee8225c81\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IFidu.sol\\\";\\nimport \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../../interfaces/ISeniorPoolStrategy.sol\\\";\\nimport \\\"../../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/ICUSDCContract.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../interfaces/IBackerRewards.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchFactory.sol\\\";\\nimport \\\"../../interfaces/IGo.sol\\\";\\nimport \\\"../../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../../interfaces/ICurveLP.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(GoldfinchConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getSeniorPool(GoldfinchConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getSeniorPoolStrategy(GoldfinchConfig config) internal view returns (ISeniorPoolStrategy) {\\n    return ISeniorPoolStrategy(seniorPoolStrategyAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getCreditDesk(GoldfinchConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getFiduUSDCCurveLP(GoldfinchConfig config) internal view returns (ICurveLP) {\\n    return ICurveLP(fiduUSDCCurveLPAddress(config));\\n  }\\n\\n  function getCUSDCContract(GoldfinchConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function getPoolTokens(GoldfinchConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getBackerRewards(GoldfinchConfig config) internal view returns (IBackerRewards) {\\n    return IBackerRewards(backerRewardsAddress(config));\\n  }\\n\\n  function getGoldfinchFactory(GoldfinchConfig config) internal view returns (IGoldfinchFactory) {\\n    return IGoldfinchFactory(goldfinchFactoryAddress(config));\\n  }\\n\\n  function getGFI(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(gfiAddress(config));\\n  }\\n\\n  function getGo(GoldfinchConfig config) internal view returns (IGo) {\\n    return IGo(goAddress(config));\\n  }\\n\\n  function getStakingRewards(GoldfinchConfig config) internal view returns (IStakingRewards) {\\n    return IStakingRewards(stakingRewardsAddress(config));\\n  }\\n\\n  function oneInchAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function creditLineImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  function trustedForwarderAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function poolTokensAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function backerRewardsAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackerRewards));\\n  }\\n\\n  function seniorPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function seniorPoolStrategyAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPoolStrategy));\\n  }\\n\\n  function creditDeskAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function goldfinchFactoryAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory));\\n  }\\n\\n  function gfiAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function fiduUSDCCurveLPAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.FiduUSDCCurveLP));\\n  }\\n\\n  function cusdcContractAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function migratedTranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.MigratedTranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function goAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Go));\\n  }\\n\\n  function stakingRewardsAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakingRewards));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n}\\n\",\"keccak256\":\"0x47ef57a513fa8a8d67b68f53e1141420957335a7209031529711df518d286380\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    /// @dev: TotalFundsLimit used to represent a total cap on senior pool deposits\\n    /// but is now deprecated\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    GoldfinchFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder,\\n    CUSDCContract,\\n    GoldfinchConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation,\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation,\\n    GFI,\\n    Go,\\n    BackerRewards,\\n    StakingRewards,\\n    FiduUSDCCurveLP\\n  }\\n}\\n\",\"keccak256\":\"0xf1b7a2bc8a8593890df136fd2b81fc05d7e2c3b8084e6e1e63874d2c3d7cf6c8\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchConfig.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n *  Note: While this inherits from BaseUpgradeablePausable, it is not deployed as an upgradeable contract (this\\n *    is mostly to save gas costs of having each call go through a proxy)\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable {\\n  bytes32 public constant GO_LISTER_ROLE = keccak256(\\\"GO_LISTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n  mapping(address => bool) public goList;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  event GoListed(address indexed member);\\n  event NoListed(address indexed member);\\n\\n  bool public valuesInitialized;\\n\\n  function initialize(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    _setupRole(GO_LISTER_ROLE, owner);\\n\\n    _setRoleAdmin(GO_LISTER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function setAddress(uint256 addressIndex, address newAddress) public onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  function setNumber(uint256 index, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  function setSeniorPoolStrategy(address newStrategy) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.SeniorPoolStrategy);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newStrategy);\\n    addresses[key] = newStrategy;\\n  }\\n\\n  function setCreditLineImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setTranchedPoolImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TranchedPoolImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setBorrowerImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.BorrowerImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setGoldfinchConfig(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.GoldfinchConfig);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function initializeFromOtherConfig(\\n    address _initialConfig,\\n    uint256 numbersLength,\\n    uint256 addressesLength\\n  ) public onlyAdmin {\\n    require(!valuesInitialized, \\\"Already initialized values\\\");\\n    IGoldfinchConfig initialConfig = IGoldfinchConfig(_initialConfig);\\n    for (uint256 i = 0; i < numbersLength; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < addressesLength; i++) {\\n      if (getAddress(i) == address(0)) {\\n        setAddress(i, initialConfig.getAddress(i));\\n      }\\n    }\\n    valuesInitialized = true;\\n  }\\n\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = true;\\n    emit GoListed(_member);\\n  }\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = false;\\n    emit NoListed(_member);\\n  }\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      addToGoList(_members[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      removeFromGoList(_members[i]);\\n    }\\n  }\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) public view returns (address) {\\n    return addresses[index];\\n  }\\n\\n  function getNumber(uint256 index) public view returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  modifier onlyGoListerRole() {\\n    require(hasRole(GO_LISTER_ROLE, _msgSender()), \\\"Must have go-lister role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x20a1c0f6183595dc4529b65f21beb92c76c959bffaba947b9648f6c422f99767\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x855f5027a20c77b500dd8618a4881c64e8b63a62168fed0abf3be01a6e8e8a4d\",\"license\":\"MIT\"},\"contracts/rewards/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/drafts/IERC20Permit.sol\\\";\\n\\nimport \\\"../external/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../protocol/core/GoldfinchConfig.sol\\\";\\nimport \\\"../protocol/core/ConfigHelper.sol\\\";\\nimport \\\"../protocol/core/BaseUpgradeablePausable.sol\\\";\\n\\nimport \\\"../library/StakingRewardsVesting.sol\\\";\\n\\n// solhint-disable-next-line max-states-count\\ncontract StakingRewards is ERC721PresetMinterPauserAutoIdUpgradeSafe, ReentrancyGuardUpgradeSafe {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20withDec;\\n  using SafeERC20 for IERC20;\\n  using ConfigHelper for GoldfinchConfig;\\n\\n  using StakingRewardsVesting for StakingRewardsVesting.Rewards;\\n\\n  enum LockupPeriod {\\n    SixMonths,\\n    TwelveMonths,\\n    TwentyFourMonths\\n  }\\n\\n  enum StakedPositionType {\\n    Fidu,\\n    CurveLP\\n  }\\n\\n  struct StakedPosition {\\n    // @notice Staked amount denominated in `stakingToken().decimals()`\\n    uint256 amount;\\n    // @notice Struct describing rewards owed with vesting\\n    StakingRewardsVesting.Rewards rewards;\\n    // @notice Multiplier applied to staked amount when locking up position\\n    // @dev UNUSED (definition kept for storage slot)\\n    uint256 leverageMultiplier;\\n    // @notice Time in seconds after which position can be unstaked\\n    // @dev UNUSED (definition kept for storage slot)\\n    uint256 lockedUntil;\\n    // @notice Type of the staked position\\n    StakedPositionType positionType;\\n    // @notice Multiplier applied to staked amount to denominate in `baseStakingToken().decimals()`\\n    // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\\n    //  If you need this field, use `safeEffectiveMultiplier()`, which correctly handles old staked positions.\\n    uint256 unsafeEffectiveMultiplier;\\n    // @notice Exchange rate applied to staked amount to denominate in `baseStakingToken().decimals()`\\n    // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\\n    //  If you need this field, use `safeBaseTokenExchangeRate()`, which correctly handles old staked positions.\\n    uint256 unsafeBaseTokenExchangeRate;\\n  }\\n\\n  /* ========== EVENTS =================== */\\n  event RewardsParametersUpdated(\\n    address indexed who,\\n    uint256 targetCapacity,\\n    uint256 minRate,\\n    uint256 maxRate,\\n    uint256 minRateAtPercent,\\n    uint256 maxRateAtPercent\\n  );\\n  event TargetCapacityUpdated(address indexed who, uint256 targetCapacity);\\n  event VestingScheduleUpdated(address indexed who, uint256 vestingLength);\\n  event MinRateUpdated(address indexed who, uint256 minRate);\\n  event MaxRateUpdated(address indexed who, uint256 maxRate);\\n  event MinRateAtPercentUpdated(address indexed who, uint256 minRateAtPercent);\\n  event MaxRateAtPercentUpdated(address indexed who, uint256 maxRateAtPercent);\\n  event EffectiveMultiplierUpdated(address indexed who, StakedPositionType positionType, uint256 multiplier);\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  uint256 private constant MULTIPLIER_DECIMALS = 1e18;\\n\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n  bytes32 public constant ZAPPER_ROLE = keccak256(\\\"ZAPPER_ROLE\\\");\\n\\n  GoldfinchConfig public config;\\n\\n  /// @notice The block timestamp when rewards were last checkpointed\\n  uint256 public lastUpdateTime;\\n\\n  /// @notice Accumulated rewards per token at the last checkpoint\\n  uint256 public accumulatedRewardsPerToken;\\n\\n  /// @notice Total rewards available for disbursement at the last checkpoint, denominated in `rewardsToken()`\\n  uint256 public rewardsAvailable;\\n\\n  /// @notice StakedPosition tokenId => accumulatedRewardsPerToken at the position's last checkpoint\\n  mapping(uint256 => uint256) public positionToAccumulatedRewardsPerToken;\\n\\n  /// @notice Desired supply of staked tokens. The reward rate adjusts in a range\\n  ///   around this value to incentivize staking or unstaking to maintain it.\\n  uint256 public targetCapacity;\\n\\n  /// @notice The minimum total disbursed rewards per second, denominated in `rewardsToken()`\\n  uint256 public minRate;\\n\\n  /// @notice The maximum total disbursed rewards per second, denominated in `rewardsToken()`\\n  uint256 public maxRate;\\n\\n  /// @notice The percent of `targetCapacity` at which the reward rate reaches `maxRate`.\\n  ///  Represented with `MULTIPLIER_DECIMALS`.\\n  uint256 public maxRateAtPercent;\\n\\n  /// @notice The percent of `targetCapacity` at which the reward rate reaches `minRate`.\\n  ///  Represented with `MULTIPLIER_DECIMALS`.\\n  uint256 public minRateAtPercent;\\n\\n  /// @notice The duration in seconds over which rewards vest\\n  uint256 public vestingLength;\\n\\n  /// @dev Supply of staked tokens, denominated in `stakingToken().decimals()`\\n  /// @dev Note that due to the use of `unsafeBaseTokenExchangeRate` and `unsafeEffectiveMultiplier` on\\n  /// a StakedPosition, the sum of `amount` across all staked positions will not necessarily\\n  /// equal this `totalStakedSupply` value; the purpose of the base token exchange rate and\\n  /// the effective multiplier is to enable calculation of an \\\"effective amount\\\" -- which is\\n  /// what this `totalStakedSupply` represents the sum of.\\n  uint256 public totalStakedSupply;\\n\\n  /// @dev UNUSED (definition kept for storage slot)\\n  uint256 private totalLeveragedStakedSupply;\\n\\n  /// @dev UNUSED (definition kept for storage slot)\\n  mapping(LockupPeriod => uint256) private leverageMultipliers;\\n\\n  /// @dev NFT tokenId => staked position\\n  mapping(uint256 => StakedPosition) public positions;\\n\\n  /// @dev A mapping of staked position types to multipliers used to denominate positions\\n  ///   in `baseStakingToken()`. Represented with `MULTIPLIER_DECIMALS`.\\n  mapping(StakedPositionType => uint256) private effectiveMultipliers;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __initialize__(address owner, GoldfinchConfig _config) external initializer {\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __ERC721_init_unchained(\\\"Goldfinch V2 LP Staking Tokens\\\", \\\"GFI-V2-LPS\\\");\\n    __ERC721Pausable_init_unchained();\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n\\n    config = _config;\\n\\n    vestingLength = 365 days;\\n  }\\n\\n  function initZapperRole() external onlyAdmin {\\n    _setRoleAdmin(ZAPPER_ROLE, OWNER_ROLE);\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  /// @notice Returns the staked balance of a given position token.\\n  /// @dev The value returned is the bare amount, not the effective amount. The bare amount represents\\n  ///   the number of tokens the user has staked for a given position.\\n  /// @param tokenId A staking position token ID\\n  /// @return Amount of staked tokens denominated in `stakingToken().decimals()`\\n  function stakedBalanceOf(uint256 tokenId) external view returns (uint256) {\\n    return positions[tokenId].amount;\\n  }\\n\\n  /// @notice The address of the token being disbursed as rewards\\n  function rewardsToken() internal view returns (IERC20withDec) {\\n    return config.getGFI();\\n  }\\n\\n  /// @notice The address of the token that is staked for a given position type\\n  function stakingToken(StakedPositionType positionType) internal view returns (IERC20) {\\n    if (positionType == StakedPositionType.CurveLP) {\\n      return IERC20(config.getFiduUSDCCurveLP().token());\\n    }\\n\\n    return config.getFidu();\\n  }\\n\\n  /// @notice The address of the base token used to denominate staking rewards\\n  function baseStakingToken() internal view returns (IERC20withDec) {\\n    return config.getFidu();\\n  }\\n\\n  /// @notice The additional rewards earned per token, between the provided time and the last\\n  ///   time rewards were checkpointed, given the prevailing `rewardRate()`. This amount is limited\\n  ///   by the amount of rewards that are available for distribution; if there aren't enough\\n  ///   rewards in the balance of this contract, then we shouldn't be giving them out.\\n  /// @return Amount of rewards denominated in `rewardsToken().decimals()`.\\n  function _additionalRewardsPerTokenSinceLastUpdate(uint256 time) internal view returns (uint256) {\\n    /// @dev IT: Invalid end time for range\\n    require(time >= lastUpdateTime, \\\"IT\\\");\\n\\n    if (totalStakedSupply == 0) {\\n      return 0;\\n    }\\n    uint256 rewardsSinceLastUpdate = Math.min(time.sub(lastUpdateTime).mul(rewardRate()), rewardsAvailable);\\n    uint256 additionalRewardsPerToken = rewardsSinceLastUpdate.mul(stakingAndRewardsTokenMantissa()).div(\\n      totalStakedSupply\\n    );\\n    // Prevent perverse, infinite-mint scenario where totalStakedSupply is a fraction of a token.\\n    // Since it's used as the denominator, this could make additionalRewardPerToken larger than the total number\\n    // of tokens that should have been disbursed in the elapsed time. The attacker would need to find\\n    // a way to reduce totalStakedSupply while maintaining a staked position of >= 1.\\n    // See: https://twitter.com/Mudit__Gupta/status/1409463917290557440\\n    if (additionalRewardsPerToken > rewardsSinceLastUpdate) {\\n      return 0;\\n    }\\n    return additionalRewardsPerToken;\\n  }\\n\\n  /// @notice Returns accumulated rewards per token up to the current block timestamp\\n  /// @return Amount of rewards denominated in `rewardsToken().decimals()`\\n  function rewardPerToken() public view returns (uint256) {\\n    return accumulatedRewardsPerToken.add(_additionalRewardsPerTokenSinceLastUpdate(block.timestamp));\\n  }\\n\\n  /// @notice Returns rewards earned by a given position token from its last checkpoint up to the\\n  ///   current block timestamp.\\n  /// @param tokenId A staking position token ID\\n  /// @return Amount of rewards denominated in `rewardsToken().decimals()`\\n  function earnedSinceLastCheckpoint(uint256 tokenId) public view returns (uint256) {\\n    return\\n      _positionToEffectiveAmount(positions[tokenId])\\n        .mul(rewardPerToken().sub(positionToAccumulatedRewardsPerToken[tokenId]))\\n        .div(stakingAndRewardsTokenMantissa());\\n  }\\n\\n  function totalOptimisticClaimable(address owner) external view returns (uint256) {\\n    uint256 result = 0;\\n    for (uint256 i = 0; i < balanceOf(owner); i++) {\\n      uint256 tokenId = tokenOfOwnerByIndex(owner, i);\\n      result = result.add(optimisticClaimable(tokenId));\\n    }\\n    return result;\\n  }\\n\\n  function optimisticClaimable(uint256 tokenId) public view returns (uint256) {\\n    return earnedSinceLastCheckpoint(tokenId).add(claimableRewards(tokenId));\\n  }\\n\\n  /// @notice Returns the rewards claimable by a given position token at the most recent checkpoint, taking into\\n  ///   account vesting schedule.\\n  /// @return rewards Amount of rewards denominated in `rewardsToken()`\\n  function claimableRewards(uint256 tokenId) public view returns (uint256 rewards) {\\n    return positions[tokenId].rewards.claimable();\\n  }\\n\\n  /// @notice Returns the rewards that will have vested for some position with the given params.\\n  /// @return rewards Amount of rewards denominated in `rewardsToken()`\\n  function totalVestedAt(\\n    uint256 start,\\n    uint256 end,\\n    uint256 time,\\n    uint256 grantedAmount\\n  ) external pure returns (uint256 rewards) {\\n    return StakingRewardsVesting.totalVestedAt(start, end, time, grantedAmount);\\n  }\\n\\n  /// @notice Number of rewards, in `rewardsToken().decimals()`, to disburse each second\\n  function rewardRate() internal view returns (uint256) {\\n    // The reward rate can be thought of as a piece-wise function:\\n    //\\n    //   let intervalStart = (maxRateAtPercent * targetCapacity),\\n    //       intervalEnd = (minRateAtPercent * targetCapacity),\\n    //       x = totalStakedSupply\\n    //   in\\n    //     if x < intervalStart\\n    //       y = maxRate\\n    //     if x > intervalEnd\\n    //       y = minRate\\n    //     else\\n    //       y = maxRate - (maxRate - minRate) * (x - intervalStart) / (intervalEnd - intervalStart)\\n    //\\n    // See an example here:\\n    // solhint-disable-next-line max-line-length\\n    // https://www.wolframalpha.com/input/?i=Piecewise%5B%7B%7B1000%2C+x+%3C+50%7D%2C+%7B100%2C+x+%3E+300%7D%2C+%7B1000+-+%281000+-+100%29+*+%28x+-+50%29+%2F+%28300+-+50%29+%2C+50+%3C+x+%3C+300%7D%7D%5D\\n    //\\n    // In that example:\\n    //   maxRateAtPercent = 0.5, minRateAtPercent = 3, targetCapacity = 100, maxRate = 1000, minRate = 100\\n    uint256 intervalStart = targetCapacity.mul(maxRateAtPercent).div(MULTIPLIER_DECIMALS);\\n    uint256 intervalEnd = targetCapacity.mul(minRateAtPercent).div(MULTIPLIER_DECIMALS);\\n    uint256 x = totalStakedSupply;\\n\\n    // Subsequent computation would overflow\\n    if (intervalEnd <= intervalStart) {\\n      return 0;\\n    }\\n\\n    if (x < intervalStart) {\\n      return maxRate;\\n    }\\n\\n    if (x > intervalEnd) {\\n      return minRate;\\n    }\\n\\n    return maxRate.sub(maxRate.sub(minRate).mul(x.sub(intervalStart)).div(intervalEnd.sub(intervalStart)));\\n  }\\n\\n  function _positionToEffectiveAmount(StakedPosition storage position) internal view returns (uint256) {\\n    return toEffectiveAmount(position.amount, safeBaseTokenExchangeRate(position), safeEffectiveMultiplier(position));\\n  }\\n\\n  /// @notice Calculates the effective amount given the amount, (safe) base token exchange rate,\\n  ///   and (safe) effective multiplier for a position\\n  /// @param amount The amount of staked tokens\\n  /// @param safeBaseTokenExchangeRate The (safe) base token exchange rate. See @dev comment below.\\n  /// @param safeEffectiveMultiplier The (safe) effective multiplier. See @dev comment below.\\n  /// @dev Do NOT pass in the unsafeBaseTokenExchangeRate or unsafeEffectiveMultiplier in storage.\\n  ///   Convert it to safe values using `safeBaseTokenExchangeRate()` and `safeEffectiveMultiplier()`\\n  //    before calling this function.\\n  function toEffectiveAmount(\\n    uint256 amount,\\n    uint256 safeBaseTokenExchangeRate,\\n    uint256 safeEffectiveMultiplier\\n  ) internal pure returns (uint256) {\\n    // Both the exchange rate and the effective multiplier are denominated in MULTIPLIER_DECIMALS\\n    return\\n      amount.mul(safeBaseTokenExchangeRate).mul(safeEffectiveMultiplier).div(MULTIPLIER_DECIMALS).div(\\n        MULTIPLIER_DECIMALS\\n      );\\n  }\\n\\n  /// @dev We overload the responsibility of this function -- i.e. returning a value that can be\\n  /// used for both the `stakingToken()` mantissa and the `rewardsToken()` mantissa --, rather than have\\n  /// multiple distinct functions for that purpose, in order to reduce contract size. We rely on a unit\\n  /// test to ensure that the tokens' mantissas are indeed equal and therefore that this approach works.\\n  function stakingAndRewardsTokenMantissa() internal view returns (uint256) {\\n    return uint256(10)**baseStakingToken().decimals();\\n  }\\n\\n  /// @notice The amount of rewards currently being earned per token per second. This amount takes into\\n  ///   account how many rewards are actually available for disbursal -- unlike `rewardRate()` which does not.\\n  ///   This function is intended for public consumption, to know the rate at which rewards are being\\n  ///   earned, and not as an input to the mutative calculations in this contract.\\n  /// @return Amount of rewards denominated in `rewardsToken().decimals()`.\\n  function currentEarnRatePerToken() public view returns (uint256) {\\n    uint256 time = block.timestamp == lastUpdateTime ? block.timestamp + 1 : block.timestamp;\\n    uint256 elapsed = time.sub(lastUpdateTime);\\n    return _additionalRewardsPerTokenSinceLastUpdate(time).div(elapsed);\\n  }\\n\\n  /// @notice The amount of rewards currently being earned per second, for a given position. This function\\n  ///   is intended for public consumption, to know the rate at which rewards are being earned\\n  ///   for a given position, and not as an input to the mutative calculations in this contract.\\n  /// @return Amount of rewards denominated in `rewardsToken().decimals()`.\\n  function positionCurrentEarnRate(uint256 tokenId) external view returns (uint256) {\\n    return\\n      currentEarnRatePerToken().mul(_positionToEffectiveAmount(positions[tokenId])).div(\\n        stakingAndRewardsTokenMantissa()\\n      );\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /// @notice Stake `stakingToken()` to earn rewards. When you call this function, you'll receive an\\n  ///   an NFT representing your staked position. You can present your NFT to `getReward` or `unstake`\\n  ///   to claim rewards or unstake your tokens respectively. Rewards vest over a schedule.\\n  /// @dev This function checkpoints rewards.\\n  /// @param amount The amount of `stakingToken()` to stake\\n  /// @param positionType The type of the staked position\\n  /// @return Id of the NFT representing the staked position\\n  function stake(uint256 amount, StakedPositionType positionType)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    updateReward(0)\\n    returns (uint256)\\n  {\\n    return _stake(msg.sender, msg.sender, amount, positionType);\\n  }\\n\\n  /// @notice Deposit to SeniorPool and stake your shares in the same transaction.\\n  /// @param usdcAmount The amount of USDC to deposit into the senior pool. All shares from deposit\\n  ///   will be staked.\\n  function depositAndStake(uint256 usdcAmount) public nonReentrant whenNotPaused updateReward(0) returns (uint256) {\\n    /// @dev GL: This address has not been go-listed\\n    require(isGoListed(), \\\"GL\\\");\\n    IERC20withDec usdc = config.getUSDC();\\n    usdc.safeTransferFrom(msg.sender, address(this), usdcAmount);\\n\\n    ISeniorPool seniorPool = config.getSeniorPool();\\n    usdc.safeIncreaseAllowance(address(seniorPool), usdcAmount);\\n    uint256 fiduAmount = seniorPool.deposit(usdcAmount);\\n\\n    uint256 tokenId = _stake(address(this), msg.sender, fiduAmount, StakedPositionType.Fidu);\\n    emit DepositedAndStaked(msg.sender, usdcAmount, tokenId, fiduAmount);\\n\\n    return tokenId;\\n  }\\n\\n  /// @notice Identical to `depositAndStake`, except it allows for a signature to be passed that permits\\n  ///   this contract to move funds on behalf of the user.\\n  /// @param usdcAmount The amount of USDC to deposit\\n  /// @param v secp256k1 signature component\\n  /// @param r secp256k1 signature component\\n  /// @param s secp256k1 signature component\\n  function depositWithPermitAndStake(\\n    uint256 usdcAmount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256) {\\n    IERC20Permit(config.usdcAddress()).permit(msg.sender, address(this), usdcAmount, deadline, v, r, s);\\n    return depositAndStake(usdcAmount);\\n  }\\n\\n  /// @notice Deposits FIDU and USDC to Curve on behalf of the user. The Curve LP tokens will be minted\\n  ///   directly to the user's address\\n  /// @param fiduAmount The amount of FIDU to deposit\\n  /// @param usdcAmount The amount of USDC to deposit\\n  function depositToCurve(uint256 fiduAmount, uint256 usdcAmount) external nonReentrant whenNotPaused {\\n    uint256 curveLPTokens = _depositToCurve(msg.sender, msg.sender, fiduAmount, usdcAmount);\\n\\n    emit DepositedToCurve(msg.sender, fiduAmount, usdcAmount, curveLPTokens);\\n  }\\n\\n  function depositToCurveAndStake(uint256 fiduAmount, uint256 usdcAmount) external {\\n    depositToCurveAndStakeFrom(msg.sender, fiduAmount, usdcAmount);\\n  }\\n\\n  /// @notice Deposit to FIDU and USDC into the Curve LP, and stake your Curve LP tokens in the same transaction.\\n  /// @param fiduAmount The amount of FIDU to deposit\\n  /// @param usdcAmount The amount of USDC to deposit\\n  function depositToCurveAndStakeFrom(\\n    address nftRecipient,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount\\n  ) public nonReentrant whenNotPaused updateReward(0) {\\n    // Add liquidity to Curve. The Curve LP tokens will be minted under StakingRewards\\n    uint256 curveLPTokens = _depositToCurve(msg.sender, address(this), fiduAmount, usdcAmount);\\n\\n    // Stake the Curve LP tokens on behalf of the user\\n    uint256 tokenId = _stake(address(this), nftRecipient, curveLPTokens, StakedPositionType.CurveLP);\\n\\n    emit DepositedToCurveAndStaked(msg.sender, fiduAmount, usdcAmount, tokenId, curveLPTokens);\\n  }\\n\\n  /// @notice Deposit to FIDU and USDC into the Curve LP. Returns the amount of Curve LP tokens minted,\\n  ///   which is denominated in 1e18.\\n  /// @param depositor The address of the depositor (i.e. the current owner of the FIDU and USDC to deposit)\\n  /// @param lpTokensRecipient The receipient of the resulting LP tokens\\n  /// @param fiduAmount The amount of FIDU to deposit\\n  /// @param usdcAmount The amount of USDC to deposit\\n  function _depositToCurve(\\n    address depositor,\\n    address lpTokensRecipient,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount\\n  ) internal returns (uint256) {\\n    /// @dev ZERO: Cannot stake 0\\n    require(fiduAmount > 0 || usdcAmount > 0, \\\"ZERO\\\");\\n\\n    IERC20withDec usdc = config.getUSDC();\\n    IERC20withDec fidu = config.getFidu();\\n    ICurveLP curveLP = config.getFiduUSDCCurveLP();\\n\\n    // Transfer FIDU and USDC from depositor to StakingRewards, and allow the Curve LP contract to spend\\n    // this contract's FIDU and USDC\\n    if (fiduAmount > 0) {\\n      fidu.safeTransferFrom(depositor, address(this), fiduAmount);\\n      fidu.safeIncreaseAllowance(address(curveLP), fiduAmount);\\n    }\\n    if (usdcAmount > 0) {\\n      usdc.safeTransferFrom(depositor, address(this), usdcAmount);\\n      usdc.safeIncreaseAllowance(address(curveLP), usdcAmount);\\n    }\\n\\n    // We will allow up to 10% slippage, so minMintAmount should be at least 90%\\n    uint256 minMintAmount = curveLP.calc_token_amount([fiduAmount, usdcAmount]).mul(9).div(10);\\n\\n    // Add liquidity to Curve. The Curve LP tokens will be minted under the `lpTokensRecipient`.\\n    // The `add_liquidity()` function returns the number of LP tokens minted, denominated in 1e18.\\n    //\\n    // solhint-disable-next-line max-line-length\\n    // https://github.com/curvefi/curve-factory/blob/ab5e7f6934c0dcc3ad06ccda4d6b35ffbbc99d42/contracts/implementations/plain-4/Plain4Basic.vy#L76\\n    // https://curve.readthedocs.io/factory-pools.html#StableSwap.decimals\\n    //\\n    // It would perhaps be ideal to do our own enforcement of `minMintAmount`, but given the Curve\\n    // contract is non-upgradeable and we are satisfied with its implementation, we do not.\\n    return curveLP.add_liquidity([fiduAmount, usdcAmount], minMintAmount, false, lpTokensRecipient);\\n  }\\n\\n  /// @notice Returns the effective multiplier for a given position. Defaults to 1 for all staked\\n  ///   positions created prior to GIP-1 (before the `unsafeEffectiveMultiplier` field was added).\\n  /// @dev Always use this method to get the effective multiplier to ensure proper handling of\\n  ///   old staked positions.\\n  function safeEffectiveMultiplier(StakedPosition storage position) internal view returns (uint256) {\\n    if (position.unsafeEffectiveMultiplier > 0) {\\n      return position.unsafeEffectiveMultiplier;\\n    }\\n\\n    return MULTIPLIER_DECIMALS; // 1x\\n  }\\n\\n  /// @notice Returns the base token exchange rate for a given position. Defaults to 1 for all staked\\n  ///   positions created prior to GIP-1 (before the `unsafeBaseTokenExchangeRate` field was added).\\n  /// @dev Always use this method to get the base token exchange rate to ensure proper handling of\\n  ///   old staked positions.\\n  function safeBaseTokenExchangeRate(StakedPosition storage position) internal view returns (uint256) {\\n    if (position.unsafeBaseTokenExchangeRate > 0) {\\n      return position.unsafeBaseTokenExchangeRate;\\n    }\\n    return MULTIPLIER_DECIMALS;\\n  }\\n\\n  /// @notice The effective multiplier to use with new staked positions of the provided `positionType`,\\n  ///   for denominating them in terms of `baseStakingToken()`. This value is denominated in `MULTIPLIER_DECIMALS`.\\n  function getEffectiveMultiplierForPositionType(StakedPositionType positionType) public view returns (uint256) {\\n    if (effectiveMultipliers[positionType] > 0) {\\n      return effectiveMultipliers[positionType];\\n    }\\n\\n    return MULTIPLIER_DECIMALS; // 1x\\n  }\\n\\n  /// @notice Calculate the exchange rate that will be used to convert the original staked token amount to the\\n  ///   `baseStakingToken()` amount. The exchange rate is denominated in `MULTIPLIER_DECIMALS`.\\n  /// @param positionType Type of the staked postion\\n  function getBaseTokenExchangeRate(StakedPositionType positionType) public view virtual returns (uint256) {\\n    if (positionType == StakedPositionType.CurveLP) {\\n      // Curve LP tokens are scaled by MULTIPLIER_DECIMALS (1e18),\\n      uint256 curveLPVirtualPrice = config.getFiduUSDCCurveLP().get_virtual_price();\\n\\n      // @dev LOW: The Curve LP token virtual price is too low\\n      require(curveLPVirtualPrice > MULTIPLIER_DECIMALS.div(2), \\\"LOW\\\");\\n      // @dev HIGH: The Curve LP token virtual price is too high\\n      require(curveLPVirtualPrice < MULTIPLIER_DECIMALS.mul(2), \\\"HIGH\\\");\\n\\n      // The FIDU token price is also scaled by MULTIPLIER_DECIMALS (1e18)\\n      return curveLPVirtualPrice.mul(MULTIPLIER_DECIMALS).div(config.getSeniorPool().sharePrice());\\n    }\\n\\n    return MULTIPLIER_DECIMALS; // 1x\\n  }\\n\\n  function _stake(\\n    address staker,\\n    address nftRecipient,\\n    uint256 amount,\\n    StakedPositionType positionType\\n  ) internal returns (uint256 tokenId) {\\n    /// @dev ZERO: Cannot stake 0\\n    require(amount > 0, \\\"ZERO\\\");\\n\\n    _tokenIdTracker.increment();\\n    tokenId = _tokenIdTracker.current();\\n\\n    // Ensure we snapshot accumulatedRewardsPerToken for tokenId after it is available\\n    // We do this before setting the position, because we don't want `earned` to (incorrectly) account for\\n    // position.amount yet. This is equivalent to using the updateReward(msg.sender) modifier in the original\\n    // synthetix contract, where the modifier is called before any staking balance for that address is recorded\\n    _updateReward(tokenId);\\n\\n    uint256 baseTokenExchangeRate = getBaseTokenExchangeRate(positionType);\\n    uint256 effectiveMultiplier = getEffectiveMultiplierForPositionType(positionType);\\n\\n    positions[tokenId] = StakedPosition({\\n      positionType: positionType,\\n      amount: amount,\\n      rewards: StakingRewardsVesting.Rewards({\\n        totalUnvested: 0,\\n        totalVested: 0,\\n        totalPreviouslyVested: 0,\\n        totalClaimed: 0,\\n        startTime: block.timestamp,\\n        endTime: block.timestamp.add(vestingLength)\\n      }),\\n      unsafeBaseTokenExchangeRate: baseTokenExchangeRate,\\n      unsafeEffectiveMultiplier: effectiveMultiplier,\\n      leverageMultiplier: 0,\\n      lockedUntil: 0\\n    });\\n    _mint(nftRecipient, tokenId);\\n\\n    totalStakedSupply = totalStakedSupply.add(_positionToEffectiveAmount(positions[tokenId]));\\n\\n    // Staker is address(this) when using depositAndStake or other convenience functions\\n    if (staker != address(this)) {\\n      stakingToken(positionType).safeTransferFrom(staker, address(this), amount);\\n    }\\n\\n    emit Staked(nftRecipient, tokenId, amount, positionType, baseTokenExchangeRate);\\n\\n    return tokenId;\\n  }\\n\\n  //==============================================================\\n  // START: UNSTAKING FUNCTIONS\\n  //\\n  // Note: All unstake functions need to checkpoint rewards by\\n  // calling `_updateReward(tokenId)` before unstaking to ensure\\n  // that latest rewards earned since the last checkpoint are\\n  // accounted for.\\n  //==============================================================\\n\\n  /// @notice Unstake an amount of `stakingToken()` associated with a given position and transfer to msg.sender.\\n  ///   Unvested rewards will be forfeited, but remaining staked amount will continue to accrue rewards.\\n  ///\\n  /// @dev This function checkpoints rewards\\n  /// @param tokenId A staking position token ID\\n  /// @param amount Amount of `stakingToken()` to be unstaked from the position\\n  function unstake(uint256 tokenId, uint256 amount) public nonReentrant whenNotPaused {\\n    // Checkpoint rewards\\n    _updateReward(tokenId);\\n    // Unstake\\n    _unstake(tokenId, amount);\\n    // Transfer staked tokens back to msg.sender\\n    stakingToken(positions[tokenId].positionType).safeTransfer(msg.sender, amount);\\n  }\\n\\n  /// @notice Unstake multiple positions and transfer to msg.sender.\\n  ///\\n  /// @dev This function checkpoints rewards\\n  /// @param tokenIds A list of position token IDs\\n  /// @param amounts A list of amounts of `stakingToken()` to be unstaked from the position\\n  function unstakeMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n  {\\n    /// @dev LEN: Params must have the same length\\n    require(tokenIds.length == amounts.length, \\\"LEN\\\");\\n\\n    uint256 fiduAmountToUnstake = 0;\\n    uint256 curveAmountToUnstake = 0;\\n\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      // Checkpoint rewards\\n      _updateReward(tokenIds[i]);\\n      // Unstake\\n      _unstake(tokenIds[i], amounts[i]);\\n      if (positions[tokenIds[i]].positionType == StakedPositionType.CurveLP) {\\n        curveAmountToUnstake = curveAmountToUnstake.add(amounts[i]);\\n      } else {\\n        fiduAmountToUnstake = fiduAmountToUnstake.add(amounts[i]);\\n      }\\n    }\\n\\n    // Transfer all staked tokens back to msg.sender\\n    if (fiduAmountToUnstake > 0) {\\n      stakingToken(StakedPositionType.Fidu).safeTransfer(msg.sender, fiduAmountToUnstake);\\n    }\\n    if (curveAmountToUnstake > 0) {\\n      stakingToken(StakedPositionType.CurveLP).safeTransfer(msg.sender, curveAmountToUnstake);\\n    }\\n\\n    emit UnstakedMultiple(msg.sender, tokenIds, amounts);\\n  }\\n\\n  function unstakeAndWithdraw(uint256 tokenId, uint256 usdcAmount) external nonReentrant whenNotPaused {\\n    // Checkpoint rewards\\n    _updateReward(tokenId);\\n    // Unstake and withdraw staked tokens\\n    (uint256 usdcReceivedAmount, uint256 fiduAmount) = _unstakeAndWithdraw(tokenId, usdcAmount);\\n\\n    emit UnstakedAndWithdrew(msg.sender, usdcReceivedAmount, tokenId, fiduAmount);\\n  }\\n\\n  function unstakeAndWithdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata usdcAmounts)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n  {\\n    /// @dev LEN: Params must have the same length\\n    require(tokenIds.length == usdcAmounts.length, \\\"LEN\\\");\\n\\n    uint256 usdcReceivedAmountTotal = 0;\\n    uint256[] memory fiduAmounts = new uint256[](usdcAmounts.length);\\n    for (uint256 i = 0; i < usdcAmounts.length; i++) {\\n      // Checkpoint rewards\\n      _updateReward(tokenIds[i]);\\n      // Unstake and withdraw staked tokens\\n      (uint256 usdcReceivedAmount, uint256 fiduAmount) = _unstakeAndWithdraw(tokenIds[i], usdcAmounts[i]);\\n\\n      usdcReceivedAmountTotal = usdcReceivedAmountTotal.add(usdcReceivedAmount);\\n      fiduAmounts[i] = fiduAmount;\\n    }\\n\\n    emit UnstakedAndWithdrewMultiple(msg.sender, usdcReceivedAmountTotal, tokenIds, fiduAmounts);\\n  }\\n\\n  function unstakeAndWithdrawInFidu(uint256 tokenId, uint256 fiduAmount) external nonReentrant whenNotPaused {\\n    // Checkpoint rewards\\n    _updateReward(tokenId);\\n    // Unstake and withdraw staked FIDU\\n    uint256 usdcReceivedAmount = _unstakeAndWithdrawInFidu(tokenId, fiduAmount);\\n\\n    emit UnstakedAndWithdrew(msg.sender, usdcReceivedAmount, tokenId, fiduAmount);\\n  }\\n\\n  function unstakeAndWithdrawMultipleInFidu(uint256[] calldata tokenIds, uint256[] calldata fiduAmounts)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n  {\\n    /// @dev LEN: Params must have the same length\\n    require(tokenIds.length == fiduAmounts.length, \\\"LEN\\\");\\n\\n    uint256 usdcReceivedAmountTotal = 0;\\n    for (uint256 i = 0; i < fiduAmounts.length; i++) {\\n      // Checkpoint rewards\\n      _updateReward(tokenIds[i]);\\n      // Unstake and withdraw staked FIDU\\n      uint256 usdcReceivedAmount = _unstakeAndWithdrawInFidu(tokenIds[i], fiduAmounts[i]);\\n\\n      usdcReceivedAmountTotal = usdcReceivedAmountTotal.add(usdcReceivedAmount);\\n    }\\n\\n    emit UnstakedAndWithdrewMultiple(msg.sender, usdcReceivedAmountTotal, tokenIds, fiduAmounts);\\n  }\\n\\n  function _unstakeAndWithdraw(uint256 tokenId, uint256 usdcAmount)\\n    internal\\n    returns (uint256 usdcAmountReceived, uint256 fiduUsed)\\n  {\\n    /// @dev CW: Cannot withdraw funds with this position\\n    require(canWithdraw(tokenId), \\\"CW\\\");\\n    /// @dev GL: This address has not been go-listed\\n    require(isGoListed(), \\\"GL\\\");\\n    IFidu fidu = config.getFidu();\\n\\n    uint256 fiduBalanceBefore = fidu.balanceOf(address(this));\\n\\n    usdcAmountReceived = config.getSeniorPool().withdraw(usdcAmount);\\n\\n    fiduUsed = fiduBalanceBefore.sub(fidu.balanceOf(address(this)));\\n\\n    _unstake(tokenId, fiduUsed);\\n    config.getUSDC().safeTransfer(msg.sender, usdcAmountReceived);\\n\\n    return (usdcAmountReceived, fiduUsed);\\n  }\\n\\n  function _unstakeAndWithdrawInFidu(uint256 tokenId, uint256 fiduAmount)\\n    internal\\n    returns (uint256 usdcReceivedAmount)\\n  {\\n    /// @dev CW: Cannot withdraw funds with this position\\n    require(canWithdraw(tokenId), \\\"CW\\\");\\n\\n    usdcReceivedAmount = config.getSeniorPool().withdrawInFidu(fiduAmount);\\n    _unstake(tokenId, fiduAmount);\\n    config.getUSDC().safeTransfer(msg.sender, usdcReceivedAmount);\\n    return usdcReceivedAmount;\\n  }\\n\\n  /// @notice Unstake an amount from a single position\\n  ///\\n  /// @dev This function does NOT checkpoint rewards; the caller of this function is responsible\\n  ///   for ensuring that rewards are properly checkpointed before invocation.\\n  /// @dev This function does NOT transfer staked tokens back to the user; the caller of this\\n  ///   function is responsible for ensuring that tokens are transferred back to the\\n  ///   owner if necessary.\\n  /// @param tokenId The token ID\\n  /// @param amount The amount of of `stakingToken()` to be unstaked from the position\\n  function _unstake(uint256 tokenId, uint256 amount) internal {\\n    /// @dev AD: Access denied\\n    require(_isApprovedOrOwner(msg.sender, tokenId), \\\"AD\\\");\\n\\n    StakedPosition storage position = positions[tokenId];\\n    uint256 prevAmount = position.amount;\\n    /// @dev IA: Invalid amount. Cannot unstake zero, and cannot unstake more than staked balance.\\n    require(amount > 0 && amount <= prevAmount, \\\"IA\\\");\\n\\n    totalStakedSupply = totalStakedSupply.sub(\\n      toEffectiveAmount(amount, safeBaseTokenExchangeRate(position), safeEffectiveMultiplier(position))\\n    );\\n    position.amount = prevAmount.sub(amount);\\n\\n    // Slash unvested rewards. If this method is being called by the Zapper, then unvested rewards are not slashed.\\n    // This exception is made so that users who wish to move their funds across the protocol are not penalized for\\n    // doing so.\\n    // See https://gov.goldfinch.finance/t/gip-03-no-cost-forfeit-to-swap-fidu-into-backer-nfts/784\\n    if (!isZapper()) {\\n      uint256 slashingPercentage = amount.mul(StakingRewardsVesting.PERCENTAGE_DECIMALS).div(prevAmount);\\n      position.rewards.slash(slashingPercentage);\\n    }\\n\\n    emit Unstaked(msg.sender, tokenId, amount, position.positionType);\\n  }\\n\\n  //==============================================================\\n  // END: UNSTAKING FUNCTIONS\\n  //==============================================================\\n\\n  /// @notice \\\"Kick\\\" a user's reward multiplier. If they are past their lock-up period, their reward\\n  ///   multiplier will be reset to 1x.\\n  /// @dev This will also checkpoint their rewards up to the current time.\\n  // solhint-disable-next-line no-empty-blocks\\n  function kick(uint256 tokenId) external nonReentrant whenNotPaused updateReward(tokenId) {}\\n\\n  /// @notice Updates a user's effective multiplier to the prevailing multiplier. This function gives\\n  ///   users an option to get on a higher multiplier without needing to unstake and lose their unvested tokens.\\n  /// @dev This will also checkpoint their rewards up to the current time.\\n  function updatePositionEffectiveMultiplier(uint256 tokenId)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    updateReward(tokenId)\\n  {\\n    /// @dev AD: Access denied\\n    require(ownerOf(tokenId) == msg.sender, \\\"AD\\\");\\n\\n    StakedPosition storage position = positions[tokenId];\\n\\n    uint256 newEffectiveMultiplier = getEffectiveMultiplierForPositionType(position.positionType);\\n\\n    /// We want to honor the original multiplier for the user's sake, so we don't want to\\n    /// allow the effective multiplier for a given position to decrease.\\n    /// @dev LOW: Cannot update position to a lower effective multiplier\\n    require(newEffectiveMultiplier >= safeEffectiveMultiplier(position), \\\"LOW\\\");\\n\\n    uint256 prevEffectiveAmount = _positionToEffectiveAmount(position);\\n\\n    position.unsafeEffectiveMultiplier = newEffectiveMultiplier;\\n\\n    uint256 newEffectiveAmount = _positionToEffectiveAmount(position);\\n\\n    totalStakedSupply = totalStakedSupply.sub(prevEffectiveAmount).add(newEffectiveAmount);\\n  }\\n\\n  /// @notice Claim rewards for a given staked position\\n  /// @param tokenId A staking position token ID\\n  function getReward(uint256 tokenId) public nonReentrant whenNotPaused updateReward(tokenId) {\\n    /// @dev AD: Access denied\\n    require(ownerOf(tokenId) == msg.sender, \\\"AD\\\");\\n    uint256 reward = claimableRewards(tokenId);\\n    if (reward > 0) {\\n      positions[tokenId].rewards.claim(reward);\\n      rewardsToken().safeTransfer(msg.sender, reward);\\n      emit RewardPaid(msg.sender, tokenId, reward);\\n    }\\n  }\\n\\n  /// @notice Add to an existing position without affecting vesting schedule\\n  /// @dev This function checkpoints rewards and is only callable by an approved address with ZAPPER_ROLE. This\\n  ///   function enables the Zapper to unwind \\\"in-progress\\\" positions initiated by `Zapper.zapStakeToTranchedPool`.\\n  ///   That is, funds that were moved from this contract into a TranchedPool can be \\\"unwound\\\" back to their original\\n  ///   staked position by the Zapper as part of `Zapper.unzapToStakingRewards`.\\n  /// @param tokenId A staking position token ID\\n  /// @param amount Amount of `stakingToken()` to be added to tokenId's position\\n  function addToStake(uint256 tokenId, uint256 amount) external nonReentrant whenNotPaused updateReward(tokenId) {\\n    /// @dev AD: Access denied\\n    require(isZapper() && _isApprovedOrOwner(msg.sender, tokenId), \\\"AD\\\");\\n    /// @dev PT: Position type is incorrect for this action\\n    require(positions[tokenId].positionType == StakedPositionType.Fidu, \\\"PT\\\");\\n\\n    StakedPosition storage position = positions[tokenId];\\n    position.amount = position.amount.add(amount);\\n\\n    totalStakedSupply = totalStakedSupply.add(\\n      toEffectiveAmount(amount, safeBaseTokenExchangeRate(position), safeEffectiveMultiplier(position))\\n    );\\n\\n    stakingToken(position.positionType).safeTransferFrom(msg.sender, address(this), amount);\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  /// @notice Transfer rewards from msg.sender, to be used for reward distribution\\n  function loadRewards(uint256 rewards) external onlyAdmin updateReward(0) {\\n    rewardsToken().safeTransferFrom(msg.sender, address(this), rewards);\\n    rewardsAvailable = rewardsAvailable.add(rewards);\\n    emit RewardAdded(rewards);\\n  }\\n\\n  function setRewardsParameters(\\n    uint256 _targetCapacity,\\n    uint256 _minRate,\\n    uint256 _maxRate,\\n    uint256 _minRateAtPercent,\\n    uint256 _maxRateAtPercent\\n  ) external onlyAdmin updateReward(0) {\\n    /// @dev IP: Invalid parameters. maxRate must be >= then minRate. maxRateAtPercent must be <= minRateAtPercent.\\n    require(_maxRate >= _minRate && _maxRateAtPercent <= _minRateAtPercent, \\\"IP\\\");\\n\\n    targetCapacity = _targetCapacity;\\n    minRate = _minRate;\\n    maxRate = _maxRate;\\n    minRateAtPercent = _minRateAtPercent;\\n    maxRateAtPercent = _maxRateAtPercent;\\n\\n    emit RewardsParametersUpdated(msg.sender, targetCapacity, minRate, maxRate, minRateAtPercent, maxRateAtPercent);\\n  }\\n\\n  /// @notice Set the effective multiplier for a given staked position type. The effective multipler\\n  ///  is used to denominate a staked position to `baseStakingToken()`. The multiplier is represented in\\n  ///  `MULTIPLIER_DECIMALS`\\n  /// @param multiplier the new multiplier, denominated in `MULTIPLIER_DECIMALS`\\n  /// @param positionType the type of the position\\n  function setEffectiveMultiplier(uint256 multiplier, StakedPositionType positionType)\\n    external\\n    onlyAdmin\\n    updateReward(0)\\n  {\\n    // @dev ZERO: Multiplier cannot be zero\\n    require(multiplier > 0, \\\"ZERO\\\");\\n\\n    effectiveMultipliers[positionType] = multiplier;\\n    emit EffectiveMultiplierUpdated(_msgSender(), positionType, multiplier);\\n  }\\n\\n  function setVestingSchedule(uint256 _vestingLength) external onlyAdmin updateReward(0) {\\n    vestingLength = _vestingLength;\\n    emit VestingScheduleUpdated(msg.sender, vestingLength);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier updateReward(uint256 tokenId) {\\n    _updateReward(tokenId);\\n    _;\\n  }\\n\\n  function _updateReward(uint256 tokenId) internal {\\n    uint256 prevAccumulatedRewardsPerToken = accumulatedRewardsPerToken;\\n\\n    accumulatedRewardsPerToken = rewardPerToken();\\n    uint256 rewardsJustDistributed = totalStakedSupply\\n      .mul(accumulatedRewardsPerToken.sub(prevAccumulatedRewardsPerToken))\\n      .div(stakingAndRewardsTokenMantissa());\\n    rewardsAvailable = rewardsAvailable.sub(rewardsJustDistributed);\\n    lastUpdateTime = block.timestamp;\\n\\n    if (tokenId != 0) {\\n      uint256 additionalRewards = earnedSinceLastCheckpoint(tokenId);\\n\\n      StakingRewardsVesting.Rewards storage rewards = positions[tokenId].rewards;\\n      rewards.totalUnvested = rewards.totalUnvested.add(additionalRewards);\\n      rewards.checkpoint();\\n\\n      positionToAccumulatedRewardsPerToken[tokenId] = accumulatedRewardsPerToken;\\n    }\\n  }\\n\\n  function isAdmin() internal view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    /// @dev AD: Must have admin role to perform this action\\n    require(isAdmin(), \\\"AD\\\");\\n    _;\\n  }\\n\\n  function isZapper() internal view returns (bool) {\\n    return hasRole(ZAPPER_ROLE, _msgSender());\\n  }\\n\\n  function isGoListed() internal view returns (bool) {\\n    return config.getGo().goSeniorPool(msg.sender);\\n  }\\n\\n  function canWithdraw(uint256 tokenId) internal view returns (bool) {\\n    return positions[tokenId].positionType == StakedPositionType.Fidu;\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  event RewardAdded(uint256 reward);\\n  event Staked(\\n    address indexed user,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    StakedPositionType positionType,\\n    uint256 baseTokenExchangeRate\\n  );\\n  event DepositedAndStaked(address indexed user, uint256 depositedAmount, uint256 indexed tokenId, uint256 amount);\\n  event DepositedToCurve(address indexed user, uint256 fiduAmount, uint256 usdcAmount, uint256 tokensReceived);\\n  event DepositedToCurveAndStaked(\\n    address indexed user,\\n    uint256 fiduAmount,\\n    uint256 usdcAmount,\\n    uint256 indexed tokenId,\\n    uint256 amount\\n  );\\n  event Unstaked(address indexed user, uint256 indexed tokenId, uint256 amount, StakedPositionType positionType);\\n  event UnstakedMultiple(address indexed user, uint256[] tokenIds, uint256[] amounts);\\n  event UnstakedAndWithdrew(address indexed user, uint256 usdcReceivedAmount, uint256 indexed tokenId, uint256 amount);\\n  event UnstakedAndWithdrewMultiple(\\n    address indexed user,\\n    uint256 usdcReceivedAmount,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n  event RewardPaid(address indexed user, uint256 indexed tokenId, uint256 reward);\\n  event GoldfinchConfigUpdated(address indexed who, address configAddress);\\n}\\n\",\"keccak256\":\"0x08252c5de9748c1795669b65e734452eaa7f4088b5a86cdda91bf253a6dd22b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615fe080620000216000396000f3fe608060405234801561001057600080fd5b50600436106104655760003560e01c806379502c5511610257578063b3a99b4c11610146578063d047e42d116100c3578063e7a7250a11610087578063e7a7250a14610932578063e985e9c51461093a578063ece1d6e51461094d578063f62849be14610955578063fb285ed01461096857610465565b8063d047e42d146108f4578063d539139314610907578063d547741f1461090f578063e58378bb14610922578063e63ab1e91461092a57610465565b8063c87b56dd1161010a578063c87b56dd146108ab578063c8f33c91146108be578063ca15c873146108c6578063cd3daf9d146108d9578063ce0cf1a5146108e157610465565b8063b3a99b4c1461086d578063b6f8fd4014610875578063b88d4fde14610888578063b88dffe01461089b578063bcdc3cfc146108a357610465565b806399fbab88116101d4578063a22cb46511610198578063a22cb46514610819578063a52ab1f11461082c578063a9f4939d1461083f578063aa04295f14610852578063b217f9d41461086557610465565b806399fbab88146107b25780639d29e48d146107d85780639e2c8a5b146107eb5780639f60421f146107fe578063a217fddf1461081157610465565b8063906ae4c31161021b578063906ae4c31461076957806391d148541461077c57806395d89b411461078f5780639835fc7e1461079757806398bcede9146107aa57610465565b806379502c55146107205780638456cb591461072857806387647d4b146107305780638ea26983146107435780639010d07c1461075657610465565b806330987dd81161037357806359fe8539116102f057806369d00e79116102b457806369d00e79146106cc5780636c0360eb146106df5780636c3f3be6146106e757806370a08231146106fa57806375ff490b1461070d57610465565b806359fe8539146106835780635c975abb146106965780636352211e1461069e57806364fa33f0146106b15780636702abe2146106b957610465565b806342842e0e1161033757806342842e0e1461063a57806344f414251461064d5780634a6b629d146106605780634d4e3e0c146106685780634f6ccce71461067057610465565b806330987dd8146105f1578063333ee7921461060457806336568abe14610617578063389621861461062a5780633f4ba83a1461063257610465565b806313ad357411610401578063248a9ca3116103c5578063248a9ca314610592578063252e61c3146105a557806327a3492e146105b85780632f2ff15d146105cb5780632f745c59146105de57610465565b806313ad35741461053e57806318160ddd146105515780631c4b774b1461055957806323234a9c1461056c57806323b872dd1461057f57610465565b806301ffc9a71461046a57806306fdde0314610493578063081812fc146104a8578063095ea7b3146104c85780630cb60443146104dd57806310087fb1146104f2578063106809191461050557806310aec8f914610518578063135e80591461052b575b600080fd5b61047d610478366004614f0e565b610970565b60405161048a91906152f2565b60405180910390f35b61049b610993565b60405161048a9190615322565b6104bb6104b6366004614eb1565b610a2a565b60405161048a91906151a1565b6104db6104d6366004614dcd565b610a76565b005b6104e5610b0e565b60405161048a91906152fd565b6104e5610500366004614f7d565b610b15565b6104e5610513366004614eb1565b610b97565b6104db610526366004614eed565b610baa565b6104e5610539366004614fa4565b610c6d565b6104e561054c366004614eb1565b610c86565b6104e5610ca9565b6104db610567366004614eb1565b610cba565b6104e561057a366004614f46565b610de7565b6104db61058d366004614c86565b610fa3565b6104e56105a0366004614eb1565b610fdb565b6104e56105b336600461500f565b610ff0565b6104db6105c6366004614eed565b611085565b6104db6105d9366004614ec9565b61113e565b6104e56105ec366004614dcd565b611186565b6104db6105ff366004614eed565b6111af565b6104db610612366004614e2c565b6111ba565b6104db610625366004614ec9565b6112f7565b6104e5611339565b6104db611340565b6104db610648366004614c86565b611380565b6104db61065b366004614e2c565b61139b565b6104e561152f565b6104e5611536565b6104e561067e366004614eb1565b611548565b6104e5610691366004614eb1565b61155e565b61047d611731565b6104bb6106ac366004614eb1565b61173a565b6104e5611762565b6104db6106c7366004614fd5565b611769565b6104db6106da366004614df8565b61182c565b61049b611905565b6104e56106f5366004614eb1565b611966565b6104e5610708366004614c16565b61199d565b6104e561071b366004614f46565b6119e6565b6104bb611a4c565b6104db611a5c565b6104e561073e366004614eb1565b611a9a565b6104e5610751366004614c16565b611ae5565b6104bb610764366004614eed565b611b2d565b6104db610777366004614f7d565b611b45565b61047d61078a366004614ec9565b611c11565b61049b611c29565b6104e56107a5366004614eb1565b611c8a565b6104e5611ca5565b6107c56107c0366004614eb1565b611cac565b60405161048a9796959493929190615de4565b6104db6107e6366004614eb1565b611d2e565b6104db6107f9366004614eed565b611da1565b6104db61080c366004614e2c565b611e3e565b6104e5612003565b6104db610827366004614d8e565b612008565b6104db61083a366004614eb1565b6120d6565b6104db61084d366004614eed565b612203565b6104e5610860366004614eb1565b61235a565b6104e561236d565b6104e5612374565b6104db610883366004614dbb565b61237b565b6104db610896366004614cc6565b612523565b6104e5612562565b6104e56125aa565b61049b6108b9366004614eb1565b6125b1565b6104e56126fb565b6104e56108d4366004614eb1565b612702565b6104e5612719565b6104db6108ef366004614eb1565b612731565b6104db610902366004614eed565b61278c565b6104e5612830565b6104db61091d366004614ec9565b612854565b6104e561288e565b6104e56128a0565b6104e56128b2565b61047d610948366004614c4e565b6128b9565b6104e56128e7565b6104db610963366004614eb1565b6128ee565b6104db612979565b6001600160e01b0319811660009081526097602052604090205460ff165b919050565b60ce8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a1f5780601f106109f457610100808354040283529160200191610a1f565b820191906000526020600020905b815481529060010190602001808311610a0257829003601f168201915b505050505090505b90565b6000610a35826129c3565b610a5a5760405162461bcd60e51b8152600401610a5190615977565b60405180910390fd5b50600090815260cc60205260409020546001600160a01b031690565b6000610a818261173a565b9050806001600160a01b0316836001600160a01b03161415610ab55760405162461bcd60e51b8152600401610a5190615ae2565b806001600160a01b0316610ac76129d0565b6001600160a01b03161480610ae35750610ae3816109486129d0565b610aff5760405162461bcd60e51b8152600401610a51906157e4565b610b0983836129d4565b505050565b6101c95481565b6101915460009060ff16610b3b5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615610b695760405162461bcd60e51b8152600401610a51906157ba565b6000610b7481612a42565b610b8033338686612aee565b915050610191805460ff1916600117905592915050565b6101c76020526000908152604090205481565b6101915460ff16610bcd5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615610bfb5760405162461bcd60e51b8152600401610a51906157ba565b610c0482612a42565b600080610c118484612d09565b9150915083336001600160a01b03167fc3c6b9e734c21d6e8632c6a862b6de6458faa89079cbc34cc0560ed0ab78a5c68484604051610c51929190615e5b565b60405180910390a35050610191805460ff191660011790555050565b6000610c7b85858585612f40565b90505b949350505050565b6000610ca3610c9483611c8a565b610c9d84611a9a565b90612f7a565b92915050565b6000610cb560ca612f9f565b905090565b6101915460ff16610cdd5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615610d0b5760405162461bcd60e51b8152600401610a51906157ba565b80610d1581612a42565b33610d1f8361173a565b6001600160a01b031614610d455760405162461bcd60e51b8152600401610a51906154ad565b6000610d5083611c8a565b90508015610dd45760008381526101d160205260409020610d749060010182612faa565b610d913382610d81612fc5565b6001600160a01b03169190612fde565b82336001600160a01b03167fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f5183604051610dcb91906152fd565b60405180910390a35b5050610191805460ff1916600117905550565b60006001826001811115610df757fe5b1415610f94576101c354600090610e16906001600160a01b0316613034565b6001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4e57600080fd5b505afa158015610e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e869190614f65565b9050610e9b670de0b6b3a7640000600261303f565b8111610eb95760405162461bcd60e51b8152600401610a51906158c8565b610ecc670de0b6b3a76400006002613081565b8110610eea5760405162461bcd60e51b8152600401610a5190615638565b6101c354610f8c90610f04906001600160a01b03166130bb565b6001600160a01b031663872697296040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3c57600080fd5b505afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190614f65565b610f8683670de0b6b3a7640000613081565b9061303f565b91505061098e565b50670de0b6b3a7640000919050565b610fb4610fae6129d0565b826130c6565b610fd05760405162461bcd60e51b8152600401610a5190615b3f565b610b09838383613143565b60009081526065602052604090206002015490565b6101c354600090611009906001600160a01b0316613251565b6001600160a01b031663d505accf333089898989896040518863ffffffff1660e01b815260040161104097969594939291906151e8565b600060405180830381600087803b15801561105a57600080fd5b505af115801561106e573d6000803e3d6000fd5b5050505061107b8661155e565b9695505050505050565b6101915460ff166110a85760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156110d65760405162461bcd60e51b8152600401610a51906157ba565b60006110e4333385856132d1565b9050336001600160a01b03167f2468986f19ca698c7a17082adcaf9889ae41bbd887038b6c7b0598015dfae75384848460405161112393929190615e69565b60405180910390a25050610191805460ff1916600117905550565b60008281526065602052604090206002015461115c9061078a6129d0565b6111785760405162461bcd60e51b8152600401610a51906153de565b61118282826134ef565b5050565b6001600160a01b038216600090815260c9602052604081206111a89083613558565b9392505050565b61118233838361182c565b6101915460ff166111dd5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff161561120b5760405162461bcd60e51b8152600401610a51906157ba565b82811461122a5760405162461bcd60e51b8152600401610a5190615ac5565b6000805b828110156112985761125186868381811061124557fe5b90506020020135612a42565b600061128187878481811061126257fe5b9050602002013586868581811061127557fe5b90506020020135613564565b905061128d8382612f7a565b92505060010161122e565b50336001600160a01b03167f50748d84e7c6a6cc3641eb166ac6557b87d0e389ccd714d544d961b533a9c94682878787876040516112da959493929190615d11565b60405180910390a25050610191805460ff19166001179055505050565b6112ff6129d0565b6001600160a01b0316816001600160a01b03161461132f5760405162461bcd60e51b8152600401610a5190615cc2565b6111828282613648565b6101c55481565b61135a600080516020615f8b83398151915261078a6129d0565b6113765760405162461bcd60e51b8152600401610a5190615c2d565b61137e6136b1565b565b610b0983838360405180602001604052806000815250612523565b6101915460ff166113be5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156113ec5760405162461bcd60e51b8152600401610a51906157ba565b82811461140b5760405162461bcd60e51b8152600401610a5190615ac5565b600060608267ffffffffffffffff8111801561142657600080fd5b50604051908082528060200260200182016040528015611450578160200160208202803683370190505b50905060005b838110156114d15761146d87878381811061124557fe5b60008061149e89898581811061147f57fe5b9050602002013588888681811061149257fe5b90506020020135612d09565b90925090506114ad8583612f7a565b9450808484815181106114bc57fe5b60209081029190910101525050600101611456565b50336001600160a01b03167f50748d84e7c6a6cc3641eb166ac6557b87d0e389ccd714d544d961b533a9c946838888856040516115119493929190615d4a565b60405180910390a25050610191805460ff1916600117905550505050565b6101c85481565b600080516020615f4283398151915281565b60008061155660ca8461371d565b509392505050565b6101915460009060ff166115845760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156115b25760405162461bcd60e51b8152600401610a51906157ba565b60006115bd81612a42565b6115c5613739565b6115e15760405162461bcd60e51b8152600401610a51906153c2565b6101c3546000906115fa906001600160a01b03166137cd565b90506116116001600160a01b0382163330876137d8565b6101c35460009061162a906001600160a01b03166130bb565b90506116406001600160a01b03831682876137f9565b60405163b6b55f2560e01b81526000906001600160a01b0383169063b6b55f259061166f9089906004016152fd565b602060405180830381600087803b15801561168957600080fd5b505af115801561169d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c19190614f65565b905060006116d23033846000612aee565b905080336001600160a01b03167fce343194de25678e58b53205d289681a131cc2b917e7c36c8dc0d1693fd8f7ef8985604051611710929190615e5b565b60405180910390a3945050505050610191805460ff19166001179055919050565b60fb5460ff1690565b6000610ca382604051806060016040528060298152602001615f626029913960ca919061389e565b6101cc5481565b6117716138ab565b61178d5760405162461bcd60e51b8152600401610a51906154ad565b600061179881612a42565b8484101580156117a85750828211155b6117c45760405162461bcd60e51b8152600401610a5190615bda565b6101c88690556101c98590556101ca8490556101cc8390556101cb82905560405133907f8fc8630a9026e4d101945e5580ff250722a3dbc1222dac05b63a0e4a97688a659061181c9089908990899089908990615e7f565b60405180910390a2505050505050565b6101915460ff1661184f5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff161561187d5760405162461bcd60e51b8152600401610a51906157ba565b600061188881612a42565b6000611896333086866132d1565b905060006118a73087846001612aee565b905080336001600160a01b03167f70e3723ca1d6f2fd53a53844eb91671bc39574743c075044ac7ff5c2e5f489638787866040516118e793929190615e69565b60405180910390a35050610191805460ff1916600117905550505050565b60d18054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a1f5780601f106109f457610100808354040283529160200191610a1f565b6000610ca36119736138c7565b60008481526101d160205260409020610f869061198f9061394c565b611997612562565b90613081565b60006001600160a01b0382166119c55760405162461bcd60e51b8152600401610a519061583c565b6001600160a01b038216600090815260c960205260409020610ca390612f9f565b6000806101d260008460018111156119fa57fe5b6001811115611a0557fe5b8152602001908152602001600020541115610f94576101d26000836001811115611a2b57fe5b6001811115611a3657fe5b815260200190815260200160002054905061098e565b6101c3546001600160a01b031681565b611a76600080516020615f8b83398151915261078a6129d0565b611a925760405162461bcd60e51b8152600401610a51906155db565b61137e61395f565b6000610ca3611aa76138c7565b60008481526101c76020526040902054610f8690611acd90611ac7612719565b906139b8565b60008681526101d1602052604090206119979061394c565b600080805b611af38461199d565b811015611b26576000611b068583611186565b9050611b1b611b1482610c86565b8490612f7a565b925050600101611aea565b5092915050565b60008281526065602052604081206111a89083613558565b611b4d6138ab565b611b695760405162461bcd60e51b8152600401610a51906154ad565b6000611b7481612a42565b60008311611b945760405162461bcd60e51b8152600401610a5190615537565b826101d26000846001811115611ba657fe5b6001811115611bb157fe5b8152602081019190915260400160002055611bca6129d0565b6001600160a01b03167f9db0606b275ca1f1e99d2544ed31141049687b5f4080f2c87812881580a1b7ee8385604051611c04929190615306565b60405180910390a2505050565b60008281526065602052604081206111a890836139fa565b60cf8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a1f5780601f106109f457610100808354040283529160200191610a1f565b60008181526101d160205260408120610ca390600101613a0f565b61015f5481565b6101d1602090815260009182526040918290208054835160c081018552600183015481526002830154938101939093526003820154938301939093526004810154606083015260058101546080830152600681015460a0830152600781015460088201546009830154600a840154600b909401549293919260ff909116919087565b611d366138ab565b611d525760405162461bcd60e51b8152600401610a51906154ad565b6000611d5d81612a42565b6101cd82905560405133907f8c84e3b4df93f5b7c8d4ab6647708f5b14cacc124e22908187e30695ec54bab390611d959085906152fd565b60405180910390a25050565b6101915460ff16611dc45760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615611df25760405162461bcd60e51b8152600401610a51906157ba565b611dfb82612a42565b611e058282613a34565b60008281526101d16020526040902060090154611e2c9033908390610d819060ff16613b49565b5050610191805460ff19166001179055565b6101915460ff16611e615760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615611e8f5760405162461bcd60e51b8152600401610a51906157ba565b828114611eae5760405162461bcd60e51b8152600401610a5190615ac5565b60008060005b83811015611f9957611ecb87878381811061124557fe5b611ef9878783818110611eda57fe5b90506020020135868684818110611eed57fe5b90506020020135613a34565b60016101d16000898985818110611f0c57fe5b602090810292909201358352508101919091526040016000206009015460ff166001811115611f3757fe5b1415611f6957611f62858583818110611f4c57fe5b9050602002013583612f7a90919063ffffffff16565b9150611f91565b611f8e858583818110611f7857fe5b9050602002013584612f7a90919063ffffffff16565b92505b600101611eb4565b508115611faf57611faf3383610d816000613b49565b8015611fc457611fc43382610d816001613b49565b336001600160a01b03167ff00809a6eb66c05c314468512a79b6388957b41bc76bd7241b9cbabb129ae0088787878760405161151194939291906152c0565b600081565b6120106129d0565b6001600160a01b0316826001600160a01b031614156120415760405162461bcd60e51b8152600401610a519061569a565b8060cd600061204e6129d0565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556120926129d0565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120ca91906152f2565b60405180910390a35050565b6101915460ff166120f95760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156121275760405162461bcd60e51b8152600401610a51906157ba565b8061213181612a42565b3361213b8361173a565b6001600160a01b0316146121615760405162461bcd60e51b8152600401610a51906154ad565b60008281526101d16020526040812060098101549091906121849060ff166119e6565b905061218f82613c02565b8110156121ae5760405162461bcd60e51b8152600401610a51906158c8565b60006121b98361394c565b600a8401839055905060006121cd8461394c565b90506121e981610c9d846101ce546139b890919063ffffffff16565b6101ce555050610191805460ff1916600117905550505050565b6101915460ff166122265760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156122545760405162461bcd60e51b8152600401610a51906157ba565b8161225e81612a42565b612266613c1a565b8015612277575061227733846130c6565b6122935760405162461bcd60e51b8152600401610a51906154ad565b60008381526101d1602052604081206009015460ff1660018111156122b457fe5b146122d15760405162461bcd60e51b8152600401610a51906156cd565b60008381526101d16020526040902080546122ec9084612f7a565b815561231661230c846122fe84613c36565b61230785613c02565b613c4e565b6101ce5490612f7a565b6101ce556009810154612346903390309086906123359060ff16613b49565b6001600160a01b03169291906137d8565b5050610191805460ff191660011790555050565b60009081526101d1602052604090205490565b6101cd5481565b6101cb5481565b600054610100900460ff16806123945750612394613c6c565b806123a2575060005460ff16155b6123be5760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff161580156123e9576000805460ff1961ff0019909116610100171660011790555b6123f1613c72565b6123f9613cf5565b61245a6040518060400160405280601e81526020017f476f6c6466696e6368205632204c50205374616b696e6720546f6b656e7300008152506040518060400160405280600a8152602001694746492d56322d4c505360b01b815250613d73565b612462613c72565b61246a613c72565b612472613e4f565b61247a613edb565b612492600080516020615f2283398151915284611178565b6124aa600080516020615f8b83398151915284611178565b6124d0600080516020615f8b833981519152600080516020615f22833981519152613f6b565b6124e8600080516020615f2283398151915280613f6b565b6101c380546001600160a01b0319166001600160a01b0384161790556301e133806101cd558015610b09576000805461ff0019169055505050565b61253461252e6129d0565b836130c6565b6125505760405162461bcd60e51b8152600401610a5190615b3f565b61255c84848484613f80565b50505050565b6000806101c4544214612575574261257a565b426001015b905060006125946101c454836139b890919063ffffffff16565b90506125a381610f8684613fb3565b9250505090565b6101ce5481565b60606125bc826129c3565b6125d85760405162461bcd60e51b8152600401610a5190615a76565b600082815260d0602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084526060939283018282801561266d5780601f106126425761010080835404028352916020019161266d565b820191906000526020600020905b81548152906001019060200180831161265057829003601f168201915b505060d1549394505050506002600019610100600184161502019091160461269657905061098e565b8051156126c85760d1816040516020016126b1929190615120565b60405160208183030381529060405291505061098e565b60d16126d384614042565b6040516020016126e4929190615120565b604051602081830303815290604052915050919050565b6101c45481565b6000818152606560205260408120610ca390612f9f565b6000610cb561272742613fb3565b6101c55490612f7a565b6101915460ff166127545760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156127825760405162461bcd60e51b8152600401610a51906157ba565b80611e2c81612a42565b6101915460ff166127af5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156127dd5760405162461bcd60e51b8152600401610a51906157ba565b6127e682612a42565b60006127f28383613564565b905082336001600160a01b03167fc3c6b9e734c21d6e8632c6a862b6de6458faa89079cbc34cc0560ed0ab78a5c68385604051610dcb929190615e5b565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6000828152606560205260409020600201546128729061078a6129d0565b61132f5760405162461bcd60e51b8152600401610a519061576a565b600080516020615f2283398151915281565b600080516020615f8b83398151915281565b6101c65481565b6001600160a01b03918216600090815260cd6020908152604080832093909416825291909152205460ff1690565b6101ca5481565b6128f66138ab565b6129125760405162461bcd60e51b8152600401610a51906154ad565b600061291d81612a42565b61292b333084612335612fc5565b6101c6546129399083612f7a565b6101c6556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9061296d9084906152fd565b60405180910390a15050565b6129816138ab565b61299d5760405162461bcd60e51b8152600401610a51906154ad565b61137e600080516020615f42833981519152600080516020615f22833981519152613f6b565b6000610ca360ca8361411d565b3390565b600081815260cc6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a098261173a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6101c554612a4e612719565b6101c5556000612a7b612a5f6138c7565b6101c554610f8690612a7190866139b8565b6101ce5490613081565b6101c654909150612a8c90826139b8565b6101c655426101c4558215610b09576000612aa684611a9a565b60008581526101d160205260409020600101805491925090612ac89083612f7a565b8155612ad381614129565b50506101c55460008481526101c76020526040902055505050565b6000808311612b0f5760405162461bcd60e51b8152600401610a5190615537565b612b1a61015f614188565b612b2561015f614191565b9050612b3081612a42565b6000612b3b83610de7565b90506000612b48846119e6565b90506040518060e001604052808681526020016040518060c0016040528060008152602001600081526020016000815260200160008152602001428152602001612b9e6101cd5442612f7a90919063ffffffff16565b81525081526020016000815260200160008152602001856001811115612bc057fe5b81526020808201849052604091820185905260008681526101d18252829020835181558382015180516001808401919091559281015160028301558084015160038301556060808201516004840155608080830151600585015560a0909201516006840155938501516007830155928401516008820155918301516009830180549192909160ff1916908381811115612c5557fe5b021790555060a0820151600a82015560c090910151600b90910155612c7a8684614195565b60008381526101d160205260409020612c969061230c9061394c565b6101ce556001600160a01b0387163014612cb957612cb987308761233588613b49565b82866001600160a01b03167fcc10169be2ad544347561e230939849af48d1714c052d7fe247d12f3decb4896878786604051612cf793929190615dc2565b60405180910390a35050949350505050565b600080612d1584614259565b612d315760405162461bcd60e51b8152600401610a519061591a565b612d39613739565b612d555760405162461bcd60e51b8152600401610a51906153c2565b6101c354600090612d6e906001600160a01b0316614284565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612d9e91906151a1565b60206040518083038186803b158015612db657600080fd5b505afa158015612dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dee9190614f65565b6101c354909150612e07906001600160a01b03166130bb565b6001600160a01b0316632e1a7d4d866040518263ffffffff1660e01b8152600401612e3291906152fd565b602060405180830381600087803b158015612e4c57600080fd5b505af1158015612e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e849190614f65565b9350612f0c826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612eb591906151a1565b60206040518083038186803b158015612ecd57600080fd5b505afa158015612ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f059190614f65565b82906139b8565b9250612f188684613a34565b6101c354612f369033908690610d81906001600160a01b03166137cd565b50505b9250929050565b6000848411612f50575080610c7e565b610c7b612f74612f6086886139b8565b610f86612f6d878a6139b8565b8690613081565b8361428f565b6000828201838110156111a85760405162461bcd60e51b8152600401610a5190615555565b6000610ca382614191565b6003820154612fb99082612f7a565b82600301819055505050565b6101c354600090610cb5906001600160a01b03166142a5565b610b098363a9059cbb60e01b8484604051602401612ffd929190615267565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526142b0565b6000610ca382614395565b60006111a883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506143ad565b60008261309057506000610ca3565b8282028284828161309d57fe5b04146111a85760405162461bcd60e51b8152600401610a5190615936565b6000610ca3826143e4565b60006130d1826129c3565b6130ed5760405162461bcd60e51b8152600401610a519061571e565b60006130f88361173a565b9050806001600160a01b0316846001600160a01b031614806131335750836001600160a01b031661312884610a2a565b6001600160a01b0316145b80610c7e5750610c7e81856128b9565b826001600160a01b03166131568261173a565b6001600160a01b03161461317c5760405162461bcd60e51b8152600401610a5190615a2d565b6001600160a01b0382166131a25760405162461bcd60e51b8152600401610a5190615656565b6131ad8383836143fc565b6131b86000826129d4565b6001600160a01b038316600090815260c9602052604090206131da9082614407565b506001600160a01b038216600090815260c9602052604090206131fd9082614413565b5061320a60ca828461441f565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006001600160a01b03821663b93f9b0a60055b6040518263ffffffff1660e01b815260040161328191906152fd565b60206040518083038186803b15801561329957600080fd5b505afa1580156132ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca39190614c32565b6000808311806132e15750600082115b6132fd5760405162461bcd60e51b8152600401610a5190615537565b6101c354600090613316906001600160a01b03166137cd565b6101c354909150600090613332906001600160a01b0316614284565b6101c35490915060009061334e906001600160a01b0316613034565b9050851561337f5761336b6001600160a01b0383168930896137d8565b61337f6001600160a01b03831682886137f9565b84156133ae5761339a6001600160a01b0384168930886137d8565b6133ae6001600160a01b03841682876137f9565b600061344a600a610f866009856001600160a01b0316638d8ea72760405180604001604052808e81526020018d8152506040518263ffffffff1660e01b81526004016133fa9190615280565b60206040518083038186803b15801561341257600080fd5b505afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119979190614f65565b604080518082018252898152602081018990529051637328333b60e01b81529192506001600160a01b03841691637328333b916134909185906000908e9060040161528e565b602060405180830381600087803b1580156134aa57600080fd5b505af11580156134be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e29190614f65565b9998505050505050505050565b60008281526065602052604090206135079082614435565b15611182576135146129d0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006111a8838361444a565b600061356f83614259565b61358b5760405162461bcd60e51b8152600401610a519061591a565b6101c3546135a1906001600160a01b03166130bb565b6001600160a01b03166358031d12836040518263ffffffff1660e01b81526004016135cc91906152fd565b602060405180830381600087803b1580156135e657600080fd5b505af11580156135fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361e9190614f65565b905061362a8383613a34565b6101c354610ca39033908390610d81906001600160a01b03166137cd565b6000828152606560205260409020613660908261448f565b156111825761366d6129d0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60fb5460ff166136d35760405162461bcd60e51b8152600401610a519061542d565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6137066129d0565b60405161371391906151a1565b60405180910390a1565b600080808061372c86866144a4565b9097909650945050505050565b6101c354600090613752906001600160a01b0316614500565b6001600160a01b031663a37b92c9336040518263ffffffff1660e01b815260040161377d91906151a1565b60206040518083038186803b15801561379557600080fd5b505afa1580156137a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190614e95565b6000610ca382613251565b61255c846323b872dd60e01b858585604051602401612ffd93929190615243565b600061387d82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040161382d929190615229565b60206040518083038186803b15801561384557600080fd5b505afa158015613859573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d9190614f65565b905061255c8463095ea7b360e01b8584604051602401612ffd929190615267565b6000610c7e84848461450b565b6000610cb5600080516020615f2283398151915261078a6129d0565b60006138d161456a565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561390957600080fd5b505afa15801561391d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139419190615057565b60ff16600a0a905090565b6000610ca382600001546122fe84613c36565b60fb5460ff16156139825760405162461bcd60e51b8152600401610a51906157ba565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586137066129d0565b60006111a883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614583565b60006111a8836001600160a01b0384166145af565b6000610ca38260030154611ac784600201548560010154612f7a90919063ffffffff16565b613a3e33836130c6565b613a5a5760405162461bcd60e51b8152600401610a51906154ad565b60008281526101d16020526040902080548215801590613a7a5750808311155b613a965760405162461bcd60e51b8152600401610a51906159c3565b613ab9613aaf84613aa685613c36565b61230786613c02565b6101ce54906139b8565b6101ce55613ac781846139b8565b8255613ad1613c1a565b613afe576000613aed82610f8686670de0b6b3a7640000613081565b9050613afc60018401826145c7565b505b6009820154604051859133917f47efae27a70cca1d3ad8e753ab4b48a413e554d244be5c7928fdfee407c37f5d91613b3b91889160ff1690615da6565b60405180910390a350505050565b60006001826001811115613b5957fe5b1415613bec576101c354613b75906001600160a01b0316613034565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613bad57600080fd5b505afa158015613bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be59190614c32565b905061098e565b6101c354610ca3906001600160a01b0316614284565b600a81015460009015610f945750600a81015461098e565b6000610cb5600080516020615f4283398151915261078a6129d0565b600b81015460009015610f945750600b81015461098e565b6000610c7e670de0b6b3a7640000610f868181866119978a8a613081565b303b1590565b600054610100900460ff1680613c8b5750613c8b613c6c565b80613c99575060005460ff16155b613cb55760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613ce0576000805460ff1961ff0019909116610100171660011790555b8015613cf2576000805461ff00191690555b50565b600054610100900460ff1680613d0e5750613d0e613c6c565b80613d1c575060005460ff16155b613d385760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613d63576000805460ff1961ff0019909116610100171660011790555b613ce06301ffc9a760e01b614675565b600054610100900460ff1680613d8c5750613d8c613c6c565b80613d9a575060005460ff16155b613db65760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613de1576000805460ff1961ff0019909116610100171660011790555b8251613df49060ce906020860190614b41565b508151613e089060cf906020850190614b41565b50613e196380ac58cd60e01b614675565b613e29635b5e139f60e01b614675565b613e3963780e9d6360e01b614675565b8015610b09576000805461ff0019169055505050565b600054610100900460ff1680613e685750613e68613c6c565b80613e76575060005460ff16155b613e925760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613ebd576000805460ff1961ff0019909116610100171660011790555b60fb805460ff191690558015613cf2576000805461ff001916905550565b600054610100900460ff1680613ef45750613ef4613c6c565b80613f02575060005460ff16155b613f1e5760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613f49576000805460ff1961ff0019909116610100171660011790555b610191805460ff191660011790558015613cf2576000805461ff001916905550565b60009182526065602052604090912060020155565b613f8b848484613143565b613f97848484846146c4565b61255c5760405162461bcd60e51b8152600401610a519061545b565b60006101c454821015613fd85760405162461bcd60e51b8152600401610a5190615b23565b6101ce54613fe85750600061098e565b6000614010614007613ff86147fe565b6101c4546119979087906139b8565b6101c65461428f565b9050600061402d6101ce54610f866140266138c7565b8590613081565b9050818111156111a85760009250505061098e565b60608161406757506040805180820190915260018152600360fc1b602082015261098e565b8160005b811561407f57600101600a8204915061406b565b60608167ffffffffffffffff8111801561409857600080fd5b506040519080825280601f01601f1916602001820160405280156140c3576020820181803683370190505b50859350905060001982015b831561411457600a840660300160f81b828280600190039350815181106140f257fe5b60200101906001600160f81b031916908160001a905350600a840493506140cf565b50949350505050565b60006111a883836145af565b60006141478260040154836005015442614142866148d5565b612f40565b9050816001015481111561118257600061416e8360010154836139b890919063ffffffff16565b835490915061417d90826139b8565b835550600190910155565b80546001019055565b5490565b6001600160a01b0382166141bb5760405162461bcd60e51b8152600401610a51906158e5565b6141c4816129c3565b156141e15760405162461bcd60e51b8152600401610a5190615500565b6141ed600083836143fc565b6001600160a01b038216600090815260c96020526040902061420f9082614413565b5061421c60ca828461441f565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008060008381526101d1602052604090206009015460ff16600181111561427d57fe5b1492915050565b6000610ca3826148e9565b600081831061429e57816111a8565b5090919050565b6000610ca382614901565b6142c2826001600160a01b0316614919565b6142de5760405162461bcd60e51b8152600401610a5190615c8b565b60006060836001600160a01b0316836040516142fa9190615104565b6000604051808303816000865af19150503d8060008114614337576040519150601f19603f3d011682016040523d82523d6000602084013e61433c565b606091505b50915091508161435e5760405162461bcd60e51b8152600401610a51906156e9565b80511561255c57808060200190518101906143799190614e95565b61255c5760405162461bcd60e51b8152600401610a5190615b90565b60006001600160a01b03821663b93f9b0a6016613265565b600081836143ce5760405162461bcd60e51b8152600401610a519190615322565b5060008385816143da57fe5b0495945050505050565b60006001600160a01b03821663b93f9b0a600e613265565b610b09838383614952565b60006111a88383614982565b60006111a88383614a48565b6000610c7e84846001600160a01b038516614a92565b60006111a8836001600160a01b038416614a48565b8154600090821061446d5760405162461bcd60e51b8152600401610a5190615335565b82600001828154811061447c57fe5b9060005260206000200154905092915050565b60006111a8836001600160a01b038416614982565b8154600090819083106144c95760405162461bcd60e51b8152600401610a5190615886565b60008460000184815481106144da57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000610ca382614b29565b6000828152600184016020526040812054828161453b5760405162461bcd60e51b8152600401610a519190615322565b5084600001600182038154811061454e57fe5b9060005260206000209060020201600101549150509392505050565b6101c354600090610cb5906001600160a01b0316614284565b600081848411156145a75760405162461bcd60e51b8152600401610a519190615322565b505050900390565b60009081526001919091016020526040902054151590565b670de0b6b3a76400008111156145ef5760405162461bcd60e51b8152600401610a519061558c565b815460009061460c90670de0b6b3a764000090610f869085613081565b90506000614633670de0b6b3a7640000610f8685876001015461308190919063ffffffff16565b845490915061464290836139b8565b8455600184015461465390826139b8565b600185015560028401546146679082612f7a565b846002018190555050505050565b6001600160e01b0319808216141561469f5760405162461bcd60e51b8152600401610a51906154c9565b6001600160e01b0319166000908152609760205260409020805460ff19166001179055565b60006146d8846001600160a01b0316614919565b6146e457506001610c7e565b600060606001600160a01b038616630a85bd0160e11b6147026129d0565b89888860405160240161471894939291906151b5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516147569190615104565b6000604051808303816000865af19150503d8060008114614793576040519150601f19603f3d011682016040523d82523d6000602084013e614798565b606091505b5091509150816147ca578051156147b25780518082602001fd5b60405162461bcd60e51b8152600401610a519061545b565b6000818060200190518101906147e09190614f2a565b6001600160e01b031916630a85bd0160e11b149350610c7e92505050565b600080614826670de0b6b3a7640000610f866101cb546101c85461308190919063ffffffff16565b9050600061484f670de0b6b3a7640000610f866101cc546101c85461308190919063ffffffff16565b6101ce549091508282116148695760009350505050610a27565b8281101561487f576101ca549350505050610a27565b81811115614895576101c9549350505050610a27565b6148cd6148c36148a584866139b8565b610f866148b285886139b8565b6101c9546101ca54611997916139b8565b6101ca54906139b8565b935050505090565b60018101548154600091610ca39190612f7a565b60006001600160a01b03821663b93f9b0a6004613265565b60006001600160a01b03821663b93f9b0a6012613265565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610c7e575050151592915050565b61495d838383610b09565b614965611731565b15610b095760405162461bcd60e51b8152600401610a5190615377565b60008181526001830160205260408120548015614a3e57835460001980830191908101906000908790839081106149b557fe5b90600052602060002001549050808760000184815481106149d257fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080614a0257fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ca3565b6000915050610ca3565b6000614a5483836145af565b614a8a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca3565b506000610ca3565b600082815260018401602052604081205480614af75750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556111a8565b82856000016001830381548110614b0a57fe5b90600052602060002090600202016001018190555060009150506111a8565b60006001600160a01b03821663b93f9b0a6013613265565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614b8257805160ff1916838001178555614baf565b82800160010185558215614baf579182015b82811115614baf578251825591602001919060010190614b94565b50614bbb929150614bbf565b5090565b5b80821115614bbb5760008155600101614bc0565b60008083601f840112614be5578182fd5b50813567ffffffffffffffff811115614bfc578182fd5b6020830191508360208083028501011115612f3957600080fd5b600060208284031215614c27578081fd5b81356111a881615ed9565b600060208284031215614c43578081fd5b81516111a881615ed9565b60008060408385031215614c60578081fd5b8235614c6b81615ed9565b91506020830135614c7b81615ed9565b809150509250929050565b600080600060608486031215614c9a578081fd5b8335614ca581615ed9565b92506020840135614cb581615ed9565b929592945050506040919091013590565b60008060008060808587031215614cdb578081fd5b8435614ce681615ed9565b9350602085810135614cf781615ed9565b935060408601359250606086013567ffffffffffffffff80821115614d1a578384fd5b818801915088601f830112614d2d578384fd5b813581811115614d3b578485fd5b604051601f8201601f1916810185018381118282101715614d5a578687fd5b60405281815283820185018b1015614d70578586fd5b81858501868301379081019093019390935250939692955090935050565b60008060408385031215614da0578182fd5b8235614dab81615ed9565b91506020830135614c7b81615eee565b60008060408385031215614c60578182fd5b60008060408385031215614ddf578182fd5b8235614dea81615ed9565b946020939093013593505050565b600080600060608486031215614e0c578283fd5b8335614e1781615ed9565b95602085013595506040909401359392505050565b60008060008060408587031215614e41578384fd5b843567ffffffffffffffff80821115614e58578586fd5b614e6488838901614bd4565b90965094506020870135915080821115614e7c578384fd5b50614e8987828801614bd4565b95989497509550505050565b600060208284031215614ea6578081fd5b81516111a881615eee565b600060208284031215614ec2578081fd5b5035919050565b60008060408385031215614edb578182fd5b823591506020830135614c7b81615ed9565b60008060408385031215614eff578182fd5b50508035926020909101359150565b600060208284031215614f1f578081fd5b81356111a881615efc565b600060208284031215614f3b578081fd5b81516111a881615efc565b600060208284031215614f57578081fd5b8135600281106111a8578182fd5b600060208284031215614f76578081fd5b5051919050565b60008060408385031215614f8f578182fd5b82359150602083013560028110614c7b578182fd5b60008060008060808587031215614fb9578182fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215614fec578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600080600060a08688031215615026578283fd5b8535945060208601359350604086013561503f81615f12565b94979396509394606081013594506080013592915050565b600060208284031215615068578081fd5b81516111a881615f12565b8060005b600281101561255c578151845260209384019390910190600101615077565b81835260006001600160fb1b038311156150ae578081fd5b6020830280836020870137939093016020019283525090919050565b600081518084526150e2816020860160208601615ead565b601f01601f19169290920160200192915050565b6002811061510057fe5b9052565b60008251615116818460208701615ead565b9190910192915050565b600080845460018082166000811461513f576001811461515657615185565b60ff198316865260028304607f1686019350615185565b600283048886526020808720875b8381101561517d5781548a820152908501908201615164565b505050860193505b5050508351615198818360208801615ead565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061107b908301846150ca565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60408101610ca38284615073565b60a0810161529c8287615073565b604082019490945291151560608301526001600160a01b0316608090910152919050565b6000604082526152d4604083018688615096565b82810360208401526152e7818587615096565b979650505050505050565b901515815260200190565b90815260200190565b6040810161531384615ea2565b82528260208301529392505050565b6000602082526111a860208301846150ca565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526002908201526111d360f21b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260029082015261105160f21b604082015260600190565b6020808252601c908201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604082015260600190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600490820152635a45524f60e01b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602f908201527f736c617368696e672070657263656e746167652063616e6e6f7420626520677260408201526e6561746572207468616e203130302560881b606082015260800190565b6020808252603e908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d75737420686176652070617573657220726f6c6520746f2070617573650000606082015260800190565b602080825260049082015263090928e960e31b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604082015260600190565b602080825260029082015261141560f21b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776040820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600390820152624c4f5760e81b604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b602080825260029082015261435760f01b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b602080825260029082015261494160f01b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252600390820152622622a760e91b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b602080825260029082015261125560f21b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b602080825260029082015261049560f41b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602080825260409082018190527f4552433732315072657365744d696e7465725061757365724175746f49643a20908201527f6d75737420686176652070617573657220726f6c6520746f20756e7061757365606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b600086825260606020830152615d2b606083018688615096565b8281036040840152615d3e818587615096565b98975050505050505050565b60008582526020606081840152615d65606084018688615096565b8381036040850152845180825282860191830190845b81811015615d9757835183529284019291840191600101615d7b565b50909998505050505050505050565b82815260408101615db683615ea2565b60208301529392505050565b83815260608101615dd660208301856150f6565b826040830152949350505050565b60006101808201905088825287516020830152602088015160408301526040880151606083015260608801516080830152608088015160a083015260a088015160c08301528660e083015285610100830152615e446101208301866150f6565b610140820193909352610160015295945050505050565b918252602082015260400190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b806002811061098e57fe5b60005b83811015615ec8578181015183820152602001615eb0565b8381111561255c5750506000910152565b6001600160a01b0381168114613cf257600080fd5b8015158114613cf257600080fd5b6001600160e01b031981168114613cf257600080fd5b60ff81168114613cf257600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ed624b04b6a86de88625cc0780256b85157c5a615db56d1357e0a97a30fde27674552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212201130d0faacb68b13dad55d49c8fc2cf269b988a77175552f6dfe8b1613ceef7664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104655760003560e01c806379502c5511610257578063b3a99b4c11610146578063d047e42d116100c3578063e7a7250a11610087578063e7a7250a14610932578063e985e9c51461093a578063ece1d6e51461094d578063f62849be14610955578063fb285ed01461096857610465565b8063d047e42d146108f4578063d539139314610907578063d547741f1461090f578063e58378bb14610922578063e63ab1e91461092a57610465565b8063c87b56dd1161010a578063c87b56dd146108ab578063c8f33c91146108be578063ca15c873146108c6578063cd3daf9d146108d9578063ce0cf1a5146108e157610465565b8063b3a99b4c1461086d578063b6f8fd4014610875578063b88d4fde14610888578063b88dffe01461089b578063bcdc3cfc146108a357610465565b806399fbab88116101d4578063a22cb46511610198578063a22cb46514610819578063a52ab1f11461082c578063a9f4939d1461083f578063aa04295f14610852578063b217f9d41461086557610465565b806399fbab88146107b25780639d29e48d146107d85780639e2c8a5b146107eb5780639f60421f146107fe578063a217fddf1461081157610465565b8063906ae4c31161021b578063906ae4c31461076957806391d148541461077c57806395d89b411461078f5780639835fc7e1461079757806398bcede9146107aa57610465565b806379502c55146107205780638456cb591461072857806387647d4b146107305780638ea26983146107435780639010d07c1461075657610465565b806330987dd81161037357806359fe8539116102f057806369d00e79116102b457806369d00e79146106cc5780636c0360eb146106df5780636c3f3be6146106e757806370a08231146106fa57806375ff490b1461070d57610465565b806359fe8539146106835780635c975abb146106965780636352211e1461069e57806364fa33f0146106b15780636702abe2146106b957610465565b806342842e0e1161033757806342842e0e1461063a57806344f414251461064d5780634a6b629d146106605780634d4e3e0c146106685780634f6ccce71461067057610465565b806330987dd8146105f1578063333ee7921461060457806336568abe14610617578063389621861461062a5780633f4ba83a1461063257610465565b806313ad357411610401578063248a9ca3116103c5578063248a9ca314610592578063252e61c3146105a557806327a3492e146105b85780632f2ff15d146105cb5780632f745c59146105de57610465565b806313ad35741461053e57806318160ddd146105515780631c4b774b1461055957806323234a9c1461056c57806323b872dd1461057f57610465565b806301ffc9a71461046a57806306fdde0314610493578063081812fc146104a8578063095ea7b3146104c85780630cb60443146104dd57806310087fb1146104f2578063106809191461050557806310aec8f914610518578063135e80591461052b575b600080fd5b61047d610478366004614f0e565b610970565b60405161048a91906152f2565b60405180910390f35b61049b610993565b60405161048a9190615322565b6104bb6104b6366004614eb1565b610a2a565b60405161048a91906151a1565b6104db6104d6366004614dcd565b610a76565b005b6104e5610b0e565b60405161048a91906152fd565b6104e5610500366004614f7d565b610b15565b6104e5610513366004614eb1565b610b97565b6104db610526366004614eed565b610baa565b6104e5610539366004614fa4565b610c6d565b6104e561054c366004614eb1565b610c86565b6104e5610ca9565b6104db610567366004614eb1565b610cba565b6104e561057a366004614f46565b610de7565b6104db61058d366004614c86565b610fa3565b6104e56105a0366004614eb1565b610fdb565b6104e56105b336600461500f565b610ff0565b6104db6105c6366004614eed565b611085565b6104db6105d9366004614ec9565b61113e565b6104e56105ec366004614dcd565b611186565b6104db6105ff366004614eed565b6111af565b6104db610612366004614e2c565b6111ba565b6104db610625366004614ec9565b6112f7565b6104e5611339565b6104db611340565b6104db610648366004614c86565b611380565b6104db61065b366004614e2c565b61139b565b6104e561152f565b6104e5611536565b6104e561067e366004614eb1565b611548565b6104e5610691366004614eb1565b61155e565b61047d611731565b6104bb6106ac366004614eb1565b61173a565b6104e5611762565b6104db6106c7366004614fd5565b611769565b6104db6106da366004614df8565b61182c565b61049b611905565b6104e56106f5366004614eb1565b611966565b6104e5610708366004614c16565b61199d565b6104e561071b366004614f46565b6119e6565b6104bb611a4c565b6104db611a5c565b6104e561073e366004614eb1565b611a9a565b6104e5610751366004614c16565b611ae5565b6104bb610764366004614eed565b611b2d565b6104db610777366004614f7d565b611b45565b61047d61078a366004614ec9565b611c11565b61049b611c29565b6104e56107a5366004614eb1565b611c8a565b6104e5611ca5565b6107c56107c0366004614eb1565b611cac565b60405161048a9796959493929190615de4565b6104db6107e6366004614eb1565b611d2e565b6104db6107f9366004614eed565b611da1565b6104db61080c366004614e2c565b611e3e565b6104e5612003565b6104db610827366004614d8e565b612008565b6104db61083a366004614eb1565b6120d6565b6104db61084d366004614eed565b612203565b6104e5610860366004614eb1565b61235a565b6104e561236d565b6104e5612374565b6104db610883366004614dbb565b61237b565b6104db610896366004614cc6565b612523565b6104e5612562565b6104e56125aa565b61049b6108b9366004614eb1565b6125b1565b6104e56126fb565b6104e56108d4366004614eb1565b612702565b6104e5612719565b6104db6108ef366004614eb1565b612731565b6104db610902366004614eed565b61278c565b6104e5612830565b6104db61091d366004614ec9565b612854565b6104e561288e565b6104e56128a0565b6104e56128b2565b61047d610948366004614c4e565b6128b9565b6104e56128e7565b6104db610963366004614eb1565b6128ee565b6104db612979565b6001600160e01b0319811660009081526097602052604090205460ff165b919050565b60ce8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a1f5780601f106109f457610100808354040283529160200191610a1f565b820191906000526020600020905b815481529060010190602001808311610a0257829003601f168201915b505050505090505b90565b6000610a35826129c3565b610a5a5760405162461bcd60e51b8152600401610a5190615977565b60405180910390fd5b50600090815260cc60205260409020546001600160a01b031690565b6000610a818261173a565b9050806001600160a01b0316836001600160a01b03161415610ab55760405162461bcd60e51b8152600401610a5190615ae2565b806001600160a01b0316610ac76129d0565b6001600160a01b03161480610ae35750610ae3816109486129d0565b610aff5760405162461bcd60e51b8152600401610a51906157e4565b610b0983836129d4565b505050565b6101c95481565b6101915460009060ff16610b3b5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615610b695760405162461bcd60e51b8152600401610a51906157ba565b6000610b7481612a42565b610b8033338686612aee565b915050610191805460ff1916600117905592915050565b6101c76020526000908152604090205481565b6101915460ff16610bcd5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615610bfb5760405162461bcd60e51b8152600401610a51906157ba565b610c0482612a42565b600080610c118484612d09565b9150915083336001600160a01b03167fc3c6b9e734c21d6e8632c6a862b6de6458faa89079cbc34cc0560ed0ab78a5c68484604051610c51929190615e5b565b60405180910390a35050610191805460ff191660011790555050565b6000610c7b85858585612f40565b90505b949350505050565b6000610ca3610c9483611c8a565b610c9d84611a9a565b90612f7a565b92915050565b6000610cb560ca612f9f565b905090565b6101915460ff16610cdd5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615610d0b5760405162461bcd60e51b8152600401610a51906157ba565b80610d1581612a42565b33610d1f8361173a565b6001600160a01b031614610d455760405162461bcd60e51b8152600401610a51906154ad565b6000610d5083611c8a565b90508015610dd45760008381526101d160205260409020610d749060010182612faa565b610d913382610d81612fc5565b6001600160a01b03169190612fde565b82336001600160a01b03167fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f5183604051610dcb91906152fd565b60405180910390a35b5050610191805460ff1916600117905550565b60006001826001811115610df757fe5b1415610f94576101c354600090610e16906001600160a01b0316613034565b6001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4e57600080fd5b505afa158015610e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e869190614f65565b9050610e9b670de0b6b3a7640000600261303f565b8111610eb95760405162461bcd60e51b8152600401610a51906158c8565b610ecc670de0b6b3a76400006002613081565b8110610eea5760405162461bcd60e51b8152600401610a5190615638565b6101c354610f8c90610f04906001600160a01b03166130bb565b6001600160a01b031663872697296040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3c57600080fd5b505afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190614f65565b610f8683670de0b6b3a7640000613081565b9061303f565b91505061098e565b50670de0b6b3a7640000919050565b610fb4610fae6129d0565b826130c6565b610fd05760405162461bcd60e51b8152600401610a5190615b3f565b610b09838383613143565b60009081526065602052604090206002015490565b6101c354600090611009906001600160a01b0316613251565b6001600160a01b031663d505accf333089898989896040518863ffffffff1660e01b815260040161104097969594939291906151e8565b600060405180830381600087803b15801561105a57600080fd5b505af115801561106e573d6000803e3d6000fd5b5050505061107b8661155e565b9695505050505050565b6101915460ff166110a85760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156110d65760405162461bcd60e51b8152600401610a51906157ba565b60006110e4333385856132d1565b9050336001600160a01b03167f2468986f19ca698c7a17082adcaf9889ae41bbd887038b6c7b0598015dfae75384848460405161112393929190615e69565b60405180910390a25050610191805460ff1916600117905550565b60008281526065602052604090206002015461115c9061078a6129d0565b6111785760405162461bcd60e51b8152600401610a51906153de565b61118282826134ef565b5050565b6001600160a01b038216600090815260c9602052604081206111a89083613558565b9392505050565b61118233838361182c565b6101915460ff166111dd5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff161561120b5760405162461bcd60e51b8152600401610a51906157ba565b82811461122a5760405162461bcd60e51b8152600401610a5190615ac5565b6000805b828110156112985761125186868381811061124557fe5b90506020020135612a42565b600061128187878481811061126257fe5b9050602002013586868581811061127557fe5b90506020020135613564565b905061128d8382612f7a565b92505060010161122e565b50336001600160a01b03167f50748d84e7c6a6cc3641eb166ac6557b87d0e389ccd714d544d961b533a9c94682878787876040516112da959493929190615d11565b60405180910390a25050610191805460ff19166001179055505050565b6112ff6129d0565b6001600160a01b0316816001600160a01b03161461132f5760405162461bcd60e51b8152600401610a5190615cc2565b6111828282613648565b6101c55481565b61135a600080516020615f8b83398151915261078a6129d0565b6113765760405162461bcd60e51b8152600401610a5190615c2d565b61137e6136b1565b565b610b0983838360405180602001604052806000815250612523565b6101915460ff166113be5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156113ec5760405162461bcd60e51b8152600401610a51906157ba565b82811461140b5760405162461bcd60e51b8152600401610a5190615ac5565b600060608267ffffffffffffffff8111801561142657600080fd5b50604051908082528060200260200182016040528015611450578160200160208202803683370190505b50905060005b838110156114d15761146d87878381811061124557fe5b60008061149e89898581811061147f57fe5b9050602002013588888681811061149257fe5b90506020020135612d09565b90925090506114ad8583612f7a565b9450808484815181106114bc57fe5b60209081029190910101525050600101611456565b50336001600160a01b03167f50748d84e7c6a6cc3641eb166ac6557b87d0e389ccd714d544d961b533a9c946838888856040516115119493929190615d4a565b60405180910390a25050610191805460ff1916600117905550505050565b6101c85481565b600080516020615f4283398151915281565b60008061155660ca8461371d565b509392505050565b6101915460009060ff166115845760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156115b25760405162461bcd60e51b8152600401610a51906157ba565b60006115bd81612a42565b6115c5613739565b6115e15760405162461bcd60e51b8152600401610a51906153c2565b6101c3546000906115fa906001600160a01b03166137cd565b90506116116001600160a01b0382163330876137d8565b6101c35460009061162a906001600160a01b03166130bb565b90506116406001600160a01b03831682876137f9565b60405163b6b55f2560e01b81526000906001600160a01b0383169063b6b55f259061166f9089906004016152fd565b602060405180830381600087803b15801561168957600080fd5b505af115801561169d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c19190614f65565b905060006116d23033846000612aee565b905080336001600160a01b03167fce343194de25678e58b53205d289681a131cc2b917e7c36c8dc0d1693fd8f7ef8985604051611710929190615e5b565b60405180910390a3945050505050610191805460ff19166001179055919050565b60fb5460ff1690565b6000610ca382604051806060016040528060298152602001615f626029913960ca919061389e565b6101cc5481565b6117716138ab565b61178d5760405162461bcd60e51b8152600401610a51906154ad565b600061179881612a42565b8484101580156117a85750828211155b6117c45760405162461bcd60e51b8152600401610a5190615bda565b6101c88690556101c98590556101ca8490556101cc8390556101cb82905560405133907f8fc8630a9026e4d101945e5580ff250722a3dbc1222dac05b63a0e4a97688a659061181c9089908990899089908990615e7f565b60405180910390a2505050505050565b6101915460ff1661184f5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff161561187d5760405162461bcd60e51b8152600401610a51906157ba565b600061188881612a42565b6000611896333086866132d1565b905060006118a73087846001612aee565b905080336001600160a01b03167f70e3723ca1d6f2fd53a53844eb91671bc39574743c075044ac7ff5c2e5f489638787866040516118e793929190615e69565b60405180910390a35050610191805460ff1916600117905550505050565b60d18054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a1f5780601f106109f457610100808354040283529160200191610a1f565b6000610ca36119736138c7565b60008481526101d160205260409020610f869061198f9061394c565b611997612562565b90613081565b60006001600160a01b0382166119c55760405162461bcd60e51b8152600401610a519061583c565b6001600160a01b038216600090815260c960205260409020610ca390612f9f565b6000806101d260008460018111156119fa57fe5b6001811115611a0557fe5b8152602001908152602001600020541115610f94576101d26000836001811115611a2b57fe5b6001811115611a3657fe5b815260200190815260200160002054905061098e565b6101c3546001600160a01b031681565b611a76600080516020615f8b83398151915261078a6129d0565b611a925760405162461bcd60e51b8152600401610a51906155db565b61137e61395f565b6000610ca3611aa76138c7565b60008481526101c76020526040902054610f8690611acd90611ac7612719565b906139b8565b60008681526101d1602052604090206119979061394c565b600080805b611af38461199d565b811015611b26576000611b068583611186565b9050611b1b611b1482610c86565b8490612f7a565b925050600101611aea565b5092915050565b60008281526065602052604081206111a89083613558565b611b4d6138ab565b611b695760405162461bcd60e51b8152600401610a51906154ad565b6000611b7481612a42565b60008311611b945760405162461bcd60e51b8152600401610a5190615537565b826101d26000846001811115611ba657fe5b6001811115611bb157fe5b8152602081019190915260400160002055611bca6129d0565b6001600160a01b03167f9db0606b275ca1f1e99d2544ed31141049687b5f4080f2c87812881580a1b7ee8385604051611c04929190615306565b60405180910390a2505050565b60008281526065602052604081206111a890836139fa565b60cf8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a1f5780601f106109f457610100808354040283529160200191610a1f565b60008181526101d160205260408120610ca390600101613a0f565b61015f5481565b6101d1602090815260009182526040918290208054835160c081018552600183015481526002830154938101939093526003820154938301939093526004810154606083015260058101546080830152600681015460a0830152600781015460088201546009830154600a840154600b909401549293919260ff909116919087565b611d366138ab565b611d525760405162461bcd60e51b8152600401610a51906154ad565b6000611d5d81612a42565b6101cd82905560405133907f8c84e3b4df93f5b7c8d4ab6647708f5b14cacc124e22908187e30695ec54bab390611d959085906152fd565b60405180910390a25050565b6101915460ff16611dc45760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615611df25760405162461bcd60e51b8152600401610a51906157ba565b611dfb82612a42565b611e058282613a34565b60008281526101d16020526040902060090154611e2c9033908390610d819060ff16613b49565b5050610191805460ff19166001179055565b6101915460ff16611e615760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff1615611e8f5760405162461bcd60e51b8152600401610a51906157ba565b828114611eae5760405162461bcd60e51b8152600401610a5190615ac5565b60008060005b83811015611f9957611ecb87878381811061124557fe5b611ef9878783818110611eda57fe5b90506020020135868684818110611eed57fe5b90506020020135613a34565b60016101d16000898985818110611f0c57fe5b602090810292909201358352508101919091526040016000206009015460ff166001811115611f3757fe5b1415611f6957611f62858583818110611f4c57fe5b9050602002013583612f7a90919063ffffffff16565b9150611f91565b611f8e858583818110611f7857fe5b9050602002013584612f7a90919063ffffffff16565b92505b600101611eb4565b508115611faf57611faf3383610d816000613b49565b8015611fc457611fc43382610d816001613b49565b336001600160a01b03167ff00809a6eb66c05c314468512a79b6388957b41bc76bd7241b9cbabb129ae0088787878760405161151194939291906152c0565b600081565b6120106129d0565b6001600160a01b0316826001600160a01b031614156120415760405162461bcd60e51b8152600401610a519061569a565b8060cd600061204e6129d0565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556120926129d0565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120ca91906152f2565b60405180910390a35050565b6101915460ff166120f95760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156121275760405162461bcd60e51b8152600401610a51906157ba565b8061213181612a42565b3361213b8361173a565b6001600160a01b0316146121615760405162461bcd60e51b8152600401610a51906154ad565b60008281526101d16020526040812060098101549091906121849060ff166119e6565b905061218f82613c02565b8110156121ae5760405162461bcd60e51b8152600401610a51906158c8565b60006121b98361394c565b600a8401839055905060006121cd8461394c565b90506121e981610c9d846101ce546139b890919063ffffffff16565b6101ce555050610191805460ff1916600117905550505050565b6101915460ff166122265760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156122545760405162461bcd60e51b8152600401610a51906157ba565b8161225e81612a42565b612266613c1a565b8015612277575061227733846130c6565b6122935760405162461bcd60e51b8152600401610a51906154ad565b60008381526101d1602052604081206009015460ff1660018111156122b457fe5b146122d15760405162461bcd60e51b8152600401610a51906156cd565b60008381526101d16020526040902080546122ec9084612f7a565b815561231661230c846122fe84613c36565b61230785613c02565b613c4e565b6101ce5490612f7a565b6101ce556009810154612346903390309086906123359060ff16613b49565b6001600160a01b03169291906137d8565b5050610191805460ff191660011790555050565b60009081526101d1602052604090205490565b6101cd5481565b6101cb5481565b600054610100900460ff16806123945750612394613c6c565b806123a2575060005460ff16155b6123be5760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff161580156123e9576000805460ff1961ff0019909116610100171660011790555b6123f1613c72565b6123f9613cf5565b61245a6040518060400160405280601e81526020017f476f6c6466696e6368205632204c50205374616b696e6720546f6b656e7300008152506040518060400160405280600a8152602001694746492d56322d4c505360b01b815250613d73565b612462613c72565b61246a613c72565b612472613e4f565b61247a613edb565b612492600080516020615f2283398151915284611178565b6124aa600080516020615f8b83398151915284611178565b6124d0600080516020615f8b833981519152600080516020615f22833981519152613f6b565b6124e8600080516020615f2283398151915280613f6b565b6101c380546001600160a01b0319166001600160a01b0384161790556301e133806101cd558015610b09576000805461ff0019169055505050565b61253461252e6129d0565b836130c6565b6125505760405162461bcd60e51b8152600401610a5190615b3f565b61255c84848484613f80565b50505050565b6000806101c4544214612575574261257a565b426001015b905060006125946101c454836139b890919063ffffffff16565b90506125a381610f8684613fb3565b9250505090565b6101ce5481565b60606125bc826129c3565b6125d85760405162461bcd60e51b8152600401610a5190615a76565b600082815260d0602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084526060939283018282801561266d5780601f106126425761010080835404028352916020019161266d565b820191906000526020600020905b81548152906001019060200180831161265057829003601f168201915b505060d1549394505050506002600019610100600184161502019091160461269657905061098e565b8051156126c85760d1816040516020016126b1929190615120565b60405160208183030381529060405291505061098e565b60d16126d384614042565b6040516020016126e4929190615120565b604051602081830303815290604052915050919050565b6101c45481565b6000818152606560205260408120610ca390612f9f565b6000610cb561272742613fb3565b6101c55490612f7a565b6101915460ff166127545760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156127825760405162461bcd60e51b8152600401610a51906157ba565b80611e2c81612a42565b6101915460ff166127af5760405162461bcd60e51b8152600401610a5190615bf6565b610191805460ff1916905560fb5460ff16156127dd5760405162461bcd60e51b8152600401610a51906157ba565b6127e682612a42565b60006127f28383613564565b905082336001600160a01b03167fc3c6b9e734c21d6e8632c6a862b6de6458faa89079cbc34cc0560ed0ab78a5c68385604051610dcb929190615e5b565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6000828152606560205260409020600201546128729061078a6129d0565b61132f5760405162461bcd60e51b8152600401610a519061576a565b600080516020615f2283398151915281565b600080516020615f8b83398151915281565b6101c65481565b6001600160a01b03918216600090815260cd6020908152604080832093909416825291909152205460ff1690565b6101ca5481565b6128f66138ab565b6129125760405162461bcd60e51b8152600401610a51906154ad565b600061291d81612a42565b61292b333084612335612fc5565b6101c6546129399083612f7a565b6101c6556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9061296d9084906152fd565b60405180910390a15050565b6129816138ab565b61299d5760405162461bcd60e51b8152600401610a51906154ad565b61137e600080516020615f42833981519152600080516020615f22833981519152613f6b565b6000610ca360ca8361411d565b3390565b600081815260cc6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a098261173a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6101c554612a4e612719565b6101c5556000612a7b612a5f6138c7565b6101c554610f8690612a7190866139b8565b6101ce5490613081565b6101c654909150612a8c90826139b8565b6101c655426101c4558215610b09576000612aa684611a9a565b60008581526101d160205260409020600101805491925090612ac89083612f7a565b8155612ad381614129565b50506101c55460008481526101c76020526040902055505050565b6000808311612b0f5760405162461bcd60e51b8152600401610a5190615537565b612b1a61015f614188565b612b2561015f614191565b9050612b3081612a42565b6000612b3b83610de7565b90506000612b48846119e6565b90506040518060e001604052808681526020016040518060c0016040528060008152602001600081526020016000815260200160008152602001428152602001612b9e6101cd5442612f7a90919063ffffffff16565b81525081526020016000815260200160008152602001856001811115612bc057fe5b81526020808201849052604091820185905260008681526101d18252829020835181558382015180516001808401919091559281015160028301558084015160038301556060808201516004840155608080830151600585015560a0909201516006840155938501516007830155928401516008820155918301516009830180549192909160ff1916908381811115612c5557fe5b021790555060a0820151600a82015560c090910151600b90910155612c7a8684614195565b60008381526101d160205260409020612c969061230c9061394c565b6101ce556001600160a01b0387163014612cb957612cb987308761233588613b49565b82866001600160a01b03167fcc10169be2ad544347561e230939849af48d1714c052d7fe247d12f3decb4896878786604051612cf793929190615dc2565b60405180910390a35050949350505050565b600080612d1584614259565b612d315760405162461bcd60e51b8152600401610a519061591a565b612d39613739565b612d555760405162461bcd60e51b8152600401610a51906153c2565b6101c354600090612d6e906001600160a01b0316614284565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612d9e91906151a1565b60206040518083038186803b158015612db657600080fd5b505afa158015612dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dee9190614f65565b6101c354909150612e07906001600160a01b03166130bb565b6001600160a01b0316632e1a7d4d866040518263ffffffff1660e01b8152600401612e3291906152fd565b602060405180830381600087803b158015612e4c57600080fd5b505af1158015612e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e849190614f65565b9350612f0c826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612eb591906151a1565b60206040518083038186803b158015612ecd57600080fd5b505afa158015612ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f059190614f65565b82906139b8565b9250612f188684613a34565b6101c354612f369033908690610d81906001600160a01b03166137cd565b50505b9250929050565b6000848411612f50575080610c7e565b610c7b612f74612f6086886139b8565b610f86612f6d878a6139b8565b8690613081565b8361428f565b6000828201838110156111a85760405162461bcd60e51b8152600401610a5190615555565b6000610ca382614191565b6003820154612fb99082612f7a565b82600301819055505050565b6101c354600090610cb5906001600160a01b03166142a5565b610b098363a9059cbb60e01b8484604051602401612ffd929190615267565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526142b0565b6000610ca382614395565b60006111a883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506143ad565b60008261309057506000610ca3565b8282028284828161309d57fe5b04146111a85760405162461bcd60e51b8152600401610a5190615936565b6000610ca3826143e4565b60006130d1826129c3565b6130ed5760405162461bcd60e51b8152600401610a519061571e565b60006130f88361173a565b9050806001600160a01b0316846001600160a01b031614806131335750836001600160a01b031661312884610a2a565b6001600160a01b0316145b80610c7e5750610c7e81856128b9565b826001600160a01b03166131568261173a565b6001600160a01b03161461317c5760405162461bcd60e51b8152600401610a5190615a2d565b6001600160a01b0382166131a25760405162461bcd60e51b8152600401610a5190615656565b6131ad8383836143fc565b6131b86000826129d4565b6001600160a01b038316600090815260c9602052604090206131da9082614407565b506001600160a01b038216600090815260c9602052604090206131fd9082614413565b5061320a60ca828461441f565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006001600160a01b03821663b93f9b0a60055b6040518263ffffffff1660e01b815260040161328191906152fd565b60206040518083038186803b15801561329957600080fd5b505afa1580156132ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca39190614c32565b6000808311806132e15750600082115b6132fd5760405162461bcd60e51b8152600401610a5190615537565b6101c354600090613316906001600160a01b03166137cd565b6101c354909150600090613332906001600160a01b0316614284565b6101c35490915060009061334e906001600160a01b0316613034565b9050851561337f5761336b6001600160a01b0383168930896137d8565b61337f6001600160a01b03831682886137f9565b84156133ae5761339a6001600160a01b0384168930886137d8565b6133ae6001600160a01b03841682876137f9565b600061344a600a610f866009856001600160a01b0316638d8ea72760405180604001604052808e81526020018d8152506040518263ffffffff1660e01b81526004016133fa9190615280565b60206040518083038186803b15801561341257600080fd5b505afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119979190614f65565b604080518082018252898152602081018990529051637328333b60e01b81529192506001600160a01b03841691637328333b916134909185906000908e9060040161528e565b602060405180830381600087803b1580156134aa57600080fd5b505af11580156134be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e29190614f65565b9998505050505050505050565b60008281526065602052604090206135079082614435565b15611182576135146129d0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006111a8838361444a565b600061356f83614259565b61358b5760405162461bcd60e51b8152600401610a519061591a565b6101c3546135a1906001600160a01b03166130bb565b6001600160a01b03166358031d12836040518263ffffffff1660e01b81526004016135cc91906152fd565b602060405180830381600087803b1580156135e657600080fd5b505af11580156135fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361e9190614f65565b905061362a8383613a34565b6101c354610ca39033908390610d81906001600160a01b03166137cd565b6000828152606560205260409020613660908261448f565b156111825761366d6129d0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60fb5460ff166136d35760405162461bcd60e51b8152600401610a519061542d565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6137066129d0565b60405161371391906151a1565b60405180910390a1565b600080808061372c86866144a4565b9097909650945050505050565b6101c354600090613752906001600160a01b0316614500565b6001600160a01b031663a37b92c9336040518263ffffffff1660e01b815260040161377d91906151a1565b60206040518083038186803b15801561379557600080fd5b505afa1580156137a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190614e95565b6000610ca382613251565b61255c846323b872dd60e01b858585604051602401612ffd93929190615243565b600061387d82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040161382d929190615229565b60206040518083038186803b15801561384557600080fd5b505afa158015613859573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d9190614f65565b905061255c8463095ea7b360e01b8584604051602401612ffd929190615267565b6000610c7e84848461450b565b6000610cb5600080516020615f2283398151915261078a6129d0565b60006138d161456a565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561390957600080fd5b505afa15801561391d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139419190615057565b60ff16600a0a905090565b6000610ca382600001546122fe84613c36565b60fb5460ff16156139825760405162461bcd60e51b8152600401610a51906157ba565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586137066129d0565b60006111a883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614583565b60006111a8836001600160a01b0384166145af565b6000610ca38260030154611ac784600201548560010154612f7a90919063ffffffff16565b613a3e33836130c6565b613a5a5760405162461bcd60e51b8152600401610a51906154ad565b60008281526101d16020526040902080548215801590613a7a5750808311155b613a965760405162461bcd60e51b8152600401610a51906159c3565b613ab9613aaf84613aa685613c36565b61230786613c02565b6101ce54906139b8565b6101ce55613ac781846139b8565b8255613ad1613c1a565b613afe576000613aed82610f8686670de0b6b3a7640000613081565b9050613afc60018401826145c7565b505b6009820154604051859133917f47efae27a70cca1d3ad8e753ab4b48a413e554d244be5c7928fdfee407c37f5d91613b3b91889160ff1690615da6565b60405180910390a350505050565b60006001826001811115613b5957fe5b1415613bec576101c354613b75906001600160a01b0316613034565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613bad57600080fd5b505afa158015613bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be59190614c32565b905061098e565b6101c354610ca3906001600160a01b0316614284565b600a81015460009015610f945750600a81015461098e565b6000610cb5600080516020615f4283398151915261078a6129d0565b600b81015460009015610f945750600b81015461098e565b6000610c7e670de0b6b3a7640000610f868181866119978a8a613081565b303b1590565b600054610100900460ff1680613c8b5750613c8b613c6c565b80613c99575060005460ff16155b613cb55760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613ce0576000805460ff1961ff0019909116610100171660011790555b8015613cf2576000805461ff00191690555b50565b600054610100900460ff1680613d0e5750613d0e613c6c565b80613d1c575060005460ff16155b613d385760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613d63576000805460ff1961ff0019909116610100171660011790555b613ce06301ffc9a760e01b614675565b600054610100900460ff1680613d8c5750613d8c613c6c565b80613d9a575060005460ff16155b613db65760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613de1576000805460ff1961ff0019909116610100171660011790555b8251613df49060ce906020860190614b41565b508151613e089060cf906020850190614b41565b50613e196380ac58cd60e01b614675565b613e29635b5e139f60e01b614675565b613e3963780e9d6360e01b614675565b8015610b09576000805461ff0019169055505050565b600054610100900460ff1680613e685750613e68613c6c565b80613e76575060005460ff16155b613e925760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613ebd576000805460ff1961ff0019909116610100171660011790555b60fb805460ff191690558015613cf2576000805461ff001916905550565b600054610100900460ff1680613ef45750613ef4613c6c565b80613f02575060005460ff16155b613f1e5760405162461bcd60e51b8152600401610a51906159df565b600054610100900460ff16158015613f49576000805460ff1961ff0019909116610100171660011790555b610191805460ff191660011790558015613cf2576000805461ff001916905550565b60009182526065602052604090912060020155565b613f8b848484613143565b613f97848484846146c4565b61255c5760405162461bcd60e51b8152600401610a519061545b565b60006101c454821015613fd85760405162461bcd60e51b8152600401610a5190615b23565b6101ce54613fe85750600061098e565b6000614010614007613ff86147fe565b6101c4546119979087906139b8565b6101c65461428f565b9050600061402d6101ce54610f866140266138c7565b8590613081565b9050818111156111a85760009250505061098e565b60608161406757506040805180820190915260018152600360fc1b602082015261098e565b8160005b811561407f57600101600a8204915061406b565b60608167ffffffffffffffff8111801561409857600080fd5b506040519080825280601f01601f1916602001820160405280156140c3576020820181803683370190505b50859350905060001982015b831561411457600a840660300160f81b828280600190039350815181106140f257fe5b60200101906001600160f81b031916908160001a905350600a840493506140cf565b50949350505050565b60006111a883836145af565b60006141478260040154836005015442614142866148d5565b612f40565b9050816001015481111561118257600061416e8360010154836139b890919063ffffffff16565b835490915061417d90826139b8565b835550600190910155565b80546001019055565b5490565b6001600160a01b0382166141bb5760405162461bcd60e51b8152600401610a51906158e5565b6141c4816129c3565b156141e15760405162461bcd60e51b8152600401610a5190615500565b6141ed600083836143fc565b6001600160a01b038216600090815260c96020526040902061420f9082614413565b5061421c60ca828461441f565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008060008381526101d1602052604090206009015460ff16600181111561427d57fe5b1492915050565b6000610ca3826148e9565b600081831061429e57816111a8565b5090919050565b6000610ca382614901565b6142c2826001600160a01b0316614919565b6142de5760405162461bcd60e51b8152600401610a5190615c8b565b60006060836001600160a01b0316836040516142fa9190615104565b6000604051808303816000865af19150503d8060008114614337576040519150601f19603f3d011682016040523d82523d6000602084013e61433c565b606091505b50915091508161435e5760405162461bcd60e51b8152600401610a51906156e9565b80511561255c57808060200190518101906143799190614e95565b61255c5760405162461bcd60e51b8152600401610a5190615b90565b60006001600160a01b03821663b93f9b0a6016613265565b600081836143ce5760405162461bcd60e51b8152600401610a519190615322565b5060008385816143da57fe5b0495945050505050565b60006001600160a01b03821663b93f9b0a600e613265565b610b09838383614952565b60006111a88383614982565b60006111a88383614a48565b6000610c7e84846001600160a01b038516614a92565b60006111a8836001600160a01b038416614a48565b8154600090821061446d5760405162461bcd60e51b8152600401610a5190615335565b82600001828154811061447c57fe5b9060005260206000200154905092915050565b60006111a8836001600160a01b038416614982565b8154600090819083106144c95760405162461bcd60e51b8152600401610a5190615886565b60008460000184815481106144da57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000610ca382614b29565b6000828152600184016020526040812054828161453b5760405162461bcd60e51b8152600401610a519190615322565b5084600001600182038154811061454e57fe5b9060005260206000209060020201600101549150509392505050565b6101c354600090610cb5906001600160a01b0316614284565b600081848411156145a75760405162461bcd60e51b8152600401610a519190615322565b505050900390565b60009081526001919091016020526040902054151590565b670de0b6b3a76400008111156145ef5760405162461bcd60e51b8152600401610a519061558c565b815460009061460c90670de0b6b3a764000090610f869085613081565b90506000614633670de0b6b3a7640000610f8685876001015461308190919063ffffffff16565b845490915061464290836139b8565b8455600184015461465390826139b8565b600185015560028401546146679082612f7a565b846002018190555050505050565b6001600160e01b0319808216141561469f5760405162461bcd60e51b8152600401610a51906154c9565b6001600160e01b0319166000908152609760205260409020805460ff19166001179055565b60006146d8846001600160a01b0316614919565b6146e457506001610c7e565b600060606001600160a01b038616630a85bd0160e11b6147026129d0565b89888860405160240161471894939291906151b5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516147569190615104565b6000604051808303816000865af19150503d8060008114614793576040519150601f19603f3d011682016040523d82523d6000602084013e614798565b606091505b5091509150816147ca578051156147b25780518082602001fd5b60405162461bcd60e51b8152600401610a519061545b565b6000818060200190518101906147e09190614f2a565b6001600160e01b031916630a85bd0160e11b149350610c7e92505050565b600080614826670de0b6b3a7640000610f866101cb546101c85461308190919063ffffffff16565b9050600061484f670de0b6b3a7640000610f866101cc546101c85461308190919063ffffffff16565b6101ce549091508282116148695760009350505050610a27565b8281101561487f576101ca549350505050610a27565b81811115614895576101c9549350505050610a27565b6148cd6148c36148a584866139b8565b610f866148b285886139b8565b6101c9546101ca54611997916139b8565b6101ca54906139b8565b935050505090565b60018101548154600091610ca39190612f7a565b60006001600160a01b03821663b93f9b0a6004613265565b60006001600160a01b03821663b93f9b0a6012613265565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610c7e575050151592915050565b61495d838383610b09565b614965611731565b15610b095760405162461bcd60e51b8152600401610a5190615377565b60008181526001830160205260408120548015614a3e57835460001980830191908101906000908790839081106149b557fe5b90600052602060002001549050808760000184815481106149d257fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080614a0257fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ca3565b6000915050610ca3565b6000614a5483836145af565b614a8a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca3565b506000610ca3565b600082815260018401602052604081205480614af75750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556111a8565b82856000016001830381548110614b0a57fe5b90600052602060002090600202016001018190555060009150506111a8565b60006001600160a01b03821663b93f9b0a6013613265565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614b8257805160ff1916838001178555614baf565b82800160010185558215614baf579182015b82811115614baf578251825591602001919060010190614b94565b50614bbb929150614bbf565b5090565b5b80821115614bbb5760008155600101614bc0565b60008083601f840112614be5578182fd5b50813567ffffffffffffffff811115614bfc578182fd5b6020830191508360208083028501011115612f3957600080fd5b600060208284031215614c27578081fd5b81356111a881615ed9565b600060208284031215614c43578081fd5b81516111a881615ed9565b60008060408385031215614c60578081fd5b8235614c6b81615ed9565b91506020830135614c7b81615ed9565b809150509250929050565b600080600060608486031215614c9a578081fd5b8335614ca581615ed9565b92506020840135614cb581615ed9565b929592945050506040919091013590565b60008060008060808587031215614cdb578081fd5b8435614ce681615ed9565b9350602085810135614cf781615ed9565b935060408601359250606086013567ffffffffffffffff80821115614d1a578384fd5b818801915088601f830112614d2d578384fd5b813581811115614d3b578485fd5b604051601f8201601f1916810185018381118282101715614d5a578687fd5b60405281815283820185018b1015614d70578586fd5b81858501868301379081019093019390935250939692955090935050565b60008060408385031215614da0578182fd5b8235614dab81615ed9565b91506020830135614c7b81615eee565b60008060408385031215614c60578182fd5b60008060408385031215614ddf578182fd5b8235614dea81615ed9565b946020939093013593505050565b600080600060608486031215614e0c578283fd5b8335614e1781615ed9565b95602085013595506040909401359392505050565b60008060008060408587031215614e41578384fd5b843567ffffffffffffffff80821115614e58578586fd5b614e6488838901614bd4565b90965094506020870135915080821115614e7c578384fd5b50614e8987828801614bd4565b95989497509550505050565b600060208284031215614ea6578081fd5b81516111a881615eee565b600060208284031215614ec2578081fd5b5035919050565b60008060408385031215614edb578182fd5b823591506020830135614c7b81615ed9565b60008060408385031215614eff578182fd5b50508035926020909101359150565b600060208284031215614f1f578081fd5b81356111a881615efc565b600060208284031215614f3b578081fd5b81516111a881615efc565b600060208284031215614f57578081fd5b8135600281106111a8578182fd5b600060208284031215614f76578081fd5b5051919050565b60008060408385031215614f8f578182fd5b82359150602083013560028110614c7b578182fd5b60008060008060808587031215614fb9578182fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215614fec578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600080600060a08688031215615026578283fd5b8535945060208601359350604086013561503f81615f12565b94979396509394606081013594506080013592915050565b600060208284031215615068578081fd5b81516111a881615f12565b8060005b600281101561255c578151845260209384019390910190600101615077565b81835260006001600160fb1b038311156150ae578081fd5b6020830280836020870137939093016020019283525090919050565b600081518084526150e2816020860160208601615ead565b601f01601f19169290920160200192915050565b6002811061510057fe5b9052565b60008251615116818460208701615ead565b9190910192915050565b600080845460018082166000811461513f576001811461515657615185565b60ff198316865260028304607f1686019350615185565b600283048886526020808720875b8381101561517d5781548a820152908501908201615164565b505050860193505b5050508351615198818360208801615ead565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061107b908301846150ca565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60408101610ca38284615073565b60a0810161529c8287615073565b604082019490945291151560608301526001600160a01b0316608090910152919050565b6000604082526152d4604083018688615096565b82810360208401526152e7818587615096565b979650505050505050565b901515815260200190565b90815260200190565b6040810161531384615ea2565b82528260208301529392505050565b6000602082526111a860208301846150ca565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526002908201526111d360f21b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b602080825260029082015261105160f21b604082015260600190565b6020808252601c908201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604082015260600190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600490820152635a45524f60e01b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602f908201527f736c617368696e672070657263656e746167652063616e6e6f7420626520677260408201526e6561746572207468616e203130302560881b606082015260800190565b6020808252603e908201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060408201527f6d75737420686176652070617573657220726f6c6520746f2070617573650000606082015260800190565b602080825260049082015263090928e960e31b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604082015260600190565b602080825260029082015261141560f21b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776040820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600390820152624c4f5760e81b604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b602080825260029082015261435760f01b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b602080825260029082015261494160f01b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252600390820152622622a760e91b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b602080825260029082015261125560f21b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b602080825260029082015261049560f41b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602080825260409082018190527f4552433732315072657365744d696e7465725061757365724175746f49643a20908201527f6d75737420686176652070617573657220726f6c6520746f20756e7061757365606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b600086825260606020830152615d2b606083018688615096565b8281036040840152615d3e818587615096565b98975050505050505050565b60008582526020606081840152615d65606084018688615096565b8381036040850152845180825282860191830190845b81811015615d9757835183529284019291840191600101615d7b565b50909998505050505050505050565b82815260408101615db683615ea2565b60208301529392505050565b83815260608101615dd660208301856150f6565b826040830152949350505050565b60006101808201905088825287516020830152602088015160408301526040880151606083015260608801516080830152608088015160a083015260a088015160c08301528660e083015285610100830152615e446101208301866150f6565b610140820193909352610160015295945050505050565b918252602082015260400190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b806002811061098e57fe5b60005b83811015615ec8578181015183820152602001615eb0565b8381111561255c5750506000910152565b6001600160a01b0381168114613cf257600080fd5b8015158114613cf257600080fd5b6001600160e01b031981168114613cf257600080fd5b60ff81168114613cf257600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ed624b04b6a86de88625cc0780256b85157c5a615db56d1357e0a97a30fde27674552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212201130d0faacb68b13dad55d49c8fc2cf269b988a77175552f6dfe8b1613ceef7664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToStake(uint256,uint256)": {
        "details": "This function checkpoints rewards and is only callable by an approved address with ZAPPER_ROLE. This   function enables the Zapper to unwind \"in-progress\" positions initiated by `Zapper.zapStakeToTranchedPool`.   That is, funds that were moved from this contract into a TranchedPool can be \"unwound\" back to their original   staked position by the Zapper as part of `Zapper.unzapToStakingRewards`.",
        "params": {
          "amount": "Amount of `stakingToken()` to be added to tokenId's position",
          "tokenId": "A staking position token ID"
        }
      },
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "claimableRewards(uint256)": {
        "returns": {
          "rewards": "Amount of rewards denominated in `rewardsToken()`"
        }
      },
      "currentEarnRatePerToken()": {
        "returns": {
          "_0": "Amount of rewards denominated in `rewardsToken().decimals()`."
        }
      },
      "depositAndStake(uint256)": {
        "params": {
          "usdcAmount": "The amount of USDC to deposit into the senior pool. All shares from deposit   will be staked."
        }
      },
      "depositToCurve(uint256,uint256)": {
        "params": {
          "fiduAmount": "The amount of FIDU to deposit",
          "usdcAmount": "The amount of USDC to deposit"
        }
      },
      "depositToCurveAndStakeFrom(address,uint256,uint256)": {
        "params": {
          "fiduAmount": "The amount of FIDU to deposit",
          "usdcAmount": "The amount of USDC to deposit"
        }
      },
      "depositWithPermitAndStake(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "r": "secp256k1 signature component",
          "s": "secp256k1 signature component",
          "usdcAmount": "The amount of USDC to deposit",
          "v": "secp256k1 signature component"
        }
      },
      "earnedSinceLastCheckpoint(uint256)": {
        "params": {
          "tokenId": "A staking position token ID"
        },
        "returns": {
          "_0": "Amount of rewards denominated in `rewardsToken().decimals()`"
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for the given token ID"
        }
      },
      "getBaseTokenExchangeRate(uint8)": {
        "params": {
          "positionType": "Type of the staked postion"
        }
      },
      "getReward(uint256)": {
        "params": {
          "tokenId": "A staking position token ID"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "kick(uint256)": {
        "details": "This will also checkpoint their rewards up to the current time."
      },
      "name()": {
        "details": "Gets the token name.",
        "returns": {
          "_0": "string representing the token name"
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "address currently marked as the owner of the given token ID"
        }
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "positionCurrentEarnRate(uint256)": {
        "returns": {
          "_0": "Amount of rewards denominated in `rewardsToken().decimals()`."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "rewardPerToken()": {
        "returns": {
          "_0": "Amount of rewards denominated in `rewardsToken().decimals()`"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "operator address to set the approval"
        }
      },
      "setEffectiveMultiplier(uint256,uint8)": {
        "params": {
          "multiplier": "the new multiplier, denominated in `MULTIPLIER_DECIMALS`",
          "positionType": "the type of the position"
        }
      },
      "stake(uint256,uint8)": {
        "details": "This function checkpoints rewards.",
        "params": {
          "amount": "The amount of `stakingToken()` to stake",
          "positionType": "The type of the staked position"
        },
        "returns": {
          "_0": "Id of the NFT representing the staked position"
        }
      },
      "stakedBalanceOf(uint256)": {
        "details": "The value returned is the bare amount, not the effective amount. The bare amount represents   the number of tokens the user has staked for a given position.",
        "params": {
          "tokenId": "A staking position token ID"
        },
        "returns": {
          "_0": "Amount of staked tokens denominated in `stakingToken().decimals()`"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "returns": {
          "_0": "string representing the token symbol"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner.",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list owned by the requested address"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the URI for a given token ID. May return an empty string. If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}). If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings. .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \"\" | \"\" | \"\" | \"\" | \"token.uri/123\" | \"token.uri/123\" | \"token.uri/\" | \"123\" | \"token.uri/123\" | \"token.uri/\" | \"\" | \"token.uri/<tokenId>\" |=== Requirements: - `tokenId` must exist."
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract.",
        "returns": {
          "_0": "uint256 representing the total amount of tokens"
        }
      },
      "totalVestedAt(uint256,uint256,uint256,uint256)": {
        "returns": {
          "rewards": "Amount of rewards denominated in `rewardsToken()`"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "unstake(uint256,uint256)": {
        "details": "This function checkpoints rewards",
        "params": {
          "amount": "Amount of `stakingToken()` to be unstaked from the position",
          "tokenId": "A staking position token ID"
        }
      },
      "unstakeMultiple(uint256[],uint256[])": {
        "details": "This function checkpoints rewards",
        "params": {
          "amounts": "A list of amounts of `stakingToken()` to be unstaked from the position",
          "tokenIds": "A list of position token IDs"
        }
      },
      "updatePositionEffectiveMultiplier(uint256)": {
        "details": "This will also checkpoint their rewards up to the current time."
      }
    },
    "stateVariables": {
      "effectiveMultipliers": {
        "details": "A mapping of staked position types to multipliers used to denominate positions   in `baseStakingToken()`. Represented with `MULTIPLIER_DECIMALS`."
      },
      "leverageMultipliers": {
        "details": "UNUSED (definition kept for storage slot)"
      },
      "positions": {
        "details": "NFT tokenId => staked position"
      },
      "totalLeveragedStakedSupply": {
        "details": "UNUSED (definition kept for storage slot)"
      },
      "totalStakedSupply": {
        "details": "Supply of staked tokens, denominated in `stakingToken().decimals()`Note that due to the use of `unsafeBaseTokenExchangeRate` and `unsafeEffectiveMultiplier` on a StakedPosition, the sum of `amount` across all staked positions will not necessarily equal this `totalStakedSupply` value; the purpose of the base token exchange rate and the effective multiplier is to enable calculation of an \"effective amount\" -- which is what this `totalStakedSupply` represents the sum of."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accumulatedRewardsPerToken()": {
        "notice": "Accumulated rewards per token at the last checkpoint"
      },
      "addToStake(uint256,uint256)": {
        "notice": "Add to an existing position without affecting vesting schedule"
      },
      "claimableRewards(uint256)": {
        "notice": "Returns the rewards claimable by a given position token at the most recent checkpoint, taking into   account vesting schedule."
      },
      "currentEarnRatePerToken()": {
        "notice": "The amount of rewards currently being earned per token per second. This amount takes into   account how many rewards are actually available for disbursal -- unlike `rewardRate()` which does not.   This function is intended for public consumption, to know the rate at which rewards are being   earned, and not as an input to the mutative calculations in this contract."
      },
      "depositAndStake(uint256)": {
        "notice": "Deposit to SeniorPool and stake your shares in the same transaction."
      },
      "depositToCurve(uint256,uint256)": {
        "notice": "Deposits FIDU and USDC to Curve on behalf of the user. The Curve LP tokens will be minted   directly to the user's address"
      },
      "depositToCurveAndStakeFrom(address,uint256,uint256)": {
        "notice": "Deposit to FIDU and USDC into the Curve LP, and stake your Curve LP tokens in the same transaction."
      },
      "depositWithPermitAndStake(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Identical to `depositAndStake`, except it allows for a signature to be passed that permits   this contract to move funds on behalf of the user."
      },
      "earnedSinceLastCheckpoint(uint256)": {
        "notice": "Returns rewards earned by a given position token from its last checkpoint up to the   current block timestamp."
      },
      "getBaseTokenExchangeRate(uint8)": {
        "notice": "Calculate the exchange rate that will be used to convert the original staked token amount to the   `baseStakingToken()` amount. The exchange rate is denominated in `MULTIPLIER_DECIMALS`."
      },
      "getEffectiveMultiplierForPositionType(uint8)": {
        "notice": "The effective multiplier to use with new staked positions of the provided `positionType`,   for denominating them in terms of `baseStakingToken()`. This value is denominated in `MULTIPLIER_DECIMALS`."
      },
      "getReward(uint256)": {
        "notice": "Claim rewards for a given staked position"
      },
      "kick(uint256)": {
        "notice": "\"Kick\" a user's reward multiplier. If they are past their lock-up period, their reward   multiplier will be reset to 1x."
      },
      "lastUpdateTime()": {
        "notice": "The block timestamp when rewards were last checkpointed"
      },
      "loadRewards(uint256)": {
        "notice": "Transfer rewards from msg.sender, to be used for reward distribution"
      },
      "maxRate()": {
        "notice": "The maximum total disbursed rewards per second, denominated in `rewardsToken()`"
      },
      "maxRateAtPercent()": {
        "notice": "The percent of `targetCapacity` at which the reward rate reaches `maxRate`.  Represented with `MULTIPLIER_DECIMALS`."
      },
      "minRate()": {
        "notice": "The minimum total disbursed rewards per second, denominated in `rewardsToken()`"
      },
      "minRateAtPercent()": {
        "notice": "The percent of `targetCapacity` at which the reward rate reaches `minRate`.  Represented with `MULTIPLIER_DECIMALS`."
      },
      "positionCurrentEarnRate(uint256)": {
        "notice": "The amount of rewards currently being earned per second, for a given position. This function   is intended for public consumption, to know the rate at which rewards are being earned   for a given position, and not as an input to the mutative calculations in this contract."
      },
      "positionToAccumulatedRewardsPerToken(uint256)": {
        "notice": "StakedPosition tokenId => accumulatedRewardsPerToken at the position's last checkpoint"
      },
      "rewardPerToken()": {
        "notice": "Returns accumulated rewards per token up to the current block timestamp"
      },
      "rewardsAvailable()": {
        "notice": "Total rewards available for disbursement at the last checkpoint, denominated in `rewardsToken()`"
      },
      "setEffectiveMultiplier(uint256,uint8)": {
        "notice": "Set the effective multiplier for a given staked position type. The effective multipler  is used to denominate a staked position to `baseStakingToken()`. The multiplier is represented in  `MULTIPLIER_DECIMALS`"
      },
      "stake(uint256,uint8)": {
        "notice": "Stake `stakingToken()` to earn rewards. When you call this function, you'll receive an   an NFT representing your staked position. You can present your NFT to `getReward` or `unstake`   to claim rewards or unstake your tokens respectively. Rewards vest over a schedule."
      },
      "stakedBalanceOf(uint256)": {
        "notice": "Returns the staked balance of a given position token."
      },
      "targetCapacity()": {
        "notice": "Desired supply of staked tokens. The reward rate adjusts in a range   around this value to incentivize staking or unstaking to maintain it."
      },
      "totalVestedAt(uint256,uint256,uint256,uint256)": {
        "notice": "Returns the rewards that will have vested for some position with the given params."
      },
      "unstake(uint256,uint256)": {
        "notice": "Unstake an amount of `stakingToken()` associated with a given position and transfer to msg.sender.   Unvested rewards will be forfeited, but remaining staked amount will continue to accrue rewards."
      },
      "unstakeMultiple(uint256[],uint256[])": {
        "notice": "Unstake multiple positions and transfer to msg.sender."
      },
      "updatePositionEffectiveMultiplier(uint256)": {
        "notice": "Updates a user's effective multiplier to the prevailing multiplier. This function gives   users an option to get on a higher multiplier without needing to unstake and lose their unvested tokens."
      },
      "vestingLength()": {
        "notice": "The duration in seconds over which rewards vest"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 264,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)"
      },
      {
        "astId": 509,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6541,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 6598,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6648,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(UintSet)3192_storage)"
      },
      {
        "astId": 6650,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "202",
        "type": "t_struct(UintToAddressMap)2717_storage"
      },
      {
        "astId": 6654,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6660,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6662,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_name",
        "offset": 0,
        "slot": "206",
        "type": "t_string_storage"
      },
      {
        "astId": 6664,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_symbol",
        "offset": 0,
        "slot": "207",
        "type": "t_string_storage"
      },
      {
        "astId": 6668,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 6670,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_baseURI",
        "offset": 0,
        "slot": "209",
        "type": "t_string_storage"
      },
      {
        "astId": 7576,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_uint256)41_storage"
      },
      {
        "astId": 3308,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 3397,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7644,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7676,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "351",
        "type": "t_struct(Counter)2397_storage"
      },
      {
        "astId": 7734,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3406,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "_notEntered",
        "offset": 0,
        "slot": "401",
        "type": "t_bool"
      },
      {
        "astId": 3447,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "402",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31854,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "config",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(GoldfinchConfig)17540"
      },
      {
        "astId": 31857,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 31860,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "accumulatedRewardsPerToken",
        "offset": 0,
        "slot": "453",
        "type": "t_uint256"
      },
      {
        "astId": 31863,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "rewardsAvailable",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 31868,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "positionToAccumulatedRewardsPerToken",
        "offset": 0,
        "slot": "455",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 31871,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "targetCapacity",
        "offset": 0,
        "slot": "456",
        "type": "t_uint256"
      },
      {
        "astId": 31874,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "minRate",
        "offset": 0,
        "slot": "457",
        "type": "t_uint256"
      },
      {
        "astId": 31877,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "maxRate",
        "offset": 0,
        "slot": "458",
        "type": "t_uint256"
      },
      {
        "astId": 31880,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "maxRateAtPercent",
        "offset": 0,
        "slot": "459",
        "type": "t_uint256"
      },
      {
        "astId": 31883,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "minRateAtPercent",
        "offset": 0,
        "slot": "460",
        "type": "t_uint256"
      },
      {
        "astId": 31886,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "vestingLength",
        "offset": 0,
        "slot": "461",
        "type": "t_uint256"
      },
      {
        "astId": 31889,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "totalStakedSupply",
        "offset": 0,
        "slot": "462",
        "type": "t_uint256"
      },
      {
        "astId": 31892,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "totalLeveragedStakedSupply",
        "offset": 0,
        "slot": "463",
        "type": "t_uint256"
      },
      {
        "astId": 31897,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "leverageMultipliers",
        "offset": 0,
        "slot": "464",
        "type": "t_mapping(t_enum(LockupPeriod)31763,t_uint256)"
      },
      {
        "astId": 31902,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "positions",
        "offset": 0,
        "slot": "465",
        "type": "t_mapping(t_uint256,t_struct(StakedPosition)31781_storage)"
      },
      {
        "astId": 31907,
        "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
        "label": "effectiveMultipliers",
        "offset": 0,
        "slot": "466",
        "type": "t_mapping(t_enum(StakedPositionType)31766,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)2445_storage)dyn_storage": {
        "base": "t_struct(MapEntry)2445_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)41_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[41]",
        "numberOfBytes": "1312"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(GoldfinchConfig)17540": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_enum(LockupPeriod)31763": {
        "encoding": "inplace",
        "label": "enum StakingRewards.LockupPeriod",
        "numberOfBytes": "1"
      },
      "t_enum(StakedPositionType)31766": {
        "encoding": "inplace",
        "label": "enum StakingRewards.StakedPositionType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)3192_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)3192_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)260_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_enum(LockupPeriod)31763,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(LockupPeriod)31763",
        "label": "mapping(enum StakingRewards.LockupPeriod => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(StakedPositionType)31766,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(StakedPositionType)31766",
        "label": "mapping(enum StakingRewards.StakedPositionType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(StakedPosition)31781_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingRewards.StakedPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(StakedPosition)31781_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3083_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3082,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2903_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2397_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2396,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Map)2453_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 2448,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)2445_storage)dyn_storage"
          },
          {
            "astId": 2452,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)2445_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 2442,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2444,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Rewards)11194_storage": {
        "encoding": "inplace",
        "label": "struct StakingRewardsVesting.Rewards",
        "members": [
          {
            "astId": 11183,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "totalUnvested",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11185,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "totalVested",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11187,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "totalPreviouslyVested",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11189,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11191,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11193,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "endTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)260_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3083_storage"
          },
          {
            "astId": 259,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2903_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2898,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2902,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakedPosition)31781_storage": {
        "encoding": "inplace",
        "label": "struct StakingRewards.StakedPosition",
        "members": [
          {
            "astId": 31768,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31770,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "rewards",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Rewards)11194_storage"
          },
          {
            "astId": 31772,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "leverageMultiplier",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 31774,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 31776,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "positionType",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(StakedPositionType)31766"
          },
          {
            "astId": 31778,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "unsafeEffectiveMultiplier",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 31780,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "unsafeBaseTokenExchangeRate",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(UintSet)3192_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3191,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2903_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)2717_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 2716,
            "contract": "contracts/rewards/StakingRewards.sol:StakingRewards",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)2453_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}