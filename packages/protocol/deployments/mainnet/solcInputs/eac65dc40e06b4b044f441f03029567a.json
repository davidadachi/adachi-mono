{
  "language": "Solidity",
  "sources": {
    "contracts/cake/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IAccessControl.sol\";\n\n/// @title Cake access control\n/// @author landakram\n/// @notice This contact centralizes contract-to-contract access control using a simple\n/// access-control list. There are two types of actors: operators and admins. Operators\n/// are callers involved in a regular end-user tx. This would likely be another Goldfinch\n/// contract for which the current contract is a dependency. Admins are callers allowed\n/// for specific admin actions (like changing parameters, topping up funds, etc.).\ncontract AccessControl is Initializable, IAccessControl {\n  /// @dev Mapping from contract address to contract admin;\n  mapping(address => address) public admins;\n\n  function initialize(address admin) public initializer {\n    admins[address(this)] = admin;\n    emit AdminSet(address(this), admin);\n  }\n\n  /// @inheritdoc IAccessControl\n  function setAdmin(address resource, address admin) external {\n    requireSuperAdmin(msg.sender);\n    admins[resource] = admin;\n    emit AdminSet(resource, admin);\n  }\n\n  /// @inheritdoc IAccessControl\n  function requireAdmin(address resource, address accessor) public view {\n    if (accessor == address(0)) revert ZeroAddress();\n    bool isAdmin = admins[resource] == accessor;\n    if (!isAdmin) revert RequiresAdmin(resource, accessor);\n  }\n\n  /// @inheritdoc IAccessControl\n  function requireSuperAdmin(address accessor) public view {\n    // The super admin is the admin of this AccessControl contract\n    requireAdmin({resource: address(this), accessor: accessor});\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/// @title Cake access control\n/// @author landakram\n/// @notice This contact centralizes contract-to-contract access control using a simple\n/// access-control list. There are two types of actors: operators and admins. Operators\n/// are callers involved in a regular end-user tx. This would likely be another Goldfinch\n/// contract for which the current contract is a dependency. Admins are callers allowed\n/// for specific admin actions (like changing parameters, topping up funds, etc.).\ninterface IAccessControl {\n  error RequiresAdmin(address resource, address accessor);\n  error ZeroAddress();\n\n  event AdminSet(address indexed resource, address indexed admin);\n\n  /// @notice Set an admin for a given resource\n  /// @param resource An address which with `admin` should be allowed to administer\n  /// @param admin An address which should be allowed to administer `resource`\n  /// @dev This method is only callable by the super-admin (the admin of this AccessControl\n  ///   contract)\n  function setAdmin(address resource, address admin) external;\n\n  /// @notice Require a valid admin for a given resource\n  /// @param resource An address that `accessor` is attempting to access\n  /// @param accessor An address on which to assert access control checks\n  /// @dev This method reverts when `accessor` is not a valid admin\n  function requireAdmin(address resource, address accessor) external view;\n\n  /// @notice Require a super-admin. A super-admin is an admin of this AccessControl contract.\n  /// @param accessor An address on which to assert access control checks\n  /// @dev This method reverts when `accessor` is not a valid super-admin\n  function requireSuperAdmin(address accessor) external view;\n}\n"
    },
    "contracts/cake/Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {AccessControl} from \"./AccessControl.sol\";\nimport {IRouter} from \"../interfaces/IRouter.sol\";\n\nimport \"./Routing.sol\" as Routing;\n\n/// @title Router\n/// @author landakram\n/// @notice This contract provides service discovery for contracts using the cake framework.\n///   It can be used in conjunction with the convenience methods defined in the `Routing.Context`\n///   and `Routing.Keys` libraries.\ncontract Router is Initializable, IRouter {\n  /// @notice Mapping of keys to contract addresses. Keys are the first 4 bytes of the keccak of\n  ///   the contract's name. See Routing.sol for all options.\n  mapping(bytes4 => address) public contracts;\n\n  function initialize(AccessControl accessControl) public initializer {\n    contracts[Routing.Keys.AccessControl] = address(accessControl);\n  }\n\n  /// @notice Associate a routing key to a contract address\n  /// @dev This function is only callable by the Router admin\n  /// @param key A routing key (defined in the `Routing.Keys` libary)\n  /// @param addr A contract address\n  function setContract(bytes4 key, address addr) public {\n    AccessControl accessControl = AccessControl(contracts[Routing.Keys.AccessControl]);\n    accessControl.requireAdmin(address(this), msg.sender);\n    contracts[key] = addr;\n    emit SetContract(key, addr);\n  }\n}\n"
    },
    "contracts/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/// @title IRouter\n/// @author landakram\n/// @notice This contract provides service discovery for contracts using the cake framework.\n///   It can be used in conjunction with the convenience methods defined in the `Routing.Context`\n///   and `Routing.Keys` libraries.\ninterface IRouter {\n  event SetContract(bytes4 indexed key, address indexed addr);\n\n  /// @notice Associate a routing key to a contract address\n  /// @dev This function is only callable by the Router admin\n  /// @param key A routing key (defined in the `Routing.Keys` libary)\n  /// @param addr A contract address\n  function setContract(bytes4 key, address addr) external;\n}\n"
    },
    "contracts/cake/Routing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable const-name-snakecase\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n\nimport {IMembershipVault} from \"../interfaces/IMembershipVault.sol\";\nimport {IGFILedger} from \"../interfaces/IGFILedger.sol\";\nimport {ICapitalLedger} from \"../interfaces/ICapitalLedger.sol\";\nimport {IMembershipDirector} from \"../interfaces/IMembershipDirector.sol\";\nimport {IMembershipOrchestrator} from \"../interfaces/IMembershipOrchestrator.sol\";\nimport {IMembershipLedger} from \"../interfaces/IMembershipLedger.sol\";\nimport {IMembershipCollector} from \"../interfaces/IMembershipCollector.sol\";\n\nimport {ISeniorPool} from \"../interfaces/ISeniorPool.sol\";\nimport {IPoolTokens} from \"../interfaces/IPoolTokens.sol\";\nimport {IStakingRewards} from \"../interfaces/IStakingRewards.sol\";\n\nimport {IERC20Splitter} from \"../interfaces/IERC20Splitter.sol\";\nimport {Context as ContextContract} from \"./Context.sol\";\nimport {IAccessControl} from \"../interfaces/IAccessControl.sol\";\n\nimport {Router} from \"./Router.sol\";\n\n/// @title Routing.Keys\n/// @notice This library is used to define routing keys used by `Router`.\n/// @dev We use uints instead of enums for several reasons. First, keys can be re-ordered\n///   or removed. This is useful when routing keys are deprecated; they can be moved to a\n///   different section of the file. Second, other libraries or contracts can define their\n///   own routing keys independent of this global mapping. This is useful for test contracts.\nlibrary Keys {\n  // Membership\n  bytes4 internal constant MembershipOrchestrator = bytes4(keccak256(\"MembershipOrchestrator\"));\n  bytes4 internal constant MembershipDirector = bytes4(keccak256(\"MembershipDirector\"));\n  bytes4 internal constant GFILedger = bytes4(keccak256(\"GFILedger\"));\n  bytes4 internal constant CapitalLedger = bytes4(keccak256(\"CapitalLedger\"));\n  bytes4 internal constant MembershipCollector = bytes4(keccak256(\"MembershipCollector\"));\n  bytes4 internal constant MembershipLedger = bytes4(keccak256(\"MembershipLedger\"));\n  bytes4 internal constant MembershipVault = bytes4(keccak256(\"MembershipVault\"));\n\n  // Tokens\n  bytes4 internal constant GFI = bytes4(keccak256(\"GFI\"));\n  bytes4 internal constant FIDU = bytes4(keccak256(\"FIDU\"));\n  bytes4 internal constant USDC = bytes4(keccak256(\"USDC\"));\n\n  // Cake\n  bytes4 internal constant AccessControl = bytes4(keccak256(\"AccessControl\"));\n  bytes4 internal constant Router = bytes4(keccak256(\"Router\"));\n\n  // Core\n  bytes4 internal constant ReserveSplitter = bytes4(keccak256(\"ReserveSplitter\"));\n  bytes4 internal constant PoolTokens = bytes4(keccak256(\"PoolTokens\"));\n  bytes4 internal constant SeniorPool = bytes4(keccak256(\"SeniorPool\"));\n  bytes4 internal constant StakingRewards = bytes4(keccak256(\"StakingRewards\"));\n  bytes4 internal constant ProtocolAdmin = bytes4(keccak256(\"ProtocolAdmin\"));\n  bytes4 internal constant PauserAdmin = bytes4(keccak256(\"PauserAdmin\"));\n}\n\n/// @title Routing.Context\n/// @notice This library provides convenience functions for getting contracts from `Router`.\nlibrary Context {\n  function accessControl(ContextContract context) internal view returns (IAccessControl) {\n    return IAccessControl(context.router().contracts(Keys.AccessControl));\n  }\n\n  function membershipVault(ContextContract context) internal view returns (IMembershipVault) {\n    return IMembershipVault(context.router().contracts(Keys.MembershipVault));\n  }\n\n  function capitalLedger(ContextContract context) internal view returns (ICapitalLedger) {\n    return ICapitalLedger(context.router().contracts(Keys.CapitalLedger));\n  }\n\n  function gfiLedger(ContextContract context) internal view returns (IGFILedger) {\n    return IGFILedger(context.router().contracts(Keys.GFILedger));\n  }\n\n  function gfi(ContextContract context) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(context.router().contracts(Keys.GFI));\n  }\n\n  function membershipDirector(ContextContract context) internal view returns (IMembershipDirector) {\n    return IMembershipDirector(context.router().contracts(Keys.MembershipDirector));\n  }\n\n  function membershipOrchestrator(ContextContract context) internal view returns (IMembershipOrchestrator) {\n    return IMembershipOrchestrator(context.router().contracts(Keys.MembershipOrchestrator));\n  }\n\n  function stakingRewards(ContextContract context) internal view returns (IStakingRewards) {\n    return IStakingRewards(context.router().contracts(Keys.StakingRewards));\n  }\n\n  function poolTokens(ContextContract context) internal view returns (IPoolTokens) {\n    return IPoolTokens(context.router().contracts(Keys.PoolTokens));\n  }\n\n  function seniorPool(ContextContract context) internal view returns (ISeniorPool) {\n    return ISeniorPool(context.router().contracts(Keys.SeniorPool));\n  }\n\n  function fidu(ContextContract context) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(context.router().contracts(Keys.FIDU));\n  }\n\n  function usdc(ContextContract context) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(context.router().contracts(Keys.USDC));\n  }\n\n  function reserveSplitter(ContextContract context) internal view returns (IERC20Splitter) {\n    return IERC20Splitter(context.router().contracts(Keys.ReserveSplitter));\n  }\n\n  function membershipLedger(ContextContract context) internal view returns (IMembershipLedger) {\n    return IMembershipLedger(context.router().contracts(Keys.MembershipLedger));\n  }\n\n  function membershipCollector(ContextContract context) internal view returns (IMembershipCollector) {\n    return IMembershipCollector(context.router().contracts(Keys.MembershipCollector));\n  }\n\n  function protocolAdmin(ContextContract context) internal view returns (address) {\n    return context.router().contracts(Keys.ProtocolAdmin);\n  }\n\n  function pauserAdmin(ContextContract context) internal view returns (address) {\n    return context.router().contracts(Keys.PauserAdmin);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"
    },
    "contracts/interfaces/IMembershipVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\n\nstruct Position {\n  // address owning the position\n  address owner;\n  // how much of the position is eligible as of checkpointEpoch\n  uint256 eligibleAmount;\n  // how much of the postion is eligible the epoch after checkpointEpoch\n  uint256 nextEpochAmount;\n  // when the position was first created\n  uint256 createdTimestamp;\n  // epoch of the last checkpoint\n  uint256 checkpointEpoch;\n}\n\n/**\n * @title IMembershipVault\n * @notice Track assets held by owners in a vault, as well as the total held in the vault. Assets\n *  are not accounted for until the next epoch for MEV protection.\n * @author Goldfinch\n */\ninterface IMembershipVault is IERC721Upgradeable {\n  /**\n   * @notice Emitted when an owner has adjusted their holdings in a vault\n   * @param owner the owner increasing their holdings\n   * @param eligibleAmount the new eligible amount\n   * @param nextEpochAmount the new next epoch amount\n   */\n  event AdjustedHoldings(address indexed owner, uint256 eligibleAmount, uint256 nextEpochAmount);\n\n  /**\n   * @notice Emitted when the total within the vault has changed\n   * @param eligibleAmount new current amount\n   * @param nextEpochAmount new next epoch amount\n   */\n  event VaultTotalUpdate(uint256 eligibleAmount, uint256 nextEpochAmount);\n\n  /**\n   * @notice Get the current value of `owner`. This changes depending on the current\n   *  block.timestamp as increased holdings are not accounted for until the subsequent epoch.\n   * @param owner address owning the positions\n   * @return sum of all positions held by an address\n   */\n  function currentValueOwnedBy(address owner) external view returns (uint256);\n\n  /**\n   * @notice Get the total value in the vault as of block.timestamp\n   * @return total value in the vault as of block.timestamp\n   */\n  function currentTotal() external view returns (uint256);\n\n  /**\n   * @notice Get the total value in the vault as of epoch\n   * @return total value in the vault as of epoch\n   */\n  function totalAtEpoch(uint256 epoch) external view returns (uint256);\n\n  /**\n   * @notice Get the position owned by `owner`\n   * @return position owned by `owner`\n   */\n  function positionOwnedBy(address owner) external view returns (Position memory);\n\n  /**\n   * @notice Record an adjustment in holdings. Eligible assets will update this epoch and\n   *  total assets will become eligible the subsequent epoch.\n   * @param owner the owner to checkpoint\n   * @param eligibleAmount amount of points to apply to the current epoch\n   * @param nextEpochAmount amount of points to apply to the next epoch\n   * @return id of the position\n   */\n  function adjustHoldings(\n    address owner,\n    uint256 eligibleAmount,\n    uint256 nextEpochAmount\n  ) external returns (uint256);\n\n  /**\n   * @notice Checkpoint a specific owner & the vault total\n   * @param owner the owner to checkpoint\n   *\n   * @dev to collect rewards, this must be called before `increaseHoldings` or\n   *  `decreaseHoldings`. Those functions must call checkpoint internally\n   *  so the historical data will be lost otherwise.\n   */\n  function checkpoint(address owner) external;\n}\n"
    },
    "contracts/interfaces/IGFILedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IGFILedger {\n  struct Position {\n    // Owner of the position\n    address owner;\n    // Index of the position in the ownership array\n    uint256 ownedIndex;\n    // Amount of GFI held in the position\n    uint256 amount;\n    // When the position was deposited\n    uint256 depositTimestamp;\n  }\n\n  /**\n   * @notice Emitted when a new GFI deposit has been made\n   * @param owner address owning the deposit\n   * @param positionId id for the deposit\n   * @param amount how much GFI was deposited\n   */\n  event GFIDeposit(address indexed owner, uint256 indexed positionId, uint256 amount);\n\n  /**\n   * @notice Emitted when a new GFI withdrawal has been made. If the remaining amount is 0, the position has bee removed\n   * @param owner address owning the withdrawn position\n   * @param positionId id for the position\n   * @param remainingAmount how much GFI is remaining in the position\n   * @param depositTimestamp block.timestamp of the original deposit\n   */\n  event GFIWithdrawal(\n    address indexed owner,\n    uint256 indexed positionId,\n    uint256 withdrawnAmount,\n    uint256 remainingAmount,\n    uint256 depositTimestamp\n  );\n\n  /**\n   * @notice Account for a new deposit by the owner.\n   * @param owner address to account for the deposit\n   * @param amount how much was deposited\n   * @return how much was deposited\n   */\n  function deposit(address owner, uint256 amount) external returns (uint256);\n\n  /**\n   * @notice Account for a new withdraw by the owner.\n   * @param positionId id of the position\n   * @return how much was withdrawn\n   */\n  function withdraw(uint256 positionId) external returns (uint256);\n\n  /**\n   * @notice Account for a new withdraw by the owner.\n   * @param positionId id of the position\n   * @param amount how much to withdraw\n   * @return how much was withdrawn\n   */\n  function withdraw(uint256 positionId, uint256 amount) external returns (uint256);\n\n  /**\n   * @notice Get the number of GFI positions held by an address\n   * @param addr address\n   * @return positions held by address\n   */\n  function balanceOf(address addr) external view returns (uint256);\n\n  /**\n   * @notice Get the owner of a given position.\n   * @param positionId id of the position\n   * @return owner of the position\n   */\n  function ownerOf(uint256 positionId) external view returns (address);\n\n  /**\n   * @notice Total number of positions in the ledger\n   * @return number of positions in the ledger\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @notice Returns a position ID owned by `owner` at a given `index` of its position list\n   * @param owner owner of the positions\n   * @param index index of the owner's balance to get the position ID of\n   * @return position id\n   *\n   * @dev use with {balanceOf} to enumerate all of `owner`'s positions\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n  /**\n   * @dev Returns a position ID at a given `index` of all the positions stored by the contract.\n   * @param index index to get the position ID at\n   * @return token id\n   *\n   * @dev use with {totalSupply} to enumerate all positions\n   */\n  function tokenByIndex(uint256 index) external view returns (uint256);\n\n  /**\n   * @notice Get amount of GFI of `owner`s positions, reporting what is currently\n   *  eligible and the total amount.\n   * @return eligibleAmount GFI amount of positions eligible for rewards\n   * @return totalAmount total GFI amount of positions\n   *\n   * @dev this is used by Membership to determine how much is eligible in\n   *  the current epoch vs the next epoch.\n   */\n  function totalsOf(address owner) external view returns (uint256 eligibleAmount, uint256 totalAmount);\n}\n"
    },
    "contracts/interfaces/ICapitalLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\nenum CapitalAssetType {\n  INVALID,\n  ERC721\n}\n\ninterface ICapitalLedger {\n  /**\n   * @notice Emitted when a new capital erc721 deposit has been made\n   * @param owner address owning the deposit\n   * @param assetAddress address of the deposited ERC721\n   * @param positionId id for the deposit\n   * @param assetTokenId id of the token from the ERC721 `assetAddress`\n   * @param usdcEquivalent usdc equivalent value at the time of deposit\n   */\n  event CapitalERC721Deposit(\n    address indexed owner,\n    address indexed assetAddress,\n    uint256 positionId,\n    uint256 assetTokenId,\n    uint256 usdcEquivalent\n  );\n\n  /**\n   * @notice Emitted when a new ERC721 capital withdrawal has been made\n   * @param owner address owning the deposit\n   * @param positionId id for the capital position\n   * @param assetAddress address of the underlying ERC721\n   * @param depositTimestamp block.timestamp of the original deposit\n   */\n  event CapitalERC721Withdrawal(\n    address indexed owner,\n    uint256 positionId,\n    address assetAddress,\n    uint256 depositTimestamp\n  );\n\n  /// Thrown when called with an invalid asset type for the function. Valid\n  /// types are defined under CapitalAssetType\n  error InvalidAssetType(CapitalAssetType);\n\n  /**\n   * @notice Account for a deposit of `id` for the ERC721 asset at `assetAddress`.\n   * @dev reverts with InvalidAssetType if `assetAddress` is not an ERC721\n   * @param owner address that owns the position\n   * @param assetAddress address of the ERC20 address\n   * @param assetTokenId id of the ERC721 asset to add\n   * @return id of the newly created position\n   */\n  function depositERC721(\n    address owner,\n    address assetAddress,\n    uint256 assetTokenId\n  ) external returns (uint256);\n\n  /**\n   * @notice Get the id of the ERC721 asset held by position `id`. Pair this with\n   *  `assetAddressOf` to get the address & id of the nft.\n   * @dev reverts with InvalidAssetType if `assetAddress` is not an ERC721\n   * @param positionId id of the position\n   * @return id of the underlying ERC721 asset\n   */\n  function erc721IdOf(uint256 positionId) external view returns (uint256);\n\n  /**\n   * @notice Completely withdraw a position\n   * @param positionId id of the position\n   */\n  function withdraw(uint256 positionId) external;\n\n  /**\n   * @notice Get the asset address of the position. Example: For an ERC721 position, this\n   *  returns the address of that ERC721 contract.\n   * @param positionId id of the position\n   * @return asset address of the position\n   */\n  function assetAddressOf(uint256 positionId) external view returns (address);\n\n  /**\n   * @notice Get the owner of a given position.\n   * @param positionId id of the position\n   * @return owner of the position\n   */\n  function ownerOf(uint256 positionId) external view returns (address);\n\n  /**\n   * @notice Total number of positions in the ledger\n   * @return number of positions in the ledger\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @notice Get the number of capital positions held by an address\n   * @param addr address\n   * @return positions held by address\n   */\n  function balanceOf(address addr) external view returns (uint256);\n\n  /**\n   * @notice Returns a position ID owned by `owner` at a given `index` of its position list\n   * @param owner owner of the positions\n   * @param index index of the owner's balance to get the position ID of\n   * @return position id\n   *\n   * @dev use with {balanceOf} to enumerate all of `owner`'s positions\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n  /**\n   * @dev Returns a position ID at a given `index` of all the positions stored by the contract.\n   * @param index index to get the position ID at\n   * @return position id\n   *\n   * @dev use with {totalSupply} to enumerate all positions\n   */\n  function tokenByIndex(uint256 index) external view returns (uint256);\n\n  /**\n   * @notice Get the USDC value of `owner`s positions, reporting what is currently\n   *  eligible and the total amount.\n   * @param owner address owning the positions\n   * @return eligibleAmount USDC value of positions eligible for rewards\n   * @return totalAmount total USDC value of positions\n   *\n   * @dev this is used by Membership to determine how much is eligible in\n   *  the current epoch vs the next epoch.\n   */\n  function totalsOf(address owner) external view returns (uint256 eligibleAmount, uint256 totalAmount);\n}\n"
    },
    "contracts/interfaces/IMembershipDirector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IMembershipDirector {\n  /**\n   * @notice Adjust an `owner`s membership score and position due to the change\n   *  in their GFI and Capital holdings\n   * @param owner address who's holdings changed\n   * @return id of membership position\n   */\n  function consumeHoldingsAdjustment(address owner) external returns (uint256);\n\n  /**\n   * @notice Collect all membership yield enhancements for the owner.\n   * @param owner address to claim rewards for\n   * @return amount of yield enhancements collected\n   */\n  function collectRewards(address owner) external returns (uint256);\n\n  /**\n   * @notice Check how many rewards are claimable for the owner. The return\n   *  value here is how much would be retrieved by calling `collectRewards`.\n   * @param owner address to calculate claimable rewards for\n   * @return the amount of rewards that could be claimed by the owner\n   */\n  function claimableRewards(address owner) external view returns (uint256);\n\n  /**\n   * @notice Calculate the membership score\n   * @param gfi Amount of gfi\n   * @param capital Amount of capital in USDC\n   * @return membership score\n   */\n  function calculateMembershipScore(uint256 gfi, uint256 capital) external view returns (uint256);\n\n  /**\n   * @notice Get the current score of `owner`\n   * @param owner address to check the score of\n   * @return eligibleScore score that is currently eligible for rewards\n   * @return totalScore score that will be elgible for rewards next epoch\n   */\n  function currentScore(address owner) external view returns (uint256 eligibleScore, uint256 totalScore);\n\n  /**\n   * @notice Get the sum of all member scores that are currently eligible and that will be eligible next epoch\n   * @return eligibleTotal sum of all member scores that are currently eligible\n   * @return nextEpochTotal sum of all member scores that will be eligible next epoch\n   */\n  function totalMemberScores() external view returns (uint256 eligibleTotal, uint256 nextEpochTotal);\n\n  /**\n   * @notice Estimate the score for an existing member, given some changes in GFI and capital\n   * @param memberAddress the member's address\n   * @param gfi the change in gfi holdings, denominated in GFI\n   * @param capital the change in gfi holdings, denominated in USDC\n   * @return score resulting score for the member given the GFI and capital changes\n   */\n  function estimateMemberScore(\n    address memberAddress,\n    int256 gfi,\n    int256 capital\n  ) external view returns (uint256 score);\n\n  /// @notice Finalize all unfinalized epochs. Causes the reserve splitter to distribute\n  ///  if there are unfinalized epochs so all possible rewards are distributed.\n  function finalizeEpochs() external;\n}\n"
    },
    "contracts/interfaces/IMembershipOrchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\nimport {Context} from \"../cake/Context.sol\";\n\nstruct CapitalDeposit {\n  /// Address of the asset being deposited\n  /// @dev must be supported in CapitalAssets.sol\n  address assetAddress;\n  /// Id of the nft\n  uint256 id;\n}\n\nstruct Deposit {\n  /// Amount of gfi to deposit\n  uint256 gfi;\n  /// List of capital deposits\n  CapitalDeposit[] capitalDeposits;\n}\n\nstruct DepositResult {\n  uint256 membershipId;\n  uint256 gfiPositionId;\n  uint256[] capitalPositionIds;\n}\n\nstruct ERC20Withdrawal {\n  uint256 id;\n  uint256 amount;\n}\n\nstruct Withdrawal {\n  /// List of gfi token ids to withdraw\n  ERC20Withdrawal[] gfiPositions;\n  /// List of capital token ids to withdraw\n  uint256[] capitalPositions;\n}\n\n/**\n * @title MembershipOrchestrator\n * @notice Externally facing gateway to all Goldfinch membership functionality.\n * @author Goldfinch\n */\ninterface IMembershipOrchestrator {\n  /**\n   * @notice Deposit multiple assets defined in `multiDeposit`. Assets can include GFI, Staked Fidu,\n   *  and others.\n   * @param deposit struct describing all the assets to deposit\n   * @return ids all of the ids of the created depoits, in the same order as deposit. If GFI is\n   *  present, it will be the first id.\n   */\n  function deposit(Deposit calldata deposit) external returns (DepositResult memory);\n\n  /**\n   * @notice Withdraw multiple assets defined in `multiWithdraw`. Assets can be GFI or capital\n   *  positions ids. Caller must have been permitted to act upon all of the positions.\n   * @param withdrawal all of the GFI and Capital ids to withdraw\n   */\n  function withdraw(Withdrawal calldata withdrawal) external;\n\n  /**\n   * @notice Collect all membership rewards for the caller.\n   * @return how many rewards were collected and sent to caller\n   */\n  function collectRewards() external returns (uint256);\n\n  /**\n   * @notice Check how many rewards are claimable at this moment in time for caller.\n   * @param addr the address to check claimable rewards for\n   * @return how many rewards could be claimed by a call to `collectRewards`\n   */\n  function claimableRewards(address addr) external view returns (uint256);\n\n  /**\n   * @notice Check the voting power of a given address\n   * @param addr the address to check the voting power of\n   * @return the voting power\n   */\n  function votingPower(address addr) external view returns (uint256);\n\n  /**\n   * @notice Get all GFI in Membership held by `addr`. This returns the current eligible amount and the\n   *  total amount of GFI.\n   * @param addr the owner\n   * @return eligibleAmount how much GFI is currently eligible for rewards\n   * @return totalAmount how much GFI is currently eligible for rewards\n   */\n  function totalGFIHeldBy(address addr) external view returns (uint256 eligibleAmount, uint256 totalAmount);\n\n  /**\n   * @notice Get all capital, denominated in USDC, in Membership held by `addr`. This returns the current\n   *  eligible amount and the total USDC value of capital.\n   * @param addr the owner\n   * @return eligibleAmount how much USDC of capital is currently eligible for rewards\n   * @return totalAmount how much  USDC of capital is currently eligible for rewards\n   */\n  function totalCapitalHeldBy(address addr) external view returns (uint256 eligibleAmount, uint256 totalAmount);\n\n  /**\n   * @notice Get the member score of `addr`\n   * @param addr the owner\n   * @return eligibleScore the currently eligible score\n   * @return totalScore the total score that will be eligible next epoch\n   *\n   * @dev if eligibleScore == totalScore then there are no changes between now and the next epoch\n   */\n  function memberScoreOf(address addr) external view returns (uint256 eligibleScore, uint256 totalScore);\n\n  /**\n   * @notice Estimate rewards for a given epoch. For epochs at or before lastFinalizedEpoch\n   *  this will be the fixed, accurate reward for the epoch. For the current and other\n   *  non-finalized epochs, this will be the value as if the epoch were finalized in that\n   *  moment.\n   * @param epoch epoch to estimate the rewards of\n   * @return rewards associated with `epoch`\n   */\n  function estimateRewardsFor(uint256 epoch) external view returns (uint256);\n\n  /**\n   * @notice Calculate what the Membership Score would be if a `gfi` amount of GFI and `capital` amount\n   *  of Capital denominated in USDC were deposited.\n   * @param gfi amount of GFI to estimate with\n   * @param capital amount of capital to estimate with, denominated in USDC\n   * @return score the resulting score\n   */\n  function calculateMemberScore(uint256 gfi, uint256 capital) external view returns (uint256 score);\n\n  /**\n   * @notice Get the sum of all member scores that are currently eligible and that will be eligible next epoch\n   * @return eligibleTotal sum of all member scores that are currently eligible\n   * @return nextEpochTotal sum of all member scores that will be eligible next epoch\n   */\n  function totalMemberScores() external view returns (uint256 eligibleTotal, uint256 nextEpochTotal);\n\n  /**\n   * @notice Estimate the score for an existing member, given some changes in GFI and capital\n   * @param memberAddress the member's address\n   * @param gfi the change in gfi holdings, denominated in GFI\n   * @param capital the change in gfi holdings, denominated in USDC\n   * @return score resulting score for the member given the GFI and capital changes\n   */\n  function estimateMemberScore(\n    address memberAddress,\n    int256 gfi,\n    int256 capital\n  ) external view returns (uint256 score);\n\n  /// @notice Finalize all unfinalized epochs. Causes the reserve splitter to distribute\n  ///  if there are unfinalized epochs so all possible rewards are distributed.\n  function finalizeEpochs() external;\n}\n"
    },
    "contracts/interfaces/IMembershipLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IMembershipLedger {\n  /**\n   * @notice Set `addr`s allocated rewards back to 0\n   * @param addr address to reset rewards on\n   */\n  function resetRewards(address addr) external;\n\n  /**\n   * @notice Allocate `amount` rewards for `addr` but do not send them\n   * @param addr address to distribute rewards to\n   * @param amount amount of rewards to allocate for `addr`\n   * @return rewards total allocated to `addr`\n   */\n  function allocateRewardsTo(address addr, uint256 amount) external returns (uint256 rewards);\n\n  /**\n   * @notice Get the rewards allocated to a certain `addr`\n   * @param addr the address to check pending rewards for\n   * @return rewards pending rewards for `addr`\n   */\n  function getPendingRewardsFor(address addr) external view returns (uint256 rewards);\n\n  /**\n   * @notice Get the alpha parameter for the cobb douglas function. Will always be in (0,1).\n   * @return numerator numerator for the alpha param\n   * @return denominator denominator for the alpha param\n   */\n  function alpha() external view returns (uint128 numerator, uint128 denominator);\n}\n"
    },
    "contracts/interfaces/IMembershipCollector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IMembershipCollector {\n  /// @notice Have the collector distribute `amount` of Fidu to `addr`\n  /// @param addr address to distribute to\n  /// @param amount amount to distribute\n  function distributeFiduTo(address addr, uint256 amount) external;\n\n  /// @notice Get the last epoch finalized by the collector. This means the\n  ///  collector will no longer add rewards to the epoch.\n  /// @return the last finalized epoch\n  function lastFinalizedEpoch() external view returns (uint256);\n\n  /// @notice Get the rewards associated with `epoch`. This amount may change\n  ///  until `epoch` has been finalized (is less than or equal to getLastFinalizedEpoch)\n  /// @return rewards associated with `epoch`\n  function rewardsForEpoch(uint256 epoch) external view returns (uint256);\n\n  /// @notice Estimate rewards for a given epoch. For epochs at or before lastFinalizedEpoch\n  ///  this will be the fixed, accurate reward for the epoch. For the current and other\n  ///  non-finalized epochs, this will be the value as if the epoch were finalized in that\n  ///  moment.\n  /// @param epoch epoch to estimate the rewards of\n  /// @return rewards associated with `epoch`\n  function estimateRewardsFor(uint256 epoch) external view returns (uint256);\n\n  /// @notice Finalize all unfinalized epochs. Causes the reserve splitter to distribute\n  ///  if there are unfinalized epochs so all possible rewards are distributed.\n  function finalizeEpochs() external;\n}\n"
    },
    "contracts/interfaces/ISeniorPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./ITranchedPool.sol\";\n\nabstract contract ISeniorPool {\n  uint256 public sharePrice;\n  uint256 public totalLoansOutstanding;\n  uint256 public totalWritedowns;\n\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\n\n  function depositWithPermit(\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external virtual returns (uint256 depositShares);\n\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\n\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\n\n  function sweepToCompound() public virtual;\n\n  function sweepFromCompound() public virtual;\n\n  function invest(ITranchedPool pool) public virtual;\n\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\n\n  function redeem(uint256 tokenId) public virtual;\n\n  function writedown(uint256 tokenId) public virtual;\n\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\n\n  function assets() public view virtual returns (uint256);\n\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPoolTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./openzeppelin/IERC721.sol\";\n\ninterface IPoolTokens is IERC721 {\n  event TokenMinted(\n    address indexed owner,\n    address indexed pool,\n    uint256 indexed tokenId,\n    uint256 amount,\n    uint256 tranche\n  );\n\n  event TokenRedeemed(\n    address indexed owner,\n    address indexed pool,\n    uint256 indexed tokenId,\n    uint256 principalRedeemed,\n    uint256 interestRedeemed,\n    uint256 tranche\n  );\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\n\n  struct TokenInfo {\n    address pool;\n    uint256 tranche;\n    uint256 principalAmount;\n    uint256 principalRedeemed;\n    uint256 interestRedeemed;\n  }\n\n  struct MintParams {\n    uint256 principalAmount;\n    uint256 tranche;\n  }\n\n  function mint(MintParams calldata params, address to) external returns (uint256);\n\n  function redeem(\n    uint256 tokenId,\n    uint256 principalRedeemed,\n    uint256 interestRedeemed\n  ) external;\n\n  function withdrawPrincipal(uint256 tokenId, uint256 principalAmount) external;\n\n  function burn(uint256 tokenId) external;\n\n  function onPoolCreated(address newPool) external;\n\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\n\n  function validPool(address sender) external view returns (bool);\n\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\npragma experimental ABIEncoderV2;\n\nimport {IERC721} from \"./openzeppelin/IERC721.sol\";\nimport {IERC721Metadata} from \"./openzeppelin/IERC721Metadata.sol\";\nimport {IERC721Enumerable} from \"./openzeppelin/IERC721Enumerable.sol\";\n\ninterface IStakingRewards is IERC721, IERC721Metadata, IERC721Enumerable {\n  function getPosition(uint256 tokenId) external view returns (StakedPosition memory position);\n\n  function unstake(uint256 tokenId, uint256 amount) external;\n\n  function addToStake(uint256 tokenId, uint256 amount) external;\n\n  function stakedBalanceOf(uint256 tokenId) external view returns (uint256);\n\n  function depositToCurveAndStakeFrom(\n    address nftRecipient,\n    uint256 fiduAmount,\n    uint256 usdcAmount\n  ) external;\n\n  function kick(uint256 tokenId) external;\n\n  function accumulatedRewardsPerToken() external view returns (uint256);\n\n  function lastUpdateTime() external view returns (uint256);\n\n  /* ========== EVENTS ========== */\n\n  event RewardAdded(uint256 reward);\n  event Staked(\n    address indexed user,\n    uint256 indexed tokenId,\n    uint256 amount,\n    StakedPositionType positionType,\n    uint256 baseTokenExchangeRate\n  );\n  event DepositedAndStaked(address indexed user, uint256 depositedAmount, uint256 indexed tokenId, uint256 amount);\n  event DepositedToCurve(address indexed user, uint256 fiduAmount, uint256 usdcAmount, uint256 tokensReceived);\n  event DepositedToCurveAndStaked(\n    address indexed user,\n    uint256 fiduAmount,\n    uint256 usdcAmount,\n    uint256 indexed tokenId,\n    uint256 amount\n  );\n  event Unstaked(address indexed user, uint256 indexed tokenId, uint256 amount, StakedPositionType positionType);\n  event UnstakedMultiple(address indexed user, uint256[] tokenIds, uint256[] amounts);\n  event UnstakedAndWithdrew(address indexed user, uint256 usdcReceivedAmount, uint256 indexed tokenId, uint256 amount);\n  event UnstakedAndWithdrewMultiple(\n    address indexed user,\n    uint256 usdcReceivedAmount,\n    uint256[] tokenIds,\n    uint256[] amounts\n  );\n  event RewardPaid(address indexed user, uint256 indexed tokenId, uint256 reward);\n  event RewardsParametersUpdated(\n    address indexed who,\n    uint256 targetCapacity,\n    uint256 minRate,\n    uint256 maxRate,\n    uint256 minRateAtPercent,\n    uint256 maxRateAtPercent\n  );\n  event EffectiveMultiplierUpdated(address indexed who, StakedPositionType positionType, uint256 multiplier);\n}\n\n/// @notice Indicates which ERC20 is staked\nenum StakedPositionType {\n  Fidu,\n  CurveLP\n}\n\nstruct Rewards {\n  uint256 totalUnvested;\n  uint256 totalVested;\n  // @dev DEPRECATED (definition kept for storage slot)\n  //   For legacy vesting positions, this was used in the case of slashing.\n  //   For non-vesting positions, this is unused.\n  uint256 totalPreviouslyVested;\n  uint256 totalClaimed;\n  uint256 startTime;\n  // @dev DEPRECATED (definition kept for storage slot)\n  //   For legacy vesting positions, this is the endTime of the vesting.\n  //   For non-vesting positions, this is 0.\n  uint256 endTime;\n}\n\nstruct StakedPosition {\n  // @notice Staked amount denominated in `stakingToken().decimals()`\n  uint256 amount;\n  // @notice Struct describing rewards owed with vesting\n  Rewards rewards;\n  // @notice Multiplier applied to staked amount when locking up position\n  uint256 leverageMultiplier;\n  // @notice Time in seconds after which position can be unstaked\n  uint256 lockedUntil;\n  // @notice Type of the staked position\n  StakedPositionType positionType;\n  // @notice Multiplier applied to staked amount to denominate in `baseStakingToken().decimals()`\n  // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\n  //  If you need this field, use `safeEffectiveMultiplier()`, which correctly handles old staked positions.\n  uint256 unsafeEffectiveMultiplier;\n  // @notice Exchange rate applied to staked amount to denominate in `baseStakingToken().decimals()`\n  // @dev This field should not be used directly; it may be 0 for staked positions created prior to GIP-1.\n  //  If you need this field, use `safeBaseTokenExchangeRate()`, which correctly handles old staked positions.\n  uint256 unsafeBaseTokenExchangeRate;\n}\n"
    },
    "contracts/interfaces/IERC20Splitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IERC20Splitter {\n  function lastDistributionAt() external view returns (uint256);\n\n  function distribute() external;\n\n  function replacePayees(address[] calldata _payees, uint256[] calldata _shares) external;\n\n  function pendingDistributionFor(address payee) external view returns (uint256);\n}\n"
    },
    "contracts/cake/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport {AccessControl} from \"./AccessControl.sol\";\nimport {Router} from \"./Router.sol\";\nimport \"./Routing.sol\" as Routing;\n\nusing Routing.Context for Context;\n\n/// @title Entry-point for all application-layer contracts.\n/// @author landakram\n/// @notice This contract provides an interface for retrieving other contract addresses and doing access\n///  control.\ncontract Context {\n  /// @notice Used for retrieving other contract addresses.\n  /// @dev This variable is immutable. This is done to save gas, as it is expected to be referenced\n  /// in every end-user call with a call-chain length > 0. Note that it is written into the contract\n  /// bytecode at contract creation time, so if the contract is deployed as the implementation for proxies,\n  /// every proxy will share the same Router address.\n  Router public immutable router;\n\n  constructor(Router _router) {\n    router = _router;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ITranchedPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {IV2CreditLine} from \"./IV2CreditLine.sol\";\n\nabstract contract ITranchedPool {\n  IV2CreditLine public creditLine;\n  uint256 public createdAt;\n  enum Tranches {\n    Reserved,\n    Senior,\n    Junior\n  }\n\n  struct TrancheInfo {\n    uint256 id;\n    uint256 principalDeposited;\n    uint256 principalSharePrice;\n    uint256 interestSharePrice;\n    uint256 lockedUntil;\n  }\n\n  struct PoolSlice {\n    TrancheInfo seniorTranche;\n    TrancheInfo juniorTranche;\n    uint256 totalInterestAccrued;\n    uint256 principalDeployed;\n  }\n\n  function initialize(\n    address _config,\n    address _borrower,\n    uint256 _juniorFeePercent,\n    uint256 _limit,\n    uint256 _interestApr,\n    uint256 _paymentPeriodInDays,\n    uint256 _termInDays,\n    uint256 _lateFeeApr,\n    uint256 _principalGracePeriodInDays,\n    uint256 _fundableAt,\n    uint256[] calldata _allowedUIDTypes\n  ) public virtual;\n\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\n\n  function pay(uint256 amount) external virtual;\n\n  function poolSlices(uint256 index) external view virtual returns (PoolSlice memory);\n\n  function lockJuniorCapital() external virtual;\n\n  function lockPool() external virtual;\n\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\n\n  function totalJuniorDeposits() external view virtual returns (uint256);\n\n  function drawdown(uint256 amount) external virtual;\n\n  function setFundableAt(uint256 timestamp) external virtual;\n\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\n\n  function assess() external virtual;\n\n  function depositWithPermit(\n    uint256 tranche,\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external virtual returns (uint256 tokenId);\n\n  function availableToWithdraw(uint256 tokenId)\n    external\n    view\n    virtual\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\n\n  function withdraw(uint256 tokenId, uint256 amount)\n    external\n    virtual\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\n\n  function withdrawMax(uint256 tokenId)\n    external\n    virtual\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\n\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\n\n  function numSlices() external view virtual returns (uint256);\n}\n"
    },
    "contracts/interfaces/IV2CreditLine.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./ICreditLine.sol\";\n\nabstract contract IV2CreditLine is ICreditLine {\n  function principal() external view virtual returns (uint256);\n\n  function totalInterestAccrued() external view virtual returns (uint256);\n\n  function termStartTime() external view virtual returns (uint256);\n\n  function setLimit(uint256 newAmount) external virtual;\n\n  function setMaxLimit(uint256 newAmount) external virtual;\n\n  function setBalance(uint256 newBalance) external virtual;\n\n  function setPrincipal(uint256 _principal) external virtual;\n\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\n\n  function drawdown(uint256 amount) external virtual;\n\n  function assess()\n    external\n    virtual\n    returns (\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function initialize(\n    address _config,\n    address owner,\n    address _borrower,\n    uint256 _limit,\n    uint256 _interestApr,\n    uint256 _paymentPeriodInDays,\n    uint256 _termInDays,\n    uint256 _lateFeeApr,\n    uint256 _principalGracePeriodInDays\n  ) public virtual;\n\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\n\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\n\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\n\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\n\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\n\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\n\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\n\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\n}\n"
    },
    "contracts/interfaces/ICreditLine.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface ICreditLine {\n  function borrower() external view returns (address);\n\n  function limit() external view returns (uint256);\n\n  function maxLimit() external view returns (uint256);\n\n  function interestApr() external view returns (uint256);\n\n  function paymentPeriodInDays() external view returns (uint256);\n\n  function principalGracePeriodInDays() external view returns (uint256);\n\n  function termInDays() external view returns (uint256);\n\n  function lateFeeApr() external view returns (uint256);\n\n  function isLate() external view returns (bool);\n\n  function withinPrincipalGracePeriod() external view returns (bool);\n\n  // Accounting variables\n  function balance() external view returns (uint256);\n\n  function interestOwed() external view returns (uint256);\n\n  function principalOwed() external view returns (uint256);\n\n  function termEndTime() external view returns (uint256);\n\n  function nextDueTime() external view returns (uint256);\n\n  function interestAccruedAsOf() external view returns (uint256);\n\n  function lastFullPaymentTime() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC721.sol": {
      "content": "pragma solidity >=0.6.2;\n\n// This file copied from OZ, but with the version pragma updated to use >= & reference other >= pragma interfaces.\n// NOTE: Modified to reference our updated pragma version of IERC165\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n  /**\n   * @dev Returns the number of NFTs in ``owner``'s account.\n   */\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  /**\n   * @dev Returns the owner of the NFT specified by `tokenId`.\n   */\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  /**\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n   * another (`to`).\n   *\n   *\n   *\n   * Requirements:\n   * - `from`, `to` cannot be zero.\n   * - `tokenId` must be owned by `from`.\n   * - If the caller is not `from`, it must be have been allowed to move this\n   * NFT by either {approve} or {setApprovalForAll}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external;\n\n  /**\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n   * another (`to`).\n   *\n   * Requirements:\n   * - If the caller is not `from`, it must be approved to move this NFT by\n   * either {approve} or {setApprovalForAll}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external;\n\n  function approve(address to, uint256 tokenId) external;\n\n  function getApproved(uint256 tokenId) external view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) external;\n\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC165.sol": {
      "content": "pragma solidity >=0.6.0;\n\n// This file copied from OZ, but with the version pragma updated to use >=.\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC721Metadata.sol": {
      "content": "pragma solidity >=0.6.2;\n\n// This file copied from OZ, but with the version pragma updated to use >=.\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC721Enumerable.sol": {
      "content": "pragma solidity >=0.6.2;\n\n// This file copied from OZ, but with the version pragma updated to use >=.\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n  function totalSupply() external view returns (uint256);\n\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/protocol/core/MembershipOrchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n// solhint-disable-next-line max-line-length\nimport {SafeERC20Upgradeable as SafeERC20} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721ReceiverUpgradeable.sol\";\n\nimport {Base} from \"../../cake/Base.sol\";\nimport {PausableUpgradeable} from \"../../cake/Pausable.sol\";\nimport {Context} from \"../../cake/Context.sol\";\nimport \"../../cake/Routing.sol\" as Routing;\n\nimport {IMembershipDirector} from \"../../interfaces/IMembershipDirector.sol\";\nimport \"../../interfaces/IMembershipOrchestrator.sol\";\nimport {CapitalAssetType} from \"../../interfaces/ICapitalLedger.sol\";\n\nimport {Epochs} from \"./membership/Epochs.sol\";\nimport {MembershipScores} from \"./membership/MembershipScores.sol\";\nimport {CapitalAssets} from \"./membership/assets/CapitalAssets.sol\";\n\nusing Routing.Context for Context;\nusing SafeERC20 for IERC20Upgradeable;\n\n/**\n * @title MembershipOrchestrator\n * @notice Externally facing gateway to all Goldfinch membership functionality.\n * @author Goldfinch\n */\ncontract MembershipOrchestrator is\n  IMembershipOrchestrator,\n  Base,\n  Initializable,\n  ReentrancyGuardUpgradeable,\n  PausableUpgradeable,\n  IERC721ReceiverUpgradeable\n{\n  /// Thrown when anything is called with an unsupported asset\n  error UnsupportedAssetAddress(address addr);\n  /// Thrown when a non-owner attempts to withdraw an asset\n  error CannotWithdrawUnownedAsset(address nonOwner);\n  /// Thrown when attempting to withdraw nothing\n  error MustWithdrawSomething();\n  /// Thrown when withdrawing for multiple owners\n  error CannotWithdrawForMultipleOwners();\n  /// Thrown when withdrawing for a position held by address 0\n  error CannotWithdrawForAddress0();\n\n  constructor(Context _context) Base(_context) {}\n\n  /// @notice Initialize the contract\n  function initialize() external initializer {\n    __ReentrancyGuard_init_unchained();\n    __Pausable_init_unchained();\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function deposit(Deposit calldata depositData)\n    external\n    nonReentrant\n    whenNotPaused\n    returns (DepositResult memory result)\n  {\n    if (depositData.gfi > 0) {\n      result.gfiPositionId = _depositGFI(depositData.gfi);\n    }\n\n    uint256 numCapitalDeposits = depositData.capitalDeposits.length;\n\n    result.capitalPositionIds = new uint256[](numCapitalDeposits);\n    for (uint256 i = 0; i < numCapitalDeposits; i++) {\n      CapitalDeposit memory capitalDeposit = depositData.capitalDeposits[i];\n      result.capitalPositionIds[i] = _depositCapitalERC721(capitalDeposit.assetAddress, capitalDeposit.id);\n    }\n\n    result.membershipId = context.membershipDirector().consumeHoldingsAdjustment(msg.sender);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function withdraw(Withdrawal calldata withdrawal) external nonReentrant whenNotPaused {\n    // Find the owner that is being withdrawn for. The owner must be the same across all of the\n    // positions so the membership vault can be updated.\n    address owner = address(0);\n    if (withdrawal.gfiPositions.length > 0) {\n      owner = context.gfiLedger().ownerOf(withdrawal.gfiPositions[0].id);\n    } else if (withdrawal.capitalPositions.length > 0) {\n      owner = context.capitalLedger().ownerOf(withdrawal.capitalPositions[0]);\n    }\n\n    if (owner == address(0)) revert MustWithdrawSomething();\n\n    for (uint256 i = 0; i < withdrawal.gfiPositions.length; i++) {\n      uint256 positionId = withdrawal.gfiPositions[i].id;\n      address positionOwner = context.gfiLedger().ownerOf(positionId);\n\n      if (positionOwner == address(0)) revert CannotWithdrawForAddress0();\n      if (positionOwner != owner) revert CannotWithdrawForMultipleOwners();\n\n      _withdrawGFI(positionId, withdrawal.gfiPositions[i].amount);\n    }\n\n    for (uint256 i = 0; i < withdrawal.capitalPositions.length; i++) {\n      uint256 positionId = withdrawal.capitalPositions[i];\n      address positionOwner = context.capitalLedger().ownerOf(positionId);\n\n      if (positionOwner == address(0)) revert CannotWithdrawForAddress0();\n      if (positionOwner != owner) revert CannotWithdrawForMultipleOwners();\n\n      _withdrawCapital(positionId);\n    }\n\n    context.membershipDirector().consumeHoldingsAdjustment(owner);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function collectRewards() external nonReentrant whenNotPaused returns (uint256) {\n    return context.membershipDirector().collectRewards(msg.sender);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function claimableRewards(address addr) external view returns (uint256) {\n    return context.membershipDirector().claimableRewards(addr);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function votingPower(address addr) external view returns (uint256) {\n    (, uint256 total) = context.gfiLedger().totalsOf(addr);\n    return total;\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function totalGFIHeldBy(address addr) external view returns (uint256 eligibleAmount, uint256 totalAmount) {\n    return context.gfiLedger().totalsOf(addr);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function totalCapitalHeldBy(address addr) external view returns (uint256 eligibleAmount, uint256 totalAmount) {\n    return context.capitalLedger().totalsOf(addr);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function memberScoreOf(address addr) external view returns (uint256 eligibleScore, uint256 totalScore) {\n    return context.membershipDirector().currentScore(addr);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function estimateRewardsFor(uint256 epoch) external view returns (uint256) {\n    return context.membershipCollector().estimateRewardsFor(epoch);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function calculateMemberScore(uint256 gfi, uint256 capital) external view returns (uint256) {\n    return context.membershipDirector().calculateMembershipScore(gfi, capital);\n  }\n\n  function finalizeEpochs() external nonReentrant whenNotPaused {\n    return context.membershipDirector().finalizeEpochs();\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function estimateMemberScore(\n    address memberAddress,\n    int256 gfi,\n    int256 capital\n  ) external view returns (uint256 score) {\n    return context.membershipDirector().estimateMemberScore(memberAddress, gfi, capital);\n  }\n\n  /// @inheritdoc IMembershipOrchestrator\n  function totalMemberScores() external view returns (uint256 eligibleTotal, uint256 nextEpochTotal) {\n    return context.membershipDirector().totalMemberScores();\n  }\n\n  /// @inheritdoc IERC721ReceiverUpgradeable\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure returns (bytes4) {\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _depositGFI(uint256 amount) private returns (uint256) {\n    uint256 balanceBefore = context.gfi().balanceOf(address(this));\n\n    context.gfi().safeTransferFrom(msg.sender, address(this), amount);\n\n    context.gfi().approve(address(context.gfiLedger()), amount);\n    uint256 positionId = context.gfiLedger().deposit(msg.sender, amount);\n\n    assert(context.gfi().balanceOf(address(this)) == balanceBefore);\n\n    return positionId;\n  }\n\n  function _depositCapitalERC721(address assetAddress, uint256 id) private returns (uint256) {\n    if (CapitalAssets.getSupportedType(context, assetAddress) == CapitalAssetType.INVALID) {\n      revert UnsupportedAssetAddress(assetAddress);\n    }\n\n    IERC721Upgradeable asset = IERC721Upgradeable(assetAddress);\n\n    asset.safeTransferFrom(msg.sender, address(this), id);\n\n    asset.approve(address(context.capitalLedger()), id);\n    uint256 positionId = context.capitalLedger().depositERC721(msg.sender, assetAddress, id);\n\n    assert(asset.ownerOf(id) != address(this));\n\n    return positionId;\n  }\n\n  function _withdrawGFI(uint256 positionId) private returns (uint256) {\n    if (context.gfiLedger().ownerOf(positionId) != msg.sender) {\n      revert CannotWithdrawUnownedAsset(msg.sender);\n    }\n\n    return context.gfiLedger().withdraw(positionId);\n  }\n\n  function _withdrawGFI(uint256 positionId, uint256 amount) private returns (uint256) {\n    if (context.gfiLedger().ownerOf(positionId) != msg.sender) {\n      revert CannotWithdrawUnownedAsset(msg.sender);\n    }\n\n    return context.gfiLedger().withdraw(positionId, amount);\n  }\n\n  function _withdrawCapital(uint256 positionId) private {\n    if (context.capitalLedger().ownerOf(positionId) != msg.sender) {\n      revert CannotWithdrawUnownedAsset(msg.sender);\n    }\n\n    context.capitalLedger().withdraw(positionId);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721ReceiverUpgradeable.sol\";\n"
    },
    "contracts/cake/Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport {Context} from \"./Context.sol\";\nimport \"./Routing.sol\" as Routing;\n\nusing Routing.Context for Context;\n\n/// @title Base contract for application-layer\n/// @author landakram\n/// @notice This base contract is what all application-layer contracts should inherit from.\n///  It provides `Context`, as well as some convenience functions for working with it and\n///  using access control. All public methods on the inheriting contract should likely\n///  use one of the modifiers to assert valid callers.\nabstract contract Base {\n  error RequiresOperator(address resource, address accessor);\n  error ZeroAddress();\n\n  /// @dev this is safe for proxies as immutable causes the context to be written to\n  ///  bytecode on deployment. The proxy then treats this as a constant.\n  Context immutable context;\n\n  constructor(Context _context) {\n    context = _context;\n  }\n\n  modifier onlyOperator(bytes4 operatorId) {\n    requireOperator(operatorId, msg.sender);\n    _;\n  }\n\n  modifier onlyOperators(bytes4[2] memory operatorIds) {\n    requireAnyOperator(operatorIds, msg.sender);\n    _;\n  }\n\n  modifier onlyAdmin() {\n    context.accessControl().requireAdmin(address(this), msg.sender);\n    _;\n  }\n\n  function requireAnyOperator(bytes4[2] memory operatorIds, address accessor) private view {\n    if (accessor == address(0)) revert ZeroAddress();\n\n    bool validOperator = isOperator(operatorIds[0], accessor) || isOperator(operatorIds[1], accessor);\n\n    if (!validOperator) revert RequiresOperator(address(this), accessor);\n  }\n\n  function requireOperator(bytes4 operatorId, address accessor) private view {\n    if (accessor == address(0)) revert ZeroAddress();\n    if (!isOperator(operatorId, accessor)) revert RequiresOperator(address(this), accessor);\n  }\n\n  function isOperator(bytes4 operatorId, address accessor) private view returns (bool) {\n    return context.router().contracts(operatorId) == accessor;\n  }\n}\n"
    },
    "contracts/cake/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n// solhint-disable-next-line max-line-length\nimport {PausableUpgradeable as OZPausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport {Base} from \"./Base.sol\";\nimport \"./Routing.sol\" as Routing;\n\nabstract contract PausableUpgradeable is Base, OZPausableUpgradeable {\n  function pause() external onlyOperators([Routing.Keys.PauserAdmin, Routing.Keys.ProtocolAdmin]) {\n    _pause();\n  }\n\n  function unpause() external onlyOperators([Routing.Keys.PauserAdmin, Routing.Keys.ProtocolAdmin]) {\n    _unpause();\n  }\n}\n"
    },
    "contracts/protocol/core/membership/Epochs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary Epochs {\n  uint256 internal constant EPOCH_SECONDS = 7 days;\n\n  /**\n   * @notice Get the epoch containing the timestamp `s`\n   * @param s the timestamp\n   * @return corresponding epoch\n   */\n  function fromSeconds(uint256 s) internal pure returns (uint256) {\n    return s / EPOCH_SECONDS;\n  }\n\n  /**\n   * @notice Get the current epoch for the block.timestamp\n   * @return current epoch\n   */\n  function current() internal view returns (uint256) {\n    return fromSeconds(block.timestamp);\n  }\n\n  /**\n   * @notice Get the start timestamp for the current epoch\n   * @return current epoch start timestamp\n   */\n  function currentEpochStartTimestamp() internal view returns (uint256) {\n    return startOf(current());\n  }\n\n  /**\n   * @notice Get the previous epoch given block.timestamp\n   * @return previous epoch\n   */\n  function previous() internal view returns (uint256) {\n    return current() - 1;\n  }\n\n  /**\n   * @notice Get the next epoch given block.timestamp\n   * @return next epoch\n   */\n  function next() internal view returns (uint256) {\n    return current() + 1;\n  }\n\n  /**\n   * @notice Get the Unix timestamp of the start of `epoch`\n   * @param epoch the epoch\n   * @return unix timestamp\n   */\n  function startOf(uint256 epoch) internal pure returns (uint256) {\n    return epoch * EPOCH_SECONDS;\n  }\n}\n"
    },
    "contracts/protocol/core/membership/MembershipScores.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {SafeCastUpgradeable as SafeCast} from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport \"./MembershipFixedMath.sol\";\n\nusing SafeCast for uint256;\n\nlibrary MembershipScores {\n  uint256 internal constant GFI_MANTISSA = 1e18;\n  uint256 internal constant USDC_MANTISSA = 1e6;\n  uint256 internal constant USDC_TO_GFI_MANTISSA = GFI_MANTISSA / USDC_MANTISSA;\n\n  /**\n   * @notice Calculate a membership score given some amount of `gfi` and `capital`, along\n   *  with some 𝝰 = `alphaNumerator` / `alphaDenominator`.\n   * @param gfi amount of gfi (GFI, 1e18 decimal places)\n   * @param capital amount of capital (USDC, 1e6 decimal places)\n   * @param alphaNumerator alpha param numerator\n   * @param alphaDenominator alpha param denominator\n   * @return membership score with 1e18 decimal places\n   *\n   * @dev 𝝰 must be in the range [0, 1]\n   */\n  function calculateScore(\n    uint256 gfi,\n    uint256 capital,\n    uint256 alphaNumerator,\n    uint256 alphaDenominator\n  ) internal pure returns (uint256) {\n    // Convert capital to the same base units as GFI\n    capital = capital * USDC_TO_GFI_MANTISSA;\n\n    // Score function is:\n    // gfi^𝝰 * capital^(1-𝝰)\n    //    = capital * capital^(-𝝰) * gfi^𝝰\n    //    = capital * (gfi / capital)^𝝰\n    //    = capital * (e ^ (ln(gfi / capital))) ^ 𝝰\n    //    = capital * e ^ (𝝰 * ln(gfi / capital))     (1)\n    // or\n    //    = capital / ( 1 / e ^ (𝝰 * ln(gfi / capital)))\n    //    = capital / (e ^ (𝝰 * ln(gfi / capital)) ^ -1)\n    //    = capital / e ^ (𝝰 * -1 * ln(gfi / capital))\n    //    = capital / e ^ (𝝰 * ln(capital / gfi))     (2)\n    //\n    // To avoid overflows, use (1) when gfi < capital and\n    // use (2) when capital < gfi\n\n    assert(alphaNumerator <= alphaDenominator);\n\n    // If any side is 0, exit early\n    if (gfi == 0 || capital == 0) return 0;\n\n    // If both sides are equal, we have:\n    // gfi^𝝰 * capital^(1-𝝰)\n    //    = gfi^𝝰 * gfi^(1-𝝰)\n    //    = gfi^(𝝰 + 1 - 𝝰)     = gfi\n    if (gfi == capital) return gfi;\n\n    bool lessGFIThanCapital = gfi < capital;\n\n    // (gfi / capital) or (capital / gfi), always in range (0, 1)\n    int256 ratio = lessGFIThanCapital\n      ? MembershipFixedMath.toFixed(gfi, capital)\n      : MembershipFixedMath.toFixed(capital, gfi);\n\n    // e ^ ( ln(ratio) * 𝝰 )\n    int256 exponentiation = MembershipFixedMath.exp(\n      (MembershipFixedMath.ln(ratio) * alphaNumerator.toInt256()) / alphaDenominator.toInt256()\n    );\n\n    if (lessGFIThanCapital) {\n      // capital * e ^ (𝝰 * ln(gfi / capital))\n      return MembershipFixedMath.uintMul(capital, exponentiation);\n    }\n\n    // capital / e ^ (𝝰 * ln(capital / gfi))\n    return MembershipFixedMath.uintDiv(capital, exponentiation);\n  }\n}\n"
    },
    "contracts/protocol/core/membership/assets/CapitalAssets.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\n\nimport {Context} from \"../../../../cake/Context.sol\";\nimport {CapitalAssetType} from \"../../../../interfaces/ICapitalLedger.sol\";\nimport \"../../../../cake/Routing.sol\" as Routing;\n\n/// @dev Adding a New Asset Type\n/// 1. Create a new library in this directory of the name <AssetType>Asset.sol\n/// 2. The library must implement the same functions as the other assets:\n///   2.1 AssetType\n///   2.2 isType\n///   2.3 isValid - if the asset is an ERC721\n///   2.4 getUsdcEquivalent\n/// 3. Import the library below in \"Supported assets\"\n/// 4. Add the new library to the corresponding `getSupportedType` function in this file\n/// 5. Add the new library to the corresponding `getUsdcEquivalent` function in this file\n/// 6. If the new library is an ERC721, add it to the `isValid` function in this file\n\n// Supported assets\nimport {PoolTokensAsset} from \"./PoolTokensAsset.sol\";\nimport {StakedFiduAsset} from \"./StakedFiduAsset.sol\";\n\nusing Routing.Context for Context;\n\nlibrary CapitalAssets {\n  /// Thrown when an asset has been requested that does not exist\n  error InvalidAsset(address assetAddress);\n  /// Thrown when an asset has been requested that does not exist\n  error InvalidAssetWithId(address assetAddress, uint256 assetTokenId);\n\n  /**\n   * @notice Check if a specific `assetAddress` has a corresponding capital asset\n   *  implementation and returns the asset type. Returns INVALID if no\n   *  such asset exists.\n   * @param context goldfinch context for routing\n   * @param assetAddress the address of the asset's contract\n   * @return type of the asset\n   */\n  function getSupportedType(Context context, address assetAddress) internal view returns (CapitalAssetType) {\n    if (StakedFiduAsset.isType(context, assetAddress)) return StakedFiduAsset.AssetType;\n    if (PoolTokensAsset.isType(context, assetAddress)) return PoolTokensAsset.AssetType;\n\n    return CapitalAssetType.INVALID;\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // ERC721\n\n  /**\n   * @notice Check if a specific token for a supported asset is valid or not. Returns false\n   *  if the asset is not supported or the token is invalid\n   * @param context goldfinch context for routing\n   * @param assetAddress the address of the asset's contract\n   * @param assetTokenId the token id\n   * @return whether or not a specific token id of asset address is supported\n   */\n  function isValid(\n    Context context,\n    address assetAddress,\n    uint256 assetTokenId\n  ) internal view returns (bool) {\n    if (StakedFiduAsset.isType(context, assetAddress)) return StakedFiduAsset.isValid(context, assetTokenId);\n    if (PoolTokensAsset.isType(context, assetAddress)) return PoolTokensAsset.isValid(context, assetTokenId);\n\n    return false;\n  }\n\n  /**\n   * @notice Get the point-in-time USDC equivalent value of the ERC721 asset. This\n   *  specifically attempts to return the \"principle\" or \"at-risk\" USDC value of\n   *  the asset and does not include rewards, interest, or other benefits.\n   * @param context goldfinch context for routing\n   * @param asset ERC721 to evaluate\n   * @param assetTokenId id of the token to evaluate\n   * @return USDC equivalent value\n   */\n  function getUsdcEquivalent(\n    Context context,\n    IERC721Upgradeable asset,\n    uint256 assetTokenId\n  ) internal view returns (uint256) {\n    if (PoolTokensAsset.isType(context, address(asset))) {\n      return PoolTokensAsset.getUsdcEquivalent(context, assetTokenId);\n    }\n\n    if (StakedFiduAsset.isType(context, address(asset))) {\n      return StakedFiduAsset.getUsdcEquivalent(context, assetTokenId);\n    }\n\n    revert InvalidAsset(address(asset));\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/protocol/core/membership/MembershipFixedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable var-name-mixedcase\n\npragma solidity ^0.8.16;\n\nimport {SafeCastUpgradeable as SafeCast} from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\n\nimport {FixedMath0x} from \"./FixedMath0x.sol\";\n\nusing SafeCast for uint256;\n\nlibrary MembershipFixedMath {\n  error InvalidFraction(uint256 n, uint256 d);\n\n  /**\n   * @notice Convert some uint256 fraction `n` numerator / `d` denominator to a fixed-point number `f`.\n   * @param n numerator\n   * @param d denominator\n   * @return fixed-point number\n   */\n  function toFixed(uint256 n, uint256 d) internal pure returns (int256) {\n    if (d.toInt256() < n.toInt256()) revert InvalidFraction(n, d);\n\n    return (n.toInt256() * FixedMath0x.FIXED_1) / int256(d.toInt256());\n  }\n\n  /**\n   * @notice Divide some unsigned int `u` by a fixed point number `f`\n   * @param u unsigned dividend\n   * @param f fixed point divisor, in FIXED_1 units\n   * @return unsigned int quotient\n   */\n  function uintDiv(uint256 u, int256 f) internal pure returns (uint256) {\n    // multiply `u` by FIXED_1 to cancel out the built-in FIXED_1 in f\n    return uint256((u.toInt256() * FixedMath0x.FIXED_1) / f);\n  }\n\n  /**\n   * @notice Multiply some unsigned int `u` by a fixed point number `f`\n   * @param u unsigned multiplicand\n   * @param f fixed point multiplier, in FIXED_1 units\n   * @return unsigned int product\n   */\n  function uintMul(uint256 u, int256 f) internal pure returns (uint256) {\n    // divide the product by FIXED_1 to cancel out the built-in FIXED_1 in f\n    return uint256((u.toInt256() * f) / FixedMath0x.FIXED_1);\n  }\n\n  /// @notice see FixedMath0x\n  function ln(int256 x) internal pure returns (int256 r) {\n    return FixedMath0x.ln(x);\n  }\n\n  /// @notice see FixedMath0x\n  function exp(int256 x) internal pure returns (int256 r) {\n    return FixedMath0x.exp(x);\n  }\n}\n"
    },
    "contracts/protocol/core/membership/FixedMath0x.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable max-line-length\n\npragma solidity ^0.8.16;\n\n// Below is code from 0x's LibFixedMath.sol. Changes:\n// - addition of 0.8-style errors\n// - removal of unused functions\n// - added comments for clarity\n// https://github.com/0xProject/exchange-v3/blob/aae46bef841bfd1cc31028f41793db4fe7197084/contracts/staking/contracts/src/libs/LibFixedMath.sol\n\n/*\n\n  Copyright 2017 Bprotocol Foundation, 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\nlibrary FixedMath0x {\n  /// Thrown when the natural log function is given too large of an argument\n  error LnTooLarge(int256 x);\n  /// Thrown when the natural log would have returned a number outside of ℝ\n  error LnNonRealResult(int256 x);\n  /// Thrown when exp is given too large of an argument\n  error ExpTooLarge(int256 x);\n  /// Thrown when an unsigned value is too large to be converted to a signed value\n  error UnsignedValueTooLarge(uint256 x);\n\n  // Base for the fixed point numbers (this is our 1)\n  int256 internal constant FIXED_1 = int256(0x0000000000000000000000000000000080000000000000000000000000000000);\n  // Maximum ln argument (1)\n  int256 private constant LN_MAX_VAL = FIXED_1;\n  // Minimum ln argument. Notice this is related to EXP_MIN_VAL (e ^ -63.875)\n  int256 private constant LN_MIN_VAL = int256(0x0000000000000000000000000000000000000000000000000000000733048c5a);\n  // Maximum exp argument (0)\n  int256 private constant EXP_MAX_VAL = 0;\n  // Minimum exp argument. Notice this is related to LN_MIN_VAL (-63.875)\n  int256 private constant EXP_MIN_VAL = -int256(0x0000000000000000000000000000001ff0000000000000000000000000000000);\n\n  /// @dev Get the natural logarithm of a fixed-point number 0 < `x` <= LN_MAX_VAL\n  function ln(int256 x) internal pure returns (int256 r) {\n    if (x > LN_MAX_VAL) {\n      revert LnTooLarge(x);\n    }\n    if (x <= 0) {\n      revert LnNonRealResult(x);\n    }\n    if (x == FIXED_1) {\n      return 0;\n    }\n    if (x <= LN_MIN_VAL) {\n      return EXP_MIN_VAL;\n    }\n\n    int256 y;\n    int256 z;\n    int256 w;\n\n    // Rewrite the input as a quotient of negative natural exponents and a single residual q, such that 1 < q < 2\n    // For example: log(0.3) = log(e^-1 * e^-0.25 * 1.0471028872385522)\n    //              = 1 - 0.25 - log(1 + 0.0471028872385522)\n    // e ^ -32\n    if (x <= int256(0x00000000000000000000000000000000000000000001c8464f76164760000000)) {\n      r -= int256(0x0000000000000000000000000000001000000000000000000000000000000000); // - 32\n      x = (x * FIXED_1) / int256(0x00000000000000000000000000000000000000000001c8464f76164760000000); // / e ^ -32\n    }\n    // e ^ -16\n    if (x <= int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000)) {\n      r -= int256(0x0000000000000000000000000000000800000000000000000000000000000000); // - 16\n      x = (x * FIXED_1) / int256(0x00000000000000000000000000000000000000f1aaddd7742e90000000000000); // / e ^ -16\n    }\n    // e ^ -8\n    if (x <= int256(0x00000000000000000000000000000000000afe10820813d78000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000400000000000000000000000000000000); // - 8\n      x = (x * FIXED_1) / int256(0x00000000000000000000000000000000000afe10820813d78000000000000000); // / e ^ -8\n    }\n    // e ^ -4\n    if (x <= int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000200000000000000000000000000000000); // - 4\n      x = (x * FIXED_1) / int256(0x0000000000000000000000000000000002582ab704279ec00000000000000000); // / e ^ -4\n    }\n    // e ^ -2\n    if (x <= int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000100000000000000000000000000000000); // - 2\n      x = (x * FIXED_1) / int256(0x000000000000000000000000000000001152aaa3bf81cc000000000000000000); // / e ^ -2\n    }\n    // e ^ -1\n    if (x <= int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000080000000000000000000000000000000); // - 1\n      x = (x * FIXED_1) / int256(0x000000000000000000000000000000002f16ac6c59de70000000000000000000); // / e ^ -1\n    }\n    // e ^ -0.5\n    if (x <= int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000040000000000000000000000000000000); // - 0.5\n      x = (x * FIXED_1) / int256(0x000000000000000000000000000000004da2cbf1be5828000000000000000000); // / e ^ -0.5\n    }\n    // e ^ -0.25\n    if (x <= int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000)) {\n      r -= int256(0x0000000000000000000000000000000020000000000000000000000000000000); // - 0.25\n      x = (x * FIXED_1) / int256(0x0000000000000000000000000000000063afbe7ab2082c000000000000000000); // / e ^ -0.25\n    }\n    // e ^ -0.125\n    if (x <= int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) {\n      r -= int256(0x0000000000000000000000000000000010000000000000000000000000000000); // - 0.125\n      x = (x * FIXED_1) / int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d); // / e ^ -0.125\n    }\n    // `x` is now our residual in the range of 1 <= x <= 2 (or close enough).\n\n    // Add the taylor series for log(1 + z), where z = x - 1\n    z = y = x - FIXED_1;\n    w = (y * y) / FIXED_1;\n    r += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^01 / 01 - y^02 / 02\n    r += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^03 / 03 - y^04 / 04\n    r += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^05 / 05 - y^06 / 06\n    r += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^07 / 07 - y^08 / 08\n    r += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^09 / 09 - y^10 / 10\n    r += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^11 / 11 - y^12 / 12\n    r += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\n    z = (z * w) / FIXED_1; // add y^13 / 13 - y^14 / 14\n    r += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000; // add y^15 / 15 - y^16 / 16\n  }\n\n  /// @dev Compute the natural exponent for a fixed-point number EXP_MIN_VAL <= `x` <= 1\n  function exp(int256 x) internal pure returns (int256 r) {\n    if (x < EXP_MIN_VAL) {\n      // Saturate to zero below EXP_MIN_VAL.\n      return 0;\n    }\n    if (x == 0) {\n      return FIXED_1;\n    }\n    if (x > EXP_MAX_VAL) {\n      revert ExpTooLarge(x);\n    }\n\n    // Rewrite the input as a product of natural exponents and a\n    // single residual q, where q is a number of small magnitude.\n    // For example: e^-34.419 = e^(-32 - 2 - 0.25 - 0.125 - 0.044)\n    //              = e^-32 * e^-2 * e^-0.25 * e^-0.125 * e^-0.044\n    //              -> q = -0.044\n\n    // Multiply with the taylor series for e^q\n    int256 y;\n    int256 z;\n    // q = x % 0.125 (the residual)\n    z = y = x % 0x0000000000000000000000000000000010000000000000000000000000000000;\n    z = (z * y) / FIXED_1;\n    r += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n    z = (z * y) / FIXED_1;\n    r += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n    r = r / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n    // Multiply with the non-residual terms.\n    x = -x;\n    // e ^ -32\n    if ((x & int256(0x0000000000000000000000000000001000000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x00000000000000000000000000000000000000f1aaddd7742e56d32fb9f99744)) /\n        int256(0x0000000000000000000000000043cbaf42a000812488fc5c220ad7b97bf6e99e); // * e ^ -32\n    }\n    // e ^ -16\n    if ((x & int256(0x0000000000000000000000000000000800000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x00000000000000000000000000000000000afe10820813d65dfe6a33c07f738f)) /\n        int256(0x000000000000000000000000000005d27a9f51c31b7c2f8038212a0574779991); // * e ^ -16\n    }\n    // e ^ -8\n    if ((x & int256(0x0000000000000000000000000000000400000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x0000000000000000000000000000000002582ab704279e8efd15e0265855c47a)) /\n        int256(0x0000000000000000000000000000001b4c902e273a58678d6d3bfdb93db96d02); // * e ^ -8\n    }\n    // e ^ -4\n    if ((x & int256(0x0000000000000000000000000000000200000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x000000000000000000000000000000001152aaa3bf81cb9fdb76eae12d029571)) /\n        int256(0x00000000000000000000000000000003b1cc971a9bb5b9867477440d6d157750); // * e ^ -4\n    }\n    // e ^ -2\n    if ((x & int256(0x0000000000000000000000000000000100000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x000000000000000000000000000000002f16ac6c59de6f8d5d6f63c1482a7c86)) /\n        int256(0x000000000000000000000000000000015bf0a8b1457695355fb8ac404e7a79e3); // * e ^ -2\n    }\n    // e ^ -1\n    if ((x & int256(0x0000000000000000000000000000000080000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x000000000000000000000000000000004da2cbf1be5827f9eb3ad1aa9866ebb3)) /\n        int256(0x00000000000000000000000000000000d3094c70f034de4b96ff7d5b6f99fcd8); // * e ^ -1\n    }\n    // e ^ -0.5\n    if ((x & int256(0x0000000000000000000000000000000040000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x0000000000000000000000000000000063afbe7ab2082ba1a0ae5e4eb1b479dc)) /\n        int256(0x00000000000000000000000000000000a45af1e1f40c333b3de1db4dd55f29a7); // * e ^ -0.5\n    }\n    // e ^ -0.25\n    if ((x & int256(0x0000000000000000000000000000000020000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x0000000000000000000000000000000070f5a893b608861e1f58934f97aea57d)) /\n        int256(0x00000000000000000000000000000000910b022db7ae67ce76b441c27035c6a1); // * e ^ -0.25\n    }\n    // e ^ -0.125\n    if ((x & int256(0x0000000000000000000000000000000010000000000000000000000000000000)) != 0) {\n      r =\n        (r * int256(0x00000000000000000000000000000000783eafef1c0a8f3978c7f81824d62ebf)) /\n        int256(0x0000000000000000000000000000000088415abbe9a76bead8d00cf112e4d4a8); // * e ^ -0.125\n    }\n  }\n}\n"
    },
    "contracts/protocol/core/membership/assets/PoolTokensAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\n\nimport {Context} from \"../../../../cake/Context.sol\";\nimport \"../../../../cake/Routing.sol\" as Routing;\n\nimport {CapitalAssetType} from \"../../../../interfaces/ICapitalLedger.sol\";\nimport {IPoolTokens} from \"../../../../interfaces/IPoolTokens.sol\";\n\nimport {ITranchedPool} from \"../../../../interfaces/ITranchedPool.sol\";\n\nusing Routing.Context for Context;\n\nlibrary PoolTokensAsset {\n  CapitalAssetType public constant AssetType = CapitalAssetType.ERC721;\n\n  /**\n   * @notice Get the type of asset that this contract adapts.\n   * @return the asset type\n   */\n  function isType(Context context, address assetAddress) internal view returns (bool) {\n    return assetAddress == address(context.poolTokens());\n  }\n\n  /**\n   * @notice Get whether or not the given asset is valid\n   * @return true - all pool tokens are valid\n   */\n  function isValid(Context, uint256) internal pure returns (bool) {\n    return true;\n  }\n\n  /**\n   * @notice Get the point-in-time USDC equivalent value of the Pool Token asset. This\n   *  specifically attempts to return the \"principle\" or \"at-risk\" USDC value of\n   *  the asset and does not include rewards, interest, or other benefits.\n   * @param context goldfinch context for routing\n   * @param assetTokenId tokenId of the Pool Token to evaluate\n   * @return USDC equivalent value\n   */\n  function getUsdcEquivalent(Context context, uint256 assetTokenId) internal view returns (uint256) {\n    IPoolTokens.TokenInfo memory tokenInfo = context.poolTokens().getTokenInfo(assetTokenId);\n    return tokenInfo.principalAmount - tokenInfo.principalRedeemed;\n  }\n}\n"
    },
    "contracts/protocol/core/membership/assets/StakedFiduAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\nimport \"../../../../library/FiduConversions.sol\";\nimport {Context} from \"../../../../cake/Context.sol\";\nimport \"../../../../cake/Routing.sol\" as Routing;\n\nimport {CapitalAssetType} from \"../../../../interfaces/ICapitalLedger.sol\";\nimport {IStakingRewards, StakedPositionType} from \"../../../../interfaces/IStakingRewards.sol\";\nimport {ISeniorPool} from \"../../../../interfaces/ISeniorPool.sol\";\n\nusing Routing.Context for Context;\n\nlibrary StakedFiduAsset {\n  CapitalAssetType public constant AssetType = CapitalAssetType.ERC721;\n\n  /**\n   * @notice Get the type of asset that this contract adapts.\n   * @return the asset type\n   */\n  function isType(Context context, address assetAddress) internal view returns (bool) {\n    return assetAddress == address(context.stakingRewards());\n  }\n\n  /**\n   * @notice Get whether or not the given asset is valid\n   * @return true if the asset is Fidu type (not CurveLP)\n   */\n  function isValid(Context context, uint256 assetTokenId) internal view returns (bool) {\n    return context.stakingRewards().getPosition(assetTokenId).positionType == StakedPositionType.Fidu;\n  }\n\n  /**\n   * @notice Get the point-in-time USDC equivalent value of the ERC721 asset. This\n   *  specifically attempts to return the \"principle\" or \"at-risk\" USDC value of\n   *  the asset and does not include rewards, interest, or other benefits.\n   * @param context goldfinch context for routing\n   * @param assetTokenId id of the position to evaluate\n   * @return USDC equivalent value\n   */\n  function getUsdcEquivalent(Context context, uint256 assetTokenId) internal view returns (uint256) {\n    uint256 stakedFiduBalance = context.stakingRewards().stakedBalanceOf(assetTokenId);\n    return FiduConversions.fiduToUsdc(stakedFiduBalance, context.seniorPool().sharePrice());\n  }\n}\n"
    },
    "contracts/library/FiduConversions.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary FiduConversions {\n  uint256 internal constant FIDU_MANTISSA = 1e18;\n  uint256 internal constant USDC_MANTISSA = 1e6;\n  uint256 internal constant USDC_TO_FIDU_MANTISSA = FIDU_MANTISSA / USDC_MANTISSA;\n  uint256 internal constant FIDU_USDC_CONVERSION_DECIMALS = USDC_TO_FIDU_MANTISSA * FIDU_MANTISSA;\n\n  /**\n   * @notice Convert Usdc to Fidu using a given share price\n   * @param usdcAmount amount of usdc to convert\n   * @param sharePrice share price to use to convert\n   * @return fiduAmount converted fidu amount\n   */\n  function usdcToFidu(uint256 usdcAmount, uint256 sharePrice) internal pure returns (uint256) {\n    return sharePrice > 0 ? (usdcAmount * FIDU_USDC_CONVERSION_DECIMALS) / sharePrice : 0;\n  }\n\n  /**\n   * @notice Convert fidu to USDC using a given share price\n   * @param fiduAmount fidu amount to convert\n   * @param sharePrice share price to do the conversion with\n   * @return usdcReceived usdc that will be received after converting\n   */\n  function fiduToUsdc(uint256 fiduAmount, uint256 sharePrice) internal pure returns (uint256) {\n    return (fiduAmount * sharePrice) / FIDU_USDC_CONVERSION_DECIMALS;\n  }\n}\n"
    },
    "contracts/protocol/core/membership/MembershipDirector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {Base} from \"../../../cake/Base.sol\";\nimport {Context} from \"../../../cake/Context.sol\";\nimport \"../../../cake/Routing.sol\" as Routing;\n\nimport \"../../../interfaces/IMembershipDirector.sol\";\nimport {IMembershipVault, Position} from \"../../../interfaces/IMembershipVault.sol\";\n\nimport {MembershipScores} from \"./MembershipScores.sol\";\nimport {CapitalAssets} from \"./assets/CapitalAssets.sol\";\nimport {Epochs} from \"./Epochs.sol\";\n\nusing Routing.Context for Context;\n\ncontract MembershipDirector is IMembershipDirector, Base, Initializable {\n  error InvalidVaultPosition();\n  error InvalidPositionType();\n\n  /// @notice Emitted when `owner` claims fidu `rewards`\n  /// @param owner the owner claiming rewards\n  /// @param rewards amount of fidu claimed\n  event RewardsClaimed(address indexed owner, uint256 rewards);\n\n  constructor(Context _context) Base(_context) {}\n\n  /// @inheritdoc IMembershipDirector\n  function consumeHoldingsAdjustment(address owner)\n    external\n    onlyOperator(Routing.Keys.MembershipOrchestrator)\n    returns (uint256)\n  {\n    _allocateRewards(owner);\n\n    (uint256 eligibleGFI, uint256 totalGFI) = context.gfiLedger().totalsOf(owner);\n    (uint256 eligibleCapital, uint256 totalCapital) = context.capitalLedger().totalsOf(owner);\n\n    return\n      context.membershipVault().adjustHoldings({\n        owner: owner,\n        eligibleAmount: calculateMembershipScore({gfi: eligibleGFI, capital: eligibleCapital}),\n        nextEpochAmount: calculateMembershipScore({gfi: totalGFI, capital: totalCapital})\n      });\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function collectRewards(address owner)\n    external\n    onlyOperator(Routing.Keys.MembershipOrchestrator)\n    returns (uint256 rewards)\n  {\n    rewards = _allocateRewards(owner);\n\n    context.membershipLedger().resetRewards(owner);\n\n    context.membershipCollector().distributeFiduTo(owner, rewards);\n\n    emit RewardsClaimed(owner, rewards);\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function claimableRewards(address owner) external view returns (uint256) {\n    uint256 allocatedRewards = context.membershipLedger().getPendingRewardsFor(owner);\n\n    Position memory position = context.membershipVault().positionOwnedBy(owner);\n    uint256 rewardsToLastFinalizedEpoch = _calculateRewards(\n      position.checkpointEpoch,\n      position.eligibleAmount,\n      position.nextEpochAmount\n    );\n\n    /// @dev if an epoch has passed, but is not finalized, those rewards are not counted\n    ///  although they would be claimed if collectRewards were called.\n\n    return allocatedRewards + rewardsToLastFinalizedEpoch;\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function currentScore(address owner) external view returns (uint256 eligibleScore, uint256 totalScore) {\n    Position memory position = context.membershipVault().positionOwnedBy(owner);\n    return (position.eligibleAmount, position.nextEpochAmount);\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function calculateMembershipScore(uint256 gfi, uint256 capital) public view returns (uint256) {\n    (uint256 alphaNumerator, uint256 alphaDenominator) = context.membershipLedger().alpha();\n\n    return\n      MembershipScores.calculateScore({\n        gfi: gfi,\n        capital: capital,\n        alphaNumerator: alphaNumerator,\n        alphaDenominator: alphaDenominator\n      });\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function totalMemberScores() external view returns (uint256 eligibleTotal, uint256 nextEpochTotal) {\n    return (\n      context.membershipVault().totalAtEpoch(Epochs.current()),\n      context.membershipVault().totalAtEpoch(Epochs.next())\n    );\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function estimateMemberScore(\n    address memberAddress,\n    int256 gfi,\n    int256 capital\n  ) external view returns (uint256 score) {\n    (uint256 alphaNumerator, uint256 alphaDenominator) = context.membershipLedger().alpha();\n\n    (, uint256 totalGFI) = context.gfiLedger().totalsOf(memberAddress);\n    (, uint256 totalCapital) = context.capitalLedger().totalsOf(memberAddress);\n\n    uint256 resultingGFI = totalGFI;\n    if (gfi < 0) resultingGFI -= uint256(-gfi);\n    else resultingGFI += uint256(gfi);\n\n    uint256 resultingCapital = totalCapital;\n    if (capital < 0) resultingCapital -= uint256(-capital);\n    else resultingCapital += uint256(capital);\n\n    return\n      MembershipScores.calculateScore({\n        gfi: resultingGFI,\n        capital: resultingCapital,\n        alphaNumerator: alphaNumerator,\n        alphaDenominator: alphaDenominator\n      });\n  }\n\n  /// @inheritdoc IMembershipDirector\n  function finalizeEpochs() external onlyOperator(Routing.Keys.MembershipOrchestrator) {\n    context.membershipCollector().finalizeEpochs();\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _allocateRewards(address owner) private returns (uint256) {\n    if (context.membershipCollector().lastFinalizedEpoch() < Epochs.current() - 1) {\n      // Guarantee that lastFinalizedEpoch is always up to date when distributing rewards\n      // Without this, we will never distribute rewards for an epoch that has already\n      // passed but is not finalized: the vault's checkpoint will update to epochs.current()\n      // so we will never attempt the missing epoch again.\n\n      context.membershipCollector().finalizeEpochs();\n    }\n\n    Position memory position = context.membershipVault().positionOwnedBy(owner);\n\n    context.membershipVault().checkpoint(owner);\n\n    uint256 rewards = _calculateRewards(position.checkpointEpoch, position.eligibleAmount, position.nextEpochAmount);\n\n    return context.membershipLedger().allocateRewardsTo(owner, rewards);\n  }\n\n  function _calculateRewards(\n    uint256 startEpoch,\n    uint256 eligibleMemberScore,\n    uint256 nextEpochMemberScore\n  ) private view returns (uint256 rewards) {\n    if (eligibleMemberScore > 0) {\n      if (startEpoch < Epochs.current()) {\n        rewards += _shareOfEpochRewards(startEpoch, eligibleMemberScore);\n      }\n    }\n\n    if (nextEpochMemberScore > 0) {\n      for (uint256 epoch = startEpoch + 1; epoch < Epochs.current(); epoch++) {\n        rewards += _shareOfEpochRewards(epoch, nextEpochMemberScore);\n      }\n    }\n  }\n\n  function _shareOfEpochRewards(uint256 epoch, uint256 memberScore) private view returns (uint256) {\n    uint256 totalMemberScores = context.membershipVault().totalAtEpoch(epoch);\n    uint256 rewardTotal = context.membershipCollector().rewardsForEpoch(epoch);\n\n    if (memberScore > totalMemberScores) revert InvalidVaultPosition();\n    if (totalMemberScores == 0) return 0;\n\n    return (memberScore * rewardTotal) / totalMemberScores;\n  }\n}\n"
    },
    "contracts/protocol/core/membership/MembershipVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable func-name-mixedcase\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\n\nimport {IMembershipVault, Position} from \"../../../interfaces/IMembershipVault.sol\";\n\nimport {Context} from \"../../../cake/Context.sol\";\nimport {Base} from \"../../../cake/Base.sol\";\nimport \"../../../cake/Routing.sol\" as Routing;\n\nimport {ERC721NonTransferable} from \"../ERC721NonTransferable.sol\";\nimport {Epochs} from \"./Epochs.sol\";\n\nimport {ERCInterfaces} from \"../ERCInterfaces.sol\";\n\nusing Routing.Context for Context;\nusing StringsUpgradeable for uint256;\n\n/**\n * @title MembershipVault\n * @notice Track assets held by owners in a vault, as well as the total held in the vault. Assets\n *  are not accounted for until the next epoch for MEV protection.\n * @author Goldfinch\n */\ncontract MembershipVault is\n  IMembershipVault,\n  Base,\n  ERC721NonTransferable,\n  IERC721EnumerableUpgradeable,\n  IERC721MetadataUpgradeable,\n  Initializable\n{\n  /// Thrown when depositing from address(0)\n  error ZeroAddressInvalid();\n  /// Thrown when trying to access tokens from an address with no tokens\n  error NoTokensOwned();\n  /// Thrown when trying to access more than one token for an address\n  error OneTokenPerAddress();\n  /// Thrown when querying token supply with an index greater than the supply\n  error IndexGreaterThanTokenSupply();\n  /// Thrown when checking totals in future epochs\n  error NoTotalsInFutureEpochs();\n  /// Thrown when adjusting holdings in an unsupported way\n  error InvalidHoldingsAdjustment(uint256 eligibleAmount, uint256 nextEpochAmount);\n  /// Thrown when requesting a nonexistant token\n  error NonexistantToken(uint256 tokenId);\n\n  /**\n   * @notice The vault has been checkpointed\n   * @param total how much is stored in the vault at the current block.timestamp\n   */\n  event Checkpoint(uint256 total);\n\n  /// @notice Totals by epoch. totalAmounts is always tracking past epochs, the current\n  ///   epoch, and the next epoch. There are a few cases:\n  ///   1. Checkpointing\n  ///      Noop for the same epoch. Checkpointing occurs before any mutative action\n  ///      so for new epochs, the last-set epoch value (totalAmounts[previousEpoch + 1])\n  ///      is copied to each epoch up to the current epoch + 1\n  ///   2. Increasing\n  ///      Checkpointing already occurred, so current epoch and next epoch\n  ///      are properly set up. Increasing just updates the next epoch value\n  ///   3. Decreasing\n  ///      Checkpointing already occurred like above. Decreasing updates the eligible\n  ///      and next epoch values\n  mapping(uint256 => uint256) private totalAmounts;\n\n  /// @notice last epoch the vault was checkpointed\n  uint256 private checkpointEpoch;\n\n  /// @notice all positions held by the vault\n  mapping(uint256 => Position) private positions;\n\n  /// @notice owners and their position\n  mapping(address => uint256) private owners;\n\n  /// @notice counter tracking most current membership id\n  uint256 private membershipIdsTracker;\n\n  /// @notice base uri for the nft\n  string public baseURI;\n\n  //solhint-disable-next-line no-empty-blocks\n  constructor(Context _context) Base(_context) {}\n\n  function initialize() public initializer {\n    checkpointEpoch = Epochs.current();\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // ERC 721 + Enumerable\n\n  function totalSupply() public view returns (uint256) {\n    return membershipIdsTracker;\n  }\n\n  function ownerOf(uint256 membershipId) external view returns (address owner) {\n    return positions[membershipId].owner;\n  }\n\n  function balanceOf(address owner) external view returns (uint256) {\n    return owners[owner] > 0 ? 1 : 0;\n  }\n\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256) {\n    uint256 membershipId = owners[owner];\n    if (membershipId == 0) revert NoTokensOwned();\n    if (index > 0) revert OneTokenPerAddress();\n\n    return membershipId;\n  }\n\n  function tokenByIndex(uint256 index) external view returns (uint256) {\n    if (index >= totalSupply()) revert IndexGreaterThanTokenSupply();\n\n    return index + 1;\n  }\n\n  function supportsInterface(bytes4 id) external pure override returns (bool) {\n    return (id == ERCInterfaces.ERC721 || id == ERCInterfaces.ERC721_ENUMERABLE || id == ERCInterfaces.ERC165);\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // ERC721 Metadata\n\n  /// @inheritdoc IERC721MetadataUpgradeable\n  function name() external pure returns (string memory) {\n    return \"Goldfinch Membership\";\n  }\n\n  /// @inheritdoc IERC721MetadataUpgradeable\n  function symbol() external pure returns (string memory) {\n    return \"GFMEMBER\";\n  }\n\n  /// @inheritdoc IERC721MetadataUpgradeable\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\n    if (tokenId == 0) revert NonexistantToken(tokenId);\n    if (tokenId > membershipIdsTracker) revert NonexistantToken(tokenId);\n\n    return string(abi.encodePacked(baseURI, tokenId.toString()));\n  }\n\n  /// @notice Set the base uri for the contract\n  function setBaseURI(string calldata uri) external onlyAdmin {\n    baseURI = uri;\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // IMembershipVault\n\n  /// @inheritdoc IMembershipVault\n  function currentValueOwnedBy(address owner) external view override returns (uint256) {\n    Position memory position = positions[owners[owner]];\n    if (Epochs.current() > position.checkpointEpoch) {\n      return position.nextEpochAmount;\n    }\n\n    return position.eligibleAmount;\n  }\n\n  /// @inheritdoc IMembershipVault\n  function currentTotal() external view override returns (uint256) {\n    return totalAtEpoch(Epochs.current());\n  }\n\n  /// @inheritdoc IMembershipVault\n  function totalAtEpoch(uint256 epoch) public view returns (uint256) {\n    if (epoch > Epochs.next()) revert NoTotalsInFutureEpochs();\n\n    if (epoch > checkpointEpoch) {\n      // If querying for an epoch past the checkpoint, always use the next amount. This is the amount\n      // that will become eligible for every epoch after `checkpointEpoch`.\n\n      return totalAmounts[checkpointEpoch + 1];\n    }\n\n    return totalAmounts[epoch];\n  }\n\n  /// @inheritdoc IMembershipVault\n  function positionOwnedBy(address owner) external view returns (Position memory) {\n    return positions[owners[owner]];\n  }\n\n  // @inheritdoc IMembershipVault\n  function adjustHoldings(\n    address owner,\n    uint256 eligibleAmount,\n    uint256 nextEpochAmount\n  ) external onlyOperator(Routing.Keys.MembershipDirector) returns (uint256) {\n    if (nextEpochAmount < eligibleAmount) revert InvalidHoldingsAdjustment(eligibleAmount, nextEpochAmount);\n\n    uint256 membershipId = _fetchOrCreateMembership(owner);\n\n    _checkpoint(owner);\n\n    Position memory position = positions[membershipId];\n\n    positions[membershipId].eligibleAmount = eligibleAmount;\n    positions[membershipId].nextEpochAmount = nextEpochAmount;\n\n    totalAmounts[Epochs.current()] = (totalAmounts[Epochs.current()] - position.eligibleAmount) + eligibleAmount;\n    totalAmounts[Epochs.next()] = (totalAmounts[Epochs.next()] - position.nextEpochAmount) + nextEpochAmount;\n\n    emit AdjustedHoldings({owner: owner, eligibleAmount: eligibleAmount, nextEpochAmount: nextEpochAmount});\n    emit VaultTotalUpdate({\n      eligibleAmount: totalAmounts[Epochs.current()],\n      nextEpochAmount: totalAmounts[Epochs.next()]\n    });\n\n    return membershipId;\n  }\n\n  // @inheritdoc IMembershipVault\n  function checkpoint(address owner) external onlyOperator(Routing.Keys.MembershipDirector) {\n    return _checkpoint(owner);\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _fetchOrCreateMembership(address owner) private returns (uint256) {\n    if (owner == address(0)) revert ZeroAddressInvalid();\n\n    uint256 membershipId = owners[owner];\n    if (membershipId > 0) return membershipId;\n\n    membershipIdsTracker++;\n    membershipId = membershipIdsTracker;\n\n    positions[membershipId].owner = owner;\n    positions[membershipId].createdTimestamp = block.timestamp;\n    positions[membershipId].checkpointEpoch = Epochs.current();\n\n    owners[owner] = membershipId;\n\n    emit Transfer({from: address(0), to: owner, tokenId: membershipId});\n\n    return membershipId;\n  }\n\n  function _checkpoint(address owner) private {\n    uint256 currentEpoch = Epochs.current();\n\n    if (currentEpoch > checkpointEpoch) {\n      // Promote the last checkpoint's nextAmount to all subsequent epochs up to currentEpoch + 1. This\n      // guarantees that total[current] and total[next] are always properly set before any operations\n      // are performed.\n      uint256 lastCheckpointNextAmount = totalAmounts[checkpointEpoch + 1];\n      for (uint256 epoch = checkpointEpoch + 2; epoch <= currentEpoch + 1; epoch++) {\n        totalAmounts[epoch] = lastCheckpointNextAmount;\n      }\n\n      checkpointEpoch = Epochs.current();\n    }\n\n    uint256 membershipId = owners[owner];\n    if (membershipId > 0) {\n      // positionId of 0 means that no position exists. This occurs if checkpoint is called\n      // before a position is created.\n\n      Position memory previousPosition = positions[membershipId];\n\n      // Promote `nextEpochAmount` to `eligibleAmount` if epochs have progressed\n      if (currentEpoch > previousPosition.checkpointEpoch) {\n        positions[membershipId].eligibleAmount = previousPosition.nextEpochAmount;\n        positions[membershipId].checkpointEpoch = Epochs.current();\n      }\n    }\n\n    emit Checkpoint(totalAmounts[Epochs.current()]);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721MetadataUpgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/protocol/core/ERC721NonTransferable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\n\n/**\n * @title A read only ERC721 token\n * @notice A abstract registry of NFTs that only allows reading the NFTs and nothing\n *         else (no minting, transferring, etc). This acts as a \"view\" into some set\n *         of NFTs that may not otherwise adhere to the ERC721 standard.\n * @dev See `Transfer Mechanism` in the following link for the inspiration\n *      behind this class: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md#rationale\n */\n\nabstract contract ERC721NonTransferable is IERC721Upgradeable {\n  // Throw if a mutating function is called\n  error ReadOnly();\n\n  function safeTransferFrom(\n    address,\n    address,\n    uint256\n  ) external pure {\n    revert ReadOnly();\n  }\n\n  function transferFrom(\n    address,\n    address,\n    uint256\n  ) external pure {\n    revert ReadOnly();\n  }\n\n  function approve(address, uint256) external pure {\n    revert ReadOnly();\n  }\n\n  function getApproved(uint256) external pure returns (address) {\n    revert ReadOnly();\n  }\n\n  function setApprovalForAll(address, bool) external pure {\n    revert ReadOnly();\n  }\n\n  function isApprovedForAll(address, address) external pure returns (bool) {\n    revert ReadOnly();\n  }\n\n  function safeTransferFrom(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure {\n    revert ReadOnly();\n  }\n}\n"
    },
    "contracts/protocol/core/ERCInterfaces.sol": {
      "content": "pragma solidity ^0.8.16;\n\nlibrary ERCInterfaces {\n  bytes4 internal constant ERC721 = 0x80ac58cd;\n  bytes4 internal constant ERC721_ENUMERABLE = 0x780e9d63;\n  bytes4 internal constant ERC165 = 0x01ffc9a7;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/protocol/core/membership/CapitalLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC721ReceiverUpgradeable.sol\";\n\nimport {Context} from \"../../../cake/Context.sol\";\nimport {Base} from \"../../../cake/Base.sol\";\nimport \"../../../cake/Routing.sol\" as Routing;\n\nimport {Arrays} from \"../../../library/Arrays.sol\";\nimport {CapitalAssets} from \"./assets/CapitalAssets.sol\";\nimport {UserEpochTotals, UserEpochTotal} from \"./UserEpochTotals.sol\";\n\nimport {ICapitalLedger, CapitalAssetType} from \"../../../interfaces/ICapitalLedger.sol\";\n\nusing Routing.Context for Context;\nusing UserEpochTotals for UserEpochTotal;\nusing Arrays for uint256[];\n\n/**\n * @title CapitalLedger\n * @notice Track Capital held by owners and ensure the Capital has been accounted for.\n * @author Goldfinch\n */\ncontract CapitalLedger is ICapitalLedger, Base, IERC721ReceiverUpgradeable {\n  /// Thrown when attempting to deposit nothing\n  error ZeroDeposit();\n  /// Thrown when withdrawing an invalid amount for a position\n  error InvalidWithdrawAmount(uint256 requested, uint256 max);\n  /// Thrown when depositing from address(0)\n  error InvalidOwnerIndex();\n  /// Thrown when querying token supply with an index greater than the supply\n  error IndexGreaterThanTokenSupply();\n\n  struct Position {\n    // Owner of the position\n    address owner;\n    // Index of the position in the ownership array\n    uint256 ownedIndex;\n    // Address of the underlying asset represented by the position\n    address assetAddress;\n    // USDC equivalent value of the position. This is first written\n    // on position deposit but may be updated.\n    uint256 usdcEquivalent;\n    // When the position was deposited\n    uint256 depositTimestamp;\n  }\n\n  struct ERC721Data {\n    // Id of the ERC721 assetAddress' token\n    uint256 assetTokenId;\n  }\n\n  /// Data for positions in the vault. Always has a corresponding\n  /// entry at the same index in ERC20Data or ERC721 data, but never\n  /// both.\n  mapping(uint256 => Position) public positions;\n\n  // Which positions an address owns\n  mapping(address => uint256[]) private owners;\n\n  /// Total held by each user, while being aware of the deposit epoch\n  mapping(address => UserEpochTotal) private totals;\n\n  // The current position index\n  uint256 private positionCounter;\n\n  /// ERC721 data corresponding to positions, data has the same index\n  /// as its corresponding position.\n  mapping(uint256 => ERC721Data) private erc721Datas;\n\n  /// @notice Construct the contract\n  constructor(Context _context) Base(_context) {}\n\n  /// @inheritdoc ICapitalLedger\n  function depositERC721(\n    address owner,\n    address assetAddress,\n    uint256 assetTokenId\n  ) external onlyOperator(Routing.Keys.MembershipOrchestrator) returns (uint256) {\n    if (CapitalAssets.getSupportedType(context, assetAddress) != CapitalAssetType.ERC721) {\n      revert CapitalAssets.InvalidAsset(assetAddress);\n    }\n    if (!CapitalAssets.isValid(context, assetAddress, assetTokenId)) {\n      revert CapitalAssets.InvalidAssetWithId(assetAddress, assetTokenId);\n    }\n\n    IERC721Upgradeable asset = IERC721Upgradeable(assetAddress);\n    uint256 usdcEquivalent = CapitalAssets.getUsdcEquivalent(context, asset, assetTokenId);\n    uint256 positionId = _mintPosition(owner, assetAddress, usdcEquivalent);\n\n    erc721Datas[positionId] = ERC721Data({assetTokenId: assetTokenId});\n\n    totals[owner].recordIncrease(usdcEquivalent);\n\n    asset.safeTransferFrom(address(context.membershipOrchestrator()), address(this), assetTokenId);\n\n    emit CapitalERC721Deposit({\n      owner: owner,\n      assetAddress: assetAddress,\n      positionId: positionId,\n      assetTokenId: assetTokenId,\n      usdcEquivalent: usdcEquivalent\n    });\n\n    return positionId;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function erc721IdOf(uint256 positionId) public view returns (uint256) {\n    return erc721Datas[positionId].assetTokenId;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function withdraw(uint256 positionId) external onlyOperator(Routing.Keys.MembershipOrchestrator) {\n    Position memory position = positions[positionId];\n    delete positions[positionId];\n\n    CapitalAssetType assetType = CapitalAssets.getSupportedType(context, position.assetAddress);\n\n    totals[position.owner].recordDecrease(position.usdcEquivalent, position.depositTimestamp);\n\n    uint256[] storage ownersList = owners[position.owner];\n    (, bool replaced) = ownersList.reorderingRemove(position.ownedIndex);\n    if (replaced) {\n      positions[ownersList[position.ownedIndex]].ownedIndex = position.ownedIndex;\n    }\n\n    if (assetType == CapitalAssetType.ERC721) {\n      uint256 assetTokenId = erc721Datas[positionId].assetTokenId;\n      delete erc721Datas[positionId];\n\n      IERC721Upgradeable(position.assetAddress).safeTransferFrom(address(this), position.owner, assetTokenId);\n\n      emit CapitalERC721Withdrawal(position.owner, positionId, position.assetAddress, position.depositTimestamp);\n    } else {\n      revert InvalidAssetType(assetType);\n    }\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function assetAddressOf(uint256 positionId) public view returns (address) {\n    return positions[positionId].assetAddress;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function ownerOf(uint256 positionId) public view returns (address) {\n    return positions[positionId].owner;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function totalsOf(address addr) external view returns (uint256 eligibleAmount, uint256 totalAmount) {\n    return totals[addr].getTotals();\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function totalSupply() public view returns (uint256) {\n    return positionCounter;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function balanceOf(address addr) external view returns (uint256) {\n    return owners[addr].length;\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256) {\n    if (index >= owners[owner].length) revert InvalidOwnerIndex();\n\n    return owners[owner][index];\n  }\n\n  /// @inheritdoc ICapitalLedger\n  function tokenByIndex(uint256 index) external view returns (uint256) {\n    if (index >= totalSupply()) revert IndexGreaterThanTokenSupply();\n\n    return index + 1;\n  }\n\n  /// @inheritdoc IERC721ReceiverUpgradeable\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes calldata\n  ) external pure returns (bytes4) {\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _mintPosition(\n    address owner,\n    address assetAddress,\n    uint256 usdcEquivalent\n  ) private returns (uint256 positionId) {\n    positionCounter++;\n\n    positionId = positionCounter;\n    positions[positionId] = Position({\n      owner: owner,\n      ownedIndex: owners[owner].length,\n      assetAddress: assetAddress,\n      usdcEquivalent: usdcEquivalent,\n      depositTimestamp: block.timestamp\n    });\n\n    owners[owner].push(positionId);\n  }\n}\n"
    },
    "contracts/library/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary Arrays {\n  /**\n   * @notice Removes an item from an array and replaces it with the (previously) last element in the array so\n   *  there are no empty spaces. Assumes that `array` is not empty and index is valid.\n   * @param array the array to remove from\n   * @param index index of the item to remove\n   * @return newLength length of the resulting array\n   * @return replaced whether or not the index was replaced. Only false if the removed item was the last item\n   *  in the array.\n   */\n  function reorderingRemove(uint256[] storage array, uint256 index)\n    internal\n    returns (uint256 newLength, bool replaced)\n  {\n    newLength = array.length - 1;\n    replaced = newLength != index;\n\n    if (replaced) {\n      array[index] = array[newLength];\n    }\n\n    array.pop();\n  }\n}\n"
    },
    "contracts/protocol/core/membership/UserEpochTotals.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Epochs} from \"./Epochs.sol\";\n\n/// @dev Epoch Awareness\n/// The Membership system relies on an epoch structure to incentivize economic behavior. Deposits\n/// are tracked by epoch and only count toward yield enhancements if they have been present for\n/// an entire epoch. This means positions have a specific lifetime:\n/// 1. Deposit Epoch - Positions are in the membership system but do not count for rewards as they\n///      were not in since the beginning of the epoch. Deposits are externally triggered.\n/// 2. Eligible Epoch - Positions are in the membership system and count for rewards as they have been\n///      present the entire epoch.\n/// 3. Withdrawal Epoch - Positions are no longer in the membership system and forfeit their rewards\n///      for the withdrawal epoch. Rewards are forfeited as the position was not present for the\n///      entire epoch when withdrawn. Withdrawals are externally triggered.\n///\n/// All of these deposits' value is summed together to calculate the yield enhancement. A naive\n/// approach is, for every summation query, iterate over all deposits and check if they were deposited\n/// in the current epoch (so case (1)) or in a previous epoch (so case (2)). This has a high gas\n/// cost, so we use another approach: UserEpochTotal.\n///\n/// UserEpochTotal is the total of the user's deposits as of its lastEpochUpdate- the last epoch that\n/// the total was updated in. For that epoch, it tracks:\n/// 1. Eligible Amount - The sum of deposits that are in their Eligible Epoch for the current epoch\n/// 2. Total Amount - The sum of deposits that will be in their Eligible Epoch for the next epoch\n///\n/// It is not necessary to track previous epochs as deposits in those will already be eligible, or they\n/// will have been withdrawn and already affected the eligible amount.\n///\n/// It is also unnecessary to track future epochs beyond the next one. Any deposit in the current epoch\n/// will become eligible in the next epoch. It is not possible to have a deposit (or withdrawal) take\n/// effect any further in the future.\n\nstruct UserEpochTotal {\n  /// Total amount that will be eligible for membership, after `checkpointedAt` epoch\n  uint256 totalAmount;\n  /// Amount eligible for membership, as of `checkpointedAt` epoch\n  uint256 eligibleAmount;\n  /// Last epoch the total was checkpointed at\n  uint256 checkpointedAt;\n}\n\nlibrary UserEpochTotals {\n  error InvalidDepositEpoch(uint256 epoch);\n\n  /// @notice Record an increase of `amount` in the `total`. This is counted toward the\n  ///  nextAmount as deposits must be present for an entire epoch to be valid.\n  /// @param total storage pointer to the UserEpochTotal\n  /// @param amount amount to increase the total by\n  function recordIncrease(UserEpochTotal storage total, uint256 amount) internal {\n    _checkpoint(total);\n\n    total.totalAmount += amount;\n  }\n\n  /// @notice Record a decrease of `amount` in the `total`. Depending on the `depositTimestamp`\n  ///  this will withdraw from the total's currentAmount (if it's withdrawn from an already valid deposit)\n  ///  or from the total's nextAmount (if it's withdrawn from a deposit this epoch).\n  /// @param total storage pointer to the UserEpochTotal\n  /// @param amount amount to decrease the total by\n  /// @param depositTimestamp timestamp of the deposit associated with `amount`\n  function recordDecrease(\n    UserEpochTotal storage total,\n    uint256 amount,\n    uint256 depositTimestamp\n  ) internal {\n    uint256 depositEpoch = Epochs.fromSeconds(depositTimestamp);\n    if (depositEpoch > Epochs.current()) revert InvalidDepositEpoch(depositEpoch);\n\n    _checkpoint(total);\n\n    total.totalAmount -= amount;\n\n    if (depositEpoch < Epochs.current()) {\n      // If this was deposited earlier, then it would have been promoted in _checkpoint and must be removed.\n      total.eligibleAmount -= amount;\n    }\n  }\n\n  /// @notice Get the up-to-date current and next amount for the `_total`. UserEpochTotals\n  ///  may have a lastEpochUpdate of long ago. This returns the current and next amounts as if it had\n  ///  been checkpointed just now.\n  /// @param _total storage pointer to the UserEpochTotal\n  /// @return current the currentAmount of the UserEpochTotal\n  /// @return next the nextAmount of the UserEpochTotal\n  function getTotals(UserEpochTotal storage _total) internal view returns (uint256 current, uint256 next) {\n    UserEpochTotal memory total = _total;\n    if (Epochs.current() == total.checkpointedAt) {\n      return (total.eligibleAmount, total.totalAmount);\n    }\n\n    return (total.totalAmount, total.totalAmount);\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _checkpoint(UserEpochTotal storage total) private {\n    // Only promote the total amount if we've moved to the next epoch\n    // after the last checkpoint.\n    if (Epochs.current() <= total.checkpointedAt) return;\n\n    total.eligibleAmount = total.totalAmount;\n\n    total.checkpointedAt = Epochs.current();\n  }\n}\n"
    },
    "contracts/interfaces/IBorrower.sol": {
      "content": "// SPDX-Licence-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IBorrower {\n  function initialize(address owner, address _config) external;\n}\n"
    },
    "contracts/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\n// Copied from: https://eips.ethereum.org/EIPS/eip-173\n\n/// @title ERC-173 Contract Ownership Standard\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n  /// @dev This emits when ownership of a contract changes.\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /// @notice Get the address of the owner\n  /// @return The address of the owner.\n  function owner() external view returns (address);\n\n  /// @notice Set the address of the new owner of the contract\n  /// @dev Set _newOwner to address(0) to renounce any ownership.\n  /// @param _newOwner The address of the new owner of the contract\n  function transferOwnership(address _newOwner) external;\n}\n"
    },
    "contracts/protocol/core/membership/MembershipLedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {IMembershipLedger} from \"../../../interfaces/IMembershipLedger.sol\";\n\nimport {Context} from \"../../../cake/Context.sol\";\nimport {Base} from \"../../../cake/Base.sol\";\nimport \"../../../cake/Routing.sol\" as Routing;\n\nimport {Epochs} from \"./Epochs.sol\";\n\nusing Routing.Context for Context;\n\ncontract MembershipLedger is IMembershipLedger, Base, Initializable {\n  error InvalidAlphaGTE1();\n  error InvalidAlphaUndefined();\n  error InvalidAlphaNumerator();\n  error InvalidAlphaDenominator();\n\n  struct Fraction {\n    uint128 numerator;\n    uint128 denominator;\n  }\n\n  /// rewards allocated to and not yet claimed by an address\n  mapping(address => uint256) private allocatedRewards;\n\n  /// Alpha param for the cobb douglas function\n  Fraction public alpha;\n\n  /// @notice Construct the contract\n  constructor(Context _context) Base(_context) {}\n\n  function initialize() public initializer {\n    alpha = Fraction(1, 2);\n  }\n\n  /// @inheritdoc IMembershipLedger\n  function resetRewards(address addr) external onlyOperator(Routing.Keys.MembershipDirector) {\n    allocatedRewards[addr] = 0;\n  }\n\n  /// @inheritdoc IMembershipLedger\n  function allocateRewardsTo(address addr, uint256 amount)\n    external\n    onlyOperator(Routing.Keys.MembershipDirector)\n    returns (uint256 rewards)\n  {\n    allocatedRewards[addr] += amount;\n\n    return allocatedRewards[addr];\n  }\n\n  /// @inheritdoc IMembershipLedger\n  function getPendingRewardsFor(address addr) external view returns (uint256 rewards) {\n    return allocatedRewards[addr];\n  }\n\n  /// @notice Set the alpha parameter used in the membership score formula. Alpha is defined as a fraction in\n  ///  the range (0, 1) and constrained to (0,20) / (0,20], so a minimum of 1/20 and a maximum of 19/20.\n  /// @param numerator the numerator of the fraction, must be in the range (0, 20)\n  /// @param denominator the denominator of the fraction, must be in the range (0, 20] and greater than the numerator\n  function setAlpha(uint128 numerator, uint128 denominator) external onlyAdmin {\n    // Numerator in range (0, 20)\n    if (numerator >= 20 || numerator == 0) revert InvalidAlphaNumerator();\n\n    // Denominator in range (0, 20]\n    if (denominator > 20 || denominator == 0) revert InvalidAlphaDenominator();\n\n    // Total fraction less than 1\n    if (numerator >= denominator) revert InvalidAlphaGTE1();\n\n    alpha = Fraction(numerator, denominator);\n  }\n}\n"
    },
    "contracts/protocol/core/membership/MembershipCollector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n// solhint-disable-next-line max-line-length\nimport {SafeERC20Upgradeable as SafeERC20} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport {Context} from \"../../../cake/Context.sol\";\nimport {Base} from \"../../../cake/Base.sol\";\nimport \"../../../cake/Routing.sol\" as Routing;\n\nimport {IERC20SplitterReceiver} from \"./ERC20Splitter.sol\";\nimport {ISeniorPool} from \"../../../interfaces/ISeniorPool.sol\";\nimport {IERC20} from \"../../../interfaces/IERC20.sol\";\nimport {IMembershipCollector} from \"../../../interfaces/IMembershipCollector.sol\";\n\nimport {Epochs} from \"./Epochs.sol\";\n\nusing Routing.Context for Context;\nusing SafeERC20 for IERC20Upgradeable;\n\n/// @title MembershipCollector\n/// @author landakram\n/// @notice Responsible for receiving USDC from ERC20Splitter, using it to acquire fidu, and allocating\n///   it to epochs, where it can be claimed by membership participants.\ncontract MembershipCollector is IERC20SplitterReceiver, IMembershipCollector, Base {\n  error InvalidReceiveCaller();\n\n  /// @notice Emitted once `epoch` has been finalized and will no longer change\n  /// @param epoch epoch that is now finalized\n  /// @param totalRewards all of the rewards in that epoch\n  event EpochFinalized(uint256 indexed epoch, uint256 totalRewards);\n\n  /// @notice The last block.timestamp when epochs were finalized. The last\n  ///   finalized epoch is the most recent epoch that ends before lastCheckpointAt.\n  uint256 public lastCheckpointAt;\n\n  /// @notice A mapping of epochs to fidu reward amounts\n  mapping(uint256 => uint256) public rewardsForEpoch;\n\n  /// @notice The first epoch rewards should be provided in\n  uint256 public immutable firstRewardEpoch;\n\n  constructor(Context _context, uint256 _firstRewardEpoch) Base(_context) {\n    firstRewardEpoch = _firstRewardEpoch;\n  }\n\n  /// @notice Receive handler for the reserve ERC20Splitter. This handler uses the USDC\n  ///   amount it has received to acquire fidu from the senior pool and distribute it across\n  ///   epochs that have elapsed since the last distribution. The fidu rewards are distributed\n  ///   proportionaly across epochs based on their portion of total elapsed time. Once an epoch\n  ///   has passed, it is consider \"finalized\" and no longer considered for future runs of this\n  ///   function.\n  /// @param amount USDC reward amount\n  /// @return The 4 byte selector required by IERC20SplitterReceiver\n  function onReceive(uint256 amount) external returns (bytes4) {\n    if (msg.sender != address(context.reserveSplitter())) revert InvalidReceiveCaller();\n\n    // Acquire fidu\n    uint256 fiduAmount = 0;\n    if (amount > 0) {\n      ISeniorPool seniorPool = context.seniorPool();\n      context.usdc().approve(address(seniorPool), amount);\n      fiduAmount = seniorPool.deposit(amount);\n    }\n\n    // Distribute fidu amount to epochs which have passed since last distribution\n    allocateToElapsedEpochs(fiduAmount);\n\n    return IERC20SplitterReceiver.onReceive.selector;\n  }\n\n  function finalizeEpochs() external onlyOperator(Routing.Keys.MembershipDirector) {\n    if (context.reserveSplitter().lastDistributionAt() == block.timestamp) return;\n\n    context.reserveSplitter().distribute();\n\n    // splitter will then callback to allocateToElapsedEpochs and epochs will be finalized\n  }\n\n  function estimateRewardsFor(uint256 epoch) external view returns (uint256) {\n    /// @dev epochs fall into 6 different cases:\n    ///\n    ///                   ┌ first reward epoch    ┌ last finalized                    ┌ current\n    ///                   |                       |                                   |\n    /// |  epoch a  |  epoch a  |  epoch b  |  epoch c  |  epoch d  |  epoch e  |  epoch f  |  epoch g  |\n    /// |  case 2   |               case 3              |         case 6        |  case 4&5 |   case 1  |\n\n    // Case 1: Epoch is in the future\n    if (epoch > Epochs.current()) return 0;\n\n    // Case 2: Before first reward epoch\n    if (epoch < firstRewardEpoch) return 0;\n\n    // Case 3: Epoch has already been finalized\n    uint256 lastFinalizedEpoch = lastFinalizedEpoch();\n    if (epoch <= lastFinalizedEpoch) return rewardsForEpoch[epoch];\n\n    uint256 pendingDistributionUsdc = context.reserveSplitter().pendingDistributionFor(address(this));\n    uint256 pendingDistribution = context.seniorPool().getNumShares(pendingDistributionUsdc);\n\n    uint256 epochsToFinalize = Epochs.previous() - lastFinalizedEpoch;\n    if (epochsToFinalize == 0) {\n      // Case 4: Epoch is the current epoch and there are none pending finalization\n      // Epoch is implicitly current: it's not the future and all previous are finalized\n      return rewardsForEpoch[epoch] + pendingDistribution;\n    }\n\n    uint256 checkpointEpoch = Epochs.fromSeconds(lastCheckpointAt);\n\n    uint256 checkpointEpochStart = Epochs.startOf(checkpointEpoch);\n    uint256 secondsAlreadyCheckpointed = 0;\n    if (lastCheckpointAt > checkpointEpochStart) {\n      secondsAlreadyCheckpointed = lastCheckpointAt - checkpointEpochStart;\n    }\n    uint256 durationToFinalize = epochsToFinalize * Epochs.EPOCH_SECONDS - secondsAlreadyCheckpointed;\n\n    uint256 currentEpochElapsedTime = block.timestamp - Epochs.currentEpochStartTimestamp();\n    if (epoch == Epochs.current()) {\n      uint256 currentEpochPendingRewards = (pendingDistribution * currentEpochElapsedTime) /\n        (durationToFinalize + currentEpochElapsedTime);\n\n      // Case 5: Epoch is the current epoch but there are some pending finalization\n      return rewardsForEpoch[epoch] + currentEpochPendingRewards;\n    }\n\n    // Case 6: Epoch is pending finalization\n    // If we're in the checkpoint epoch, account for seconds already checkpointed\n    uint256 unfinalizedEpochSeconds = Epochs.EPOCH_SECONDS;\n    if (epoch == checkpointEpoch) {\n      unfinalizedEpochSeconds = Epochs.EPOCH_SECONDS - secondsAlreadyCheckpointed;\n    }\n\n    uint256 epochPendingRewards = (pendingDistribution * unfinalizedEpochSeconds) /\n      (durationToFinalize + currentEpochElapsedTime);\n\n    return rewardsForEpoch[epoch] + epochPendingRewards;\n  }\n\n  /// @inheritdoc IMembershipCollector\n  function distributeFiduTo(address addr, uint256 amount) external onlyOperator(Routing.Keys.MembershipDirector) {\n    context.fidu().safeTransfer(addr, amount);\n  }\n\n  function allocateToElapsedEpochs(uint256 fiduAmount) internal {\n    uint256 rewardsRemaining = fiduAmount;\n\n    // Calculate epochs to finalize ([current() - 1] - lastFinalizedEpoch);\n    uint256 currentEpoch = Epochs.current();\n    uint256 priorEpoch = currentEpoch - 1;\n\n    // If running before the first reward epoch, allocate rewards to that epoch\n    if (currentEpoch < firstRewardEpoch) {\n      rewardsForEpoch[firstRewardEpoch] += rewardsRemaining;\n\n      if (lastCheckpointAt == 0) {\n        // Consider all earlier epochs finalized\n        lastCheckpointAt = Epochs.startOf(firstRewardEpoch);\n        emit EpochFinalized({epoch: firstRewardEpoch - 1, totalRewards: 0});\n      }\n\n      return;\n    }\n\n    // If running this function for the first time, distribute everything to the current\n    // epoch, and consider all prior epochs finalized.\n    if (lastCheckpointAt == 0) {\n      lastCheckpointAt = Epochs.startOf(currentEpoch);\n    }\n\n    uint256 lastFinalizedEpoch = lastFinalizedEpoch();\n    uint256 epochsToFinalize = priorEpoch - lastFinalizedEpoch;\n\n    // Distribute rewards to epochsToFinalize according to proportion of total elapsed time\n    uint256 totalElapsedTime = block.timestamp - lastCheckpointAt;\n\n    uint256 finalizedEpochRewards = 0;\n\n    if (epochsToFinalize > 0) {\n      for (uint256 i = 1; i <= epochsToFinalize; i++) {\n        uint256 epoch = lastFinalizedEpoch + i;\n\n        uint256 epochStart = Epochs.startOf(epoch);\n        uint256 unfinalizedEpochSeconds = Epochs.EPOCH_SECONDS;\n        // If the epoch was checkpointed partway through, use the elapsed time since the last checkpoint\n        if (epochStart < lastCheckpointAt) {\n          uint256 secondsAlreadyCheckpointed = lastCheckpointAt - epochStart;\n          unfinalizedEpochSeconds = Epochs.EPOCH_SECONDS - secondsAlreadyCheckpointed;\n        }\n\n        uint256 epochRewards = (fiduAmount * unfinalizedEpochSeconds) / totalElapsedTime;\n\n        rewardsForEpoch[epoch] += epochRewards;\n        finalizedEpochRewards += epochRewards;\n\n        emit EpochFinalized({epoch: epoch, totalRewards: rewardsForEpoch[epoch]});\n      }\n\n      rewardsRemaining -= finalizedEpochRewards;\n    }\n\n    // Distribute remainder of rewards to current epoch\n    rewardsForEpoch[currentEpoch] += rewardsRemaining;\n\n    // Checkpoint\n    lastCheckpointAt = block.timestamp;\n  }\n\n  /// @notice The last epoch whose rewards should be considered finalized and ready to be claimed\n  function lastFinalizedEpoch() public view returns (uint256) {\n    if (lastCheckpointAt < Epochs.EPOCH_SECONDS) return 0;\n    return Epochs.fromSeconds(lastCheckpointAt) - 1;\n  }\n}\n"
    },
    "contracts/protocol/core/membership/ERC20Splitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"openzeppelin-contracts/contracts/utils/Address.sol\";\n\nimport {Context} from \"../../../cake/Context.sol\";\nimport {Base} from \"../../../cake/Base.sol\";\nimport {PausableUpgradeable} from \"../../../cake/Pausable.sol\";\nimport {IERC20Splitter} from \"../../../interfaces/IERC20Splitter.sol\";\n\nusing Address for address;\nusing SafeERC20 for IERC20;\n\ninterface IERC20SplitterReceiver {\n  function onReceive(uint256 amount) external returns (bytes4 retval);\n}\n\n/// @title ERC20Splitter\n/// @author landakram\n/// @notice Splits the ERC20 balance of this contract amongst a list of payees.\n///   Unlike similar splitter contracts, all shares of the balance are distributed\n///   in a single `distribute` transaction. If a payee is a smart contract implementing\n///   `IERC20SplitterReceiver`, then its `onReceive` handler function will be called\n///   after it receives its share.\ncontract ERC20Splitter is IERC20Splitter, Base, PausableUpgradeable {\n  error LengthMismatch();\n  error InvalidReceiver();\n  error IntraBlockDistribution();\n\n  event Distributed(uint256 total);\n  event PayeeAdded(address indexed payee, uint256 share);\n\n  /// @notice The total number of shares in the splitter. A payee's proportion\n  ///   of the split can be calculated as its share / totalShares.\n  uint256 public totalShares;\n\n  /// @notice A list of payees\n  address[] public payees;\n\n  /// @notice Payee shares\n  mapping(address => uint256) public shares;\n\n  /// @notice The ERC20 that is distributed to payees\n  IERC20 public immutable erc20;\n\n  /// @notice The block.timestamp when `distribute` was last called\n  uint256 public lastDistributionAt;\n\n  constructor(Context _context, IERC20 _erc20) Base(_context) {\n    erc20 = _erc20;\n  }\n\n  function initialize() external initializer {\n    __Pausable_init_unchained();\n  }\n\n  function pendingDistributionFor(address payee) external view returns (uint256) {\n    return (erc20.balanceOf(address(this)) * shares[payee]) / totalShares;\n  }\n\n  /// @notice Distribute the current balance to payees. If a payee is a smart contract\n  ///   implementing `IERC20SplitterReceiver`, then its `onReceive` handler function will\n  ///   be called after it receives its share.\n  function distribute() external whenNotPaused {\n    if (lastDistributionAt == block.timestamp) revert IntraBlockDistribution();\n\n    lastDistributionAt = block.timestamp;\n\n    uint256 totalToDistribute = erc20.balanceOf(address(this));\n\n    for (uint256 i = 0; i < payees.length; i++) {\n      address payee = payees[i];\n      uint256 share = shares[payee];\n\n      // Due to integer division, this could result in some dust being left over in the\n      // contract. This is acceptable as the dust will be included in the next distribution.\n      uint256 owedToPayee = (totalToDistribute * share) / totalShares;\n      if (owedToPayee > 0) {\n        erc20.safeTransfer(payee, owedToPayee);\n      }\n\n      if (payee.isContract()) {\n        // Call this even if there is nothing owed to payee. Some recipients may still need\n        // to account for the event.\n        triggerOnReceive(payee, owedToPayee);\n      }\n    }\n\n    emit Distributed(totalToDistribute);\n  }\n\n  function triggerOnReceive(address payee, uint256 amount) internal {\n    try IERC20SplitterReceiver(payee).onReceive(amount) returns (bytes4 retval) {\n      if (retval != IERC20SplitterReceiver.onReceive.selector) revert InvalidReceiver();\n    } catch (bytes memory reason) {\n      // A zero-length reason means the payee does not implement IERC20SplitterReceiver.\n      // In that case, just continue.\n      if (reason.length > 0) {\n        assembly {\n          revert(add(32, reason), mload(reason))\n        }\n      }\n    }\n  }\n\n  /// @notice Replace all current payees with a new set of payees and shares\n  /// @param _payees An array of addresses to receive distributions\n  /// @param _shares An array of shares (ordered by `_payees`) to use for distributions\n  function replacePayees(address[] calldata _payees, uint256[] calldata _shares) external onlyAdmin {\n    delete payees;\n    _setUpPayees(_payees, _shares);\n  }\n\n  function _setUpPayees(address[] calldata _payees, uint256[] calldata _shares) internal {\n    if (_payees.length != _shares.length) revert LengthMismatch();\n\n    totalShares = 0;\n    payees = _payees;\n\n    for (uint256 i = 0; i < _shares.length; i++) {\n      address payee = _payees[i];\n      uint256 share = _shares[i];\n      shares[payee] = share;\n      totalShares += share;\n      emit PayeeAdded({payee: payee, share: share});\n    }\n  }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// This file copied from OZ, but with the version pragma updated to use >=.\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/test/core/IProtocolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {IGoldfinchConfig} from \"../../interfaces/IGoldfinchConfig.sol\";\nimport {IGoldfinchFactory} from \"../../interfaces/IGoldfinchFactory.sol\";\nimport {IERC20} from \"../../interfaces/IERC20.sol\";\n\ninterface IProtocolHelper {\n  function gfConfig() external returns (IGoldfinchConfig);\n\n  function fidu() external returns (IERC20);\n\n  function gfFactory() external returns (IGoldfinchFactory);\n\n  function usdc() external returns (IERC20);\n}\n"
    },
    "contracts/interfaces/IGoldfinchConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IGoldfinchConfig {\n  function getNumber(uint256 index) external returns (uint256);\n\n  function getAddress(uint256 index) external returns (address);\n\n  function setAddress(uint256 index, address newAddress) external returns (address);\n\n  function setNumber(uint256 index, uint256 newNumber) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGoldfinchFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IGoldfinchFactory {\n  function createCreditLine() external returns (address);\n\n  function createBorrower(address owner) external returns (address);\n\n  function createPool(\n    address _borrower,\n    uint256 _juniorFeePercent,\n    uint256 _limit,\n    uint256 _interestApr,\n    uint256 _paymentPeriodInDays,\n    uint256 _termInDays,\n    uint256 _lateFeeApr,\n    uint256[] calldata _allowedUIDTypes\n  ) external returns (address);\n\n  function createMigratedPool(\n    address _borrower,\n    uint256 _juniorFeePercent,\n    uint256 _limit,\n    uint256 _interestApr,\n    uint256 _paymentPeriodInDays,\n    uint256 _termInDays,\n    uint256 _lateFeeApr,\n    uint256[] calldata _allowedUIDTypes\n  ) external returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../security/PausableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC1155 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155PausableUpgradeable is Initializable, ERC1155Upgradeable, PausableUpgradeable {\n    function __ERC1155Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __Pausable_init_unchained();\n        __ERC1155Pausable_init_unchained();\n    }\n\n    function __ERC1155Pausable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][account] = accountBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/interfaces/IUniqueIdentity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\ninterface IUniqueIdentity is IERC1155Upgradeable {\n  function mint(\n    uint256 id,\n    uint256 expiresAt,\n    bytes calldata signature\n  ) external payable;\n\n  function burn(\n    address account,\n    uint256 id,\n    uint256 expiresAt,\n    bytes calldata signature\n  ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal initializer {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/protocol/core/membership/GFILedger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n// solhint-disable-next-line max-line-length\nimport {SafeERC20Upgradeable as SafeERC20} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport {Context} from \"../../../cake/Context.sol\";\nimport {Base} from \"../../../cake/Base.sol\";\nimport \"../../../cake/Routing.sol\" as Routing;\n\nimport {Arrays} from \"../../../library/Arrays.sol\";\nimport {UserEpochTotals, UserEpochTotal} from \"./UserEpochTotals.sol\";\n\nimport \"../../../interfaces/IGFILedger.sol\";\n\nusing Routing.Context for Context;\nusing UserEpochTotals for UserEpochTotal;\nusing Arrays for uint256[];\nusing SafeERC20 for IERC20Upgradeable;\n\n/**\n * @title GFILedger\n * @notice Track GFI held by owners and ensure the GFI has been accounted for.\n * @author Goldfinch\n */\ncontract GFILedger is IGFILedger, Base {\n  /// Thrown when depositing zero GFI for a position\n  error ZeroDepositAmount();\n  /// Thrown when withdrawing an invalid amount for a position\n  error InvalidWithdrawAmount(uint256 requested, uint256 max);\n  /// Thrown when depositing from address(0)\n  error InvalidOwnerIndex();\n  /// Thrown when querying token supply with an index greater than the supply\n  error IndexGreaterThanTokenSupply();\n\n  // All positions in the ledger\n  mapping(uint256 => Position) public positions;\n\n  // Which positions an address owns\n  mapping(address => uint256[]) private owners;\n\n  /// Total held by each user, while being aware of the deposit epoch\n  mapping(address => UserEpochTotal) private totals;\n\n  // Most recent position minted\n  uint256 private positionCounter;\n\n  /// @notice Construct the contract\n  constructor(Context _context) Base(_context) {}\n\n  /// @inheritdoc IGFILedger\n  function deposit(address owner, uint256 amount)\n    external\n    onlyOperator(Routing.Keys.MembershipOrchestrator)\n    returns (uint256 positionId)\n  {\n    if (amount == 0) {\n      revert ZeroDepositAmount();\n    }\n    positionId = _mintPosition(owner, amount);\n\n    totals[owner].recordIncrease(amount);\n\n    context.gfi().safeTransferFrom(address(context.membershipOrchestrator()), address(this), amount);\n  }\n\n  /// @inheritdoc IGFILedger\n  function withdraw(uint256 positionId) external onlyOperator(Routing.Keys.MembershipOrchestrator) returns (uint256) {\n    return _withdraw(positionId);\n  }\n\n  /// @inheritdoc IGFILedger\n  function withdraw(uint256 positionId, uint256 amount)\n    external\n    onlyOperator(Routing.Keys.MembershipOrchestrator)\n    returns (uint256)\n  {\n    Position memory position = positions[positionId];\n\n    if (amount > position.amount) revert InvalidWithdrawAmount(amount, position.amount);\n    if (amount == position.amount) return _withdraw(positionId);\n\n    positions[positionId].amount -= amount;\n    totals[position.owner].recordDecrease(amount, position.depositTimestamp);\n\n    context.gfi().safeTransfer(position.owner, amount);\n\n    emit GFIWithdrawal({\n      owner: position.owner,\n      positionId: positionId,\n      withdrawnAmount: amount,\n      remainingAmount: position.amount - amount,\n      depositTimestamp: position.depositTimestamp\n    });\n\n    return amount;\n  }\n\n  /// @inheritdoc IGFILedger\n  function balanceOf(address addr) external view returns (uint256 balance) {\n    return owners[addr].length;\n  }\n\n  /// @inheritdoc IGFILedger\n  function ownerOf(uint256 positionId) external view returns (address) {\n    return positions[positionId].owner;\n  }\n\n  /// @inheritdoc IGFILedger\n  function totalsOf(address addr) external view returns (uint256 eligibleAmount, uint256 totalAmount) {\n    return totals[addr].getTotals();\n  }\n\n  /// @inheritdoc IGFILedger\n  function totalSupply() public view returns (uint256) {\n    return positionCounter;\n  }\n\n  /// @inheritdoc IGFILedger\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256) {\n    if (index >= owners[owner].length) revert InvalidOwnerIndex();\n\n    return owners[owner][index];\n  }\n\n  /// @inheritdoc IGFILedger\n  function tokenByIndex(uint256 index) external view returns (uint256) {\n    if (index >= totalSupply()) revert IndexGreaterThanTokenSupply();\n\n    return index + 1;\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Private\n\n  function _mintPosition(address owner, uint256 amount) private returns (uint256 positionId) {\n    positionCounter++;\n\n    positionId = positionCounter;\n\n    positions[positionId] = Position({\n      owner: owner,\n      ownedIndex: owners[owner].length,\n      amount: amount,\n      depositTimestamp: block.timestamp\n    });\n\n    owners[owner].push(positionId);\n\n    emit GFIDeposit({owner: owner, positionId: positionId, amount: amount});\n  }\n\n  function _withdraw(uint256 positionId) private returns (uint256) {\n    Position memory position = positions[positionId];\n    delete positions[positionId];\n\n    uint256[] storage ownersList = owners[position.owner];\n    (, bool replaced) = ownersList.reorderingRemove(position.ownedIndex);\n    if (replaced) {\n      positions[ownersList[position.ownedIndex]].ownedIndex = position.ownedIndex;\n    }\n\n    totals[position.owner].recordDecrease(position.amount, position.depositTimestamp);\n\n    context.gfi().safeTransfer(position.owner, position.amount);\n\n    emit GFIWithdrawal({\n      owner: position.owner,\n      positionId: positionId,\n      withdrawnAmount: position.amount,\n      remainingAmount: 0,\n      depositTimestamp: position.depositTimestamp\n    });\n\n    return position.amount;\n  }\n}\n"
    },
    "contracts/interfaces/ISeniorPoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./ISeniorPool.sol\";\nimport \"./ITranchedPool.sol\";\n\nabstract contract ISeniorPoolStrategy {\n  function getLeverageRatio(ITranchedPool pool) public view virtual returns (uint256);\n\n  function invest(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256 amount);\n\n  function estimateInvestment(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256);\n}\n"
    },
    "contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IERC2981 {\n  /// @notice Called with the sale price to determine how much royalty\n  //          is owed and to whom.\n  /// @param _tokenId - the NFT asset queried for royalty information\n  /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n  /// @return receiver - address of who should be sent the royalty payment\n  /// @return royaltyAmount - the royalty payment amount for _salePrice\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n    external\n    view\n    returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n// solhint-disable-next-line max-line-length\n// Adapted from https://github.com/Uniswap/merkle-distributor/blob/c3255bfa2b684594ecd562cacd7664b0f18330bf/contracts/interfaces/IMerkleDistributor.sol.\npragma solidity >=0.6.12;\n\n/// @notice Enables the granting of a CommunityRewards grant, if the grant details exist in this\n/// contract's Merkle root.\ninterface IMerkleDistributor {\n  /// @notice Returns the address of the CommunityRewards contract whose grants are distributed by this contract.\n  function communityRewards() external view returns (address);\n\n  /// @notice Returns the merkle root of the merkle tree containing grant details available to accept.\n  function merkleRoot() external view returns (bytes32);\n\n  /// @notice Returns true if the index has been marked accepted.\n  function isGrantAccepted(uint256 index) external view returns (bool);\n\n  /// @notice Causes the sender to accept the grant consisting of the given details. Reverts if\n  /// the inputs (which includes who the sender is) are invalid.\n  function acceptGrant(\n    uint256 index,\n    uint256 amount,\n    uint256 vestingLength,\n    uint256 cliffLength,\n    uint256 vestingInterval,\n    bytes32[] calldata merkleProof\n  ) external;\n\n  /// @notice This event is triggered whenever a call to #acceptGrant succeeds.\n  event GrantAccepted(\n    uint256 indexed tokenId,\n    uint256 indexed index,\n    address indexed account,\n    uint256 amount,\n    uint256 vestingLength,\n    uint256 cliffLength,\n    uint256 vestingInterval\n  );\n}\n"
    },
    "contracts/interfaces/openzeppelin/IERC721Receiver.sol": {
      "content": "pragma solidity >=0.6.12;\n\n// This file copied from OZ, but with the version pragma updated to use >= & reference other >= pragma interfaces.\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes calldata data\n  ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IVersioned.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\n/// @title interface for implementers that have an arbitrary associated tag\ninterface IVersioned {\n  /// @notice Returns the version triplet `[major, minor, patch]`\n  function getVersion() external pure returns (uint8[3] memory);\n}\n"
    },
    "contracts/interfaces/ICurveLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface ICurveLP {\n  function coins(uint256) external view returns (address);\n\n  function token() external view returns (address);\n\n  function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\n\n  function lp_price() external view returns (uint256);\n\n  function add_liquidity(\n    uint256[2] calldata amounts,\n    uint256 min_mint_amount,\n    bool use_eth,\n    address receiver\n  ) external returns (uint256);\n\n  function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external returns (uint256);\n\n  function remove_liquidity_one_coin(\n    uint256 token_amount,\n    uint256 i,\n    uint256 min_amount\n  ) external returns (uint256);\n\n  function get_dy(\n    uint256 i,\n    uint256 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function exchange(\n    uint256 i,\n    uint256 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external returns (uint256);\n\n  function balances(uint256 arg0) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUniqueIdentity0612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\n/// @dev This interface provides a subset of the functionality of the IUniqueIdentity\n/// interface -- namely, the subset of functionality needed by Goldfinch protocol contracts\n/// compiled with Solidity version 0.6.12.\ninterface IUniqueIdentity0612 {\n  function balanceOf(address account, uint256 id) external view returns (uint256);\n\n  function isApprovedForAll(address account, address operator) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IGo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nabstract contract IGo {\n  uint256 public constant ID_TYPE_0 = 0;\n  uint256 public constant ID_TYPE_1 = 1;\n  uint256 public constant ID_TYPE_2 = 2;\n  uint256 public constant ID_TYPE_3 = 3;\n  uint256 public constant ID_TYPE_4 = 4;\n  uint256 public constant ID_TYPE_5 = 5;\n  uint256 public constant ID_TYPE_6 = 6;\n  uint256 public constant ID_TYPE_7 = 7;\n  uint256 public constant ID_TYPE_8 = 8;\n  uint256 public constant ID_TYPE_9 = 9;\n  uint256 public constant ID_TYPE_10 = 10;\n\n  /// @notice Returns the address of the UniqueIdentity contract.\n  function uniqueIdentity() external virtual returns (address);\n\n  function go(address account) public view virtual returns (bool);\n\n  function goOnlyIdTypes(address account, uint256[] calldata onlyIdTypes) public view virtual returns (bool);\n\n  /**\n   * @notice Returns whether the provided account is go-listed for use of the SeniorPool on the Goldfinch protocol.\n   * @param account The account whose go status to obtain\n   * @return true if `account` is go listed\n   */\n  function goSeniorPool(address account) public view virtual returns (bool);\n}\n"
    },
    "contracts/interfaces/IBackerRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\npragma experimental ABIEncoderV2;\n\ninterface IBackerRewards {\n  function allocateRewards(uint256 _interestPaymentAmount) external;\n\n  function onTranchedPoolDrawdown(uint256 sliceIndex) external;\n\n  function setPoolTokenAccRewardsPerPrincipalDollarAtMint(address poolAddress, uint256 tokenId) external;\n}\n"
    },
    "contracts/interfaces/IRequiresUID.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface IRequiresUID {\n  function hasAllowedUID(address sender) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IMerkleDirectDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n// solhint-disable-next-line max-line-length\n// Adapted from https://github.com/Uniswap/merkle-distributor/blob/c3255bfa2b684594ecd562cacd7664b0f18330bf/contracts/interfaces/IMerkleDistributor.sol.\npragma solidity >=0.6.12;\n\n/// @notice Enables the transfer of GFI rewards (referred to as a \"grant\"), if the grant details exist in this\n/// contract's Merkle root.\ninterface IMerkleDirectDistributor {\n  /// @notice Returns the address of the GFI contract that is the token distributed as rewards by\n  ///   this contract.\n  function gfi() external view returns (address);\n\n  /// @notice Returns the merkle root of the merkle tree containing grant details available to accept.\n  function merkleRoot() external view returns (bytes32);\n\n  /// @notice Returns true if the index has been marked accepted.\n  function isGrantAccepted(uint256 index) external view returns (bool);\n\n  /// @notice Causes the sender to accept the grant consisting of the given details. Reverts if\n  /// the inputs (which includes who the sender is) are invalid.\n  function acceptGrant(\n    uint256 index,\n    uint256 amount,\n    bytes32[] calldata merkleProof\n  ) external;\n\n  /// @notice This event is triggered whenever a call to #acceptGrant succeeds.\n  event GrantAccepted(uint256 indexed index, address indexed account, uint256 amount);\n}\n"
    },
    "contracts/interfaces/IEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\n/// @notice Common events that can be emmitted by multiple contracts\ninterface IEvents {\n  /// @notice Emitted when a safety check fails\n  event SafetyCheckTriggered();\n}\n"
    },
    "@uniswap/lib/contracts/libraries/Babylonian.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.4.0;\n\n// computes square roots using the babylonian method\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\nlibrary Babylonian {\n    // credit for this implementation goes to\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n        // however that code costs significantly more gas\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}