{
  "address": "0xcD123Dd7B07e164bf1b33Fc639A8f7a04C3370b2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCreditLine",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCreditLine",
          "type": "address"
        }
      ],
      "name": "CreditLineMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DrawdownMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "EmergencyShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveFundsCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "principalDelta",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "interestDelta",
          "type": "int256"
        }
      ],
      "name": "SharePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FP_SCALING_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "availableToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestRedeemable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalRedeemable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract GoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditLine",
      "outputs": [
        {
          "internalType": "contract IV2CreditLine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawdownsPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyShutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        }
      ],
      "name": "getTranche",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITranchedPool.TrancheInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_juniorFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paymentPeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_termInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juniorFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lateFeeApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockJuniorCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCl",
          "type": "address"
        }
      ],
      "name": "migrateAndSetNewCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paymentPeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_termInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        }
      ],
      "name": "migrateCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentPeriodInDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sharePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "sharePriceToUsdc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termInDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateGoldfinchConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "usdcToSharePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ffcb75e5c1cf9839faa5afaa32da42534e7aca77fb3f265b045eba11389050a",
  "receipt": {
    "to": null,
    "from": "0xa083880F7a5df37Bf00a25380C3eB9AF9cD92D8f",
    "contractAddress": "0xcD123Dd7B07e164bf1b33Fc639A8f7a04C3370b2",
    "transactionIndex": 116,
    "gasUsed": "4608773",
    "logsBloom": "0x
    "blockHash": "0x8fc73226721896ab7d33a7328cb07ba2b3cdfdd8e98deeb37a443fb76973e4ce",
    "transactionHash": "0x5ffcb75e5c1cf9839faa5afaa32da42534e7aca77fb3f265b045eba11389050a",
    "logs": [],
    "blockNumber": 13097205,
    "cumulativeGasUsed": "11630050",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "60bf04b8c24669590397de1969e3a29e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCreditLine\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCreditLine\",\"type\":\"address\"}],\"name\":\"CreditLineMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawdownMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveFundsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"principalDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"interestDelta\",\"type\":\"int256\"}],\"name\":\"SharePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FP_SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRedeemable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalRedeemable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract GoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditLine\",\"outputs\":[{\"internalType\":\"contract IV2CreditLine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawdownsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"getTranche\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.TrancheInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_juniorFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juniorFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lateFeeApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockJuniorCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCl\",\"type\":\"address\"}],\"name\":\"migrateAndSetNewCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"}],\"name\":\"migrateCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentPeriodInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"sharePriceToUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateGoldfinchConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"usdcToSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableToWithdraw(uint256)\":{\"params\":{\"tokenId\":\"The token representing the position\"},\"returns\":{\"interestRedeemable\":\"The interest available to redeem\",\"principalRedeemable\":\"The principal available to redeem\"}},\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"The USDC amount to tranfer from the caller to the pool\",\"tranche\":\"The number representing the tranche to deposit into\"},\"returns\":{\"tokenId\":\"The tokenId of the NFT\"}},\"drawdown(uint256)\":{\"params\":{\"amount\":\"The amount to drawdown from the creditline (must be < limit)\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"migrateCreditLine(address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_borrower\":\"The borrower address\",\"_interestApr\":\"The new interest APR\",\"_lateFeeApr\":\"The new late fee APR\",\"_limit\":\"The new limit\",\"_paymentPeriodInDays\":\"The new payment period in days\",\"_termInDays\":\"The new term in days\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay(uint256)\":{\"params\":{\"amount\":\"The amount to repay\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"sharePriceToUsdc(uint256,uint256)\":{\"params\":{\"sharePrice\":\"The share price to convert\",\"totalShares\":\"The total shares outstanding\"},\"returns\":{\"_0\":\"The USDC amount of the input share price\"}},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"usdcToSharePrice(uint256,uint256)\":{\"params\":{\"amount\":\"The USDC amount to convert\",\"totalShares\":\"The total shares outstanding\"},\"returns\":{\"_0\":\"The share price of the input amount\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw (must be <= interest+principal currently available to withdraw)\",\"tokenId\":\"The NFT representing the position\"},\"returns\":{\"interestWithdrawn\":\"The interest amount that was withdrawn\",\"principalWithdrawn\":\"The principal amount that was withdrawn\"}},\"withdrawMax(uint256)\":{\"params\":{\"tokenId\":\"The NFT representing the position\"},\"returns\":{\"interestWithdrawn\":\"The interest amount that was withdrawn\",\"principalWithdrawn\":\"The principal amount that was withdrawn\"}},\"withdrawMultiple(uint256[],uint256[])\":{\"params\":{\"amounts\":\"An array of amounts to withdraw from the corresponding tokenIds\",\"tokenIds\":\"An array of tokens ids representing the position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assess()\":{\"notice\":\"Triggers an assessment of the creditline and the applies the payments according the tranche waterfall\"},\"availableToWithdraw(uint256)\":{\"notice\":\"Determines the amount of interest and principal redeemable by a particular tokenId\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit a USDC amount into the pool for a tranche. Mints an NFT to the caller representing the position\"},\"drawdown(uint256)\":{\"notice\":\"Draws down the funds (and locks the pool) to the borrower address. Can only be called by the borrower\"},\"emergencyShutdown()\":{\"notice\":\"Pauses the pool and sweeps any remaining funds to the treasury reserve.\"},\"lockJuniorCapital()\":{\"notice\":\"Locks the junior tranche, preventing more junior deposits. Gives time for the senior to determine how much to invest (ensure leverage ratio cannot change for the period)\"},\"lockPool()\":{\"notice\":\"Locks the pool (locks both senior and junior tranches and starts the drawdown period). Beyond the drawdown period, any unused capital is available to withdraw by all depositors\"},\"migrateAndSetNewCreditLine(address)\":{\"notice\":\"Migrates to a new creditline without copying the accounting variables\"},\"migrateCreditLine(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Migrates the accounting variables from the current creditline to a brand new one\"},\"pauseDrawdowns()\":{\"notice\":\"Pauses all drawdowns (but not deposits/withdraws)\"},\"pay(uint256)\":{\"notice\":\"Allows repaying the creditline. Collects the USDC amount from the sender and triggers an assess\"},\"sharePriceToUsdc(uint256,uint256)\":{\"notice\":\"Converts share price to USDC amounts\"},\"unpauseDrawdowns()\":{\"notice\":\"Unpause drawdowns\"},\"updateGoldfinchConfig()\":{\"notice\":\"Migrates to a new goldfinch config address\"},\"usdcToSharePrice(uint256,uint256)\":{\"notice\":\"Converts USDC amounts to share price\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw an already deposited amount if the funds are available\"},\"withdrawMax(uint256)\":{\"notice\":\"Similar to withdraw but will withdraw all available funds\"},\"withdrawMultiple(uint256[],uint256[])\":{\"notice\":\"Withdraw from many tokens (that the sender owns) in a single transaction\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/TranchedPool.sol\":\"TranchedPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x50280546205978ca6573541955e15453b4c07a19e6c8ec4f6785a5ae0d7343fb\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x734b5bedb78074a59bca6aff9e5a1801c9c7e9c5314daf32e14857161fb36932\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\"},\"contracts/external/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n// solhint-disable\\n// Imported from https://github.com/UMAprotocol/protocol/blob/4d1c8cc47a4df5e79f978cb05647a7432e111a3d/packages/core/contracts/common/implementation/FixedPoint.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5**18`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5**18`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0380f13c21a3895d847fe584d12bb61b4ec90b2e5fee1c248c6a259764fd1977\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/ICUSDCContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface ICUSDCContract is IERC20withDec {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d2cc9d84c55c0aa2f766aa3cc6371cdc7cf040e88e4f6a34ba1f6d40e2e0b5a\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditDesk.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract ICreditDesk {\\n  uint256 public totalWritedowns;\\n  uint256 public totalLoansOutstanding;\\n\\n  function setUnderwriterGovernanceLimit(address underwriterAddress, uint256 limit) external virtual;\\n\\n  function drawdown(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function pay(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function assessCreditLine(address creditLineAddress) external virtual;\\n\\n  function applyPayment(address creditLineAddress, uint256 amount) external virtual;\\n\\n  function getNextPaymentAmount(address creditLineAddress, uint256 asOfBLock) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x11f2741210ea8aeb0b94f56e9418d856be1f235cc18dadd7ea2945506c9b4aa1\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x10d9a993c2288e311e544532ade9e69f7a8c876f8c2fac92da7b5dd2a2a1dafa\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20withDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20withDec is IERC20 {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7b5fb02e023b6006a5199992f242caf23f64240c91e625f1390d6ca421b59531\",\"license\":\"MIT\"},\"contracts/interfaces/IFidu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC20withDec.sol\\\";\\n\\ninterface IFidu is IERC20withDec {\\n  function mintTo(address to, uint256 amount) external;\\n\\n  function burnFrom(address to, uint256 amount) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x130a7bd2ddca4f9da2f9090cbcc1d63c1e21e152baca4779f18939977a5f6c04\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchConfig {\\n  function getNumber(uint256 index) external returns (uint256);\\n\\n  function getAddress(uint256 index) external returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external returns (address);\\n\\n  function setNumber(uint256 index, uint256 newNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4df9680fa1db27f4204d24cd15af68a73c81b62f83c2ca6d3ee6b0a98bc7da9\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) external returns (address);\\n\\n  function updateGoldfinchConfig() external;\\n}\\n\",\"keccak256\":\"0x56767f0afaa74fb42c6e6be43ca846348580145cb455f3dbc6ccd6ed7c762a29\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IPool {\\n  uint256 public sharePrice;\\n\\n  function deposit(uint256 amount) external virtual;\\n\\n  function withdraw(uint256 usdcAmount) external virtual;\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual;\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) public virtual;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual returns (bool);\\n\\n  function drawdown(address to, uint256 amount) public virtual returns (bool);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function distributeLosses(address creditlineAddress, int256 writedownDelta) external virtual;\\n\\n  function assets() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc113de25b7c7e2ac0180d32fab63d0eab1f9f6198ebc006e414f4fbd309026c4\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IPoolTokens is IERC721 {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdbb1f3480d9d61b5afef1d47d3d5675450e857fd6ade0e48eda5c9e81b2be551\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function investJunior(ITranchedPool pool, uint256 amount) public virtual;\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x627a780e2b56ee268c21f1c76e6e2f7b366a75281e82d06cc3f0fd77aad3c484\",\"license\":\"MIT\"},\"contracts/interfaces/ISeniorPoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ISeniorPool.sol\\\";\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPoolStrategy {\\n  function invest(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256 amount);\\n\\n  function estimateInvestment(ISeniorPool seniorPool, ITranchedPool pool) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x01dddfa37160df25b52bc4f7dabd6c02e9a0805852bea5f2fa7499b2a7ffa00f\",\"license\":\"MIT\"},\"contracts/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {Reserved, Senior, Junior}\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n}\\n\",\"keccak256\":\"0x4ed0e2171f73d16b12203b1881e48d96c13d6a7e21f8386e89bd4b4cb6094bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xded4213a74e160a0539f6020736604fdc14f432a57665280c3dbc8e7b690d40a\",\"license\":\"MIT\"},\"contracts/library/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Safe ERC20 Transfer\\n * @notice Reverts when transfer is not successful\\n * @author Goldfinch\\n */\\nabstract contract SafeERC20Transfer {\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    bool success = erc20.transfer(to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Transfer(\\n    IERC20 erc20,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    safeERC20Transfer(erc20, to, amount, \\\"Failed to transfer ERC20\\\");\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    string memory message\\n  ) internal {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    bool success = erc20.transferFrom(from, to, amount);\\n    require(success, message);\\n  }\\n\\n  function safeERC20TransferFrom(\\n    IERC20 erc20,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    string memory message = \\\"Failed to transfer ERC20\\\";\\n    safeERC20TransferFrom(erc20, from, to, amount, message);\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance,\\n    string memory message\\n  ) internal {\\n    bool success = erc20.approve(spender, allowance);\\n    require(success, message);\\n  }\\n\\n  function safeERC20Approve(\\n    IERC20 erc20,\\n    address spender,\\n    uint256 allowance\\n  ) internal {\\n    string memory message = \\\"Failed to approve ERC20\\\";\\n    safeERC20Approve(erc20, spender, allowance, message);\\n  }\\n}\\n\",\"keccak256\":\"0x2ca2fbd70af85fe8986297482ede85eeb5ef835efd12e051db2e45b14b5bbeef\",\"license\":\"MIT\"},\"contracts/protocol/core/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PauserPausable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like ugpradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeSafe,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeSafe\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  using SafeMath for uint256;\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x7506f4edde679faa1260af6e090c4d090a6c39c6d9420d3b1712822219a60b2c\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"../../interfaces/IFidu.sol\\\";\\nimport \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../../interfaces/ISeniorPoolStrategy.sol\\\";\\nimport \\\"../../interfaces/ICreditDesk.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/ICUSDCContract.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchFactory.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigHelper {\\n  function getPool(GoldfinchConfig config) internal view returns (IPool) {\\n    return IPool(poolAddress(config));\\n  }\\n\\n  function getSeniorPool(GoldfinchConfig config) internal view returns (ISeniorPool) {\\n    return ISeniorPool(seniorPoolAddress(config));\\n  }\\n\\n  function getSeniorPoolStrategy(GoldfinchConfig config) internal view returns (ISeniorPoolStrategy) {\\n    return ISeniorPoolStrategy(seniorPoolStrategyAddress(config));\\n  }\\n\\n  function getUSDC(GoldfinchConfig config) internal view returns (IERC20withDec) {\\n    return IERC20withDec(usdcAddress(config));\\n  }\\n\\n  function getCreditDesk(GoldfinchConfig config) internal view returns (ICreditDesk) {\\n    return ICreditDesk(creditDeskAddress(config));\\n  }\\n\\n  function getFidu(GoldfinchConfig config) internal view returns (IFidu) {\\n    return IFidu(fiduAddress(config));\\n  }\\n\\n  function getCUSDCContract(GoldfinchConfig config) internal view returns (ICUSDCContract) {\\n    return ICUSDCContract(cusdcContractAddress(config));\\n  }\\n\\n  function getPoolTokens(GoldfinchConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getGoldfinchFactory(GoldfinchConfig config) internal view returns (IGoldfinchFactory) {\\n    return IGoldfinchFactory(goldfinchFactoryAddress(config));\\n  }\\n\\n  function oneInchAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.OneInch));\\n  }\\n\\n  function creditLineImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  function trustedForwarderAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TrustedForwarder));\\n  }\\n\\n  function configAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Pool));\\n  }\\n\\n  function poolTokensAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function seniorPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\\n  }\\n\\n  function seniorPoolStrategyAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPoolStrategy));\\n  }\\n\\n  function creditDeskAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditDesk));\\n  }\\n\\n  function goldfinchFactoryAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory));\\n  }\\n\\n  function fiduAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Fidu));\\n  }\\n\\n  function cusdcContractAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function migratedTranchedPoolAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.MigratedTranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(GoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function getReserveDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(GoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n}\\n\",\"keccak256\":\"0x0cdec64089d6644b314c44c48cd2fcee9ecc7e6667520e4f0b77ca865aa514a4\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio\\n  }\\n  enum Addresses {\\n    Pool,\\n    CreditLineImplementation,\\n    GoldfinchFactory,\\n    CreditDesk,\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder,\\n    CUSDCContract,\\n    GoldfinchConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation,\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation\\n  }\\n\\n  function getNumberName(uint256 number) public pure returns (string memory) {\\n    Numbers numberName = Numbers(number);\\n    if (Numbers.TransactionLimit == numberName) {\\n      return \\\"TransactionLimit\\\";\\n    }\\n    if (Numbers.TotalFundsLimit == numberName) {\\n      return \\\"TotalFundsLimit\\\";\\n    }\\n    if (Numbers.MaxUnderwriterLimit == numberName) {\\n      return \\\"MaxUnderwriterLimit\\\";\\n    }\\n    if (Numbers.ReserveDenominator == numberName) {\\n      return \\\"ReserveDenominator\\\";\\n    }\\n    if (Numbers.WithdrawFeeDenominator == numberName) {\\n      return \\\"WithdrawFeeDenominator\\\";\\n    }\\n    if (Numbers.LatenessGracePeriodInDays == numberName) {\\n      return \\\"LatenessGracePeriodInDays\\\";\\n    }\\n    if (Numbers.LatenessMaxDays == numberName) {\\n      return \\\"LatenessMaxDays\\\";\\n    }\\n    if (Numbers.DrawdownPeriodInSeconds == numberName) {\\n      return \\\"DrawdownPeriodInSeconds\\\";\\n    }\\n    if (Numbers.TransferRestrictionPeriodInDays == numberName) {\\n      return \\\"TransferRestrictionPeriodInDays\\\";\\n    }\\n    if (Numbers.LeverageRatio == numberName) {\\n      return \\\"LeverageRatio\\\";\\n    }\\n    revert(\\\"Unknown value passed to getNumberName\\\");\\n  }\\n\\n  function getAddressName(uint256 addressKey) public pure returns (string memory) {\\n    Addresses addressName = Addresses(addressKey);\\n    if (Addresses.Pool == addressName) {\\n      return \\\"Pool\\\";\\n    }\\n    if (Addresses.CreditLineImplementation == addressName) {\\n      return \\\"CreditLineImplementation\\\";\\n    }\\n    if (Addresses.GoldfinchFactory == addressName) {\\n      return \\\"GoldfinchFactory\\\";\\n    }\\n    if (Addresses.CreditDesk == addressName) {\\n      return \\\"CreditDesk\\\";\\n    }\\n    if (Addresses.Fidu == addressName) {\\n      return \\\"Fidu\\\";\\n    }\\n    if (Addresses.USDC == addressName) {\\n      return \\\"USDC\\\";\\n    }\\n    if (Addresses.TreasuryReserve == addressName) {\\n      return \\\"TreasuryReserve\\\";\\n    }\\n    if (Addresses.ProtocolAdmin == addressName) {\\n      return \\\"ProtocolAdmin\\\";\\n    }\\n    if (Addresses.OneInch == addressName) {\\n      return \\\"OneInch\\\";\\n    }\\n    if (Addresses.TrustedForwarder == addressName) {\\n      return \\\"TrustedForwarder\\\";\\n    }\\n    if (Addresses.CUSDCContract == addressName) {\\n      return \\\"CUSDCContract\\\";\\n    }\\n    if (Addresses.PoolTokens == addressName) {\\n      return \\\"PoolTokens\\\";\\n    }\\n    if (Addresses.TranchedPoolImplementation == addressName) {\\n      return \\\"TranchedPoolImplementation\\\";\\n    }\\n    if (Addresses.SeniorPool == addressName) {\\n      return \\\"SeniorPool\\\";\\n    }\\n    if (Addresses.SeniorPoolStrategy == addressName) {\\n      return \\\"SeniorPoolStrategy\\\";\\n    }\\n    if (Addresses.MigratedTranchedPoolImplementation == addressName) {\\n      return \\\"MigratedTranchedPoolImplementation\\\";\\n    }\\n    if (Addresses.BorrowerImplementation == addressName) {\\n      return \\\"BorrowerImplementation\\\";\\n    }\\n    revert(\\\"Unknown value passed to getAddressName\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xc9dffd140d1176a3e90fae9a1fbc703b068e01b6d235b35ad19cced08111f790\",\"license\":\"MIT\"},\"contracts/protocol/core/GoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"../../interfaces/IGoldfinchConfig.sol\\\";\\nimport \\\"./ConfigOptions.sol\\\";\\n\\n/**\\n * @title GoldfinchConfig\\n * @notice This contract stores mappings of useful \\\"protocol config state\\\", giving a central place\\n *  for all other contracts to access it. For example, the TransactionLimit, or the PoolAddress. These config vars\\n *  are enumerated in the `ConfigOptions` library, and can only be changed by admins of the protocol.\\n *  Note: While this inherits from BaseUpgradeablePausable, it is not deployed as an upgradeable contract (this\\n *    is mostly to save gas costs of having each call go through a proxy)\\n * @author Goldfinch\\n */\\n\\ncontract GoldfinchConfig is BaseUpgradeablePausable {\\n  bytes32 public constant GO_LISTER_ROLE = keccak256(\\\"GO_LISTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public addresses;\\n  mapping(uint256 => uint256) public numbers;\\n  mapping(address => bool) public goList;\\n\\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\\n\\n  event GoListed(address indexed member);\\n  event NoListed(address indexed member);\\n\\n  bool public valuesInitialized;\\n\\n  function initialize(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\n    __BaseUpgradeablePausable__init(owner);\\n\\n    _setupRole(GO_LISTER_ROLE, owner);\\n\\n    _setRoleAdmin(GO_LISTER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function setAddress(uint256 addressIndex, address newAddress) public onlyAdmin {\\n    require(addresses[addressIndex] == address(0), \\\"Address has already been initialized\\\");\\n\\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\\n    addresses[addressIndex] = newAddress;\\n  }\\n\\n  function setNumber(uint256 index, uint256 newNumber) public onlyAdmin {\\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\\n    numbers[index] = newNumber;\\n  }\\n\\n  function setTreasuryReserve(address newTreasuryReserve) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.TreasuryReserve);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newTreasuryReserve);\\n    addresses[key] = newTreasuryReserve;\\n  }\\n\\n  function setSeniorPoolStrategy(address newStrategy) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.SeniorPoolStrategy);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newStrategy);\\n    addresses[key] = newStrategy;\\n  }\\n\\n  function setCreditLineImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.CreditLineImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setBorrowerImplementation(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.BorrowerImplementation);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function setGoldfinchConfig(address newAddress) public onlyAdmin {\\n    uint256 key = uint256(ConfigOptions.Addresses.GoldfinchConfig);\\n    emit AddressUpdated(msg.sender, key, addresses[key], newAddress);\\n    addresses[key] = newAddress;\\n  }\\n\\n  function initializeFromOtherConfig(address _initialConfig) public onlyAdmin {\\n    require(!valuesInitialized, \\\"Already initialized values\\\");\\n    IGoldfinchConfig initialConfig = IGoldfinchConfig(_initialConfig);\\n    for (uint256 i = 0; i < 10; i++) {\\n      setNumber(i, initialConfig.getNumber(i));\\n    }\\n\\n    for (uint256 i = 0; i < 11; i++) {\\n      if (getAddress(i) == address(0)) {\\n        setAddress(i, initialConfig.getAddress(i));\\n      }\\n    }\\n    valuesInitialized = true;\\n  }\\n\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = true;\\n    emit GoListed(_member);\\n  }\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) public onlyGoListerRole {\\n    goList[_member] = false;\\n    emit NoListed(_member);\\n  }\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      addToGoList(_members[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external onlyGoListerRole {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      removeFromGoList(_members[i]);\\n    }\\n  }\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) public view returns (address) {\\n    return addresses[index];\\n  }\\n\\n  function getNumber(uint256 index) public view returns (uint256) {\\n    return numbers[index];\\n  }\\n\\n  modifier onlyGoListerRole() {\\n    require(hasRole(GO_LISTER_ROLE, _msgSender()), \\\"Must have go-lister role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x97211d3657e688fdd6708da08e6c082084a00d25ec4d77f9fdf1af3d26af2e18\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeSafe, PausableUpgradeSafe {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Must have pauser role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x855f5027a20c77b500dd8618a4881c64e8b63a62168fed0abf3be01a6e8e8a4d\",\"license\":\"MIT\"},\"contracts/protocol/core/TranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/drafts/IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport \\\"../../interfaces/IERC20withDec.sol\\\";\\nimport \\\"../../interfaces/IV2CreditLine.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"./GoldfinchConfig.sol\\\";\\nimport \\\"./BaseUpgradeablePausable.sol\\\";\\nimport \\\"./ConfigHelper.sol\\\";\\nimport \\\"../../external/FixedPoint.sol\\\";\\nimport \\\"../../library/SafeERC20Transfer.sol\\\";\\n\\ncontract TranchedPool is BaseUpgradeablePausable, ITranchedPool, SafeERC20Transfer {\\n  GoldfinchConfig public config;\\n  using ConfigHelper for GoldfinchConfig;\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FixedPoint for uint256;\\n\\n  bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n  uint256 public constant FP_SCALING_FACTOR = 1e18;\\n  uint256 public constant SECONDS_PER_DAY = 60 * 60 * 24;\\n  uint256 public constant ONE_HUNDRED = 100; // Need this because we cannot call .div on a literal 100\\n  uint256 public juniorFeePercent;\\n  bool public drawdownsPaused;\\n\\n  TrancheInfo internal seniorTranche;\\n  TrancheInfo internal juniorTranche;\\n\\n  event DepositMade(address indexed owner, uint256 indexed tranche, uint256 indexed tokenId, uint256 amount);\\n  event WithdrawalMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 interestWithdrawn,\\n    uint256 principalWithdrawn\\n  );\\n\\n  event PaymentApplied(\\n    address indexed payer,\\n    address indexed pool,\\n    uint256 interestAmount,\\n    uint256 principalAmount,\\n    uint256 remainingAmount,\\n    uint256 reserveAmount\\n  );\\n  event SharePriceUpdated(\\n    address indexed pool,\\n    uint256 indexed tranche,\\n    uint256 principalSharePrice,\\n    int256 principalDelta,\\n    uint256 interestSharePrice,\\n    int256 interestDelta\\n  );\\n  event ReserveFundsCollected(address indexed from, uint256 amount);\\n  event CreditLineMigrated(address indexed oldCreditLine, address indexed newCreditLine);\\n  event DrawdownMade(address indexed borrower, uint256 amount);\\n  event DrawdownsPaused(address indexed pool);\\n  event DrawdownsUnpaused(address indexed pool);\\n  event EmergencyShutdown(address indexed pool);\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public override initializer {\\n    require(\\n      address(_config) != address(0) && address(_borrower) != address(0),\\n      \\\"Config and borrower addresses cannot be empty\\\"\\n    );\\n\\n    config = GoldfinchConfig(_config);\\n    address owner = config.protocolAdminAddress();\\n    require(owner != address(0), \\\"Owner address cannot be empty\\\");\\n    __BaseUpgradeablePausable__init(owner);\\n    seniorTranche = TrancheInfo({\\n      id: uint256(ITranchedPool.Tranches.Senior),\\n      principalSharePrice: usdcToSharePrice(1, 1),\\n      interestSharePrice: 0,\\n      principalDeposited: 0,\\n      lockedUntil: 0\\n    });\\n    juniorTranche = TrancheInfo({\\n      id: uint256(ITranchedPool.Tranches.Junior),\\n      principalSharePrice: usdcToSharePrice(1, 1),\\n      interestSharePrice: 0,\\n      principalDeposited: 0,\\n      lockedUntil: 0\\n    });\\n    createAndSetCreditLine(_borrower, _limit, _interestApr, _paymentPeriodInDays, _termInDays, _lateFeeApr);\\n\\n    createdAt = block.timestamp;\\n    juniorFeePercent = _juniorFeePercent;\\n\\n    _setupRole(LOCKER_ROLE, _borrower);\\n    _setupRole(LOCKER_ROLE, owner);\\n    _setRoleAdmin(LOCKER_ROLE, OWNER_ROLE);\\n\\n    // Unlock self for infinite amount\\n    bool success = config.getUSDC().approve(address(this), uint256(-1));\\n    require(success, \\\"Failed to approve USDC\\\");\\n  }\\n\\n  /**\\n   * @notice Deposit a USDC amount into the pool for a tranche. Mints an NFT to the caller representing the position\\n   * @param tranche The number representing the tranche to deposit into\\n   * @param amount The USDC amount to tranfer from the caller to the pool\\n   * @return tokenId The tokenId of the NFT\\n   */\\n  function deposit(uint256 tranche, uint256 amount)\\n    public\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 tokenId)\\n  {\\n    TrancheInfo storage trancheInfo = getTrancheInfo(tranche);\\n    require(trancheInfo.lockedUntil == 0, \\\"Tranche has been locked\\\");\\n\\n    trancheInfo.principalDeposited = trancheInfo.principalDeposited.add(amount);\\n    IPoolTokens.MintParams memory params = IPoolTokens.MintParams({tranche: tranche, principalAmount: amount});\\n    tokenId = config.getPoolTokens().mint(params, msg.sender);\\n    safeERC20TransferFrom(config.getUSDC(), msg.sender, address(this), amount);\\n    emit DepositMade(msg.sender, tranche, tokenId, amount);\\n    return tokenId;\\n  }\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public override returns (uint256 tokenId) {\\n    IERC20Permit(config.usdcAddress()).permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    return deposit(tranche, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw an already deposited amount if the funds are available\\n   * @param tokenId The NFT representing the position\\n   * @param amount The amount to withdraw (must be <= interest+principal currently available to withdraw)\\n   * @return interestWithdrawn The interest amount that was withdrawn\\n   * @return principalWithdrawn The principal amount that was withdrawn\\n   */\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    public\\n    override\\n    onlyTokenHolder(tokenId)\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\\n  {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    TrancheInfo storage trancheInfo = getTrancheInfo(tokenInfo.tranche);\\n\\n    return _withdraw(trancheInfo, tokenInfo, tokenId, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw from many tokens (that the sender owns) in a single transaction\\n   * @param tokenIds An array of tokens ids representing the position\\n   * @param amounts An array of amounts to withdraw from the corresponding tokenIds\\n   */\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) public override {\\n    require(tokenIds.length == amounts.length, \\\"TokensIds and Amounts must be the same length\\\");\\n\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      withdraw(tokenIds[i], amounts[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Similar to withdraw but will withdraw all available funds\\n   * @param tokenId The NFT representing the position\\n   * @return interestWithdrawn The interest amount that was withdrawn\\n   * @return principalWithdrawn The principal amount that was withdrawn\\n   */\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    override\\n    onlyTokenHolder(tokenId)\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\\n  {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    TrancheInfo storage trancheInfo = getTrancheInfo(tokenInfo.tranche);\\n\\n    (uint256 interestRedeemable, uint256 principalRedeemable) = redeemableInterestAndPrincipal(trancheInfo, tokenInfo);\\n\\n    uint256 amount = interestRedeemable.add(principalRedeemable);\\n\\n    return _withdraw(trancheInfo, tokenInfo, tokenId, amount);\\n  }\\n\\n  /**\\n   * @notice Draws down the funds (and locks the pool) to the borrower address. Can only be called by the borrower\\n   * @param amount The amount to drawdown from the creditline (must be < limit)\\n   */\\n  function drawdown(uint256 amount) external override onlyLocker whenNotPaused {\\n    require(!drawdownsPaused, \\\"Drawdowns are currently paused\\\");\\n    if (!locked()) {\\n      // Assumes the senior fund has invested already (saves the borrower a separate transaction to lock the pool)\\n      _lockPool();\\n    }\\n\\n    creditLine.drawdown(amount);\\n\\n    // Update the share price to reflect the amount remaining in the pool\\n    uint256 amountRemaining = totalDeposited().sub(creditLine.balance());\\n    uint256 oldJuniorPrincipalSharePrice = juniorTranche.principalSharePrice;\\n    uint256 oldSeniorPrincipalSharePrice = seniorTranche.principalSharePrice;\\n    juniorTranche.principalSharePrice = calculateExpectedSharePrice(amountRemaining, juniorTranche);\\n    seniorTranche.principalSharePrice = calculateExpectedSharePrice(amountRemaining, seniorTranche);\\n\\n    address borrower = creditLine.borrower();\\n    safeERC20TransferFrom(config.getUSDC(), address(this), borrower, amount);\\n    emit DrawdownMade(borrower, amount);\\n    emit SharePriceUpdated(\\n      address(this),\\n      juniorTranche.id,\\n      juniorTranche.principalSharePrice,\\n      int256(oldJuniorPrincipalSharePrice.sub(juniorTranche.principalSharePrice)) * -1,\\n      juniorTranche.interestSharePrice,\\n      0\\n    );\\n    emit SharePriceUpdated(\\n      address(this),\\n      seniorTranche.id,\\n      seniorTranche.principalSharePrice,\\n      int256(oldSeniorPrincipalSharePrice.sub(seniorTranche.principalSharePrice)) * -1,\\n      seniorTranche.interestSharePrice,\\n      0\\n    );\\n  }\\n\\n  /**\\n   * @notice Locks the junior tranche, preventing more junior deposits. Gives time for the senior to determine how\\n   * much to invest (ensure leverage ratio cannot change for the period)\\n   */\\n  function lockJuniorCapital() external override onlyLocker whenNotPaused {\\n    _lockJuniorCapital();\\n  }\\n\\n  /**\\n   * @notice Locks the pool (locks both senior and junior tranches and starts the drawdown period). Beyond the drawdown\\n   * period, any unused capital is available to withdraw by all depositors\\n   */\\n  function lockPool() external override onlyLocker whenNotPaused {\\n    _lockPool();\\n  }\\n\\n  /**\\n   * @notice Triggers an assessment of the creditline and the applies the payments according the tranche waterfall\\n   */\\n  function assess() external override whenNotPaused {\\n    _assess();\\n  }\\n\\n  /**\\n   * @notice Allows repaying the creditline. Collects the USDC amount from the sender and triggers an assess\\n   * @param amount The amount to repay\\n   */\\n  function pay(uint256 amount) external override whenNotPaused {\\n    require(amount > 0, \\\"Must pay more than zero\\\");\\n\\n    collectPayment(amount);\\n    _assess();\\n  }\\n\\n  /**\\n   * @notice Migrates to a new goldfinch config address\\n   */\\n  function updateGoldfinchConfig() external onlyAdmin {\\n    config = GoldfinchConfig(config.configAddress());\\n    creditLine.updateGoldfinchConfig();\\n  }\\n\\n  /**\\n   * @notice Pauses the pool and sweeps any remaining funds to the treasury reserve.\\n   */\\n  function emergencyShutdown() public onlyAdmin {\\n    if (!paused()) {\\n      pause();\\n    }\\n\\n    IERC20withDec usdc = config.getUSDC();\\n    address reserveAddress = config.reserveAddress();\\n    // Sweep any funds to community reserve\\n    uint256 poolBalance = usdc.balanceOf(address(this));\\n    if (poolBalance > 0) {\\n      safeERC20Transfer(usdc, reserveAddress, poolBalance);\\n    }\\n\\n    uint256 clBalance = usdc.balanceOf(address(creditLine));\\n    if (clBalance > 0) {\\n      safeERC20TransferFrom(usdc, address(creditLine), reserveAddress, clBalance);\\n    }\\n    emit EmergencyShutdown(address(this));\\n  }\\n\\n  /**\\n   * @notice Pauses all drawdowns (but not deposits/withdraws)\\n   */\\n  function pauseDrawdowns() public onlyAdmin {\\n    drawdownsPaused = true;\\n    emit DrawdownsPaused(address(this));\\n  }\\n\\n  /**\\n   * @notice Unpause drawdowns\\n   */\\n  function unpauseDrawdowns() public onlyAdmin {\\n    drawdownsPaused = false;\\n    emit DrawdownsUnpaused(address(this));\\n  }\\n\\n  /**\\n   * @notice Migrates the accounting variables from the current creditline to a brand new one\\n   * @param _borrower The borrower address\\n   * @param _limit The new limit\\n   * @param _interestApr The new interest APR\\n   * @param _paymentPeriodInDays The new payment period in days\\n   * @param _termInDays The new term in days\\n   * @param _lateFeeApr The new late fee APR\\n   */\\n  function migrateCreditLine(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) public onlyAdmin {\\n    require(_borrower != address(0), \\\"Borrower must not be empty\\\");\\n    require(_paymentPeriodInDays != 0, \\\"Payment period must not be empty\\\");\\n    require(_termInDays != 0, \\\"Term must not be empty\\\");\\n\\n    address originalClAddr = address(creditLine);\\n    IV2CreditLine originalCl = IV2CreditLine(originalClAddr);\\n\\n    createAndSetCreditLine(_borrower, _limit, _interestApr, _paymentPeriodInDays, _termInDays, _lateFeeApr);\\n\\n    IV2CreditLine newCl = creditLine;\\n    address newClAddr = address(newCl);\\n\\n    emit CreditLineMigrated(originalClAddr, newClAddr);\\n\\n    // Copy over all accounting variables\\n    newCl.setBalance(originalCl.balance());\\n    newCl.setInterestOwed(originalCl.interestOwed());\\n    newCl.setPrincipalOwed(originalCl.principalOwed());\\n    newCl.setTermEndTime(originalCl.termEndTime());\\n    newCl.setNextDueTime(originalCl.nextDueTime());\\n    newCl.setInterestAccruedAsOf(originalCl.interestAccruedAsOf());\\n    newCl.setLastFullPaymentTime(originalCl.lastFullPaymentTime());\\n    newCl.setTotalInterestAccrued(originalCl.totalInterestAccrued());\\n\\n    // Transfer any funds to new CL\\n    uint256 clBalance = config.getUSDC().balanceOf(originalClAddr);\\n    if (clBalance > 0) {\\n      safeERC20TransferFrom(config.getUSDC(), originalClAddr, newClAddr, clBalance);\\n    }\\n\\n    // Close out old CL\\n    originalCl.setBalance(0);\\n    originalCl.setLimit(0);\\n  }\\n\\n  /**\\n   * @notice Migrates to a new creditline without copying the accounting variables\\n   */\\n  function migrateAndSetNewCreditLine(address newCl) public onlyAdmin {\\n    require(newCl != address(0), \\\"Creditline cannot be empty\\\");\\n    address originalClAddr = address(creditLine);\\n    // Transfer any funds to new CL\\n    uint256 clBalance = config.getUSDC().balanceOf(originalClAddr);\\n    if (clBalance > 0) {\\n      safeERC20TransferFrom(config.getUSDC(), originalClAddr, newCl, clBalance);\\n    }\\n\\n    // Close out old CL\\n    creditLine.setBalance(0);\\n    creditLine.setLimit(0);\\n\\n    // set new CL\\n    creditLine = IV2CreditLine(newCl);\\n    // sanity check that the new address is in fact a creditline\\n    creditLine.limit();\\n\\n    emit CreditLineMigrated(originalClAddr, address(creditLine));\\n  }\\n\\n  // CreditLine proxy methods, for convenience\\n  function limit() public view returns (uint256) {\\n    return creditLine.limit();\\n  }\\n\\n  function borrower() public view returns (address) {\\n    return creditLine.borrower();\\n  }\\n\\n  function interestApr() public view returns (uint256) {\\n    return creditLine.interestApr();\\n  }\\n\\n  function paymentPeriodInDays() public view returns (uint256) {\\n    return creditLine.paymentPeriodInDays();\\n  }\\n\\n  function termInDays() public view returns (uint256) {\\n    return creditLine.termInDays();\\n  }\\n\\n  function lateFeeApr() public view returns (uint256) {\\n    return creditLine.lateFeeApr();\\n  }\\n\\n  function getTranche(uint256 tranche) public view override returns (TrancheInfo memory) {\\n    return getTrancheInfo(tranche);\\n  }\\n\\n  /**\\n   * @notice Converts USDC amounts to share price\\n   * @param amount The USDC amount to convert\\n   * @param totalShares The total shares outstanding\\n   * @return The share price of the input amount\\n   */\\n  function usdcToSharePrice(uint256 amount, uint256 totalShares) public pure returns (uint256) {\\n    return totalShares == 0 ? 0 : amount.mul(FP_SCALING_FACTOR).div(totalShares);\\n  }\\n\\n  /**\\n   * @notice Converts share price to USDC amounts\\n   * @param sharePrice The share price to convert\\n   * @param totalShares The total shares outstanding\\n   * @return The USDC amount of the input share price\\n   */\\n  function sharePriceToUsdc(uint256 sharePrice, uint256 totalShares) public pure returns (uint256) {\\n    return sharePrice.mul(totalShares).div(FP_SCALING_FACTOR);\\n  }\\n\\n  /**\\n   * @notice Determines the amount of interest and principal redeemable by a particular tokenId\\n   * @param tokenId The token representing the position\\n   * @return interestRedeemable The interest available to redeem\\n   * @return principalRedeemable The principal available to redeem\\n   */\\n  function availableToWithdraw(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable)\\n  {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    TrancheInfo storage trancheInfo = getTrancheInfo(tokenInfo.tranche);\\n\\n    if (currentTime() > trancheInfo.lockedUntil) {\\n      return redeemableInterestAndPrincipal(trancheInfo, tokenInfo);\\n    } else {\\n      return (0, 0);\\n    }\\n  }\\n\\n  /* Internal functions  */\\n\\n  function _withdraw(\\n    TrancheInfo storage trancheInfo,\\n    IPoolTokens.TokenInfo memory tokenInfo,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) internal returns (uint256 interestWithdrawn, uint256 principalWithdrawn) {\\n    (uint256 interestRedeemable, uint256 principalRedeemable) = redeemableInterestAndPrincipal(trancheInfo, tokenInfo);\\n    uint256 netRedeemable = interestRedeemable.add(principalRedeemable);\\n\\n    require(amount <= netRedeemable, \\\"Invalid redeem amount\\\");\\n    require(currentTime() > trancheInfo.lockedUntil, \\\"Tranche is locked\\\");\\n\\n    // If the tranche has not been locked, ensure the deposited amount is correct\\n    if (trancheInfo.lockedUntil == 0) {\\n      trancheInfo.principalDeposited = trancheInfo.principalDeposited.sub(amount);\\n    }\\n\\n    uint256 interestToRedeem = Math.min(interestRedeemable, amount);\\n    uint256 principalToRedeem = Math.min(principalRedeemable, amount.sub(interestToRedeem));\\n\\n    config.getPoolTokens().redeem(tokenId, principalToRedeem, interestToRedeem);\\n    safeERC20TransferFrom(config.getUSDC(), address(this), msg.sender, principalToRedeem.add(interestToRedeem));\\n\\n    emit WithdrawalMade(msg.sender, tokenInfo.tranche, tokenId, interestToRedeem, principalToRedeem);\\n\\n    return (interestToRedeem, principalToRedeem);\\n  }\\n\\n  function redeemableInterestAndPrincipal(TrancheInfo storage trancheInfo, IPoolTokens.TokenInfo memory tokenInfo)\\n    internal\\n    view\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable)\\n  {\\n    // This supports withdrawing before or after locking because principal share price starts at 1\\n    // and is set to 0 on lock. Interest share price is always 0 until interest payments come back, when it increases\\n    uint256 maxPrincipalRedeemable = sharePriceToUsdc(trancheInfo.principalSharePrice, tokenInfo.principalAmount);\\n    // The principalAmount is used as the totalShares because we want the interestSharePrice to be expressed as a\\n    // percent of total loan value e.g. if the interest is 10% APR, the interestSharePrice should approach a max of 0.1.\\n    uint256 maxInterestRedeemable = sharePriceToUsdc(trancheInfo.interestSharePrice, tokenInfo.principalAmount);\\n\\n    interestRedeemable = maxInterestRedeemable.sub(tokenInfo.interestRedeemed);\\n    principalRedeemable = maxPrincipalRedeemable.sub(tokenInfo.principalRedeemed);\\n\\n    return (interestRedeemable, principalRedeemable);\\n  }\\n\\n  function _lockJuniorCapital() internal {\\n    require(!locked(), \\\"Pool already locked\\\");\\n    require(juniorTranche.lockedUntil == 0, \\\"Junior tranche already locked\\\");\\n\\n    juniorTranche.lockedUntil = currentTime().add(config.getDrawdownPeriodInSeconds());\\n  }\\n\\n  function _lockPool() internal {\\n    require(juniorTranche.lockedUntil > 0, \\\"Junior tranche must be locked first\\\");\\n\\n    creditLine.setLimit(Math.min(totalDeposited(), creditLine.limit()));\\n\\n    // We start the drawdown period, so backers can withdraw unused capital after borrower draws down\\n    uint256 lockPeriod = config.getDrawdownPeriodInSeconds();\\n    seniorTranche.lockedUntil = currentTime().add(lockPeriod);\\n    juniorTranche.lockedUntil = currentTime().add(lockPeriod);\\n  }\\n\\n  function collectInterestAndPrincipal(\\n    address from,\\n    uint256 interest,\\n    uint256 principal\\n  ) internal returns (uint256 totalReserveAmount) {\\n    safeERC20TransferFrom(config.getUSDC(), from, address(this), principal.add(interest), \\\"Failed to collect payment\\\");\\n\\n    (uint256 interestAccrued, uint256 principalAccrued) = getTotalInterestAndPrincipal();\\n    uint256 reserveFeePercent = ONE_HUNDRED.div(config.getReserveDenominator()); // Convert the denonminator to percent\\n\\n    uint256 interestRemaining = interest;\\n    uint256 principalRemaining = principal;\\n\\n    // First determine the expected share price for the senior tranche. This is the gross amount the senior\\n    // tranche should receive.\\n    uint256 expectedInterestSharePrice = calculateExpectedSharePrice(interestAccrued, seniorTranche);\\n    uint256 expectedPrincipalSharePrice = calculateExpectedSharePrice(principalAccrued, seniorTranche);\\n\\n    // Deduct the junior fee and the protocol reserve\\n    uint256 desiredNetInterestSharePrice = scaleByFraction(\\n      expectedInterestSharePrice,\\n      ONE_HUNDRED.sub(juniorFeePercent.add(reserveFeePercent)),\\n      ONE_HUNDRED\\n    );\\n    // Collect protocol fee interest received (we've subtracted this from the senior portion above)\\n    uint256 reserveDeduction = scaleByFraction(interestRemaining, reserveFeePercent, ONE_HUNDRED);\\n    totalReserveAmount = totalReserveAmount.add(reserveDeduction); // protocol fee\\n    interestRemaining = interestRemaining.sub(reserveDeduction);\\n\\n    // Apply the interest remaining so we get up to the netInterestSharePrice\\n    (interestRemaining, principalRemaining) = applyToTrancheBySharePrice(\\n      interestRemaining,\\n      principalRemaining,\\n      desiredNetInterestSharePrice,\\n      expectedPrincipalSharePrice,\\n      seniorTranche\\n    );\\n\\n    // Then fill up the junior tranche with all the interest remaining, upto the principal share price\\n    expectedInterestSharePrice = juniorTranche.interestSharePrice.add(\\n      usdcToSharePrice(interestRemaining, juniorTranche.principalDeposited)\\n    );\\n    expectedPrincipalSharePrice = calculateExpectedSharePrice(principalAccrued, juniorTranche);\\n    (interestRemaining, principalRemaining) = applyToTrancheBySharePrice(\\n      interestRemaining,\\n      principalRemaining,\\n      expectedInterestSharePrice,\\n      expectedPrincipalSharePrice,\\n      juniorTranche\\n    );\\n\\n    // All remaining interest and principal is applied towards the junior tranche as interest\\n    interestRemaining = interestRemaining.add(principalRemaining);\\n    // Since any principal remaining is treated as interest (there is \\\"extra\\\" interest to be distributed)\\n    // we need to make sure to collect the protocol fee on the additional interest (we only deducted the\\n    // fee on the original interest portion)\\n    reserveDeduction = scaleByFraction(principalRemaining, reserveFeePercent, ONE_HUNDRED);\\n    totalReserveAmount = totalReserveAmount.add(reserveDeduction);\\n    interestRemaining = interestRemaining.sub(reserveDeduction);\\n    principalRemaining = 0;\\n\\n    (interestRemaining, principalRemaining) = applyToTrancheByAmount(\\n      interestRemaining.add(principalRemaining),\\n      0,\\n      interestRemaining.add(principalRemaining),\\n      0,\\n      juniorTranche\\n    );\\n\\n    sendToReserve(totalReserveAmount);\\n\\n    return totalReserveAmount;\\n  }\\n\\n  function getTotalInterestAndPrincipal() internal view returns (uint256 interestAccrued, uint256 principalAccrued) {\\n    interestAccrued = creditLine.totalInterestAccrued();\\n    principalAccrued = creditLine.principalOwed();\\n    // Add any remaining balance we have to the principal accrued so expected share price will reflect partial\\n    // drawdowns appropriately. (e.g. if 300K was drawndown from a 1M loan, current and expected share price should\\n    // be 0.7 and not 0)\\n    principalAccrued = principalAccrued.add(totalDeposited().sub(creditLine.balance()));\\n    return (interestAccrued, principalAccrued);\\n  }\\n\\n  function calculateExpectedSharePrice(uint256 amount, TrancheInfo memory tranche) internal view returns (uint256) {\\n    uint256 sharePrice = usdcToSharePrice(amount, tranche.principalDeposited);\\n    return scaleByPercentOwnership(sharePrice, tranche);\\n  }\\n\\n  // If the senior tranche is locked, then the pool is not open to any more deposits (could throw off leverage ratio)\\n  function locked() internal view returns (bool) {\\n    return seniorTranche.lockedUntil > 0;\\n  }\\n\\n  function createAndSetCreditLine(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr\\n  ) internal {\\n    address _creditLine = config.getGoldfinchFactory().createCreditLine();\\n    creditLine = IV2CreditLine(_creditLine);\\n    creditLine.initialize(\\n      address(config),\\n      address(this), // Set self as the owner\\n      _borrower,\\n      _limit,\\n      _interestApr,\\n      _paymentPeriodInDays,\\n      _termInDays,\\n      _lateFeeApr\\n    );\\n  }\\n\\n  function getTrancheInfo(uint256 tranche) internal view returns (TrancheInfo storage) {\\n    require(\\n      tranche == uint256(ITranchedPool.Tranches.Senior) || tranche == uint256(ITranchedPool.Tranches.Junior),\\n      \\\"Unsupported tranche\\\"\\n    );\\n    TrancheInfo storage trancheInfo = tranche == uint256(ITranchedPool.Tranches.Senior) ? seniorTranche : juniorTranche;\\n    return trancheInfo;\\n  }\\n\\n  function scaleByPercentOwnership(uint256 amount, TrancheInfo memory tranche) internal view returns (uint256) {\\n    uint256 totalDeposited = juniorTranche.principalDeposited.add(seniorTranche.principalDeposited);\\n    return scaleByFraction(amount, tranche.principalDeposited, totalDeposited);\\n  }\\n\\n  function scaleByFraction(\\n    uint256 amount,\\n    uint256 fraction,\\n    uint256 total\\n  ) internal pure returns (uint256) {\\n    FixedPoint.Unsigned memory totalAsFixedPoint = FixedPoint.fromUnscaledUint(total);\\n    FixedPoint.Unsigned memory fractionAsFixedPoint = FixedPoint.fromUnscaledUint(fraction);\\n    return fractionAsFixedPoint.div(totalAsFixedPoint).mul(amount).div(FP_SCALING_FACTOR).rawValue;\\n  }\\n\\n  function totalDeposited() internal view returns (uint256) {\\n    return juniorTranche.principalDeposited.add(seniorTranche.principalDeposited);\\n  }\\n\\n  function currentTime() internal view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function applyToTrancheBySharePrice(\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    uint256 desiredInterestSharePrice,\\n    uint256 desiredPrincipalSharePrice,\\n    TrancheInfo storage tranche\\n  ) internal returns (uint256, uint256) {\\n    uint256 totalShares = tranche.principalDeposited;\\n\\n    // If the desired share price is lower, then ignore it, and leave it unchanged\\n    uint256 principalSharePrice = tranche.principalSharePrice;\\n    if (desiredPrincipalSharePrice < principalSharePrice) {\\n      desiredPrincipalSharePrice = principalSharePrice;\\n    }\\n    uint256 interestSharePrice = tranche.interestSharePrice;\\n    if (desiredInterestSharePrice < interestSharePrice) {\\n      desiredInterestSharePrice = interestSharePrice;\\n    }\\n    uint256 interestSharePriceDifference = desiredInterestSharePrice.sub(interestSharePrice);\\n    uint256 desiredInterestAmount = sharePriceToUsdc(interestSharePriceDifference, totalShares);\\n    uint256 principalSharePriceDifference = desiredPrincipalSharePrice.sub(principalSharePrice);\\n    uint256 desiredPrincipalAmount = sharePriceToUsdc(principalSharePriceDifference, totalShares);\\n\\n    (interestRemaining, principalRemaining) = applyToTrancheByAmount(\\n      interestRemaining,\\n      principalRemaining,\\n      desiredInterestAmount,\\n      desiredPrincipalAmount,\\n      tranche\\n    );\\n    return (interestRemaining, principalRemaining);\\n  }\\n\\n  function applyToTrancheByAmount(\\n    uint256 interestRemaining,\\n    uint256 principalRemaining,\\n    uint256 desiredInterestAmount,\\n    uint256 desiredPrincipalAmount,\\n    TrancheInfo storage tranche\\n  ) internal returns (uint256, uint256) {\\n    uint256 totalShares = tranche.principalDeposited;\\n    uint256 newSharePrice;\\n\\n    (interestRemaining, newSharePrice) = applyToSharePrice(\\n      interestRemaining,\\n      tranche.interestSharePrice,\\n      desiredInterestAmount,\\n      totalShares\\n    );\\n    uint256 oldInterestSharePrice = tranche.interestSharePrice;\\n    tranche.interestSharePrice = newSharePrice;\\n\\n    (principalRemaining, newSharePrice) = applyToSharePrice(\\n      principalRemaining,\\n      tranche.principalSharePrice,\\n      desiredPrincipalAmount,\\n      totalShares\\n    );\\n    uint256 oldPrincipalSharePrice = tranche.principalSharePrice;\\n    tranche.principalSharePrice = newSharePrice;\\n    emit SharePriceUpdated(\\n      address(this),\\n      tranche.id,\\n      tranche.principalSharePrice,\\n      int256(tranche.principalSharePrice.sub(oldPrincipalSharePrice)),\\n      tranche.interestSharePrice,\\n      int256(tranche.interestSharePrice.sub(oldInterestSharePrice))\\n    );\\n    return (interestRemaining, principalRemaining);\\n  }\\n\\n  function applyToSharePrice(\\n    uint256 amountRemaining,\\n    uint256 currentSharePrice,\\n    uint256 desiredAmount,\\n    uint256 totalShares\\n  ) internal pure returns (uint256, uint256) {\\n    // If no money left to apply, or don't need any changes, return the original amounts\\n    if (amountRemaining == 0 || desiredAmount == 0) {\\n      return (amountRemaining, currentSharePrice);\\n    }\\n    if (amountRemaining < desiredAmount) {\\n      // We don't have enough money to adjust share price to the desired level. So just use whatever amount is left\\n      desiredAmount = amountRemaining;\\n    }\\n    uint256 sharePriceDifference = usdcToSharePrice(desiredAmount, totalShares);\\n    return (amountRemaining.sub(desiredAmount), currentSharePrice.add(sharePriceDifference));\\n  }\\n\\n  function sendToReserve(uint256 amount) internal {\\n    emit ReserveFundsCollected(address(this), amount);\\n    safeERC20TransferFrom(\\n      config.getUSDC(),\\n      address(this),\\n      config.reserveAddress(),\\n      amount,\\n      \\\"Failed to send to reserve\\\"\\n    );\\n  }\\n\\n  function collectPayment(uint256 amount) internal {\\n    safeERC20TransferFrom(config.getUSDC(), msg.sender, address(creditLine), amount, \\\"Failed to collect payment\\\");\\n  }\\n\\n  function _assess() internal {\\n    (uint256 paymentRemaining, uint256 interestPayment, uint256 principalPayment) = creditLine.assess();\\n    if (interestPayment > 0 || principalPayment > 0) {\\n      uint256 reserveAmount = collectInterestAndPrincipal(\\n        address(creditLine),\\n        interestPayment,\\n        principalPayment.add(paymentRemaining)\\n      );\\n      emit PaymentApplied(\\n        creditLine.borrower(),\\n        address(this),\\n        interestPayment,\\n        principalPayment,\\n        paymentRemaining,\\n        reserveAmount\\n      );\\n    }\\n  }\\n\\n  modifier onlyLocker() {\\n    require(hasRole(LOCKER_ROLE, msg.sender), \\\"Must have locker role to perform this action\\\");\\n    _;\\n  }\\n\\n  modifier onlyTokenHolder(uint256 tokenId) {\\n    require(\\n      config.getPoolTokens().isApprovedOrOwner(msg.sender, tokenId),\\n      \\\"Only the token owner is allowed to call this function\\\"\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x156c76447273b042410535aec852b75e576672e0a4b18967caf48c806dacc600\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061526b806100206000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c806391d148541161019d578063bfaa8cca116100e9578063d547741f116100a2578063e58378bb1161007c578063e58378bb146105d0578063e63ab1e9146105d8578063f0b25bde146105e0578063f3621367146105e85761030c565b8063d547741f1461058a578063d972e8ad1461059d578063e2bbb158146105bd5761030c565b8063bfaa8cca14610539578063c290d69114610541578063c77d569814610554578063ca15c8731461055c578063cde888451461056f578063cf09e0d0146105825761030c565b8063a4d66daf11610156578063aa2a7c4c11610130578063aa2a7c4c1461050e578063b396999214610521578063b6db75a014610529578063bf6c87c7146105315761030c565b8063a4d66daf146104f6578063a6a25e88146104fe578063a8f9c4fe146105065761030c565b806391d148541461049a57806399dd8df3146104ad5780639d110530146104b5578063a079a4dd146104c8578063a18d4176146104db578063a217fddf146104ee5761030c565b80634d02fe6f1161025c57806368dcfdc0116102155780637df1f1b9116101ef5780637df1f1b9146104645780638456cb591461046c5780638ba796af146104745780639010d07c146104875761030c565b806368dcfdc01461044c57806374f0314f1461045457806379502c551461045c5761030c565b80634d02fe6f146103fb5780634f92a7281461040e578063515bc32314610416578063526d81f61461042957806356ce1560146104315780635c975abb146104445761030c565b80633403c2fc116102c95780634026478e116102a35780634026478e146103b5578063441a3e70146103bd57806347195e13146103de57806348e6f296146103f35761030c565b80633403c2fc1461039257806336568abe1461039a5780633f4ba83a146103ad5761030c565b80630174b449146103115780630881806c1461033a578063097616a31461034457806317f7694114610357578063248a9ca31461036c5780632f2ff15d1461037f575b600080fd5b61032461031f3660046146e1565b6105f0565b60405161033191906148f6565b60405180910390f35b610342610617565b005b610342610352366004614524565b610681565b61035f6107b1565b60405161033191906148eb565b61032461037a36600461469a565b6107bb565b61034261038d3660046146b2565b6107d0565b610342610814565b6103426103a83660046146b2565b6109eb565b610342610a2d565b610342610a6b565b6103d06103cb3660046146e1565b610aca565b60405161033192919061519c565b6103e6610ca4565b6040516103319190614812565b610324610cb4565b6103d061040936600461469a565b610d37565b610342610e1d565b6103246104243660046147bb565b610ecd565b610342610f64565b61034261043f366004614524565b610fef565b61035f61129e565b6103246112a7565b6103246112b3565b6103e66112ba565b6103e66112ca565b610342611348565b61034261048236600461455c565b611386565b6103e66104953660046146e1565b611690565b61035f6104a83660046146b2565b6116a8565b6103246116c0565b6103426104c3366004614611565b611706565b6103426104d636600461469a565b61176f565b6103426104e93660046145c6565b611b24565b6103246123fd565b610324612402565b610342612448565b610342612473565b6103d061051c36600461469a565b6124d2565b6103246126cd565b61035f612713565b61034261272f565b61032461278b565b61034261054f36600461469a565b612790565b6103246127e4565b61032461056a36600461469a565b6127eb565b61032461057d3660046146e1565b612802565b61032461282e565b6103426105983660046146b2565b612835565b6105b06105ab36600461469a565b61286f565b6040516103319190615147565b6103246105cb3660046146e1565b6128bf565b610324612a85565b610324612a97565b610324612aa9565b610324612aef565b600061060e670de0b6b3a76400006106088585612b01565b90612b3b565b90505b92915050565b61062f600080516020615216833981519152336116a8565b6106545760405162461bcd60e51b815260040161064b90614d6e565b60405180910390fd5b60975460ff16156106775760405162461bcd60e51b815260040161064b90614d0f565b61067f612b7d565b565b600054610100900460ff168061069a575061069a612bf1565b806106a8575060005460ff16155b6106c45760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff161580156106ef576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166107155760405162461bcd60e51b815260040161064b90614dba565b61071d612bf7565b610725612c78565b61072d612d04565b6107456000805160206151d68339815191528361080a565b61075d6000805160206151f68339815191528361080a565b6107836000805160206151f68339815191526000805160206151d6833981519152612d93565b61079b6000805160206151d683398151915280612d93565b80156107ad576000805461ff00191690555b5050565b6101c75460ff1681565b60009081526065602052604090206002015490565b6000828152606560205260409020600201546107ee906104a8612da8565b61080a5760405162461bcd60e51b815260040161064b90614994565b6107ad8282612dac565b61081c612713565b6108385760405162461bcd60e51b815260040161064b90615051565b61084061129e565b61084c5761084c611348565b6101c554600090610865906001600160a01b0316612e15565b6101c554909150600090610881906001600160a01b0316612e20565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016108b19190614812565b60206040518083038186803b1580156108c957600080fd5b505afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109019190614776565b9050801561091457610914838383612ea0565b6101c3546040516370a0823160e01b81526000916001600160a01b03808716926370a0823192610948921690600401614812565b60206040518083038186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190614776565b905080156109ba576101c3546109ba9085906001600160a01b03168584612ee1565b60405130907f1fc1e771236d2e93bb9541cdcb4654ba0fd3fb615b48d829b7b365f03998512690600090a250505050565b6109f3612da8565b6001600160a01b0316816001600160a01b031614610a235760405162461bcd60e51b815260040161064b906150d3565b6107ad8282612f1d565b610a476000805160206151f68339815191526104a8612da8565b610a635760405162461bcd60e51b815260040161064b90614ac5565b61067f612f86565b610a83600080516020615216833981519152336116a8565b610a9f5760405162461bcd60e51b815260040161064b90614d6e565b60975460ff1615610ac25760405162461bcd60e51b815260040161064b90614d0f565b61067f612ff2565b6101c55460009081908490610ae7906001600160a01b0316613147565b6001600160a01b031663430c208133836040518363ffffffff1660e01b8152600401610b14929190614867565b60206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b64919061467a565b610b805760405162461bcd60e51b815260040161064b90614f5e565b60c95460ff16610ba25760405162461bcd60e51b815260040161064b9061501a565b60c9805460ff1916905560975460ff1615610bcf5760405162461bcd60e51b815260040161064b90614d0f565b610bd761444e565b6101c554610bed906001600160a01b0316613147565b6001600160a01b0316638c7a63ae876040518263ffffffff1660e01b8152600401610c1891906148f6565b60a06040518083038186803b158015610c3057600080fd5b505afa158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c689190614702565b90506000610c798260200151613152565b9050610c878183898961319c565b9450945050505060c9805460ff1916600117905590939092509050565b6101c3546001600160a01b031681565b6101c35460408051632473794b60e11b815290516000926001600160a01b0316916348e6f296916004808301926020929190829003018186803b158015610cfa57600080fd5b505afa158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190614776565b905090565b600080610d4261444e565b6101c554610d58906001600160a01b0316613147565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b8152600401610d8391906148f6565b60a06040518083038186803b158015610d9b57600080fd5b505afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190614702565b90506000610de48260200151613152565b90508060040154610df3613345565b1115610e0e57610e038183613349565b935093505050610e18565b6000809350935050505b915091565b610e25612713565b610e415760405162461bcd60e51b815260040161064b90615051565b6101c554610e57906001600160a01b03166133b4565b6101c580546001600160a01b0319166001600160a01b039283161790556101c354604080516309f254e560e31b815290519190921691634f92a72891600480830192600092919082900301818387803b158015610eb357600080fd5b505af1158015610ec7573d6000803e3d6000fd5b50505050565b6101c554600090610ee6906001600160a01b03166133cc565b6001600160a01b031663d505accf333089898989896040518863ffffffff1660e01b8152600401610f1d9796959493929190614826565b600060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b50505050610f5987876128bf565b979650505050505050565b600054610100900460ff1680610f7d5750610f7d612bf1565b80610f8b575060005460ff16155b610fa75760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff16158015610fd2576000805460ff1961ff0019909116610100171660011790555b610fda612c78565b8015610fec576000805461ff00191690555b50565b610ff7612713565b6110135760405162461bcd60e51b815260040161064b90615051565b6001600160a01b0381166110395760405162461bcd60e51b815260040161064b90614b11565b6101c3546101c5546001600160a01b039182169160009161105a9116612e15565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016110859190614812565b60206040518083038186803b15801561109d57600080fd5b505afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190614776565b905080156110ff576101c5546110ff906110f7906001600160a01b0316612e15565b838584612ee1565b6101c354604051637d8b34e560e11b81526001600160a01b039091169063fb1669ca90611131906000906004016148f6565b600060405180830381600087803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b50506101c3546040516327ea6f2b60e01b81526001600160a01b0390911692506327ea6f2b9150611195906000906004016148f6565b600060405180830381600087803b1580156111af57600080fd5b505af11580156111c3573d6000803e3d6000fd5b50506101c380546001600160a01b0319166001600160a01b0387811691909117918290556040805163a4d66daf60e01b8152905192909116935063a4d66daf9250600480820192602092909190829003018186803b15801561122457600080fd5b505afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c9190614776565b506101c3546040516001600160a01b03918216918416907f987cdba0cba67c68d2c8aba6a4ba6545565eccfb3e2e5ff39579ffd94acaf9bb90600090a3505050565b60975460ff1690565b670de0b6b3a764000081565b6201518081565b6101c5546001600160a01b031681565b6101c35460408051637df1f1b960e01b815290516000926001600160a01b031691637df1f1b9916004808301926020929190829003018186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190614540565b6113626000805160206151f68339815191526104a8612da8565b61137e5760405162461bcd60e51b815260040161064b90614ac5565b61067f6133e4565b600054610100900460ff168061139f575061139f612bf1565b806113ad575060005460ff16155b6113c95760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff161580156113f4576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0389161580159061141457506001600160a01b03881615155b6114305760405162461bcd60e51b815260040161064b90614bac565b6101c580546001600160a01b0319166001600160a01b038b8116919091179182905560009161145f911661343d565b90506001600160a01b0381166114875760405162461bcd60e51b815260040161064b90614c30565b61149081610681565b6040805160a081019091528060018152602001600081526020016114b5600180612802565b815260006020808301829052604092830182905283516101c855838101516101c955838301516101ca5560608401516101cb556080909301516101cc55815160a0810183526002815292830152810161150f600180612802565b81526000602080830182905260409283019190915282516101cd558201516101ce558101516101cf5560608101516101d055608001516101d155611557898888888888613455565b426101c4556101c688905561157a6000805160206152168339815191528a61080a565b6115926000805160206152168339815191528261080a565b6115b86000805160206152168339815191526000805160206151d6833981519152612d93565b6101c5546000906115d1906001600160a01b0316612e15565b6001600160a01b031663095ea7b3306000196040518363ffffffff1660e01b8152600401611600929190614867565b602060405180830381600087803b15801561161a57600080fd5b505af115801561162e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611652919061467a565b9050806116715760405162461bcd60e51b815260040161064b90614a11565b50508015611685576000805461ff00191690555b505050505050505050565b600082815260656020526040812061060e9083613577565b600082815260656020526040812061060e9083613583565b6101c354604080516399dd8df360e01b815290516000926001600160a01b0316916399dd8df3916004808301926020929190829003018186803b158015610cfa57600080fd5b8281146117255760405162461bcd60e51b815260040161064b90614a41565b60005b818110156117685761175e85858381811061173f57fe5b9050602002013584848481811061175257fe5b90506020020135610aca565b5050600101611728565b5050505050565b611787600080516020615216833981519152336116a8565b6117a35760405162461bcd60e51b815260040161064b90614d6e565b60975460ff16156117c65760405162461bcd60e51b815260040161064b90614d0f565b6101c75460ff16156117ea5760405162461bcd60e51b815260040161064b90614eb5565b6117f2613598565b6117fe576117fe612ff2565b6101c35460405163a079a4dd60e01b81526001600160a01b039091169063a079a4dd9061182f9084906004016148f6565b600060405180830381600087803b15801561184957600080fd5b505af115801561185d573d6000803e3d6000fd5b5050505060006118fb6101c360009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b557600080fd5b505afa1580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190614776565b6118f56135a1565b906135b6565b6101cf546101ca546040805160a0810182526101cd5481526101ce5460208201529081018390526101d05460608201526101d154608082015292935090916119449084906135f8565b6101cf556040805160a0810182526101c85481526101c95460208201526101ca54918101919091526101cb5460608201526101cc5460808201526119899084906135f8565b6101ca556101c35460408051637df1f1b960e01b815290516000926001600160a01b031691637df1f1b9916004808301926020929190829003018186803b1580156119d357600080fd5b505afa1580156119e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0b9190614540565b6101c554909150611a3090611a28906001600160a01b0316612e15565b308388612ee1565b806001600160a01b03167f7411b87a3c039bdfd8f3510b21e8bd0736265f53513735e1f4aa7b4f306b728d86604051611a6991906148f6565b60405180910390a26101cd546101cf5430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b68790611aa787826135b6565b6101d054604051611abf939260009081039291615181565b60405180910390a36101c8546101ca5430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b68790611afd86826135b6565b6101cb54604051611b15939260009081039291615181565b60405180910390a35050505050565b611b2c612713565b611b485760405162461bcd60e51b815260040161064b90615051565b6001600160a01b038616611b6e5760405162461bcd60e51b815260040161064b90614bf9565b82611b8b5760405162461bcd60e51b815260040161064b90614d39565b81611ba85760405162461bcd60e51b815260040161064b90614fb3565b6101c3546001600160a01b031680611bc4888888888888613455565b6101c3546040516001600160a01b0391821691829182918616907f987cdba0cba67c68d2c8aba6a4ba6545565eccfb3e2e5ff39579ffd94acaf9bb90600090a3816001600160a01b031663fb1669ca846001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4c57600080fd5b505afa158015611c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c849190614776565b6040518263ffffffff1660e01b8152600401611ca091906148f6565b600060405180830381600087803b158015611cba57600080fd5b505af1158015611cce573d6000803e3d6000fd5b50505050816001600160a01b03166396c8df37846001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1a57600080fd5b505afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190614776565b6040518263ffffffff1660e01b8152600401611d6e91906148f6565b600060405180830381600087803b158015611d8857600080fd5b505af1158015611d9c573d6000803e3d6000fd5b50505050816001600160a01b031663b3b8a9c7846001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b158015611de857600080fd5b505afa158015611dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e209190614776565b6040518263ffffffff1660e01b8152600401611e3c91906148f6565b600060405180830381600087803b158015611e5657600080fd5b505af1158015611e6a573d6000803e3d6000fd5b50505050816001600160a01b0316637ae14b09846001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb657600080fd5b505afa158015611eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eee9190614776565b6040518263ffffffff1660e01b8152600401611f0a91906148f6565b600060405180830381600087803b158015611f2457600080fd5b505af1158015611f38573d6000803e3d6000fd5b50505050816001600160a01b03166326a40e82846001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8457600080fd5b505afa158015611f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbc9190614776565b6040518263ffffffff1660e01b8152600401611fd891906148f6565b600060405180830381600087803b158015611ff257600080fd5b505af1158015612006573d6000803e3d6000fd5b50505050816001600160a01b031663a6b1ae0d846001600160a01b031663bbafcb406040518163ffffffff1660e01b815260040160206040518083038186803b15801561205257600080fd5b505afa158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a9190614776565b6040518263ffffffff1660e01b81526004016120a691906148f6565b600060405180830381600087803b1580156120c057600080fd5b505af11580156120d4573d6000803e3d6000fd5b50505050816001600160a01b03166336d91494846001600160a01b031663ce78290d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561212057600080fd5b505afa158015612134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121589190614776565b6040518263ffffffff1660e01b815260040161217491906148f6565b600060405180830381600087803b15801561218e57600080fd5b505af11580156121a2573d6000803e3d6000fd5b50505050816001600160a01b031663033669cf846001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ee57600080fd5b505afa158015612202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122269190614776565b6040518263ffffffff1660e01b815260040161224291906148f6565b600060405180830381600087803b15801561225c57600080fd5b505af1158015612270573d6000803e3d6000fd5b50506101c5546000925061228d91506001600160a01b0316612e15565b6001600160a01b03166370a08231866040518263ffffffff1660e01b81526004016122b89190614812565b60206040518083038186803b1580156122d057600080fd5b505afa1580156122e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123089190614776565b90508015612332576101c5546123329061232a906001600160a01b0316612e15565b868484612ee1565b604051637d8b34e560e11b81526001600160a01b0385169063fb1669ca9061235f906000906004016148f6565b600060405180830381600087803b15801561237957600080fd5b505af115801561238d573d6000803e3d6000fd5b50506040516327ea6f2b60e01b81526001600160a01b03871692506327ea6f2b91506123be906000906004016148f6565b600060405180830381600087803b1580156123d857600080fd5b505af11580156123ec573d6000803e3d6000fd5b505050505050505050505050505050565b600081565b6101c3546040805163a4d66daf60e01b815290516000926001600160a01b03169163a4d66daf916004808301926020929190829003018186803b158015610cfa57600080fd5b60975460ff161561246b5760405162461bcd60e51b815260040161064b90614d0f565b61067f61361d565b61247b612713565b6124975760405162461bcd60e51b815260040161064b90615051565b6101c7805460ff1916600117905560405130907f90d9b09c68a7e1312ce22801552b47265d77db9496383d51374b4058545447d790600090a2565b6101c554600090819083906124ef906001600160a01b0316613147565b6001600160a01b031663430c208133836040518363ffffffff1660e01b815260040161251c929190614867565b60206040518083038186803b15801561253457600080fd5b505afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c919061467a565b6125885760405162461bcd60e51b815260040161064b90614f5e565b60c95460ff166125aa5760405162461bcd60e51b815260040161064b9061501a565b60c9805460ff1916905560975460ff16156125d75760405162461bcd60e51b815260040161064b90614d0f565b6125df61444e565b6101c5546125f5906001600160a01b0316613147565b6001600160a01b0316638c7a63ae866040518263ffffffff1660e01b815260040161262091906148f6565b60a06040518083038186803b15801561263857600080fd5b505afa15801561264c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126709190614702565b905060006126818260200151613152565b90506000806126908385613349565b909250905060006126a183836137c8565b90506126af84868b8461319c565b9750975050505050505060c9805460ff191660011790559092909150565b6101c354604080516359cb4cc960e11b815290516000926001600160a01b03169163b3969992916004808301926020929190829003018186803b158015610cfa57600080fd5b6000610d326000805160206151d68339815191526104a8612da8565b612737612713565b6127535760405162461bcd60e51b815260040161064b90615051565b6101c7805460ff1916905560405130907f7184039938737267597232635b117c924371ac877d4329f2dfa5ca674c5cc4a590600090a2565b606481565b60975460ff16156127b35760405162461bcd60e51b815260040161064b90614d0f565b600081116127d35760405162461bcd60e51b815260040161064b90614fe3565b6127dc816137ed565b610fec61361d565b6101c65481565b60008181526065602052604081206106119061384e565b60008115612825576128208261060885670de0b6b3a7640000612b01565b61060e565b50600092915050565b6101c45481565b600082815260656020526040902060020154612853906104a8612da8565b610a235760405162461bcd60e51b815260040161064b90614c94565b612877614486565b61288082613152565b6040805160a081018252825481526001830154602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b60c95460009060ff166128e45760405162461bcd60e51b815260040161064b9061501a565b60c9805460ff1916905560975460ff16156129115760405162461bcd60e51b815260040161064b90614d0f565b600061291c84613152565b905080600401546000146129425760405162461bcd60e51b815260040161064b90614e30565b600181015461295190846137c8565b600182015561295e6144b5565b5060408051808201909152838152602081018590526101c554612989906001600160a01b0316613147565b6001600160a01b0316635be57b6a82336040518363ffffffff1660e01b81526004016129b6929190615122565b602060405180830381600087803b1580156129d057600080fd5b505af11580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190614776565b6101c554909350612a2d90612a25906001600160a01b0316612e15565b333087612ee1565b8285336001600160a01b03167fcb3ef4109dcd006671348924f00aac8398190a5ff283d6e470d74581513e103687604051612a6891906148f6565b60405180910390a4505060c9805460ff1916600117905592915050565b6000805160206151d683398151915281565b6000805160206151f683398151915281565b6101c354604080516378592def60e11b815290516000926001600160a01b03169163f0b25bde916004808301926020929190829003018186803b158015610cfa57600080fd5b60008051602061521683398151915281565b600082612b1057506000610611565b82820282848281612b1d57fe5b041461060e5760405162461bcd60e51b815260040161064b90614def565b600061060e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613859565b612b85613598565b15612ba25760405162461bcd60e51b815260040161064b90614c67565b6101d15415612bc35760405162461bcd60e51b815260040161064b9061509c565b6101c554612beb90612bdd906001600160a01b0316613890565b612be5613345565b906137c8565b6101d155565b303b1590565b600054610100900460ff1680612c105750612c10612bf1565b80612c1e575060005460ff16155b612c3a5760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff16158015610fda576000805460ff1961ff0019909116610100171660011790558015610fec576000805461ff001916905550565b600054610100900460ff1680612c915750612c91612bf1565b80612c9f575060005460ff16155b612cbb5760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff16158015612ce6576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610fec576000805461ff001916905550565b600054610100900460ff1680612d1d5750612d1d612bf1565b80612d2b575060005460ff16155b612d475760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff16158015612d72576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610fec576000805461ff001916905550565b60009182526065602052604090912060020155565b3390565b6000828152606560205260409020612dc49082613910565b156107ad57612dd1612da8565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610611826133cc565b60006001600160a01b03821663b93f9b0a60065b6040518263ffffffff1660e01b8152600401612e5091906148f6565b60206040518083038186803b158015612e6857600080fd5b505afa158015612e7c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190614540565b612edc8383836040518060400160405280601881526020017704661696c656420746f207472616e736665722045524332360441b815250613925565b505050565b60408051808201909152601881527704661696c656420746f207472616e736665722045524332360441b602082015261176885858585856139f7565b6000828152606560205260409020612f359082613acc565b156107ad57612f42612da8565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff16612fa85760405162461bcd60e51b815260040161064b906149e3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612fdb612da8565b604051612fe89190614812565b60405180910390a1565b6101d1546130125760405162461bcd60e51b815260040161064b90614f1b565b6101c3546001600160a01b03166327ea6f2b6130bb61302f6135a1565b6101c360009054906101000a90046001600160a01b03166001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561307e57600080fd5b505afa158015613092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b69190614776565b613ae1565b6040518263ffffffff1660e01b81526004016130d791906148f6565b600060405180830381600087803b1580156130f157600080fd5b505af1158015613105573d6000803e3d6000fd5b50506101c5546000925061312291506001600160a01b0316613890565b905061313081612be5613345565b6101cc5561314081612be5613345565b6101d15550565b600061061182613af7565b600060018214806131635750600282145b61317f5760405162461bcd60e51b815260040161064b90614b7f565b600060018314613191576101cd613195565b6101c85b9392505050565b6000806000806131ac8888613349565b909250905060006131bd83836137c8565b9050808611156131df5760405162461bcd60e51b815260040161064b90614eec565b88600401546131ec613345565b116132095760405162461bcd60e51b815260040161064b90614ce4565b600489015461322757600189015461322190876135b6565b60018a01555b60006132338488613ae1565b90506000613245846130b68a856135b6565b6101c55490915061325e906001600160a01b0316613147565b6001600160a01b031663b81922058a83856040518463ffffffff1660e01b815260040161328d939291906151aa565b600060405180830381600087803b1580156132a757600080fd5b505af11580156132bb573d6000803e3d6000fd5b50506101c5546132ea92506132d991506001600160a01b0316612e15565b30336132e585876137c8565b612ee1565b888a60200151336001600160a01b03167f92f2787b755dae547f1701582fe74c7abf277ec14db316dd01abc69cacf7a259858560405161332b92919061519c565b60405180910390a490955093505050505b94509492505050565b4290565b6000806000613360856002015485604001516105f0565b90506000613376866003015486604001516105f0565b905061338f8560800151826135b690919063ffffffff16565b93506133a88560600151836135b690919063ffffffff16565b925050505b9250929050565b60006001600160a01b03821663b93f9b0a600b612e34565b60006001600160a01b03821663b93f9b0a6005612e34565b60975460ff16156134075760405162461bcd60e51b815260040161064b90614d0f565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612fdb612da8565b60006001600160a01b03821663b93f9b0a6007612e34565b6101c55460009061346e906001600160a01b0316613b0f565b6001600160a01b03166301b215516040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156134a857600080fd5b505af11580156134bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e09190614540565b6101c380546001600160a01b0319166001600160a01b0383811691909117918290556101c554604051630df8fa4360e41b81529394509181169263df8fa4309261353c92169030908c908c908c908c908c908c90600401614880565b600060405180830381600087803b15801561355657600080fd5b505af115801561356a573d6000803e3d6000fd5b5050505050505050505050565b600061060e8383613b1a565b600061060e836001600160a01b038416613b5f565b6101cc54151590565b6101c9546101ce54600091610d3291906137c8565b600061060e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613b77565b600080613609848460200151612802565b90506136158184613ba3565b949350505050565b60008060006101c360009054906101000a90046001600160a01b03166001600160a01b031663a6a25e886040518163ffffffff1660e01b8152600401606060405180830381600087803b15801561367357600080fd5b505af1158015613687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ab919061478e565b92509250925060008211806136c05750600081115b15612edc576101c3546000906136e9906001600160a01b0316846136e485886137c8565b613bca565b9050306001600160a01b03166101c360009054906101000a90046001600160a01b03166001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561374457600080fd5b505afa158015613758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377c9190614540565b6001600160a01b03167fd1055dc2c2a003a83dfacb1c38db776eab5ef89d77a8f05a3512e8cf57f953ce858588866040516137ba9493929190615181565b60405180910390a350505050565b60008282018381101561060e5760405162461bcd60e51b815260040161064b90614b48565b6101c554610fec90613807906001600160a01b0316612e15565b6101c35460408051808201909152601981527811985a5b1959081d1bc818dbdb1b1958dd081c185e5b595b9d603a1b602082015233916001600160a01b03169085906139f7565b600061061182613e4d565b6000818361387a5760405162461bcd60e51b815260040161064b91906148ff565b50600083858161388657fe5b0495945050505050565b60006001600160a01b03821663fc56365860075b6040518263ffffffff1660e01b81526004016138c091906148f6565b60206040518083038186803b1580156138d857600080fd5b505afa1580156138ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190614776565b600061060e836001600160a01b038416613e51565b6001600160a01b03831661394b5760405162461bcd60e51b815260040161064b90614a8e565b60405163a9059cbb60e01b81526000906001600160a01b0386169063a9059cbb9061397c9087908790600401614867565b602060405180830381600087803b15801561399657600080fd5b505af11580156139aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ce919061467a565b905081816139ef5760405162461bcd60e51b815260040161064b91906148ff565b505050505050565b6001600160a01b038316613a1d5760405162461bcd60e51b815260040161064b90614a8e565b6040516323b872dd60e01b81526000906001600160a01b038716906323b872dd90613a50908890889088906004016148c7565b602060405180830381600087803b158015613a6a57600080fd5b505af1158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa2919061467a565b90508181613ac35760405162461bcd60e51b815260040161064b91906148ff565b50505050505050565b600061060e836001600160a01b038416613e9b565b6000818310613af0578161060e565b5090919050565b60006001600160a01b03821663b93f9b0a600c612e34565b600061061182613f61565b81546000908210613b3d5760405162461bcd60e51b815260040161064b90614952565b826000018281548110613b4c57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60008184841115613b9b5760405162461bcd60e51b815260040161064b91906148ff565b505050900390565b6101c9546101ce546000918291613bb9916137c8565b905061361584846020015183613f79565b6101c554600090613c2a90613be7906001600160a01b0316612e15565b8530613bf386886137c8565b6040518060400160405280601981526020017811985a5b1959081d1bc818dbdb1b1958dd081c185e5b595b9d603a1b8152506139f7565b600080613c35613fd2565b6101c5549193509150600090613c5f90613c57906001600160a01b0316614149565b606490612b3b565b6040805160a0810182526101c85481526101c95460208201526101ca54918101919091526101cb5460608201526101cc54608082015290915086908690600090613caa9087906135f8565b6040805160a0810182526101c85481526101c95460208201526101ca54918101919091526101cb5460608201526101cc546080820152909150600090613cf19087906135f8565b90506000613d2183613d1a613d12896101c6546137c890919063ffffffff16565b6064906135b6565b6064613f79565b90506000613d3186886064613f79565b9050613d3d8a826137c8565b9950613d4986826135b6565b9550613d5a868684866101c8614161565b6101ce549197509550613d7c90613d72908890612802565b6101d054906137c8565b6040805160a0810182526101cd5481526101ce5460208201526101cf54918101919091526101d05460608201526101d1546080820152909450613dc09089906135f8565b9250613dd1868686866101cd614161565b9096509450613de086866137c8565b9550613dee85886064613f79565b9050613dfa8a826137c8565b9950613e0686826135b6565b955060009450613e2f613e1987876137c8565b6000613e2589896137c8565b60006101cd6141e7565b9096509450613e3d8a61429e565b5050505050505050509392505050565b5490565b6000613e5d8383613b5f565b613e9357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610611565b506000610611565b60008181526001830160205260408120548015613f575783546000198083019190810190600090879083908110613ece57fe5b9060005260206000200154905080876000018481548110613eeb57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080613f1b57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610611565b6000915050610611565b60006001600160a01b03821663b93f9b0a6002612e34565b6000613f836144cf565b613f8c8361434d565b9050613f966144cf565b613f9f8561434d565b9050613fc7670de0b6b3a7640000613fc188613fbb858761437b565b906143b3565b906143d4565b519695505050505050565b6000806101c360009054906101000a90046001600160a01b03166001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801561402457600080fd5b505afa158015614038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405c9190614776565b91506101c360009054906101000a90046001600160a01b03166001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b1580156140ad57600080fd5b505afa1580156140c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e59190614776565b905061414361413c6101c360009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b557600080fd5b82906137c8565b90509091565b60006001600160a01b03821663fc56365860036138a4565b6001810154600282015460009182918086101561417c578095505b60038501548088101561418d578097505b600061419989836135b6565b905060006141a782866105f0565b905060006141b58a866135b6565b905060006141c382886105f0565b90506141d28e8e85848e6141e7565b909f909e509c50505050505050505050505050565b600080600083600101549050600061420589866003015489856143f5565b600387018054908290556002880154929b5090925090614228908a9089866143f5565b600288018054908290558854929b5090935090307f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b6878561426881866135b6565b60038c015461427781896135b6565b6040516142879493929190615181565b60405180910390a350989997985050505050505050565b306001600160a01b03167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb826040516142d791906148f6565b60405180910390a26101c554610fec906142f9906001600160a01b0316612e15565b6101c5543090614311906001600160a01b0316612e20565b846040518060400160405280601981526020017f4661696c656420746f2073656e6420746f2072657365727665000000000000008152506139f7565b6143556144cf565b60408051602081019091528061437384670de0b6b3a7640000612b01565b905292915050565b6143836144cf565b60408051602081019091528251845182916143aa9161060890670de0b6b3a7640000612b01565b90529392505050565b6143bb6144cf565b6040805160208101909152835181906143aa9085612b01565b6143dc6144cf565b6040805160208101909152835181906143aa9085612b3b565b600080851580614403575083155b1561441257508490508361333c565b8386101561441e578593505b600061442a8585612802565b905061443687866135b6565b61444087836137c8565b925092505094509492505050565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b6040518060200160405280600081525090565b60008083601f8401126144f3578182fd5b50813567ffffffffffffffff81111561450a578182fd5b60208301915083602080830285010111156133ad57600080fd5b600060208284031215614535578081fd5b813561060e816151c0565b600060208284031215614551578081fd5b815161060e816151c0565b600080600080600080600080610100898b031215614578578384fd5b8835614583816151c0565b97506020890135614593816151c0565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b60008060008060008060c087890312156145de578182fd5b86356145e9816151c0565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060008060408587031215614626578384fd5b843567ffffffffffffffff8082111561463d578586fd5b614649888389016144e2565b90965094506020870135915080821115614661578384fd5b5061466e878288016144e2565b95989497509550505050565b60006020828403121561468b578081fd5b8151801515811461060e578182fd5b6000602082840312156146ab578081fd5b5035919050565b600080604083850312156146c4578182fd5b8235915060208301356146d6816151c0565b809150509250929050565b600080604083850312156146f3578182fd5b50508035926020909101359150565b600060a08284031215614713578081fd5b60405160a0810181811067ffffffffffffffff82111715614732578283fd5b6040528251614740816151c0565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215614787578081fd5b5051919050565b6000806000606084860312156147a2578081fd5b8351925060208401519150604084015190509250925092565b60008060008060008060c087890312156147d3578384fd5b863595506020870135945060408701359350606087013560ff811681146147f8578283fd5b9598949750929560808101359460a0909101359350915050565b6001600160a01b0391909116815260200190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03988916815296881660208801529490961660408601526060850192909252608084015260a083015260c082019290925260e08101919091526101000190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b8181101561492b5785810183015185820160400152820161490f565b8181111561493c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601690820152754661696c656420746f20617070726f7665205553444360501b604082015260600190565b6020808252602d908201527f546f6b656e7349647320616e6420416d6f756e7473206d75737420626520746860408201526c0ca40e6c2daca40d8cadccee8d609b1b606082015260800190565b6020808252601a908201527f43616e27742073656e6420746f207a65726f2061646472657373000000000000604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252601a908201527f4372656469746c696e652063616e6e6f7420626520656d707479000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260139082015272556e737570706f72746564207472616e63686560681b604082015260600190565b6020808252602d908201527f436f6e66696720616e6420626f72726f7765722061646472657373657320636160408201526c6e6e6f7420626520656d70747960981b606082015260800190565b6020808252601a908201527f426f72726f776572206d757374206e6f7420626520656d707479000000000000604082015260600190565b6020808252601d908201527f4f776e657220616464726573732063616e6e6f7420626520656d707479000000604082015260600190565b602080825260139082015272141bdbdb08185b1c9958591e481b1bd8dad959606a1b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b602080825260119082015270151c985b98da19481a5cc81b1bd8dad959607a1b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f5061796d656e7420706572696f64206d757374206e6f7420626520656d707479604082015260600190565b6020808252602c908201527f4d7573742068617665206c6f636b657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526017908201527f5472616e63686520686173206265656e206c6f636b6564000000000000000000604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601e908201527f44726177646f776e73206172652063757272656e746c79207061757365640000604082015260600190565b602080825260159082015274125b9d985b1a59081c995919595b48185b5bdd5b9d605a1b604082015260600190565b60208082526023908201527f4a756e696f72207472616e636865206d757374206265206c6f636b65642066696040820152621c9cdd60ea1b606082015260800190565b60208082526035908201527f4f6e6c792074686520746f6b656e206f776e657220697320616c6c6f776564206040820152743a379031b0b636103a3434b990333ab731ba34b7b760591b606082015260800190565b6020808252601690820152755465726d206d757374206e6f7420626520656d70747960501b604082015260600190565b60208082526017908201527f4d75737420706179206d6f7265207468616e207a65726f000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252601d908201527f4a756e696f72207472616e63686520616c7265616479206c6f636b6564000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b82518152602092830151928101929092526001600160a01b0316604082015260600190565b600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b93845260208401929092526040830152606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6001600160a01b0381168114610fec57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aaf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a90279a2646970667358221220636981eee2a992b793846c9d96796659c30b5cda9c510c369c5d8d81870e2fcd64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c806391d148541161019d578063bfaa8cca116100e9578063d547741f116100a2578063e58378bb1161007c578063e58378bb146105d0578063e63ab1e9146105d8578063f0b25bde146105e0578063f3621367146105e85761030c565b8063d547741f1461058a578063d972e8ad1461059d578063e2bbb158146105bd5761030c565b8063bfaa8cca14610539578063c290d69114610541578063c77d569814610554578063ca15c8731461055c578063cde888451461056f578063cf09e0d0146105825761030c565b8063a4d66daf11610156578063aa2a7c4c11610130578063aa2a7c4c1461050e578063b396999214610521578063b6db75a014610529578063bf6c87c7146105315761030c565b8063a4d66daf146104f6578063a6a25e88146104fe578063a8f9c4fe146105065761030c565b806391d148541461049a57806399dd8df3146104ad5780639d110530146104b5578063a079a4dd146104c8578063a18d4176146104db578063a217fddf146104ee5761030c565b80634d02fe6f1161025c57806368dcfdc0116102155780637df1f1b9116101ef5780637df1f1b9146104645780638456cb591461046c5780638ba796af146104745780639010d07c146104875761030c565b806368dcfdc01461044c57806374f0314f1461045457806379502c551461045c5761030c565b80634d02fe6f146103fb5780634f92a7281461040e578063515bc32314610416578063526d81f61461042957806356ce1560146104315780635c975abb146104445761030c565b80633403c2fc116102c95780634026478e116102a35780634026478e146103b5578063441a3e70146103bd57806347195e13146103de57806348e6f296146103f35761030c565b80633403c2fc1461039257806336568abe1461039a5780633f4ba83a146103ad5761030c565b80630174b449146103115780630881806c1461033a578063097616a31461034457806317f7694114610357578063248a9ca31461036c5780632f2ff15d1461037f575b600080fd5b61032461031f3660046146e1565b6105f0565b60405161033191906148f6565b60405180910390f35b610342610617565b005b610342610352366004614524565b610681565b61035f6107b1565b60405161033191906148eb565b61032461037a36600461469a565b6107bb565b61034261038d3660046146b2565b6107d0565b610342610814565b6103426103a83660046146b2565b6109eb565b610342610a2d565b610342610a6b565b6103d06103cb3660046146e1565b610aca565b60405161033192919061519c565b6103e6610ca4565b6040516103319190614812565b610324610cb4565b6103d061040936600461469a565b610d37565b610342610e1d565b6103246104243660046147bb565b610ecd565b610342610f64565b61034261043f366004614524565b610fef565b61035f61129e565b6103246112a7565b6103246112b3565b6103e66112ba565b6103e66112ca565b610342611348565b61034261048236600461455c565b611386565b6103e66104953660046146e1565b611690565b61035f6104a83660046146b2565b6116a8565b6103246116c0565b6103426104c3366004614611565b611706565b6103426104d636600461469a565b61176f565b6103426104e93660046145c6565b611b24565b6103246123fd565b610324612402565b610342612448565b610342612473565b6103d061051c36600461469a565b6124d2565b6103246126cd565b61035f612713565b61034261272f565b61032461278b565b61034261054f36600461469a565b612790565b6103246127e4565b61032461056a36600461469a565b6127eb565b61032461057d3660046146e1565b612802565b61032461282e565b6103426105983660046146b2565b612835565b6105b06105ab36600461469a565b61286f565b6040516103319190615147565b6103246105cb3660046146e1565b6128bf565b610324612a85565b610324612a97565b610324612aa9565b610324612aef565b600061060e670de0b6b3a76400006106088585612b01565b90612b3b565b90505b92915050565b61062f600080516020615216833981519152336116a8565b6106545760405162461bcd60e51b815260040161064b90614d6e565b60405180910390fd5b60975460ff16156106775760405162461bcd60e51b815260040161064b90614d0f565b61067f612b7d565b565b600054610100900460ff168061069a575061069a612bf1565b806106a8575060005460ff16155b6106c45760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff161580156106ef576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166107155760405162461bcd60e51b815260040161064b90614dba565b61071d612bf7565b610725612c78565b61072d612d04565b6107456000805160206151d68339815191528361080a565b61075d6000805160206151f68339815191528361080a565b6107836000805160206151f68339815191526000805160206151d6833981519152612d93565b61079b6000805160206151d683398151915280612d93565b80156107ad576000805461ff00191690555b5050565b6101c75460ff1681565b60009081526065602052604090206002015490565b6000828152606560205260409020600201546107ee906104a8612da8565b61080a5760405162461bcd60e51b815260040161064b90614994565b6107ad8282612dac565b61081c612713565b6108385760405162461bcd60e51b815260040161064b90615051565b61084061129e565b61084c5761084c611348565b6101c554600090610865906001600160a01b0316612e15565b6101c554909150600090610881906001600160a01b0316612e20565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016108b19190614812565b60206040518083038186803b1580156108c957600080fd5b505afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109019190614776565b9050801561091457610914838383612ea0565b6101c3546040516370a0823160e01b81526000916001600160a01b03808716926370a0823192610948921690600401614812565b60206040518083038186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109989190614776565b905080156109ba576101c3546109ba9085906001600160a01b03168584612ee1565b60405130907f1fc1e771236d2e93bb9541cdcb4654ba0fd3fb615b48d829b7b365f03998512690600090a250505050565b6109f3612da8565b6001600160a01b0316816001600160a01b031614610a235760405162461bcd60e51b815260040161064b906150d3565b6107ad8282612f1d565b610a476000805160206151f68339815191526104a8612da8565b610a635760405162461bcd60e51b815260040161064b90614ac5565b61067f612f86565b610a83600080516020615216833981519152336116a8565b610a9f5760405162461bcd60e51b815260040161064b90614d6e565b60975460ff1615610ac25760405162461bcd60e51b815260040161064b90614d0f565b61067f612ff2565b6101c55460009081908490610ae7906001600160a01b0316613147565b6001600160a01b031663430c208133836040518363ffffffff1660e01b8152600401610b14929190614867565b60206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b64919061467a565b610b805760405162461bcd60e51b815260040161064b90614f5e565b60c95460ff16610ba25760405162461bcd60e51b815260040161064b9061501a565b60c9805460ff1916905560975460ff1615610bcf5760405162461bcd60e51b815260040161064b90614d0f565b610bd761444e565b6101c554610bed906001600160a01b0316613147565b6001600160a01b0316638c7a63ae876040518263ffffffff1660e01b8152600401610c1891906148f6565b60a06040518083038186803b158015610c3057600080fd5b505afa158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c689190614702565b90506000610c798260200151613152565b9050610c878183898961319c565b9450945050505060c9805460ff1916600117905590939092509050565b6101c3546001600160a01b031681565b6101c35460408051632473794b60e11b815290516000926001600160a01b0316916348e6f296916004808301926020929190829003018186803b158015610cfa57600080fd5b505afa158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190614776565b905090565b600080610d4261444e565b6101c554610d58906001600160a01b0316613147565b6001600160a01b0316638c7a63ae856040518263ffffffff1660e01b8152600401610d8391906148f6565b60a06040518083038186803b158015610d9b57600080fd5b505afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190614702565b90506000610de48260200151613152565b90508060040154610df3613345565b1115610e0e57610e038183613349565b935093505050610e18565b6000809350935050505b915091565b610e25612713565b610e415760405162461bcd60e51b815260040161064b90615051565b6101c554610e57906001600160a01b03166133b4565b6101c580546001600160a01b0319166001600160a01b039283161790556101c354604080516309f254e560e31b815290519190921691634f92a72891600480830192600092919082900301818387803b158015610eb357600080fd5b505af1158015610ec7573d6000803e3d6000fd5b50505050565b6101c554600090610ee6906001600160a01b03166133cc565b6001600160a01b031663d505accf333089898989896040518863ffffffff1660e01b8152600401610f1d9796959493929190614826565b600060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b50505050610f5987876128bf565b979650505050505050565b600054610100900460ff1680610f7d5750610f7d612bf1565b80610f8b575060005460ff16155b610fa75760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff16158015610fd2576000805460ff1961ff0019909116610100171660011790555b610fda612c78565b8015610fec576000805461ff00191690555b50565b610ff7612713565b6110135760405162461bcd60e51b815260040161064b90615051565b6001600160a01b0381166110395760405162461bcd60e51b815260040161064b90614b11565b6101c3546101c5546001600160a01b039182169160009161105a9116612e15565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016110859190614812565b60206040518083038186803b15801561109d57600080fd5b505afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190614776565b905080156110ff576101c5546110ff906110f7906001600160a01b0316612e15565b838584612ee1565b6101c354604051637d8b34e560e11b81526001600160a01b039091169063fb1669ca90611131906000906004016148f6565b600060405180830381600087803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b50506101c3546040516327ea6f2b60e01b81526001600160a01b0390911692506327ea6f2b9150611195906000906004016148f6565b600060405180830381600087803b1580156111af57600080fd5b505af11580156111c3573d6000803e3d6000fd5b50506101c380546001600160a01b0319166001600160a01b0387811691909117918290556040805163a4d66daf60e01b8152905192909116935063a4d66daf9250600480820192602092909190829003018186803b15801561122457600080fd5b505afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c9190614776565b506101c3546040516001600160a01b03918216918416907f987cdba0cba67c68d2c8aba6a4ba6545565eccfb3e2e5ff39579ffd94acaf9bb90600090a3505050565b60975460ff1690565b670de0b6b3a764000081565b6201518081565b6101c5546001600160a01b031681565b6101c35460408051637df1f1b960e01b815290516000926001600160a01b031691637df1f1b9916004808301926020929190829003018186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d329190614540565b6113626000805160206151f68339815191526104a8612da8565b61137e5760405162461bcd60e51b815260040161064b90614ac5565b61067f6133e4565b600054610100900460ff168061139f575061139f612bf1565b806113ad575060005460ff16155b6113c95760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff161580156113f4576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0389161580159061141457506001600160a01b03881615155b6114305760405162461bcd60e51b815260040161064b90614bac565b6101c580546001600160a01b0319166001600160a01b038b8116919091179182905560009161145f911661343d565b90506001600160a01b0381166114875760405162461bcd60e51b815260040161064b90614c30565b61149081610681565b6040805160a081019091528060018152602001600081526020016114b5600180612802565b815260006020808301829052604092830182905283516101c855838101516101c955838301516101ca5560608401516101cb556080909301516101cc55815160a0810183526002815292830152810161150f600180612802565b81526000602080830182905260409283019190915282516101cd558201516101ce558101516101cf5560608101516101d055608001516101d155611557898888888888613455565b426101c4556101c688905561157a6000805160206152168339815191528a61080a565b6115926000805160206152168339815191528261080a565b6115b86000805160206152168339815191526000805160206151d6833981519152612d93565b6101c5546000906115d1906001600160a01b0316612e15565b6001600160a01b031663095ea7b3306000196040518363ffffffff1660e01b8152600401611600929190614867565b602060405180830381600087803b15801561161a57600080fd5b505af115801561162e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611652919061467a565b9050806116715760405162461bcd60e51b815260040161064b90614a11565b50508015611685576000805461ff00191690555b505050505050505050565b600082815260656020526040812061060e9083613577565b600082815260656020526040812061060e9083613583565b6101c354604080516399dd8df360e01b815290516000926001600160a01b0316916399dd8df3916004808301926020929190829003018186803b158015610cfa57600080fd5b8281146117255760405162461bcd60e51b815260040161064b90614a41565b60005b818110156117685761175e85858381811061173f57fe5b9050602002013584848481811061175257fe5b90506020020135610aca565b5050600101611728565b5050505050565b611787600080516020615216833981519152336116a8565b6117a35760405162461bcd60e51b815260040161064b90614d6e565b60975460ff16156117c65760405162461bcd60e51b815260040161064b90614d0f565b6101c75460ff16156117ea5760405162461bcd60e51b815260040161064b90614eb5565b6117f2613598565b6117fe576117fe612ff2565b6101c35460405163a079a4dd60e01b81526001600160a01b039091169063a079a4dd9061182f9084906004016148f6565b600060405180830381600087803b15801561184957600080fd5b505af115801561185d573d6000803e3d6000fd5b5050505060006118fb6101c360009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b557600080fd5b505afa1580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190614776565b6118f56135a1565b906135b6565b6101cf546101ca546040805160a0810182526101cd5481526101ce5460208201529081018390526101d05460608201526101d154608082015292935090916119449084906135f8565b6101cf556040805160a0810182526101c85481526101c95460208201526101ca54918101919091526101cb5460608201526101cc5460808201526119899084906135f8565b6101ca556101c35460408051637df1f1b960e01b815290516000926001600160a01b031691637df1f1b9916004808301926020929190829003018186803b1580156119d357600080fd5b505afa1580156119e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0b9190614540565b6101c554909150611a3090611a28906001600160a01b0316612e15565b308388612ee1565b806001600160a01b03167f7411b87a3c039bdfd8f3510b21e8bd0736265f53513735e1f4aa7b4f306b728d86604051611a6991906148f6565b60405180910390a26101cd546101cf5430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b68790611aa787826135b6565b6101d054604051611abf939260009081039291615181565b60405180910390a36101c8546101ca5430907f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b68790611afd86826135b6565b6101cb54604051611b15939260009081039291615181565b60405180910390a35050505050565b611b2c612713565b611b485760405162461bcd60e51b815260040161064b90615051565b6001600160a01b038616611b6e5760405162461bcd60e51b815260040161064b90614bf9565b82611b8b5760405162461bcd60e51b815260040161064b90614d39565b81611ba85760405162461bcd60e51b815260040161064b90614fb3565b6101c3546001600160a01b031680611bc4888888888888613455565b6101c3546040516001600160a01b0391821691829182918616907f987cdba0cba67c68d2c8aba6a4ba6545565eccfb3e2e5ff39579ffd94acaf9bb90600090a3816001600160a01b031663fb1669ca846001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4c57600080fd5b505afa158015611c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c849190614776565b6040518263ffffffff1660e01b8152600401611ca091906148f6565b600060405180830381600087803b158015611cba57600080fd5b505af1158015611cce573d6000803e3d6000fd5b50505050816001600160a01b03166396c8df37846001600160a01b03166321856b366040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1a57600080fd5b505afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190614776565b6040518263ffffffff1660e01b8152600401611d6e91906148f6565b600060405180830381600087803b158015611d8857600080fd5b505af1158015611d9c573d6000803e3d6000fd5b50505050816001600160a01b031663b3b8a9c7846001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b158015611de857600080fd5b505afa158015611dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e209190614776565b6040518263ffffffff1660e01b8152600401611e3c91906148f6565b600060405180830381600087803b158015611e5657600080fd5b505af1158015611e6a573d6000803e3d6000fd5b50505050816001600160a01b0316637ae14b09846001600160a01b03166364fb2d956040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb657600080fd5b505afa158015611eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eee9190614776565b6040518263ffffffff1660e01b8152600401611f0a91906148f6565b600060405180830381600087803b158015611f2457600080fd5b505af1158015611f38573d6000803e3d6000fd5b50505050816001600160a01b03166326a40e82846001600160a01b031663d28459776040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8457600080fd5b505afa158015611f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbc9190614776565b6040518263ffffffff1660e01b8152600401611fd891906148f6565b600060405180830381600087803b158015611ff257600080fd5b505af1158015612006573d6000803e3d6000fd5b50505050816001600160a01b031663a6b1ae0d846001600160a01b031663bbafcb406040518163ffffffff1660e01b815260040160206040518083038186803b15801561205257600080fd5b505afa158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a9190614776565b6040518263ffffffff1660e01b81526004016120a691906148f6565b600060405180830381600087803b1580156120c057600080fd5b505af11580156120d4573d6000803e3d6000fd5b50505050816001600160a01b03166336d91494846001600160a01b031663ce78290d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561212057600080fd5b505afa158015612134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121589190614776565b6040518263ffffffff1660e01b815260040161217491906148f6565b600060405180830381600087803b15801561218e57600080fd5b505af11580156121a2573d6000803e3d6000fd5b50505050816001600160a01b031663033669cf846001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ee57600080fd5b505afa158015612202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122269190614776565b6040518263ffffffff1660e01b815260040161224291906148f6565b600060405180830381600087803b15801561225c57600080fd5b505af1158015612270573d6000803e3d6000fd5b50506101c5546000925061228d91506001600160a01b0316612e15565b6001600160a01b03166370a08231866040518263ffffffff1660e01b81526004016122b89190614812565b60206040518083038186803b1580156122d057600080fd5b505afa1580156122e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123089190614776565b90508015612332576101c5546123329061232a906001600160a01b0316612e15565b868484612ee1565b604051637d8b34e560e11b81526001600160a01b0385169063fb1669ca9061235f906000906004016148f6565b600060405180830381600087803b15801561237957600080fd5b505af115801561238d573d6000803e3d6000fd5b50506040516327ea6f2b60e01b81526001600160a01b03871692506327ea6f2b91506123be906000906004016148f6565b600060405180830381600087803b1580156123d857600080fd5b505af11580156123ec573d6000803e3d6000fd5b505050505050505050505050505050565b600081565b6101c3546040805163a4d66daf60e01b815290516000926001600160a01b03169163a4d66daf916004808301926020929190829003018186803b158015610cfa57600080fd5b60975460ff161561246b5760405162461bcd60e51b815260040161064b90614d0f565b61067f61361d565b61247b612713565b6124975760405162461bcd60e51b815260040161064b90615051565b6101c7805460ff1916600117905560405130907f90d9b09c68a7e1312ce22801552b47265d77db9496383d51374b4058545447d790600090a2565b6101c554600090819083906124ef906001600160a01b0316613147565b6001600160a01b031663430c208133836040518363ffffffff1660e01b815260040161251c929190614867565b60206040518083038186803b15801561253457600080fd5b505afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c919061467a565b6125885760405162461bcd60e51b815260040161064b90614f5e565b60c95460ff166125aa5760405162461bcd60e51b815260040161064b9061501a565b60c9805460ff1916905560975460ff16156125d75760405162461bcd60e51b815260040161064b90614d0f565b6125df61444e565b6101c5546125f5906001600160a01b0316613147565b6001600160a01b0316638c7a63ae866040518263ffffffff1660e01b815260040161262091906148f6565b60a06040518083038186803b15801561263857600080fd5b505afa15801561264c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126709190614702565b905060006126818260200151613152565b90506000806126908385613349565b909250905060006126a183836137c8565b90506126af84868b8461319c565b9750975050505050505060c9805460ff191660011790559092909150565b6101c354604080516359cb4cc960e11b815290516000926001600160a01b03169163b3969992916004808301926020929190829003018186803b158015610cfa57600080fd5b6000610d326000805160206151d68339815191526104a8612da8565b612737612713565b6127535760405162461bcd60e51b815260040161064b90615051565b6101c7805460ff1916905560405130907f7184039938737267597232635b117c924371ac877d4329f2dfa5ca674c5cc4a590600090a2565b606481565b60975460ff16156127b35760405162461bcd60e51b815260040161064b90614d0f565b600081116127d35760405162461bcd60e51b815260040161064b90614fe3565b6127dc816137ed565b610fec61361d565b6101c65481565b60008181526065602052604081206106119061384e565b60008115612825576128208261060885670de0b6b3a7640000612b01565b61060e565b50600092915050565b6101c45481565b600082815260656020526040902060020154612853906104a8612da8565b610a235760405162461bcd60e51b815260040161064b90614c94565b612877614486565b61288082613152565b6040805160a081018252825481526001830154602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b60c95460009060ff166128e45760405162461bcd60e51b815260040161064b9061501a565b60c9805460ff1916905560975460ff16156129115760405162461bcd60e51b815260040161064b90614d0f565b600061291c84613152565b905080600401546000146129425760405162461bcd60e51b815260040161064b90614e30565b600181015461295190846137c8565b600182015561295e6144b5565b5060408051808201909152838152602081018590526101c554612989906001600160a01b0316613147565b6001600160a01b0316635be57b6a82336040518363ffffffff1660e01b81526004016129b6929190615122565b602060405180830381600087803b1580156129d057600080fd5b505af11580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190614776565b6101c554909350612a2d90612a25906001600160a01b0316612e15565b333087612ee1565b8285336001600160a01b03167fcb3ef4109dcd006671348924f00aac8398190a5ff283d6e470d74581513e103687604051612a6891906148f6565b60405180910390a4505060c9805460ff1916600117905592915050565b6000805160206151d683398151915281565b6000805160206151f683398151915281565b6101c354604080516378592def60e11b815290516000926001600160a01b03169163f0b25bde916004808301926020929190829003018186803b158015610cfa57600080fd5b60008051602061521683398151915281565b600082612b1057506000610611565b82820282848281612b1d57fe5b041461060e5760405162461bcd60e51b815260040161064b90614def565b600061060e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613859565b612b85613598565b15612ba25760405162461bcd60e51b815260040161064b90614c67565b6101d15415612bc35760405162461bcd60e51b815260040161064b9061509c565b6101c554612beb90612bdd906001600160a01b0316613890565b612be5613345565b906137c8565b6101d155565b303b1590565b600054610100900460ff1680612c105750612c10612bf1565b80612c1e575060005460ff16155b612c3a5760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff16158015610fda576000805460ff1961ff0019909116610100171660011790558015610fec576000805461ff001916905550565b600054610100900460ff1680612c915750612c91612bf1565b80612c9f575060005460ff16155b612cbb5760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff16158015612ce6576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610fec576000805461ff001916905550565b600054610100900460ff1680612d1d5750612d1d612bf1565b80612d2b575060005460ff16155b612d475760405162461bcd60e51b815260040161064b90614e67565b600054610100900460ff16158015612d72576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191660011790558015610fec576000805461ff001916905550565b60009182526065602052604090912060020155565b3390565b6000828152606560205260409020612dc49082613910565b156107ad57612dd1612da8565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610611826133cc565b60006001600160a01b03821663b93f9b0a60065b6040518263ffffffff1660e01b8152600401612e5091906148f6565b60206040518083038186803b158015612e6857600080fd5b505afa158015612e7c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190614540565b612edc8383836040518060400160405280601881526020017704661696c656420746f207472616e736665722045524332360441b815250613925565b505050565b60408051808201909152601881527704661696c656420746f207472616e736665722045524332360441b602082015261176885858585856139f7565b6000828152606560205260409020612f359082613acc565b156107ad57612f42612da8565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60975460ff16612fa85760405162461bcd60e51b815260040161064b906149e3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612fdb612da8565b604051612fe89190614812565b60405180910390a1565b6101d1546130125760405162461bcd60e51b815260040161064b90614f1b565b6101c3546001600160a01b03166327ea6f2b6130bb61302f6135a1565b6101c360009054906101000a90046001600160a01b03166001600160a01b031663a4d66daf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561307e57600080fd5b505afa158015613092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b69190614776565b613ae1565b6040518263ffffffff1660e01b81526004016130d791906148f6565b600060405180830381600087803b1580156130f157600080fd5b505af1158015613105573d6000803e3d6000fd5b50506101c5546000925061312291506001600160a01b0316613890565b905061313081612be5613345565b6101cc5561314081612be5613345565b6101d15550565b600061061182613af7565b600060018214806131635750600282145b61317f5760405162461bcd60e51b815260040161064b90614b7f565b600060018314613191576101cd613195565b6101c85b9392505050565b6000806000806131ac8888613349565b909250905060006131bd83836137c8565b9050808611156131df5760405162461bcd60e51b815260040161064b90614eec565b88600401546131ec613345565b116132095760405162461bcd60e51b815260040161064b90614ce4565b600489015461322757600189015461322190876135b6565b60018a01555b60006132338488613ae1565b90506000613245846130b68a856135b6565b6101c55490915061325e906001600160a01b0316613147565b6001600160a01b031663b81922058a83856040518463ffffffff1660e01b815260040161328d939291906151aa565b600060405180830381600087803b1580156132a757600080fd5b505af11580156132bb573d6000803e3d6000fd5b50506101c5546132ea92506132d991506001600160a01b0316612e15565b30336132e585876137c8565b612ee1565b888a60200151336001600160a01b03167f92f2787b755dae547f1701582fe74c7abf277ec14db316dd01abc69cacf7a259858560405161332b92919061519c565b60405180910390a490955093505050505b94509492505050565b4290565b6000806000613360856002015485604001516105f0565b90506000613376866003015486604001516105f0565b905061338f8560800151826135b690919063ffffffff16565b93506133a88560600151836135b690919063ffffffff16565b925050505b9250929050565b60006001600160a01b03821663b93f9b0a600b612e34565b60006001600160a01b03821663b93f9b0a6005612e34565b60975460ff16156134075760405162461bcd60e51b815260040161064b90614d0f565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612fdb612da8565b60006001600160a01b03821663b93f9b0a6007612e34565b6101c55460009061346e906001600160a01b0316613b0f565b6001600160a01b03166301b215516040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156134a857600080fd5b505af11580156134bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e09190614540565b6101c380546001600160a01b0319166001600160a01b0383811691909117918290556101c554604051630df8fa4360e41b81529394509181169263df8fa4309261353c92169030908c908c908c908c908c908c90600401614880565b600060405180830381600087803b15801561355657600080fd5b505af115801561356a573d6000803e3d6000fd5b5050505050505050505050565b600061060e8383613b1a565b600061060e836001600160a01b038416613b5f565b6101cc54151590565b6101c9546101ce54600091610d3291906137c8565b600061060e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613b77565b600080613609848460200151612802565b90506136158184613ba3565b949350505050565b60008060006101c360009054906101000a90046001600160a01b03166001600160a01b031663a6a25e886040518163ffffffff1660e01b8152600401606060405180830381600087803b15801561367357600080fd5b505af1158015613687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ab919061478e565b92509250925060008211806136c05750600081115b15612edc576101c3546000906136e9906001600160a01b0316846136e485886137c8565b613bca565b9050306001600160a01b03166101c360009054906101000a90046001600160a01b03166001600160a01b0316637df1f1b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561374457600080fd5b505afa158015613758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377c9190614540565b6001600160a01b03167fd1055dc2c2a003a83dfacb1c38db776eab5ef89d77a8f05a3512e8cf57f953ce858588866040516137ba9493929190615181565b60405180910390a350505050565b60008282018381101561060e5760405162461bcd60e51b815260040161064b90614b48565b6101c554610fec90613807906001600160a01b0316612e15565b6101c35460408051808201909152601981527811985a5b1959081d1bc818dbdb1b1958dd081c185e5b595b9d603a1b602082015233916001600160a01b03169085906139f7565b600061061182613e4d565b6000818361387a5760405162461bcd60e51b815260040161064b91906148ff565b50600083858161388657fe5b0495945050505050565b60006001600160a01b03821663fc56365860075b6040518263ffffffff1660e01b81526004016138c091906148f6565b60206040518083038186803b1580156138d857600080fd5b505afa1580156138ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190614776565b600061060e836001600160a01b038416613e51565b6001600160a01b03831661394b5760405162461bcd60e51b815260040161064b90614a8e565b60405163a9059cbb60e01b81526000906001600160a01b0386169063a9059cbb9061397c9087908790600401614867565b602060405180830381600087803b15801561399657600080fd5b505af11580156139aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ce919061467a565b905081816139ef5760405162461bcd60e51b815260040161064b91906148ff565b505050505050565b6001600160a01b038316613a1d5760405162461bcd60e51b815260040161064b90614a8e565b6040516323b872dd60e01b81526000906001600160a01b038716906323b872dd90613a50908890889088906004016148c7565b602060405180830381600087803b158015613a6a57600080fd5b505af1158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa2919061467a565b90508181613ac35760405162461bcd60e51b815260040161064b91906148ff565b50505050505050565b600061060e836001600160a01b038416613e9b565b6000818310613af0578161060e565b5090919050565b60006001600160a01b03821663b93f9b0a600c612e34565b600061061182613f61565b81546000908210613b3d5760405162461bcd60e51b815260040161064b90614952565b826000018281548110613b4c57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b60008184841115613b9b5760405162461bcd60e51b815260040161064b91906148ff565b505050900390565b6101c9546101ce546000918291613bb9916137c8565b905061361584846020015183613f79565b6101c554600090613c2a90613be7906001600160a01b0316612e15565b8530613bf386886137c8565b6040518060400160405280601981526020017811985a5b1959081d1bc818dbdb1b1958dd081c185e5b595b9d603a1b8152506139f7565b600080613c35613fd2565b6101c5549193509150600090613c5f90613c57906001600160a01b0316614149565b606490612b3b565b6040805160a0810182526101c85481526101c95460208201526101ca54918101919091526101cb5460608201526101cc54608082015290915086908690600090613caa9087906135f8565b6040805160a0810182526101c85481526101c95460208201526101ca54918101919091526101cb5460608201526101cc546080820152909150600090613cf19087906135f8565b90506000613d2183613d1a613d12896101c6546137c890919063ffffffff16565b6064906135b6565b6064613f79565b90506000613d3186886064613f79565b9050613d3d8a826137c8565b9950613d4986826135b6565b9550613d5a868684866101c8614161565b6101ce549197509550613d7c90613d72908890612802565b6101d054906137c8565b6040805160a0810182526101cd5481526101ce5460208201526101cf54918101919091526101d05460608201526101d1546080820152909450613dc09089906135f8565b9250613dd1868686866101cd614161565b9096509450613de086866137c8565b9550613dee85886064613f79565b9050613dfa8a826137c8565b9950613e0686826135b6565b955060009450613e2f613e1987876137c8565b6000613e2589896137c8565b60006101cd6141e7565b9096509450613e3d8a61429e565b5050505050505050509392505050565b5490565b6000613e5d8383613b5f565b613e9357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610611565b506000610611565b60008181526001830160205260408120548015613f575783546000198083019190810190600090879083908110613ece57fe5b9060005260206000200154905080876000018481548110613eeb57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080613f1b57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610611565b6000915050610611565b60006001600160a01b03821663b93f9b0a6002612e34565b6000613f836144cf565b613f8c8361434d565b9050613f966144cf565b613f9f8561434d565b9050613fc7670de0b6b3a7640000613fc188613fbb858761437b565b906143b3565b906143d4565b519695505050505050565b6000806101c360009054906101000a90046001600160a01b03166001600160a01b0316631cd724ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801561402457600080fd5b505afa158015614038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405c9190614776565b91506101c360009054906101000a90046001600160a01b03166001600160a01b031663193501146040518163ffffffff1660e01b815260040160206040518083038186803b1580156140ad57600080fd5b505afa1580156140c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e59190614776565b905061414361413c6101c360009054906101000a90046001600160a01b03166001600160a01b031663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b557600080fd5b82906137c8565b90509091565b60006001600160a01b03821663fc56365860036138a4565b6001810154600282015460009182918086101561417c578095505b60038501548088101561418d578097505b600061419989836135b6565b905060006141a782866105f0565b905060006141b58a866135b6565b905060006141c382886105f0565b90506141d28e8e85848e6141e7565b909f909e509c50505050505050505050505050565b600080600083600101549050600061420589866003015489856143f5565b600387018054908290556002880154929b5090925090614228908a9089866143f5565b600288018054908290558854929b5090935090307f42a55d7508b1c40b53524cf7cc2558b0f6bc7c4f262a3e929b65cd48bec2b6878561426881866135b6565b60038c015461427781896135b6565b6040516142879493929190615181565b60405180910390a350989997985050505050505050565b306001600160a01b03167ff3583f178a8d4f8888c3683f8e948faf9b6eb701c4f1fab265a6ecad1a1ddebb826040516142d791906148f6565b60405180910390a26101c554610fec906142f9906001600160a01b0316612e15565b6101c5543090614311906001600160a01b0316612e20565b846040518060400160405280601981526020017f4661696c656420746f2073656e6420746f2072657365727665000000000000008152506139f7565b6143556144cf565b60408051602081019091528061437384670de0b6b3a7640000612b01565b905292915050565b6143836144cf565b60408051602081019091528251845182916143aa9161060890670de0b6b3a7640000612b01565b90529392505050565b6143bb6144cf565b6040805160208101909152835181906143aa9085612b01565b6143dc6144cf565b6040805160208101909152835181906143aa9085612b3b565b600080851580614403575083155b1561441257508490508361333c565b8386101561441e578593505b600061442a8585612802565b905061443687866135b6565b61444087836137c8565b925092505094509492505050565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b6040518060200160405280600081525090565b60008083601f8401126144f3578182fd5b50813567ffffffffffffffff81111561450a578182fd5b60208301915083602080830285010111156133ad57600080fd5b600060208284031215614535578081fd5b813561060e816151c0565b600060208284031215614551578081fd5b815161060e816151c0565b600080600080600080600080610100898b031215614578578384fd5b8835614583816151c0565b97506020890135614593816151c0565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b60008060008060008060c087890312156145de578182fd5b86356145e9816151c0565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060008060408587031215614626578384fd5b843567ffffffffffffffff8082111561463d578586fd5b614649888389016144e2565b90965094506020870135915080821115614661578384fd5b5061466e878288016144e2565b95989497509550505050565b60006020828403121561468b578081fd5b8151801515811461060e578182fd5b6000602082840312156146ab578081fd5b5035919050565b600080604083850312156146c4578182fd5b8235915060208301356146d6816151c0565b809150509250929050565b600080604083850312156146f3578182fd5b50508035926020909101359150565b600060a08284031215614713578081fd5b60405160a0810181811067ffffffffffffffff82111715614732578283fd5b6040528251614740816151c0565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215614787578081fd5b5051919050565b6000806000606084860312156147a2578081fd5b8351925060208401519150604084015190509250925092565b60008060008060008060c087890312156147d3578384fd5b863595506020870135945060408701359350606087013560ff811681146147f8578283fd5b9598949750929560808101359460a0909101359350915050565b6001600160a01b0391909116815260200190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03988916815296881660208801529490961660408601526060850192909252608084015260a083015260c082019290925260e08101919091526101000190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b8181101561492b5785810183015185820160400152820161490f565b8181111561493c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601690820152754661696c656420746f20617070726f7665205553444360501b604082015260600190565b6020808252602d908201527f546f6b656e7349647320616e6420416d6f756e7473206d75737420626520746860408201526c0ca40e6c2daca40d8cadccee8d609b1b606082015260800190565b6020808252601a908201527f43616e27742073656e6420746f207a65726f2061646472657373000000000000604082015260600190565b6020808252602c908201527f4d75737420686176652070617573657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252601a908201527f4372656469746c696e652063616e6e6f7420626520656d707479000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260139082015272556e737570706f72746564207472616e63686560681b604082015260600190565b6020808252602d908201527f436f6e66696720616e6420626f72726f7765722061646472657373657320636160408201526c6e6e6f7420626520656d70747960981b606082015260800190565b6020808252601a908201527f426f72726f776572206d757374206e6f7420626520656d707479000000000000604082015260600190565b6020808252601d908201527f4f776e657220616464726573732063616e6e6f7420626520656d707479000000604082015260600190565b602080825260139082015272141bdbdb08185b1c9958591e481b1bd8dad959606a1b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b602080825260119082015270151c985b98da19481a5cc81b1bd8dad959607a1b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f5061796d656e7420706572696f64206d757374206e6f7420626520656d707479604082015260600190565b6020808252602c908201527f4d7573742068617665206c6f636b657220726f6c6520746f20706572666f726d60408201526b103a3434b99030b1ba34b7b760a11b606082015260800190565b6020808252818101527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526017908201527f5472616e63686520686173206265656e206c6f636b6564000000000000000000604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601e908201527f44726177646f776e73206172652063757272656e746c79207061757365640000604082015260600190565b602080825260159082015274125b9d985b1a59081c995919595b48185b5bdd5b9d605a1b604082015260600190565b60208082526023908201527f4a756e696f72207472616e636865206d757374206265206c6f636b65642066696040820152621c9cdd60ea1b606082015260800190565b60208082526035908201527f4f6e6c792074686520746f6b656e206f776e657220697320616c6c6f776564206040820152743a379031b0b636103a3434b990333ab731ba34b7b760591b606082015260800190565b6020808252601690820152755465726d206d757374206e6f7420626520656d70747960501b604082015260600190565b60208082526017908201527f4d75737420706179206d6f7265207468616e207a65726f000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060408201526a3a3434b99030b1ba34b7b760a91b606082015260800190565b6020808252601d908201527f4a756e696f72207472616e63686520616c7265616479206c6f636b6564000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b82518152602092830151928101929092526001600160a01b0316604082015260600190565b600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b93845260208401929092526040830152606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6001600160a01b0381168114610fec57600080fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aaf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a90279a2646970667358221220636981eee2a992b793846c9d96796659c30b5cda9c510c369c5d8d81870e2fcd64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "availableToWithdraw(uint256)": {
        "params": {
          "tokenId": "The token representing the position"
        },
        "returns": {
          "interestRedeemable": "The interest available to redeem",
          "principalRedeemable": "The principal available to redeem"
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "The USDC amount to tranfer from the caller to the pool",
          "tranche": "The number representing the tranche to deposit into"
        },
        "returns": {
          "tokenId": "The tokenId of the NFT"
        }
      },
      "drawdown(uint256)": {
        "params": {
          "amount": "The amount to drawdown from the creditline (must be < limit)"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "migrateCreditLine(address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_borrower": "The borrower address",
          "_interestApr": "The new interest APR",
          "_lateFeeApr": "The new late fee APR",
          "_limit": "The new limit",
          "_paymentPeriodInDays": "The new payment period in days",
          "_termInDays": "The new term in days"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay(uint256)": {
        "params": {
          "amount": "The amount to repay"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "sharePriceToUsdc(uint256,uint256)": {
        "params": {
          "sharePrice": "The share price to convert",
          "totalShares": "The total shares outstanding"
        },
        "returns": {
          "_0": "The USDC amount of the input share price"
        }
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "usdcToSharePrice(uint256,uint256)": {
        "params": {
          "amount": "The USDC amount to convert",
          "totalShares": "The total shares outstanding"
        },
        "returns": {
          "_0": "The share price of the input amount"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "The amount to withdraw (must be <= interest+principal currently available to withdraw)",
          "tokenId": "The NFT representing the position"
        },
        "returns": {
          "interestWithdrawn": "The interest amount that was withdrawn",
          "principalWithdrawn": "The principal amount that was withdrawn"
        }
      },
      "withdrawMax(uint256)": {
        "params": {
          "tokenId": "The NFT representing the position"
        },
        "returns": {
          "interestWithdrawn": "The interest amount that was withdrawn",
          "principalWithdrawn": "The principal amount that was withdrawn"
        }
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "params": {
          "amounts": "An array of amounts to withdraw from the corresponding tokenIds",
          "tokenIds": "An array of tokens ids representing the position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assess()": {
        "notice": "Triggers an assessment of the creditline and the applies the payments according the tranche waterfall"
      },
      "availableToWithdraw(uint256)": {
        "notice": "Determines the amount of interest and principal redeemable by a particular tokenId"
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit a USDC amount into the pool for a tranche. Mints an NFT to the caller representing the position"
      },
      "drawdown(uint256)": {
        "notice": "Draws down the funds (and locks the pool) to the borrower address. Can only be called by the borrower"
      },
      "emergencyShutdown()": {
        "notice": "Pauses the pool and sweeps any remaining funds to the treasury reserve."
      },
      "lockJuniorCapital()": {
        "notice": "Locks the junior tranche, preventing more junior deposits. Gives time for the senior to determine how much to invest (ensure leverage ratio cannot change for the period)"
      },
      "lockPool()": {
        "notice": "Locks the pool (locks both senior and junior tranches and starts the drawdown period). Beyond the drawdown period, any unused capital is available to withdraw by all depositors"
      },
      "migrateAndSetNewCreditLine(address)": {
        "notice": "Migrates to a new creditline without copying the accounting variables"
      },
      "migrateCreditLine(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Migrates the accounting variables from the current creditline to a brand new one"
      },
      "pauseDrawdowns()": {
        "notice": "Pauses all drawdowns (but not deposits/withdraws)"
      },
      "pay(uint256)": {
        "notice": "Allows repaying the creditline. Collects the USDC amount from the sender and triggers an assess"
      },
      "sharePriceToUsdc(uint256,uint256)": {
        "notice": "Converts share price to USDC amounts"
      },
      "unpauseDrawdowns()": {
        "notice": "Unpause drawdowns"
      },
      "updateGoldfinchConfig()": {
        "notice": "Migrates to a new goldfinch config address"
      },
      "usdcToSharePrice(uint256,uint256)": {
        "notice": "Converts USDC amounts to share price"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw an already deposited amount if the funds are available"
      },
      "withdrawMax(uint256)": {
        "notice": "Similar to withdraw but will withdraw all available funds"
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "notice": "Withdraw from many tokens (that the sender owns) in a single transaction"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 264,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)260_storage)"
      },
      {
        "astId": 509,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4201,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 4290,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4299,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "_notEntered",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 4340,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9348,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9352,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9356,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9360,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8241,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "creditLine",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(IV2CreditLine)8530"
      },
      {
        "astId": 8243,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "createdAt",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 18266,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "config",
        "offset": 0,
        "slot": "453",
        "type": "t_contract(GoldfinchConfig)13851"
      },
      {
        "astId": 18295,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "juniorFeePercent",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 18297,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "drawdownsPaused",
        "offset": 0,
        "slot": "455",
        "type": "t_bool"
      },
      {
        "astId": 18299,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "seniorTranche",
        "offset": 0,
        "slot": "456",
        "type": "t_struct(TrancheInfo)8258_storage"
      },
      {
        "astId": 18301,
        "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "juniorTranche",
        "offset": 0,
        "slot": "461",
        "type": "t_struct(TrancheInfo)8258_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GoldfinchConfig)13851": {
        "encoding": "inplace",
        "label": "contract GoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_contract(IV2CreditLine)8530": {
        "encoding": "inplace",
        "label": "contract IV2CreditLine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)260_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)260_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3976_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3975,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3796_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)260_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3976_storage"
          },
          {
            "astId": 259,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)3796_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3791,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3795,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TrancheInfo)8258_storage": {
        "encoding": "inplace",
        "label": "struct ITranchedPool.TrancheInfo",
        "members": [
          {
            "astId": 8249,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8251,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "principalDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8253,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "principalSharePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8255,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "interestSharePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8257,
            "contract": "contracts/protocol/core/TranchedPool.sol:TranchedPool",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}