/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js"
import {ContractOptions} from "web3-eth-contract"
import {EventLog} from "web3-core"
import {EventEmitter} from "events"
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "@goldfinch-eng/protocol/typechain/web3/types"

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export type DepositMade = ContractEventLog<{
  capitalProvider: string
  amount: string
  shares: string
  0: string
  1: string
  2: string
}>
export type GoldfinchConfigUpdated = ContractEventLog<{
  who: string
  configAddress: string
  0: string
  1: string
}>
export type InterestCollected = ContractEventLog<{
  payer: string
  poolAmount: string
  reserveAmount: string
  0: string
  1: string
  2: string
}>
export type Paused = ContractEventLog<{
  account: string
  0: string
}>
export type PrincipalCollected = ContractEventLog<{
  payer: string
  amount: string
  0: string
  1: string
}>
export type PrincipalWrittendown = ContractEventLog<{
  creditline: string
  amount: string
  0: string
  1: string
}>
export type ReserveFundsCollected = ContractEventLog<{
  user: string
  amount: string
  0: string
  1: string
}>
export type RoleGranted = ContractEventLog<{
  role: string
  account: string
  sender: string
  0: string
  1: string
  2: string
}>
export type RoleRevoked = ContractEventLog<{
  role: string
  account: string
  sender: string
  0: string
  1: string
  2: string
}>
export type TransferMade = ContractEventLog<{
  from: string
  to: string
  amount: string
  0: string
  1: string
  2: string
}>
export type Unpaused = ContractEventLog<{
  account: string
  0: string
}>
export type WithdrawalMade = ContractEventLog<{
  capitalProvider: string
  userAmount: string
  reserveAmount: string
  0: string
  1: string
  2: string
}>

export interface Pool extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Pool
  clone(): Pool
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>

    OWNER_ROLE(): NonPayableTransactionObject<string>

    PAUSER_ROLE(): NonPayableTransactionObject<string>

    __BaseUpgradeablePausable__init(owner: string): NonPayableTransactionObject<void>

    __PauserPausable__init(): NonPayableTransactionObject<void>

    assets(): NonPayableTransactionObject<string>

    collectInterestAndPrincipal(
      from: string,
      interest: number | string | BN,
      principal: number | string | BN
    ): NonPayableTransactionObject<void>

    compoundBalance(): NonPayableTransactionObject<string>

    config(): NonPayableTransactionObject<string>

    deposit(amount: number | string | BN): NonPayableTransactionObject<void>

    distributeLosses(creditlineAddress: string, writedownDelta: number | string | BN): NonPayableTransactionObject<void>

    drawdown(to: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>

    getRoleMember(role: string | number[], index: number | string | BN): NonPayableTransactionObject<string>

    getRoleMemberCount(role: string | number[]): NonPayableTransactionObject<string>

    grantRole(role: string | number[], account: string): NonPayableTransactionObject<void>

    hasRole(role: string | number[], account: string): NonPayableTransactionObject<boolean>

    initialize(owner: string, _config: string): NonPayableTransactionObject<void>

    isAdmin(): NonPayableTransactionObject<boolean>

    migrateToSeniorPool(): NonPayableTransactionObject<void>

    pause(): NonPayableTransactionObject<void>

    paused(): NonPayableTransactionObject<boolean>

    renounceRole(role: string | number[], account: string): NonPayableTransactionObject<void>

    revokeRole(role: string | number[], account: string): NonPayableTransactionObject<void>

    sharePrice(): NonPayableTransactionObject<string>

    sweepFromCompound(): NonPayableTransactionObject<void>

    sweepToCompound(): NonPayableTransactionObject<void>

    transferFrom(from: string, to: string, amount: number | string | BN): NonPayableTransactionObject<boolean>

    unpause(): NonPayableTransactionObject<void>

    withdraw(usdcAmount: number | string | BN): NonPayableTransactionObject<void>

    withdrawInFidu(fiduAmount: number | string | BN): NonPayableTransactionObject<void>
  }
  events: {
    DepositMade(cb?: Callback<DepositMade>): EventEmitter
    DepositMade(options?: EventOptions, cb?: Callback<DepositMade>): EventEmitter

    GoldfinchConfigUpdated(cb?: Callback<GoldfinchConfigUpdated>): EventEmitter
    GoldfinchConfigUpdated(options?: EventOptions, cb?: Callback<GoldfinchConfigUpdated>): EventEmitter

    InterestCollected(cb?: Callback<InterestCollected>): EventEmitter
    InterestCollected(options?: EventOptions, cb?: Callback<InterestCollected>): EventEmitter

    Paused(cb?: Callback<Paused>): EventEmitter
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter

    PrincipalCollected(cb?: Callback<PrincipalCollected>): EventEmitter
    PrincipalCollected(options?: EventOptions, cb?: Callback<PrincipalCollected>): EventEmitter

    PrincipalWrittendown(cb?: Callback<PrincipalWrittendown>): EventEmitter
    PrincipalWrittendown(options?: EventOptions, cb?: Callback<PrincipalWrittendown>): EventEmitter

    ReserveFundsCollected(cb?: Callback<ReserveFundsCollected>): EventEmitter
    ReserveFundsCollected(options?: EventOptions, cb?: Callback<ReserveFundsCollected>): EventEmitter

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter
    RoleGranted(options?: EventOptions, cb?: Callback<RoleGranted>): EventEmitter

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter
    RoleRevoked(options?: EventOptions, cb?: Callback<RoleRevoked>): EventEmitter

    TransferMade(cb?: Callback<TransferMade>): EventEmitter
    TransferMade(options?: EventOptions, cb?: Callback<TransferMade>): EventEmitter

    Unpaused(cb?: Callback<Unpaused>): EventEmitter
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter

    WithdrawalMade(cb?: Callback<WithdrawalMade>): EventEmitter
    WithdrawalMade(options?: EventOptions, cb?: Callback<WithdrawalMade>): EventEmitter

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
  }

  once(event: "DepositMade", cb: Callback<DepositMade>): void
  once(event: "DepositMade", options: EventOptions, cb: Callback<DepositMade>): void

  once(event: "GoldfinchConfigUpdated", cb: Callback<GoldfinchConfigUpdated>): void
  once(event: "GoldfinchConfigUpdated", options: EventOptions, cb: Callback<GoldfinchConfigUpdated>): void

  once(event: "InterestCollected", cb: Callback<InterestCollected>): void
  once(event: "InterestCollected", options: EventOptions, cb: Callback<InterestCollected>): void

  once(event: "Paused", cb: Callback<Paused>): void
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void

  once(event: "PrincipalCollected", cb: Callback<PrincipalCollected>): void
  once(event: "PrincipalCollected", options: EventOptions, cb: Callback<PrincipalCollected>): void

  once(event: "PrincipalWrittendown", cb: Callback<PrincipalWrittendown>): void
  once(event: "PrincipalWrittendown", options: EventOptions, cb: Callback<PrincipalWrittendown>): void

  once(event: "ReserveFundsCollected", cb: Callback<ReserveFundsCollected>): void
  once(event: "ReserveFundsCollected", options: EventOptions, cb: Callback<ReserveFundsCollected>): void

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void
  once(event: "RoleGranted", options: EventOptions, cb: Callback<RoleGranted>): void

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void
  once(event: "RoleRevoked", options: EventOptions, cb: Callback<RoleRevoked>): void

  once(event: "TransferMade", cb: Callback<TransferMade>): void
  once(event: "TransferMade", options: EventOptions, cb: Callback<TransferMade>): void

  once(event: "Unpaused", cb: Callback<Unpaused>): void
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void

  once(event: "WithdrawalMade", cb: Callback<WithdrawalMade>): void
  once(event: "WithdrawalMade", options: EventOptions, cb: Callback<WithdrawalMade>): void
}
