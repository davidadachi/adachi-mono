extend type User {
  ENSName: String
  ENSAvatar: String
}

extend type SeniorPool {
  name: String!
  category: String!
  icon: String!
  epochEndsAt: Int!
}

extend type Loan {
  name: String!
  borrowerName: String!
  borrowerLogo: String
  isLate: Boolean!
  isInDefault: Boolean!
}

extend type TranchedPool {
  name: String!
  borrowerName: String!
  borrowerLogo: String
  isLate: Boolean!
  isInDefault: Boolean!
}

extend type CreditLine {
  isLate: Boolean!
  isInDefault: Boolean!
  interestOwed: BigInt!
  collectedPaymentBalance: BigInt!
  isAfterTermEndTime: Boolean!
}

extend type SeniorPoolStakedPosition {
  rewardEarnRate: BigInt!
  claimable: BigInt!
  granted: BigInt!
  # I would have liked for endTime to be indexed on the subgraph, but with the signature of positions() changing, it proved to be pretty challenging
  endTime: BigInt!
}

enum SupportedFiat {
  USD
}

type FiatAmount {
  symbol: SupportedFiat!
  amount: Float!
}

type GfiPrice {
  """
  Note that the cache ID for this type is price.symbol. Remember to always select it to avoid cache problems
  """
  price: FiatAmount!
  lastUpdated: Int!
}

# Important note: there doesn't need to be custom parser/serializer for CryptoAmount because
# 1. The type only exists on the client
# 2. Since it only exists on the client, it can only be produced by local resolvers
# 3. The results from local resolvers do not pass though apollo-link-scalars
scalar CryptoAmount
scalar UsdcAmount
scalar FiduAmount
scalar GfiAmount
scalar CurveLpAmount

enum IndirectGrantSource {
  MERKLE_DISTRIBUTOR
  BACKER_MERKLE_DISTRIBUTOR
}

enum DirectGrantSource {
  MERKLE_DIRECT_DISTRIBUTOR
  BACKER_MERKLE_DIRECT_DISTRIBUTOR
}

enum GrantReason {
  BACKER
  LIQUIDITY_PROVIDER
  FLIGHT_ACADEMY
  FLIGHT_ACADEMY_AND_LIQUIDITY_PROVIDER
  GOLDFINCH_INVESTMENT
  CONTRIBUTOR
  ADVISOR
}

interface GfiGrant {
  id: ID!
  index: Int!
  reason: GrantReason!
  proof: [String!]!
  amount: BigInt!
}

type IndirectGfiGrant implements GfiGrant {
  id: ID!
  index: Int!
  reason: GrantReason!
  proof: [String!]!
  amount: BigInt!

  indirectSource: IndirectGrantSource!
  vestingLength: BigInt!
  vestingInterval: BigInt!
  cliffLength: BigInt!
  start: BigInt!
  end: BigInt!
  vested: BigInt!
}

type DirectGfiGrant implements GfiGrant {
  id: ID!
  index: Int!
  reason: GrantReason!
  proof: [String!]!
  amount: BigInt!

  directSource: DirectGrantSource!
  isAccepted: Boolean!
}

type Viewer {
  account(format: String): String
  usdcBalance: UsdcAmount
  gfiBalance: GfiAmount
  fiduBalance: FiduAmount
  curveLpBalance: CurveLpAmount
  gfiGrants: [GfiGrant!]!
  claimableMembershipRewards: FiduAmount
  accruedMembershipRewardsThisEpoch: FiduAmount
}

type BlockInfo {
  number: Int!
  timestamp: Int!
}

type CurvePool {
  estimatedCurveStakingApyRaw: BigDecimal!
  usdPerLpToken: BigDecimal!
}

extend type Query {
  viewer: Viewer!
  isWalletModalOpen: Boolean!
  isVerificationModalOpen: Boolean!
  gfiPrice(fiat: SupportedFiat!): GfiPrice!
  currentBlock: BlockInfo!
  curvePool: CurvePool!
}

extend type SeniorPoolWithdrawalRequest {
  """
  Comes from SeniorPool.withdrawalRequest() view function, which may simulate an epoch ending if appropriate
  """
  previewUsdcWithdrawable: BigInt!
  """
  Comes from SeniorPool.withdrawalRequest() view function, which may simulate an epoch ending if appropriate
  """
  previewFiduRequested: BigInt!
}
