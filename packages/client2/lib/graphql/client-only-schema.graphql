extend type SeniorPool {
  name: String!
  category: String!
  icon: String!
}

extend type TranchedPool {
  name: String
  category: String
  description: String
  icon: String
  agreement: String
  dataroom: String
  poolDescription: String
  poolHighlights: [String]
  borrowerDescription: String
  borrowerHighlights: [String]
}

enum SupportedFiat {
  USD
}

type FiatAmount {
  symbol: SupportedFiat!
  amount: Float!
}

type GfiPrice {
  """
  Note that the cache ID for this type is price.symbol. Remember to always select it to avoid cache problems
  """
  price: FiatAmount!
  lastUpdated: Int!
}

enum SupportedCrypto {
  USDC
  GFI
  FIDU
}

type CryptoAmount {
  token: SupportedCrypto!
  amount: BigInt!
}

type UIDType {
  NonUSIndividual: Boolean
  USAccreditedIndividual: Boolean
  USNonAccreditedIndividual: Boolean
  USEntity: Boolean
  NonUSEntity: Boolean
}

type Signature {
  signature: String
  signatureBlockNum: Int
  signatureBlockNumTimestamp: Int
}

type KYCStatus {
  status: String
  countryCode: String
}

type Viewer {
  user: User
  account(format: String): String
  usdcBalance: CryptoAmount
  gfiBalance: CryptoAmount
}

extend type Query {
  kycStatus: KYCStatus
  signature: Signature
  viewer: Viewer!
  isWalletModalOpen: Boolean!
  isKYCModalOpen: Boolean!
  isUIDModalOpen: Boolean!
  isKYCDone: Boolean!
  isVerificationModalOpen: Boolean!
  gfiPrice(fiat: SupportedFiat = USD): GfiPrice!
}
