/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SeniorPoolInterface extends utils.Interface {
  contractName: "SeniorPool";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OWNER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "__BaseUpgradeablePausable__init(address)": FunctionFragment;
    "__PauserPausable__init()": FunctionFragment;
    "assets()": FunctionFragment;
    "calculateWritedown(uint256)": FunctionFragment;
    "compoundBalance()": FunctionFragment;
    "config()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "estimateInvestment(address)": FunctionFragment;
    "getNumShares(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "invest(address)": FunctionFragment;
    "isAdmin()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sharePrice()": FunctionFragment;
    "sweepFromCompound()": FunctionFragment;
    "sweepToCompound()": FunctionFragment;
    "totalLoansOutstanding()": FunctionFragment;
    "totalWritedowns()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateGoldfinchConfig()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawInFidu(uint256)": FunctionFragment;
    "writedown(uint256)": FunctionFragment;
    "writedowns(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__BaseUpgradeablePausable__init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "__PauserPausable__init",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateWritedown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compoundBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateInvestment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "invest", values: [string]): string;
  encodeFunctionData(functionFragment: "isAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sharePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepFromCompound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToCompound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLoansOutstanding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWritedowns",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateGoldfinchConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInFidu",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writedown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "writedowns", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__BaseUpgradeablePausable__init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__PauserPausable__init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateWritedown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sharePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepFromCompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepToCompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLoansOutstanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWritedowns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateGoldfinchConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInFidu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writedown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writedowns", data: BytesLike): Result;

  events: {
    "DepositMade(address,uint256,uint256)": EventFragment;
    "GoldfinchConfigUpdated(address,address)": EventFragment;
    "InterestCollected(address,uint256)": EventFragment;
    "InvestmentMadeInJunior(address,uint256)": EventFragment;
    "InvestmentMadeInSenior(address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PrincipalCollected(address,uint256)": EventFragment;
    "PrincipalWrittenDown(address,int256)": EventFragment;
    "ReserveFundsCollected(address,uint256)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawalMade(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoldfinchConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestmentMadeInJunior"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestmentMadeInSenior"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrincipalCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrincipalWrittenDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFundsCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalMade"): EventFragment;
}

export type DepositMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { capitalProvider: string; amount: BigNumber; shares: BigNumber }
>;

export type DepositMadeEventFilter = TypedEventFilter<DepositMadeEvent>;

export type GoldfinchConfigUpdatedEvent = TypedEvent<
  [string, string],
  { who: string; configAddress: string }
>;

export type GoldfinchConfigUpdatedEventFilter =
  TypedEventFilter<GoldfinchConfigUpdatedEvent>;

export type InterestCollectedEvent = TypedEvent<
  [string, BigNumber],
  { payer: string; amount: BigNumber }
>;

export type InterestCollectedEventFilter =
  TypedEventFilter<InterestCollectedEvent>;

export type InvestmentMadeInJuniorEvent = TypedEvent<
  [string, BigNumber],
  { tranchedPool: string; amount: BigNumber }
>;

export type InvestmentMadeInJuniorEventFilter =
  TypedEventFilter<InvestmentMadeInJuniorEvent>;

export type InvestmentMadeInSeniorEvent = TypedEvent<
  [string, BigNumber],
  { tranchedPool: string; amount: BigNumber }
>;

export type InvestmentMadeInSeniorEventFilter =
  TypedEventFilter<InvestmentMadeInSeniorEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PrincipalCollectedEvent = TypedEvent<
  [string, BigNumber],
  { payer: string; amount: BigNumber }
>;

export type PrincipalCollectedEventFilter =
  TypedEventFilter<PrincipalCollectedEvent>;

export type PrincipalWrittenDownEvent = TypedEvent<
  [string, BigNumber],
  { tranchedPool: string; amount: BigNumber }
>;

export type PrincipalWrittenDownEventFilter =
  TypedEventFilter<PrincipalWrittenDownEvent>;

export type ReserveFundsCollectedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type ReserveFundsCollectedEventFilter =
  TypedEventFilter<ReserveFundsCollectedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawalMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { capitalProvider: string; userAmount: BigNumber; reserveAmount: BigNumber }
>;

export type WithdrawalMadeEventFilter = TypedEventFilter<WithdrawalMadeEvent>;

export interface SeniorPool extends BaseContract {
  contractName: "SeniorPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeniorPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __BaseUpgradeablePausable__init(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __PauserPausable__init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the net assests controlled by and owed to the pool
     */
    assets(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Calculates the writedown amount for a particular pool position
     * @param tokenId The token reprsenting the position
     */
    calculateWritedown(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compoundBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    config(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Deposits `amount` USDC from msg.sender into the SeniorPool, and grants you the  equivalent value of FIDU tokens
     * @param amount The amount of USDC to deposit
     */
    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Identical to deposit, except it allows for a passed up signature to permit  the Senior Pool to move funds on behalf of the user, all within one transaction.
     * @param amount The amount of USDC to deposit
     * @param r secp256k1 signature component
     * @param s secp256k1 signature component
     * @param v secp256k1 signature component
     */
    depositWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateInvestment(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Converts and USDC amount to FIDU amount
     * @param amount USDC amount to convert to FIDU
     */
    getNumShares(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      owner: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Invest in an ITranchedPool's senior tranche using the senior pool's strategy
     * @param pool An ITranchedPool whose senior tranche should be considered for investment
     */
    invest(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAdmin(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.
     */
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Redeem interest and/or principal from an ITranchedPool investment
     * @param tokenId the ID of an IPoolTokens token to be redeemed
     */
    redeem(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Moves any USDC from Compound back to the SeniorPool, and recognizes interest earned. This is done automatically on drawdown or withdraw, but can be called manually if necessary. Requirements:  - The caller must be an admin.
     */
    sweepFromCompound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Moves any USDC still in the SeniorPool to Compound, and tracks the amount internally. This is done to earn interest on latent funds until we have other borrowers who can use it. Requirements:  - The caller must be an admin.
     */
    sweepToCompound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalLoansOutstanding(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWritedowns(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role
     */
    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Migrates to a new goldfinch config address
     */
    updateGoldfinchConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws USDC from the SeniorPool to msg.sender, and burns the equivalent value of FIDU tokens
     * @param usdcAmount The amount of USDC to withdraw
     */
    withdraw(
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws USDC (denominated in FIDU terms) from the SeniorPool to msg.sender
     * @param fiduAmount The amount of USDC to withdraw in terms of FIDU shares
     */
    withdrawInFidu(
      fiduAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Write down an ITranchedPool investment. This will adjust the senior pool's share price  down if we're considering the investment a loss, or up if the borrower has subsequently  made repayments that restore confidence that the full loan will be repaid.
     * @param tokenId the ID of an IPoolTokens token to be considered for writedown
     */
    writedown(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writedowns(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  __BaseUpgradeablePausable__init(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __PauserPausable__init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the net assests controlled by and owed to the pool
   */
  assets(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Calculates the writedown amount for a particular pool position
   * @param tokenId The token reprsenting the position
   */
  calculateWritedown(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compoundBalance(overrides?: CallOverrides): Promise<BigNumber>;

  config(overrides?: CallOverrides): Promise<string>;

  /**
   * Deposits `amount` USDC from msg.sender into the SeniorPool, and grants you the  equivalent value of FIDU tokens
   * @param amount The amount of USDC to deposit
   */
  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Identical to deposit, except it allows for a passed up signature to permit  the Senior Pool to move funds on behalf of the user, all within one transaction.
   * @param amount The amount of USDC to deposit
   * @param r secp256k1 signature component
   * @param s secp256k1 signature component
   * @param v secp256k1 signature component
   */
  depositWithPermit(
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateInvestment(
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Converts and USDC amount to FIDU amount
   * @param amount USDC amount to convert to FIDU
   */
  getNumShares(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
   */
  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
   */
  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    owner: string,
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Invest in an ITranchedPool's senior tranche using the senior pool's strategy
   * @param pool An ITranchedPool whose senior tranche should be considered for investment
   */
  invest(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAdmin(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.
   */
  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Redeem interest and/or principal from an ITranchedPool investment
   * @param tokenId the ID of an IPoolTokens token to be redeemed
   */
  redeem(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Moves any USDC from Compound back to the SeniorPool, and recognizes interest earned. This is done automatically on drawdown or withdraw, but can be called manually if necessary. Requirements:  - The caller must be an admin.
   */
  sweepFromCompound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Moves any USDC still in the SeniorPool to Compound, and tracks the amount internally. This is done to earn interest on latent funds until we have other borrowers who can use it. Requirements:  - The caller must be an admin.
   */
  sweepToCompound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalLoansOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

  totalWritedowns(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role
   */
  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Migrates to a new goldfinch config address
   */
  updateGoldfinchConfig(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws USDC from the SeniorPool to msg.sender, and burns the equivalent value of FIDU tokens
   * @param usdcAmount The amount of USDC to withdraw
   */
  withdraw(
    usdcAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws USDC (denominated in FIDU terms) from the SeniorPool to msg.sender
   * @param fiduAmount The amount of USDC to withdraw in terms of FIDU shares
   */
  withdrawInFidu(
    fiduAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Write down an ITranchedPool investment. This will adjust the senior pool's share price  down if we're considering the investment a loss, or up if the borrower has subsequently  made repayments that restore confidence that the full loan will be repaid.
   * @param tokenId the ID of an IPoolTokens token to be considered for writedown
   */
  writedown(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writedowns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    __BaseUpgradeablePausable__init(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    __PauserPausable__init(overrides?: CallOverrides): Promise<void>;

    /**
     * Returns the net assests controlled by and owed to the pool
     */
    assets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Calculates the writedown amount for a particular pool position
     * @param tokenId The token reprsenting the position
     */
    calculateWritedown(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compoundBalance(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<string>;

    /**
     * Deposits `amount` USDC from msg.sender into the SeniorPool, and grants you the  equivalent value of FIDU tokens
     * @param amount The amount of USDC to deposit
     */
    deposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Identical to deposit, except it allows for a passed up signature to permit  the Senior Pool to move funds on behalf of the user, all within one transaction.
     * @param amount The amount of USDC to deposit
     * @param r secp256k1 signature component
     * @param s secp256k1 signature component
     * @param v secp256k1 signature component
     */
    depositWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateInvestment(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Converts and USDC amount to FIDU amount
     * @param amount USDC amount to convert to FIDU
     */
    getNumShares(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      owner: string,
      _config: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Invest in an ITranchedPool's senior tranche using the senior pool's strategy
     * @param pool An ITranchedPool whose senior tranche should be considered for investment
     */
    invest(pool: string, overrides?: CallOverrides): Promise<void>;

    isAdmin(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.
     */
    pause(overrides?: CallOverrides): Promise<void>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Redeem interest and/or principal from an ITranchedPool investment
     * @param tokenId the ID of an IPoolTokens token to be redeemed
     */
    redeem(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Moves any USDC from Compound back to the SeniorPool, and recognizes interest earned. This is done automatically on drawdown or withdraw, but can be called manually if necessary. Requirements:  - The caller must be an admin.
     */
    sweepFromCompound(overrides?: CallOverrides): Promise<void>;

    /**
     * Moves any USDC still in the SeniorPool to Compound, and tracks the amount internally. This is done to earn interest on latent funds until we have other borrowers who can use it. Requirements:  - The caller must be an admin.
     */
    sweepToCompound(overrides?: CallOverrides): Promise<void>;

    totalLoansOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    totalWritedowns(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role
     */
    unpause(overrides?: CallOverrides): Promise<void>;

    /**
     * Migrates to a new goldfinch config address
     */
    updateGoldfinchConfig(overrides?: CallOverrides): Promise<void>;

    /**
     * Withdraws USDC from the SeniorPool to msg.sender, and burns the equivalent value of FIDU tokens
     * @param usdcAmount The amount of USDC to withdraw
     */
    withdraw(
      usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Withdraws USDC (denominated in FIDU terms) from the SeniorPool to msg.sender
     * @param fiduAmount The amount of USDC to withdraw in terms of FIDU shares
     */
    withdrawInFidu(
      fiduAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Write down an ITranchedPool investment. This will adjust the senior pool's share price  down if we're considering the investment a loss, or up if the borrower has subsequently  made repayments that restore confidence that the full loan will be repaid.
     * @param tokenId the ID of an IPoolTokens token to be considered for writedown
     */
    writedown(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    writedowns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DepositMade(address,uint256,uint256)"(
      capitalProvider?: string | null,
      amount?: null,
      shares?: null
    ): DepositMadeEventFilter;
    DepositMade(
      capitalProvider?: string | null,
      amount?: null,
      shares?: null
    ): DepositMadeEventFilter;

    "GoldfinchConfigUpdated(address,address)"(
      who?: string | null,
      configAddress?: null
    ): GoldfinchConfigUpdatedEventFilter;
    GoldfinchConfigUpdated(
      who?: string | null,
      configAddress?: null
    ): GoldfinchConfigUpdatedEventFilter;

    "InterestCollected(address,uint256)"(
      payer?: string | null,
      amount?: null
    ): InterestCollectedEventFilter;
    InterestCollected(
      payer?: string | null,
      amount?: null
    ): InterestCollectedEventFilter;

    "InvestmentMadeInJunior(address,uint256)"(
      tranchedPool?: string | null,
      amount?: null
    ): InvestmentMadeInJuniorEventFilter;
    InvestmentMadeInJunior(
      tranchedPool?: string | null,
      amount?: null
    ): InvestmentMadeInJuniorEventFilter;

    "InvestmentMadeInSenior(address,uint256)"(
      tranchedPool?: string | null,
      amount?: null
    ): InvestmentMadeInSeniorEventFilter;
    InvestmentMadeInSenior(
      tranchedPool?: string | null,
      amount?: null
    ): InvestmentMadeInSeniorEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PrincipalCollected(address,uint256)"(
      payer?: string | null,
      amount?: null
    ): PrincipalCollectedEventFilter;
    PrincipalCollected(
      payer?: string | null,
      amount?: null
    ): PrincipalCollectedEventFilter;

    "PrincipalWrittenDown(address,int256)"(
      tranchedPool?: string | null,
      amount?: null
    ): PrincipalWrittenDownEventFilter;
    PrincipalWrittenDown(
      tranchedPool?: string | null,
      amount?: null
    ): PrincipalWrittenDownEventFilter;

    "ReserveFundsCollected(address,uint256)"(
      user?: string | null,
      amount?: null
    ): ReserveFundsCollectedEventFilter;
    ReserveFundsCollected(
      user?: string | null,
      amount?: null
    ): ReserveFundsCollectedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawalMade(address,uint256,uint256)"(
      capitalProvider?: string | null,
      userAmount?: null,
      reserveAmount?: null
    ): WithdrawalMadeEventFilter;
    WithdrawalMade(
      capitalProvider?: string | null,
      userAmount?: null,
      reserveAmount?: null
    ): WithdrawalMadeEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __BaseUpgradeablePausable__init(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __PauserPausable__init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the net assests controlled by and owed to the pool
     */
    assets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Calculates the writedown amount for a particular pool position
     * @param tokenId The token reprsenting the position
     */
    calculateWritedown(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compoundBalance(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Deposits `amount` USDC from msg.sender into the SeniorPool, and grants you the  equivalent value of FIDU tokens
     * @param amount The amount of USDC to deposit
     */
    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Identical to deposit, except it allows for a passed up signature to permit  the Senior Pool to move funds on behalf of the user, all within one transaction.
     * @param amount The amount of USDC to deposit
     * @param r secp256k1 signature component
     * @param s secp256k1 signature component
     * @param v secp256k1 signature component
     */
    depositWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateInvestment(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Converts and USDC amount to FIDU amount
     * @param amount USDC amount to convert to FIDU
     */
    getNumShares(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Invest in an ITranchedPool's senior tranche using the senior pool's strategy
     * @param pool An ITranchedPool whose senior tranche should be considered for investment
     */
    invest(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.
     */
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Redeem interest and/or principal from an ITranchedPool investment
     * @param tokenId the ID of an IPoolTokens token to be redeemed
     */
    redeem(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Moves any USDC from Compound back to the SeniorPool, and recognizes interest earned. This is done automatically on drawdown or withdraw, but can be called manually if necessary. Requirements:  - The caller must be an admin.
     */
    sweepFromCompound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Moves any USDC still in the SeniorPool to Compound, and tracks the amount internally. This is done to earn interest on latent funds until we have other borrowers who can use it. Requirements:  - The caller must be an admin.
     */
    sweepToCompound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalLoansOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    totalWritedowns(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role
     */
    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Migrates to a new goldfinch config address
     */
    updateGoldfinchConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraws USDC from the SeniorPool to msg.sender, and burns the equivalent value of FIDU tokens
     * @param usdcAmount The amount of USDC to withdraw
     */
    withdraw(
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraws USDC (denominated in FIDU terms) from the SeniorPool to msg.sender
     * @param fiduAmount The amount of USDC to withdraw in terms of FIDU shares
     */
    withdrawInFidu(
      fiduAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Write down an ITranchedPool investment. This will adjust the senior pool's share price  down if we're considering the investment a loss, or up if the borrower has subsequently  made repayments that restore confidence that the full loan will be repaid.
     * @param tokenId the ID of an IPoolTokens token to be considered for writedown
     */
    writedown(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writedowns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __BaseUpgradeablePausable__init(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __PauserPausable__init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the net assests controlled by and owed to the pool
     */
    assets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Calculates the writedown amount for a particular pool position
     * @param tokenId The token reprsenting the position
     */
    calculateWritedown(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compoundBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Deposits `amount` USDC from msg.sender into the SeniorPool, and grants you the  equivalent value of FIDU tokens
     * @param amount The amount of USDC to deposit
     */
    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Identical to deposit, except it allows for a passed up signature to permit  the Senior Pool to move funds on behalf of the user, all within one transaction.
     * @param amount The amount of USDC to deposit
     * @param r secp256k1 signature component
     * @param s secp256k1 signature component
     * @param v secp256k1 signature component
     */
    depositWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateInvestment(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Converts and USDC amount to FIDU amount
     * @param amount USDC amount to convert to FIDU
     */
    getNumShares(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Invest in an ITranchedPool's senior tranche using the senior pool's strategy
     * @param pool An ITranchedPool whose senior tranche should be considered for investment
     */
    invest(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.
     */
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Redeem interest and/or principal from an ITranchedPool investment
     * @param tokenId the ID of an IPoolTokens token to be redeemed
     */
    redeem(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Moves any USDC from Compound back to the SeniorPool, and recognizes interest earned. This is done automatically on drawdown or withdraw, but can be called manually if necessary. Requirements:  - The caller must be an admin.
     */
    sweepFromCompound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Moves any USDC still in the SeniorPool to Compound, and tracks the amount internally. This is done to earn interest on latent funds until we have other borrowers who can use it. Requirements:  - The caller must be an admin.
     */
    sweepToCompound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalLoansOutstanding(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalWritedowns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role
     */
    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Migrates to a new goldfinch config address
     */
    updateGoldfinchConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws USDC from the SeniorPool to msg.sender, and burns the equivalent value of FIDU tokens
     * @param usdcAmount The amount of USDC to withdraw
     */
    withdraw(
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws USDC (denominated in FIDU terms) from the SeniorPool to msg.sender
     * @param fiduAmount The amount of USDC to withdraw in terms of FIDU shares
     */
    withdrawInFidu(
      fiduAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Write down an ITranchedPool investment. This will adjust the senior pool's share price  down if we're considering the investment a loss, or up if the borrower has subsequently  made repayments that restore confidence that the full loan will be repaid.
     * @param tokenId the ID of an IPoolTokens token to be considered for writedown
     */
    writedown(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writedowns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
