import {pmWebhookReceiver} from "../../../src"
import {Request} from "express"
import {expectResponse} from "../../utils"
import {FirebaseConfig, setTestConfig} from "../../../src/config"

interface PmRequest {
  headers: {
    timestamp?: string
    signature?: string
  }
  body: {
    entity: {
      id: string
      type: string
    }
    event: string
    scope: string
  }
  rawBody: Buffer
}

// This is a valid request taken from a test payload using the webhook key for OAuth client
// with id F4eUFc5LDqt6P8Nfjb4av
const VALID_REQUEST: PmRequest = {
  headers: {
    timestamp: "1680634750",
    signature: "bjHm0MvEgSjiwKLa8OQgzmlt24ECoLD0rFUt0sM7lnU=",
  },
  body: {
    entity: {
      id: "test",
      type: "individual",
    },
    event: "data_update",
    scope: "accreditation_status",
  },
  rawBody: Buffer.from(
    `{"entity":{"id":"test","type":"individual"},"event":"data_update","scope":"accreditation_status"}${""}`,
  ),
}

describe("pmWebhookReceiver validation", async () => {
  const config: Omit<FirebaseConfig, "sentry"> = {
    kyc: {allowed_origins: "http://localhost:3000"},
    slack: {token: "slackToken"},
    persona: {
      allowed_ips: "",
    },
    parallelmarkets: {
      base_url: "",
      api_key: "",
      client_id: "",
      client_secret: "",
      webhook_key: "",
      redirect_uri: "",
      env: "test",
    },
  }

  beforeEach(async () => {
    setTestConfig(config)
  })

  const genRequest = (pmRequest: PmRequest): Request => {
    return {
      // Headers
      get: (key: string) => {
        // This (timestamp, sig) pair is a valid pair generated by sending a test payload from PM to our dev
        // webhook.
        switch (key) {
          case "Parallel-Timestamp":
            return pmRequest.headers.timestamp
          case "Parallel-Signature":
            return pmRequest.headers.signature
          default:
            throw new Error("Invalid Key")
        }
      },
      body: pmRequest.body,
      rawBody: pmRequest.rawBody,
    } as unknown as Request
  }

  describe("signature", () => {
    beforeEach(() => {
      // Set env to prod so the handler checks the signature. Note the webhook key is a DEMO webhook key.
      config.parallelmarkets.env = "production"
      config.parallelmarkets.webhook_key =
        "cmUHT/h9mlCA0DdbuKNrdm7paopHPzNiIqq3m68OEvXCNskdQgcGndqDop1XYckBBXXwvLG0VIWGHrmZyr6EbQ=="
    })

    it("returns 200 for valid signature", async () => {
      await pmWebhookReceiver(genRequest(VALID_REQUEST), expectResponse(200, {status: "received test payload"}))
    })

    it("returns 403 for invalid signature", async () => {
      await pmWebhookReceiver(
        genRequest({
          ...VALID_REQUEST,
          headers: {
            ...VALID_REQUEST.headers,
            signature: VALID_REQUEST.headers.signature + "bad",
          },
        }),
        expectResponse(403, {status: "invalid signature"}),
      )
    })

    it("does not check the signature when env is not prod", async () => {
      config.parallelmarkets.env = "test"
      const requestWithNoHeaders = genRequest({
        ...VALID_REQUEST,
        headers: {},
      })
      await pmWebhookReceiver(requestWithNoHeaders, expectResponse(200, {status: "received test payload"}))

      config.parallelmarkets.env = "development"
      await pmWebhookReceiver(requestWithNoHeaders, expectResponse(200, {status: "received test payload"}))
    })
  })

  describe("headers", () => {
    beforeEach(() => {
      config.parallelmarkets.env = "production"
    })

    it("returns 400 for missing signature header", async () => {
      await pmWebhookReceiver(
        genRequest({
          ...VALID_REQUEST,
          headers: {
            timestamp: VALID_REQUEST.headers.timestamp,
          },
        }),
        expectResponse(400, {status: "missing header Parallel-Signature"}),
      )
    })

    it("returns 400 for missing timestamp header", async () => {
      await pmWebhookReceiver(
        genRequest({
          ...VALID_REQUEST,
          headers: {
            signature: VALID_REQUEST.headers.signature,
          },
        }),
        expectResponse(400, {status: "missing header Parallel-Timestamp"}),
      )
    })

    it("returns 200 for profile scope", async () => {
      config.parallelmarkets.env = "test"
      await pmWebhookReceiver(
        genRequest({
          ...VALID_REQUEST,
          body: {
            ...VALID_REQUEST.body,
            entity: {
              id: "not_test",
              type: "business",
            },
            scope: "profile",
          },
        }),
        expectResponse(200, {status: "Ignoring profile scope event"}),
      )
    })

    it("returns 501 for an unexpected scope", async () => {
      config.parallelmarkets.env = "test"
      await pmWebhookReceiver(
        genRequest({
          ...VALID_REQUEST,
          body: {
            ...VALID_REQUEST.body,
            entity: {
              id: "not_test",
              type: "business",
            },
            scope: "blahblahblah",
          },
        }),
        expectResponse(501, {status: "Unexpected scope: blahblahblah"}),
      )
    })
  })
})
